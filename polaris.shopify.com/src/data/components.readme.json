{
  "Account connection": "\n\n# Account connection\n\nThe account connection component is used so merchants can connect or disconnect\ntheir store to various accounts. For example, if merchants want to use the\nFacebook sales channel, they need to connect their Facebook\naccount to their Shopify store.\n\n---\n\n## Best practices\n\nThe account component should:\n\n- Be placed at the top of the Account page for the relevant sales channel\n- Identify the name of the platform or service merchants can connect to\n- Show whether the account is connected or disconnected so that merchants can easily connect or disconnect an account\n- Include a link to the relevant sales channel or platform terms and conditions,\n  including information about any charges or fees that merchants may incur by\n  using the channel or platform\n- Link to terms and conditions, which should open up on the sales channel\n  developer’s website in a new browser window\n\n---\n\n## Content guidelines\n\n### Title\n\nThe account connection title should be the name of the platform or service that\nmerchants can connect to, followed by the word “account”. Write account connection titles in sentence case (capitalize the first word and proper nouns only).\n\n#### For example:\n\n- Facebook account\n- Mailchimp account\n- Instagram account\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Facebook account\n- Instagram account\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Connect your Account\n- Instagram Account\n\n### Terms and conditions\n\nClearly link to your terms and conditions and let merchants know about any additional costs of your service.\n\n<!-- usagelist -->\n\n</div><div class=\"usage-list-part\">\n\n#### Do\n\n- By clicking Connect, you agree to accept Sample’s terms and conditions.\n- You’ll pay a commission rate of 15% on sales made through Sample.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nLearn about terms, conditions, and payment details.\n\n</div></div>\n\n### Connect button\n\nAlways use the verb Connect in the button of the account connection component. When merchants click or tap “Connect” it should open up your platform or service’s authorization page in a new browser window.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nConnect\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nConnect to app\n\n</div></div>\n\n---\n\n## Examples\n\n### Default account connection\n\nUse to let merchants connect or disconnect their store to their third-party accounts, like Facebook.\n\n```jsx\nfunction AccountConnectionExample() {\n  const [connected, setConnected] = useState(false);\n  const accountName = connected ? 'Jane Appleseed' : '';\n\n  const handleAction = useCallback(() => {\n    setConnected((connected) => !connected);\n  }, [connected]);\n\n  const buttonText = connected ? 'Disconnect' : 'Connect';\n  const details = connected ? 'Account connected' : 'No account connected';\n  const terms = connected ? null : (\n    <p>\n      By clicking <strong>Connect</strong>, you agree to accept Sample App’s{' '}\n      <Link url=\"Example App\">terms and conditions</Link>. You’ll pay a\n      commission rate of 15% on sales made through Sample App.\n    </p>\n  );\n\n  return (\n    <AccountConnection\n      accountName={accountName}\n      connected={connected}\n      title=\"Example App\"\n      action={{\n        content: buttonText,\n        onAction: handleAction,\n      }}\n      details={details}\n      termsOfService={terms}\n    />\n  );\n}\n```\n\n---\n\n## Accessibility\n\n<!-- content-for: web -->\n\nSee accessibility guidance for the [setting toggle component](https://polaris.shopify.com/components/actions/setting-toggle) to turn connections on and off.\n\n<!-- /content-for-->\n",
  "Action list": "\n\n# Action list\n\nAction lists render a list of actions or selectable options. This component is usually placed inside a [popover container](https://polaris.shopify.com/components/overlays/popover) to create a dropdown menu or to let merchants select from a list of options.\n\n---\n\n## Best practices\n\nActions lists should:\n\n- Be used for secondary or less important information and actions since they’re hidden until merchants expose them by opening a popover\n- Contain actions that are related to each other\n\n---\n\n## Content guidelines\n\n### Action lists\n\nEach item in an action list should be clear and predictable. Merchants should be able to anticipate what will happen when they click on an action item.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nBuy shipping label\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nBuy\n\n</div></div>\n\nEach item in an action list should always lead with a strong verb that encourages action. To provide enough context use the {verb}+{noun} format unless the action is clear with a single verb.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Rename\n- Edit HTML\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- File name changes\n- HTML editing options\n\n</div></div>\n\nEach item in an action list should be scannable avoiding unnecessary words and articles such as the, an, or a.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Add menu item\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Add a menu item\n\n</div></div>\n\n---\n\n## Examples\n\n### Action list in a popover\n\nUse for the least important actions so merchants aren’t distracted by secondary tasks. Can also be used for a set of actions that won’t fit in the available screen space.\n\n```jsx\nfunction ActionListInPopoverExample() {\n  const [active, setActive] = useState(true);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const handleImportedAction = useCallback(\n    () => console.log('Imported action'),\n    [],\n  );\n\n  const handleExportedAction = useCallback(\n    () => console.log('Exported action'),\n    [],\n  );\n\n  const activator = (\n    <Button onClick={toggleActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover\n        active={active}\n        activator={activator}\n        autofocusTarget=\"first-node\"\n        onClose={toggleActive}\n      >\n        <ActionList\n          actionRole=\"menuitem\"\n          items={[\n            {\n              content: 'Import file',\n              onAction: handleImportedAction,\n            },\n            {\n              content: 'Export file',\n              onAction: handleExportedAction,\n            },\n          ]}\n        />\n      </Popover>\n    </div>\n  );\n}\n```\n\n### Action list with icons or image\n\nUse when the items benefit from an associated action or image, such as a list of products.\n\n```jsx\nfunction ActionListWithMediaExample() {\n  const [active, setActive] = useState(true);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const activator = (\n    <Button onClick={toggleActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '200px'}}>\n      <Popover\n        active={active}\n        activator={activator}\n        autofocusTarget=\"first-node\"\n        onClose={toggleActive}\n      >\n        <ActionList\n          actionRole=\"menuitem\"\n          items={[\n            {content: 'Import file', icon: ImportMinor},\n            {content: 'Export file', icon: ExportMinor},\n          ]}\n        />\n      </Popover>\n    </div>\n  );\n}\n```\n\n### Action list with an icon and a suffix\n\nUse when the items benefit from an associated action or image, such as a list of products.\n\n```jsx\nfunction ActionListWithSuffixExample() {\n  const [active, setActive] = useState(true);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const activator = (\n    <Button onClick={toggleActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '200px'}}>\n      <Popover\n        active={active}\n        activator={activator}\n        autofocusTarget=\"first-node\"\n        onClose={toggleActive}\n      >\n        <ActionList\n          actionRole=\"menuitem\"\n          items={[\n            {\n              active: true,\n              content: 'Import file',\n              icon: ImportMinor,\n              suffix: <Icon source={TickSmallMinor} />,\n            },\n            {content: 'Export file', icon: ExportMinor},\n          ]}\n        />\n      </Popover>\n    </div>\n  );\n}\n```\n\n### Sectioned action list\n\nUse when the items benefit from sections to help differentiate actions.\n\n```jsx\nfunction SectionedActionListExample() {\n  const [active, setActive] = useState(true);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const activator = (\n    <Button onClick={toggleActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover\n        active={active}\n        activator={activator}\n        autofocusTarget=\"first-node\"\n        onClose={toggleActive}\n      >\n        <ActionList\n          actionRole=\"menuitem\"\n          sections={[\n            {\n              title: 'File options',\n              items: [\n                {content: 'Import file', icon: ImportMinor},\n                {content: 'Export file', icon: ExportMinor},\n              ],\n            },\n            {\n              title: 'Bulk actions',\n              items: [\n                {content: 'Edit', icon: EditMinor},\n                {content: 'Delete', icon: DeleteMinor},\n              ],\n            },\n          ]}\n        />\n      </Popover>\n    </div>\n  );\n}\n```\n\n### Action list with destructive item\n\nUse to visually indicate that an action list item is destructive.\n\n```jsx\nfunction ActionListWithDestructiveItemExample() {\n  const [active, setActive] = useState(true);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const activator = (\n    <Button onClick={toggleActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover\n        active={active}\n        activator={activator}\n        autofocusTarget=\"first-node\"\n        onClose={toggleActive}\n      >\n        <ActionList\n          actionRole=\"menuitem\"\n          sections={[\n            {\n              title: 'File options',\n              items: [\n                {\n                  active: true,\n                  content: 'Import file',\n                  icon: ImportMinor,\n                },\n                {content: 'Export file', icon: ExportMinor},\n                {\n                  destructive: true,\n                  content: 'Delete file',\n                  icon: DeleteMinor,\n                },\n              ],\n            },\n          ]}\n        />\n      </Popover>\n    </div>\n  );\n}\n```\n\n### Action list with help text\n\nUse help text when the normal Verb noun syntax for the actions does not provide sufficient context for the merchant.\n\n```jsx\nfunction ActionListWithHelpTextExample() {\n  const [active, setActive] = useState(true);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const activator = (\n    <Button onClick={toggleActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover\n        active={active}\n        activator={activator}\n        autofocusTarget=\"first-node\"\n        onClose={toggleActive}\n      >\n        <ActionList\n          actionRole=\"menuitem\"\n          sections={[\n            {\n              items: [\n                {\n                  content: 'Blog posts',\n                  helpText: 'Manage your blog articles',\n                },\n                {\n                  content: 'Blogs',\n                  helpText: 'Manage blogs published to your Online Store',\n                },\n              ],\n            },\n          ]}\n        />\n      </Popover>\n    </div>\n  );\n}\n```\n\n### Action list with a prefix and a suffix\n\nUse help text when the normal Verb noun syntax for the actions does not provide sufficient context for the merchant.\n\n```jsx\nfunction ActionListWithPrefixSuffixExample() {\n  return (\n    <div style={{height: '250px', maxWidth: '350px'}}>\n      <ActionList\n        actionRole=\"menuitem\"\n        items={[\n          {\n            content: 'Go here',\n            prefix: (\n              <Thumbnail\n                source=\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\"\n                size=\"small\"\n                alt=\"Black leather pet collar\"\n              />\n            ),\n            suffix: <Icon source={ChevronRightMinor} />,\n          },\n          {\n            content: 'Or there',\n            prefix: <Avatar customer name=\"Farrah\" size=\"small\" />,\n            suffix: <Icon source={ChevronRightMinor} />,\n          },\n        ]}\n      />\n    </div>\n  );\n}\n```\n\n---\n\n## Related components\n\n- To combine more than one button in a single layout, [use the button group component](https://polaris.shopify.com/components/actions/button-group)\n- To display a list of related content, [use the list component](https://polaris.shopify.com/components/lists-and-tables/list)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nItems in an action list are organized as list items (`<li>`) in an unordered list (`<ul>`) and are conveyed as a group of related elements to assistive technology users. Each item is implemented as a [button](https://polaris.shopify.com/components/actions/button).\n\n### Keyboard support\n\n- Give the action list items keyboard focus with the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)\n- When action list items have a role of `menuitem`, navigate through the list with <kbd>down arrow</kbd> (<kbd>up arrow</kbd> to move backwards)\n- Activate buttons with the <kbd>enter</kbd>/<kbd>return</kbd> key or the <kbd>space</kbd> key\n\n### High contrast support\n\n- Each item is clearly discernible in high contrast mode\n- Each item that is focused and hovered is clearly discernible in high contrast mode\n\n<!-- /content-for -->\n",
  "App provider": "\n\n# App provider\n\nApp provider is a required component that enables sharing global settings throughout the hierarchy of your application.\n\n---\n\n## Best practices\n\nThe app provider component is required to use Polaris. Without it, the components in your application will not function correctly. You must wrap the root (the top) of your application in the app provider component.\n\n---\n\n## Examples\n\n### Default\n\nAppProvider works by default without any additional options passed to it.\n\n```jsx\n<AppProvider\n  i18n={{\n    Polaris: {\n      ResourceList: {\n        sortingLabel: 'Sort by',\n        defaultItemSingular: 'item',\n        defaultItemPlural: 'items',\n        showing: 'Showing {itemsCount} {resource}',\n        Item: {\n          viewItem: 'View details for {itemName}',\n        },\n      },\n      Common: {\n        checkbox: 'checkbox',\n      },\n    },\n  }}\n>\n  <Page>\n    <Card>\n      <ResourceList\n        showHeader\n        items={[\n          {\n            id: 341,\n            url: 'customers/341',\n            name: 'Mae Jemison',\n            location: 'Decatur, USA',\n          },\n          {\n            id: 256,\n            url: 'customers/256',\n            name: 'Ellen Ochoa',\n            location: 'Los Angeles, USA',\n          },\n        ]}\n        renderItem={(item) => {\n          const {id, url, name, location} = item;\n          const media = <Avatar customer size=\"medium\" name={name} />;\n\n          return (\n            <ResourceList.Item id={id} url={url} media={media}>\n              <h3>\n                <TextStyle variation=\"strong\">{name}</TextStyle>\n              </h3>\n              <div>{location}</div>\n            </ResourceList.Item>\n          );\n        }}\n      />\n    </Card>\n  </Page>\n</AppProvider>\n```\n\n### With i18n\n\nWith an `i18n`, `AppProvider` will provide these translations to polaris components. See [using translations](https://polaris.shopify.com/components/structure/app-provider#using-translations)\n\n```jsx\n<AppProvider\n  i18n={{\n    Polaris: {\n      Common: {\n        checkbox: 'case à cocher',\n      },\n      ResourceList: {\n        sortingLabel: 'Trier par',\n        showing: '{itemsCount} {resource} affichés',\n        defaultItemPlural: 'articles',\n        defaultItemSingular: 'article',\n        Item: {\n          viewItem: \"Afficher les détails de l'{itemName}\",\n        },\n      },\n    },\n  }}\n>\n  <Page>\n    <Card>\n      <ResourceList\n        showHeader\n        items={[\n          {\n            id: 341,\n            url: 'customers/341',\n            name: 'Mae Jemison',\n            location: 'Decatur, USA',\n          },\n          {\n            id: 256,\n            url: 'customers/256',\n            name: 'Ellen Ochoa',\n            location: 'Los Angeles, USA',\n          },\n        ]}\n        renderItem={(item) => {\n          const {id, url, name, location} = item;\n          const media = <Avatar customer size=\"medium\" name={name} />;\n\n          return (\n            <ResourceList.Item id={id} url={url} media={media}>\n              <h3>\n                <TextStyle variation=\"strong\">{name}</TextStyle>\n              </h3>\n              <div>{location}</div>\n            </ResourceList.Item>\n          );\n        }}\n      />\n    </Card>\n  </Page>\n</AppProvider>\n```\n\n### With linkComponent\n\nWith a `linkComponent`, the app provider component will override the links used in other components. For example you may want to use the `Link` component provided by `react-router` throughout your application instead of the default `a` tag.\n\n```jsx\nfunction AppProviderLinkExample() {\n  const CustomLinkComponent = ({children, url, ...rest}) => {\n    return (\n      <a\n        href={url}\n        onClick={() => console.log('Custom link clicked')}\n        {...rest}\n      >\n        {children}\n      </a>\n    );\n  };\n\n  return (\n    <AppProvider\n      linkComponent={CustomLinkComponent}\n      i18n={{\n        Polaris: {\n          Page: {\n            Header: {\n              rollupButton: 'Actions',\n            },\n          },\n        },\n      }}\n    >\n      <Page\n        breadcrumbs={[{content: 'Products', url: '#'}]}\n        title=\"Jar With Lock-Lid\"\n        primaryAction={{content: 'Save', disabled: true}}\n        secondaryActions={[\n          {content: 'Duplicate', url: '#'},\n          {content: 'View on your store', url: '#'},\n        ]}\n      >\n        <p>Page content</p>\n      </Page>\n    </AppProvider>\n  );\n}\n```\n\n### With color scheme\n\nWith a `colorScheme`, the app provider component will set the root color scheme for the App (such as: light or dark).For `colorScheme` configuration, see the [CustomProperties](https://polaris.shopify.com/components/structure/custom-properties) component documentation.\n\n```jsx\nfunction AppProviderThemeExample() {\n  const [isDirty, setIsDirty] = useState(false);\n  const [searchFieldValue, setSearchFieldValue] = useState('');\n\n  const handleSearchChange = useCallback(\n    (searchFieldValue) => setSearchFieldValue(searchFieldValue),\n    [],\n  );\n\n  const toggleIsDirty = useCallback(\n    () => setIsDirty((isDirty) => !isDirty),\n    [],\n  );\n\n  const contentStatus = isDirty ? 'Disable' : 'Enable';\n  const textStatus = isDirty ? 'enabled' : 'disabled';\n\n  const pageMarkup = (\n    <Page title=\"Account\">\n      <Layout>\n        <Layout.Section>\n          <SettingToggle\n            action={{\n              content: contentStatus,\n              onAction: toggleIsDirty,\n            }}\n            enabled={isDirty}\n          >\n            This setting is{' '}\n            <TextStyle variation=\"strong\">{textStatus}</TextStyle>.\n          </SettingToggle>\n        </Layout.Section>\n      </Layout>\n    </Page>\n  );\n\n  const contextualSaveBarMarkup = isDirty ? (\n    <ContextualSaveBar\n      message=\"Unsaved changes\"\n      saveAction={{\n        onAction: toggleIsDirty,\n      }}\n      discardAction={{\n        onAction: toggleIsDirty,\n      }}\n    />\n  ) : null;\n\n  return (\n    <div style={{height: '250px'}}>\n      <AppProvider\n        colorScheme=\"dark\"\n        i18n={{\n          Polaris: {\n            Frame: {skipToContent: 'Skip to content'},\n            ContextualSaveBar: {\n              save: 'Save',\n              discard: 'Discard',\n            },\n            TopBar: {\n              SearchField: {\n                clearButtonLabel: 'Clear',\n                search: 'Search',\n              },\n            },\n          },\n        }}\n      >\n        {contextualSaveBarMarkup}\n        {pageMarkup}\n      </AppProvider>\n    </div>\n  );\n}\n```\n\n---\n\n## Using translations\n\nTranslations are provided in the locales folder. When using Polaris, you are able to import translations from all languages supported by the core Shopify product and consume them through the `i18n` prop.\n\nIf a project has only one locale, then you can pass the JSON content from the locale file into `AppProvider`.\n\n```jsx\nimport AppProvider from '@shopify/polaris';\n// en.json is English. Replace with fr.json for French, etc\nimport translations from '@shopify/polaris/locales/en.json';\n\nfunction App() {\n  return <AppProvider i18n={translations}>{/* App content */}</AppProvider>;\n}\n```\n\nIf a project supports multiple locales, then load them dynamically using [`@shopify/react-i18n`](https://github.com/Shopify/quilt/tree/master/packages/react-i18n#translation). This ensures that you load only the translations you need.\n\n```jsx\nimport AppProvider from '@shopify/polaris';\n// en.json is English. Replace with fr.json for French, etc\nimport translations from '@shopify/polaris/locales/en.json';\nimport {useI18n} from '@shopify/react-i18n';\n\nfunction App() {\n  const [i18n] = useI18n({\n    id: 'Polaris',\n    fallback: translations,\n    translations(locale) {\n      return import(\n        /* webpackChunkName: \"Polaris-i18n\", webpackMode: \"lazy-once\" */ `@shopify/polaris/locales/${locale}.json`\n      ).then((dictionary) => dictionary && dictionary.default);\n    },\n  });\n\n  // i18n.translations is an array of translation dictionaries, where the first\n  // dictionary is the desired language, and the second is the fallback.\n  return (\n    <AppProvider i18n={i18n.translations}>{/* App content */}</AppProvider>\n  );\n}\n```\n\n---\n\n## Using linkComponent\n\nBy default Polaris renders `<Link>` elements (and action objects) as `<a>` tags. That works well for simple one-page demos. However for more complex multi-page applications that use a router such as [`react-router`](https://reacttraining.com/react-router/web) you will want links to use the components provided by your router. If you don't then every link will be an `<a>` tag and thus trigger a whole page refresh instead of navigating client-side.\n\nThe `linkComponent` prop allows you to customise how links behave within Polaris by allowing you to inject your router's own Link component. The following example demonstrates using react-router's `Link` component.\n\n```jsx\nimport {BrowserRouter, Link as ReactRouterLink} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <AppProvider linkComponent={Link}>\n        {/* App content including your <Route> components */}\n      </AppProvider>\n    </BrowserRouter>\n  );\n}\n\nconst IS_EXTERNAL_LINK_REGEX = /^(?:[a-z][a-z\\d+.-]*:|\\/\\/)/;\n\nfunction Link({children, url = '', external, ref, ...rest}) {\n  // react-router only supports links to pages it can handle itself. It does not\n  // support arbirary links, so anything that is not a path-based link should\n  // use a reglar old `a` tag\n  if (external || IS_EXTERNAL_LINK_REGEX.test(url)) {\n    rest.target = '_blank';\n    rest.rel = 'noopener noreferrer';\n    return (\n      <a href={url} {...rest}>\n        {children}\n      </a>\n    );\n  }\n\n  return (\n    <ReactRouterLink to={url} {...rest}>\n      {children}\n    </ReactRouterLink>\n  );\n}\n```\n\n---\n\n## Testing components\n\nYou must include Polaris context in your tests when you use Polaris components.\n\nTo make this easier for you, we’ve provided:\n\n- a PolarisTestProvider component to provide the Polaris contexts for you\n",
  "Autocomplete": "\n\n# Autocomplete\n\nThe autocomplete component is an input field that provides selectable suggestions as a merchant types into it. It allows merchants to quickly search through and select from large collections of options. It's a convenience wrapper around the `Combobox` and `Listbox` components with minor UI differences.\n\n---\n\n## Best practices\n\nThe autocomplete component should:\n\n- Be clearly labeled so it’s obvious to the merchant what type of options will be available\n- Limit the number of options displayed at once\n- Not be used within a popover\n- Indicate a loading state to the merchant while option data is being populated\n\n---\n\n## Content guidelines\n\nThe input field for autocomplete should follow the [content guidelines](https://polaris.shopify.com/components/forms/text-field) for text fields.\n\n---\n\n## Examples\n\n### Basic autocomplete\n\nUse to help merchants complete text input quickly from a list of options.\n\n```jsx\nfunction AutocompleteExample() {\n  const deselectedOptions = [\n    {value: 'rustic', label: 'Rustic'},\n    {value: 'antique', label: 'Antique'},\n    {value: 'vinyl', label: 'Vinyl'},\n    {value: 'vintage', label: 'Vintage'},\n    {value: 'refurbished', label: 'Refurbished'},\n  ];\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n\n  const updateText = useCallback(\n    (value) => {\n      setInputValue(value);\n\n      if (value === '') {\n        setOptions(deselectedOptions);\n        return;\n      }\n\n      const filterRegex = new RegExp(value, 'i');\n      const resultOptions = deselectedOptions.filter((option) =>\n        option.label.match(filterRegex),\n      );\n      setOptions(resultOptions);\n    },\n    [deselectedOptions],\n  );\n\n  const updateSelection = useCallback(\n    (selected) => {\n      const selectedValue = selected.map((selectedItem) => {\n        const matchedOption = options.find((option) => {\n          return option.value.match(selectedItem);\n        });\n        return matchedOption && matchedOption.label;\n      });\n\n      setSelectedOptions(selected);\n      setInputValue(selectedValue[0]);\n    },\n    [options],\n  );\n\n  const textField = (\n    <Autocomplete.TextField\n      onChange={updateText}\n      label=\"Tags\"\n      value={inputValue}\n      prefix={<Icon source={SearchMinor} color=\"base\" />}\n      placeholder=\"Search\"\n    />\n  );\n\n  return (\n    <div style={{height: '225px'}}>\n      <Autocomplete\n        options={options}\n        selected={selectedOptions}\n        onSelect={updateSelection}\n        textField={textField}\n      />\n    </div>\n  );\n}\n```\n\n### Multiple tags autocomplete\n\nUse to help merchants select multiple options from a list curated by the text input.\n\n```jsx\nfunction MultiAutocompleteExample() {\n  const deselectedOptions = [\n    {value: 'rustic', label: 'Rustic'},\n    {value: 'antique', label: 'Antique'},\n    {value: 'vinyl', label: 'Vinyl'},\n    {value: 'vintage', label: 'Vintage'},\n    {value: 'refurbished', label: 'Refurbished'},\n  ];\n  const [selectedOptions, setSelectedOptions] = useState(['rustic']);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n\n  const updateText = useCallback(\n    (value) => {\n      setInputValue(value);\n\n      if (value === '') {\n        setOptions(deselectedOptions);\n        return;\n      }\n\n      const filterRegex = new RegExp(value, 'i');\n      const resultOptions = deselectedOptions.filter((option) =>\n        option.label.match(filterRegex),\n      );\n      let endIndex = resultOptions.length - 1;\n      if (resultOptions.length === 0) {\n        endIndex = 0;\n      }\n      setOptions(resultOptions);\n    },\n    [deselectedOptions],\n  );\n\n  const removeTag = useCallback(\n    (tag) => () => {\n      const options = [...selectedOptions];\n      options.splice(options.indexOf(tag), 1);\n      setSelectedOptions(options);\n    },\n    [selectedOptions],\n  );\n\n  const verticalContentMarkup =\n    selectedOptions.length > 0 ? (\n      <Stack spacing=\"extraTight\" alignment=\"center\">\n        {selectedOptions.map((option) => {\n          let tagLabel = '';\n          tagLabel = option.replace('_', ' ');\n          tagLabel = titleCase(tagLabel);\n          return (\n            <Tag key={`option${option}`} onRemove={removeTag(option)}>\n              {tagLabel}\n            </Tag>\n          );\n        })}\n      </Stack>\n    ) : null;\n\n  const textField = (\n    <Autocomplete.TextField\n      onChange={updateText}\n      label=\"Tags\"\n      value={inputValue}\n      placeholder=\"Vintage, cotton, summer\"\n      verticalContent={verticalContentMarkup}\n    />\n  );\n\n  return (\n    <div style={{height: '325px'}}>\n      <Autocomplete\n        allowMultiple\n        options={options}\n        selected={selectedOptions}\n        textField={textField}\n        onSelect={setSelectedOptions}\n        listTitle=\"Suggested Tags\"\n      />\n    </div>\n  );\n\n  function titleCase(string) {\n    return string\n      .toLowerCase()\n      .split(' ')\n      .map((word) => word.replace(word[0], word[0].toUpperCase()))\n      .join('');\n  }\n}\n```\n\n### Multiple sections autocomplete\n\nUse to help merchants complete text input quickly from a multiple sections list of options.\n\n```jsx\nfunction AutocompleteExample() {\n  const deselectedOptions = useMemo(\n    () => [\n      {\n        title: 'Frequently used',\n        options: [\n          {value: 'ups', label: 'UPS'},\n          {value: 'usps', label: 'USPS'},\n        ],\n      },\n      {\n        title: 'All carriers',\n        options: [\n          {value: 'dhl', label: 'DHL Express'},\n          {value: 'canada_post', label: 'Canada Post'},\n        ],\n      },\n    ],\n    [],\n  );\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n\n  const updateText = useCallback(\n    (value) => {\n      setInputValue(value);\n\n      if (value === '') {\n        setOptions(deselectedOptions);\n        return;\n      }\n\n      const filterRegex = new RegExp(value, 'i');\n      const resultOptions = [];\n\n      deselectedOptions.forEach((opt) => {\n        const lol = opt.options.filter((option) =>\n          option.label.match(filterRegex),\n        );\n\n        resultOptions.push({\n          title: opt.title,\n          options: lol,\n        });\n      });\n\n      setOptions(resultOptions);\n    },\n    [deselectedOptions],\n  );\n\n  const updateSelection = useCallback(\n    ([selected]) => {\n      let selectedValue;\n\n      options.forEach(({options: opt}) => {\n        if (selectedValue) {\n          return;\n        }\n\n        const matchedOption = opt.find((option) =>\n          option.value.match(selected),\n        );\n\n        if (matchedOption) {\n          selectedValue = matchedOption.label;\n        }\n      });\n\n      setSelectedOptions([selected]);\n      setInputValue(String(selectedValue) ? String(selectedValue) : '');\n    },\n    [options],\n  );\n\n  const textField = (\n    <Autocomplete.TextField\n      onChange={updateText}\n      label=\"Tags\"\n      value={inputValue}\n      prefix={<Icon source={SearchMinor} color=\"base\" />}\n      placeholder=\"Search\"\n    />\n  );\n\n  return (\n    <div style={{height: '225px'}}>\n      <Autocomplete\n        textField={textField}\n        selected={selectedOptions}\n        options={options}\n        onSelect={updateSelection}\n      />\n    </div>\n  );\n}\n```\n\n### Autocomplete with loading\n\nUse to indicate loading state to merchants while option data is processing.\n\n```jsx\nfunction AutocompleteExample() {\n  const deselectedOptions = [\n    {value: 'rustic', label: 'Rustic'},\n    {value: 'antique', label: 'Antique'},\n    {value: 'vinyl', label: 'Vinyl'},\n    {value: 'vintage', label: 'Vintage'},\n    {value: 'refurbished', label: 'Refurbished'},\n  ];\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n  const [loading, setLoading] = useState(false);\n\n  const updateText = useCallback(\n    (value) => {\n      setInputValue(value);\n\n      if (!loading) {\n        setLoading(true);\n      }\n\n      setTimeout(() => {\n        if (value === '') {\n          setOptions(deselectedOptions);\n          setLoading(false);\n          return;\n        }\n        const filterRegex = new RegExp(value, 'i');\n        const resultOptions = deselectedOptions.filter((option) =>\n          option.label.match(filterRegex),\n        );\n        setOptions(resultOptions);\n        setLoading(false);\n      }, 300);\n    },\n    [deselectedOptions, options, loading],\n  );\n\n  const updateSelection = useCallback(\n    (selected) => {\n      const selectedText = selected.map((selectedItem) => {\n        const matchedOption = options.find((option) => {\n          return option.value.match(selectedItem);\n        });\n        return matchedOption && matchedOption.label;\n      });\n      setSelectedOptions(selected);\n      setInputValue(selectedText[0]);\n    },\n    [options],\n  );\n\n  const textField = (\n    <Autocomplete.TextField\n      onChange={updateText}\n      label=\"Tags\"\n      value={inputValue}\n      prefix={<Icon source={SearchMinor} color=\"base\" />}\n      placeholder=\"Search\"\n    />\n  );\n\n  return (\n    <div style={{height: '225px'}}>\n      <Autocomplete\n        options={options}\n        selected={selectedOptions}\n        onSelect={updateSelection}\n        loading={loading}\n        textField={textField}\n      />\n    </div>\n  );\n}\n```\n\n### Autocomplete with lazy loading\n\n```jsx\nfunction AutoCompleteLazyLoadExample() {\n  const paginationInterval = 25;\n  const deselectedOptions = Array.from(Array(100)).map((_, index) => ({\n    value: `rustic ${index + 1}`,\n    label: `Rustic ${index + 1}`,\n  }));\n\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n  const [isLoading, setIsLoading] = useState(false);\n  const [willLoadMoreResults, setWillLoadMoreResults] = useState(true);\n  const [visibleOptionIndex, setVisibleOptionIndex] =\n    useState(paginationInterval);\n\n  const handleLoadMoreResults = useCallback(() => {\n    if (willLoadMoreResults) {\n      setIsLoading(true);\n\n      setTimeout(() => {\n        const remainingOptionCount = options.length - visibleOptionIndex;\n        const nextVisibleOptionIndex =\n          remainingOptionCount >= paginationInterval\n            ? visibleOptionIndex + paginationInterval\n            : visibleOptionIndex + remainingOptionCount;\n\n        setIsLoading(false);\n        setVisibleOptionIndex(nextVisibleOptionIndex);\n\n        if (remainingOptionCount <= paginationInterval) {\n          setWillLoadMoreResults(false);\n        }\n      }, 1000);\n    }\n  }, [willLoadMoreResults, visibleOptionIndex, options.length]);\n\n  const removeTag = useCallback(\n    (tag) => () => {\n      const options = [...selectedOptions];\n      options.splice(options.indexOf(tag), 1);\n      setSelectedOptions(options);\n    },\n    [selectedOptions],\n  );\n\n  const updateText = useCallback(\n    (value) => {\n      setInputValue(value);\n\n      if (value === '') {\n        setOptions(deselectedOptions);\n        return;\n      }\n\n      const filterRegex = new RegExp(value, 'i');\n      const resultOptions = deselectedOptions.filter((option) =>\n        option.label.match(filterRegex),\n      );\n\n      let endIndex = resultOptions.length - 1;\n      if (resultOptions.length === 0) {\n        endIndex = 0;\n      }\n      setOptions(resultOptions);\n      setInputValue;\n    },\n    [deselectedOptions, options],\n  );\n\n  const textField = (\n    <Autocomplete.TextField\n      onChange={updateText}\n      label=\"Tags\"\n      value={inputValue}\n      placeholder=\"Vintage, cotton, summer\"\n    />\n  );\n\n  const hasSelectedOptions = selectedOptions.length > 0;\n\n  const tagsMarkup = hasSelectedOptions\n    ? selectedOptions.map((option) => {\n        let tagLabel = '';\n        tagLabel = option.replace('_', ' ');\n        tagLabel = titleCase(tagLabel);\n        return (\n          <Tag key={`option${option}`} onRemove={removeTag(option)}>\n            {tagLabel}\n          </Tag>\n        );\n      })\n    : null;\n  const optionList = options.slice(0, visibleOptionIndex);\n  const selectedTagMarkup = hasSelectedOptions ? (\n    <Stack spacing=\"extraTight\">{tagsMarkup}</Stack>\n  ) : null;\n\n  return (\n    <Stack vertical>\n      {selectedTagMarkup}\n      <Autocomplete\n        allowMultiple\n        options={optionList}\n        selected={selectedOptions}\n        textField={textField}\n        onSelect={setSelectedOptions}\n        listTitle=\"Suggested Tags\"\n        loading={isLoading}\n        onLoadMoreResults={handleLoadMoreResults}\n        willLoadMoreResults={willLoadMoreResults}\n      />\n    </Stack>\n  );\n\n  function titleCase(string) {\n    return string\n      .toLowerCase()\n      .split(' ')\n      .map((word) => {\n        return word.replace(word[0], word[0].toUpperCase());\n      })\n      .join(' ');\n  }\n}\n```\n\n### Autocomplete with empty state\n\nUse to indicate there are no search results.\n\n```jsx\nfunction AutocompleteExample() {\n  const deselectedOptions = [\n    {value: 'rustic', label: 'Rustic'},\n    {value: 'antique', label: 'Antique'},\n    {value: 'vinyl', label: 'Vinyl'},\n    {value: 'vintage', label: 'Vintage'},\n    {value: 'refurbished', label: 'Refurbished'},\n  ];\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n  const [loading, setLoading] = useState(false);\n\n  const updateText = useCallback(\n    (value) => {\n      setInputValue(value);\n\n      if (!loading) {\n        setLoading(true);\n      }\n\n      setTimeout(() => {\n        if (value === '') {\n          setOptions(deselectedOptions);\n          setLoading(false);\n          return;\n        }\n        const filterRegex = new RegExp(value, 'i');\n        const resultOptions = deselectedOptions.filter((option) =>\n          option.label.match(filterRegex),\n        );\n        setOptions(resultOptions);\n        setLoading(false);\n      }, 300);\n    },\n    [deselectedOptions, loading, options],\n  );\n\n  const updateSelection = useCallback(\n    (selected) => {\n      const selectedText = selected.map((selectedItem) => {\n        const matchedOption = options.find((option) => {\n          return option.value.match(selectedItem);\n        });\n        return matchedOption && matchedOption.label;\n      });\n      setSelectedOptions(selected);\n      setInputValue(selectedText[0]);\n    },\n    [options],\n  );\n\n  const textField = (\n    <Autocomplete.TextField\n      onChange={updateText}\n      label=\"Tags\"\n      value={inputValue}\n      prefix={<Icon source={SearchMinor} color=\"base\" />}\n      placeholder=\"Search\"\n    />\n  );\n\n  const emptyState = (\n    <React.Fragment>\n      <Icon source={SearchMinor} />\n      <div style={{textAlign: 'center'}}>\n        <TextContainer>Could not find any results</TextContainer>\n      </div>\n    </React.Fragment>\n  );\n\n  return (\n    <div style={{height: '225px'}}>\n      <Autocomplete\n        options={options}\n        selected={selectedOptions}\n        onSelect={updateSelection}\n        emptyState={emptyState}\n        loading={loading}\n        textField={textField}\n      />\n    </div>\n  );\n}\n```\n\n### Autocomplete with action\n\nUse to indicate there are no search results.\n\n```jsx\nfunction AutocompleteActionBeforeExample() {\n  const deselectedOptions = [\n    {value: 'rustic', label: 'Rustic'},\n    {value: 'antique', label: 'Antique'},\n    {value: 'vinyl', label: 'Vinyl'},\n    {value: 'vintage', label: 'Vintage'},\n    {value: 'refurbished', label: 'Refurbished'},\n  ];\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n  const [loading, setLoading] = useState(false);\n\n  const updateText = useCallback(\n    (value) => {\n      setInputValue(value);\n\n      if (!loading) {\n        setLoading(true);\n      }\n\n      setTimeout(() => {\n        if (value === '') {\n          setOptions(deselectedOptions);\n          setLoading(false);\n          return;\n        }\n        const filterRegex = new RegExp(value, 'i');\n        const resultOptions = options.filter((option) =>\n          option.label.match(filterRegex),\n        );\n        setOptions(resultOptions);\n        setLoading(false);\n      }, 300);\n    },\n    [deselectedOptions, loading, options],\n  );\n\n  const updateSelection = useCallback(\n    (selected) => {\n      const selectedText = selected.map((selectedItem) => {\n        const matchedOption = options.find((option) => {\n          return option.value.match(selectedItem);\n        });\n        return matchedOption && matchedOption.label;\n      });\n      setSelectedOptions(selected);\n      setInputValue(selectedText[0]);\n    },\n    [options],\n  );\n\n  const textField = (\n    <Autocomplete.TextField\n      onChange={updateText}\n      label=\"Tags\"\n      value={inputValue}\n      prefix={<Icon source={SearchMinor} color=\"inkLighter\" />}\n      placeholder=\"Search\"\n    />\n  );\n\n  return (\n    <div style={{height: '225px'}}>\n      <Autocomplete\n        actionBefore={{\n          accessibilityLabel: 'Action label',\n          badge: {\n            status: 'new',\n            content: 'New!',\n          },\n          content: 'Action with long name',\n          ellipsis: true,\n          helpText: 'Help text',\n          icon: CirclePlusMinor,\n        }}\n        options={options}\n        selected={selectedOptions}\n        onSelect={updateSelection}\n        listTitle=\"Suggested tags\"\n        loading={loading}\n        textField={textField}\n      />\n    </div>\n  );\n}\n```\n\n### Autocomplete with wrapping action\n\nUse to indicate there are no search results.\n\n```jsx\nfunction AutocompleteActionBeforeExample() {\n  const deselectedOptions = [\n    {value: 'rustic', label: 'Rustic'},\n    {value: 'antique', label: 'Antique'},\n    {value: 'vinyl', label: 'Vinyl'},\n    {value: 'vintage', label: 'Vintage'},\n    {value: 'refurbished', label: 'Refurbished'},\n  ];\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n  const [loading, setLoading] = useState(false);\n\n  const updateText = useCallback(\n    (value) => {\n      setInputValue(value);\n\n      if (!loading) {\n        setLoading(true);\n      }\n\n      setTimeout(() => {\n        if (value === '') {\n          setOptions(deselectedOptions);\n          setLoading(false);\n          return;\n        }\n        const filterRegex = new RegExp(value, 'i');\n        const resultOptions = options.filter((option) =>\n          option.label.match(filterRegex),\n        );\n        setOptions(resultOptions);\n        setLoading(false);\n      }, 300);\n    },\n    [deselectedOptions, loading, options],\n  );\n\n  const updateSelection = useCallback(\n    (selected) => {\n      const selectedText = selected.map((selectedItem) => {\n        const matchedOption = options.find((option) => {\n          return option.value.match(selectedItem);\n        });\n        return matchedOption && matchedOption.label;\n      });\n      setSelectedOptions(selected);\n      setInputValue(selectedText[0]);\n    },\n    [options],\n  );\n\n  const textField = (\n    <Autocomplete.TextField\n      onChange={updateText}\n      label=\"Tags\"\n      value={inputValue}\n      prefix={<Icon source={SearchMinor} color=\"inkLighter\" />}\n      placeholder=\"Search\"\n    />\n  );\n\n  return (\n    <div style={{height: '225px'}}>\n      <Autocomplete\n        actionBefore={{\n          accessibilityLabel: 'Action label',\n          badge: {\n            status: 'new',\n            content: 'New!',\n          },\n          content:\n            'Action with long name that will need to wrap on small display in order to have a nice display',\n          ellipsis: true,\n          helpText: 'Help text',\n          icon: CirclePlusMinor,\n          wrapOverflow: true,\n        }}\n        options={options}\n        selected={selectedOptions}\n        onSelect={updateSelection}\n        listTitle=\"Suggested tags\"\n        loading={loading}\n        textField={textField}\n      />\n    </div>\n  );\n}\n```\n\n### Autocomplete with destructive action\n\nUse to indicate there are no search results.\n\n```jsx\nfunction AutocompleteActionBeforeExample() {\n  const deselectedOptions = [\n    {value: 'rustic', label: 'Rustic'},\n    {value: 'antique', label: 'Antique'},\n    {value: 'vinyl', label: 'Vinyl'},\n    {value: 'vintage', label: 'Vintage'},\n    {value: 'refurbished', label: 'Refurbished'},\n  ];\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n  const [loading, setLoading] = useState(false);\n\n  const updateText = useCallback(\n    (value) => {\n      setInputValue(value);\n\n      if (!loading) {\n        setLoading(true);\n      }\n\n      setTimeout(() => {\n        if (value === '') {\n          setOptions(deselectedOptions);\n          setLoading(false);\n          return;\n        }\n        const filterRegex = new RegExp(value, 'i');\n        const resultOptions = options.filter((option) =>\n          option.label.match(filterRegex),\n        );\n        setOptions(resultOptions);\n        setLoading(false);\n      }, 300);\n    },\n    [deselectedOptions, loading, options],\n  );\n\n  const updateSelection = useCallback(\n    (selected) => {\n      const selectedText = selected.map((selectedItem) => {\n        const matchedOption = options.find((option) => {\n          return option.value.match(selectedItem);\n        });\n        return matchedOption && matchedOption.label;\n      });\n      setSelectedOptions(selected);\n      setInputValue(selectedText[0]);\n    },\n    [options],\n  );\n\n  const textField = (\n    <Autocomplete.TextField\n      onChange={updateText}\n      label=\"Tags\"\n      value={inputValue}\n      prefix={<Icon source={SearchMinor} color=\"inkLighter\" />}\n      placeholder=\"Search\"\n    />\n  );\n\n  return (\n    <div style={{height: '225px'}}>\n      <Autocomplete\n        actionBefore={{\n          accessibilityLabel: 'Destructive action label',\n          content: 'Destructive action',\n          destructive: true,\n          icon: DeleteMinor,\n        }}\n        options={options}\n        selected={selectedOptions}\n        onSelect={updateSelection}\n        listTitle=\"Suggested tags\"\n        loading={loading}\n        textField={textField}\n      />\n    </div>\n  );\n}\n```\n\n---\n\n## Related components\n\n- For an input field without suggested options, [use the text field component](https://polaris.shopify.com/components/forms/text-field)\n- For a list of selectable options not linked to an input field, [use the option list component](https://polaris.shopify.com/components/lists-and-tables/option-list)\n- For a text field that triggers a popover, [use the combo box component](https://polaris.shopify.com/components/forms/combobox)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n### Structure\n\nThe autocomplete component is based on the [ARIA 1.2 combobox pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#combobox) and the [Aria 1.2 Listbox pattern](https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox).\n\nThe autocomplete list displays below the text field or other control by default so it is easy for merchants to discover and use. However, you can change the position with the `preferredPosition` prop.\n\nAutocomplete features can be challenging for merchants with visual, motor, and cognitive disabilities. Even when they’re built using best practices, these features can be difficult to use with some assistive technologies. Merchants should always be able to search, enter data, or perform other activities without relying on the autocomplete.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nUse autocomplete as progressive enhancement to make the interface easier to use for most merchants.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nRequire that merchants make a selection from the autocomplete to complete a task.\n\n</div></div>\n\n### Keyboard support\n\n- Give the autocomplete text input keyboard focus with the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)\n- Access the list of options with the up and down arrow keys\n- Select an option that has focus with the <kbd>enter</kbd>/<kbd>return</kbd> key\n\n<!-- /content-for -->\n",
  "Avatar": "\n\n# Avatar\n\nAvatars are used to show a thumbnail representation of an individual or\nbusiness in the interface.\n\n---\n\n## Best practices\n\nAvatars should be one of 4 sizes:\n\n- Extra small (24 x 24 px): use in tightly condensed layouts\n- Small (32 × 32 px): use when the medium size is too big for the layout, or when the avatar has less importance\n- Medium (40 × 40 px): use as the default size\n- Large (60 × 60 px): use when an avatar is a focal point, such as on a single customer card\n\n---\n\n## Content guidelines\n\nAny time you use an image to communicate a concept on Shopify, it’s important to use descriptive [alt text](https://polaris.shopify.com/content/alternative-text). Doing this is important for [accessibility](https://polaris.shopify.com/foundations/accessibility) because it allows screen readers to describe what’s in the image to people who may not be able to see it.\n\nFor avatars, we recommend using a format that describes what will show in the\nimage:\n\n- `alt=\"Person’s name\"` if the avatar represents a person\n- `alt=\"Business’s name\"` if the avatar represents a business\n- `alt=\"\"` if the name of the person/business appears next to the avatar as text\n\n---\n\n## Examples\n\n### Default avatar\n\nUse to present an avatar for a merchant, customer, or business.\n\n```jsx\n<Avatar customer name=\"Farrah\" />\n```\n\n<!-- content-for: android -->\n\n![Default avatar](/images-from-old-styleguide/components/Avatar/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Default avatar](/images-from-old-styleguide/components/Avatar/ios/default@2x.png)\n\n<!-- /content-for -->\n\n### Extra small avatar\n\nUse to present an avatar in a condensed layout, such as a data table cell or an action list item.\n\n```jsx\nfunction ExtraSmallAvatarExample() {\n  const [active, setActive] = useState(true);\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n  const activator = (\n    <Button onClick={toggleActive} disclosure>\n      Manage staff\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover active={active} activator={activator} onClose={toggleActive}>\n        <ActionList\n          items={[\n            {\n              content: 'Chet Baker',\n              prefix: <Avatar customer size=\"extraSmall\" name=\"Chet Baker\" />,\n            },\n            {\n              content: 'Farrah Fawcett',\n              prefix: (\n                <Avatar customer size=\"extraSmall\" name=\"Farrah Fawcett\" />\n              ),\n            },\n          ]}\n        />\n      </Popover>\n    </div>\n  );\n}\n```\n\n---\n\n## Related components\n\n- To show a thumbnail for an object rather than a person or business, [use the thumbnail component](https://polaris.shopify.com/components/images-and-icons/thumbnail)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n### Structure\n\nThe avatar component uses a generated scalable vector graphics (SVG) file, which can cause challenges for merchants that use assistive technologies. To create a standard experience, the `<img>` is hidden from assistive technologies by using an empty `alt` attribute, and replaced with a `<span>` that has `role=”img”`.\n\n### Labeling\n\nThe avatar component represents content, and should have a text equivalent for merchants using assistive technologies. By default, the value of the `name` prop is used for the alternative text. If different text would be more accurate, use the `accessibilityLabel` prop to replace the value provided by `name`.\n\n<!-- /content-for -->\n",
  "Badge": "\n\n# Badge\n\nBadges are used to inform merchants of the status of an object or of an action that’s been taken.\n\n---\n\n## Best practices\n\nBadges benefit merchants by:\n\n- Using established color patterns so that merchants can quickly identify their status or importance level\n- Being clearly labeled with short, scannable text\n- Being positioned to clearly identify the object they’re informing or labelling\n\n---\n\n## Content guidelines\n\n### Badge label\n\nBadge labels should:\n\n- Use a single word to describe the status of an object.\n- Only use two words if you need to describe a complex state. For example, “Partially refunded” and “Partially fulfilled”.\n- Always describe the status in the past tense. For example, refunded not refund.\n\nThe available badges for financial status are:\n\n- Authorized\n- Pending\n- Paid\n- Unpaid\n- Pending\n- Voided\n- Partially paid\n- Partially refunded\n- Refunded\n\nThe available badges for fulfillment status are:\n\n- Fulfilled\n- Complete\n- Partial\n- Unfulfilled\n- Restocked\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Don’t\n\nDon’t use alternatives to existing badge options. Only create a new badge option if there aren’t any existing options to communicate the status you need.\n\n</div></div>\n\n---\n\n## Examples\n\n### Default badge\n\nUse to give a non-critical status update on a piece of information or action.\n\n```jsx\n<Badge>Fulfilled</Badge>\n```\n\n<!-- content-for: android -->\n\n![Default badge with gray background](/images-from-old-styleguide/components/Badge/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Default badge with gray background](/images-from-old-styleguide/components/Badge/ios/default@2x.png)\n\n<!-- /content-for -->\n\n### Small badge\n\nUse in layouts with minimal space, like inside of an `IndexTable` cell.\n\n```jsx\n<Badge size=\"small\">Fulfilled</Badge>\n```\n\n### Informational badge\n\nUse to call out an object or action as having an important attribute. For example, marking an option as “Recommended” or marking a theme as “Published”.\n\n```jsx\n<Badge status=\"info\">Published</Badge>\n```\n\n<!-- content-for: android -->\n\n![Informational badge with blue background](/images-from-old-styleguide/components/Badge/android/informational@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Informational badge with blue background](/images-from-old-styleguide/components/Badge/ios/informational@2x.png)\n\n<!-- /content-for -->\n\n### Success badge\n\nUse to indicate a successful, completed, or desirable state when it’s important to provide positive reinforcement to merchants. For example, when merchants successfully dispute a chargeback, a success badge shows that says “Funds recovered”.\n\n```jsx\n<Badge status=\"success\">Funds recovered</Badge>\n```\n\n<!-- content-for: android -->\n\n![Success badge with green background](/images-from-old-styleguide/components/Badge/android/success@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Success badge with green background](/images-from-old-styleguide/components/Badge/ios/success@2x.png)\n\n<!-- /content-for -->\n\n### Attention badge\n\nUse when something requires merchants’ attention but the issue isn’t critical. For example, this badge would show next to an order that needs to be reviewed by merchants.\n\n```jsx\n<Badge status=\"attention\">Inactive</Badge>\n```\n\n<!-- content-for: android -->\n\n![Attention badge with yellow background](/images-from-old-styleguide/components/Badge/android/attention@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Attention badge with yellow background](/images-from-old-styleguide/components/Badge/ios/attention@2x.png)\n\n<!-- /content-for -->\n\n### Warning badge\n\nUse for critical and time-sensitive issues that require merchants’ attention and potential action. Warning events are often reversible.\n\nKeep in mind that seeing this badge can feel stressful for merchants so it should only be used when absolutely necessary.\n\n```jsx\n<Badge status=\"warning\">Expired</Badge>\n```\n\n<!-- content-for: android -->\n\n![Warning badge with orange background](/images-from-old-styleguide/components/Badge/android/warning@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Warning badge with orange background](/images-from-old-styleguide/components/Badge/ios/warning@2x.png)\n\n<!-- /content-for -->\n\n### Critical badge\n\nUse for critical and irreversible issues that require merchants’ attention and potential action.\n\nKeep in mind that seeing this badge can feel stressful for merchants so it should only be used when absolutely necessary.\n\n```jsx\n<Badge status=\"critical\">Action required</Badge>\n```\n\n<!-- content-for: android -->\n\n![Critical badge with red background](/images-from-old-styleguide/components/Badge/android/critical@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Critical badge with red background](/images-from-old-styleguide/components/Badge/ios/critical@2x.png)\n\n<!-- /content-for -->\n\n### Incomplete badge\n\nUse to indicate when a given task has not yet been completed. For example, when merchants haven’t fulfilled an order.\n\n```jsx\n<Badge progress=\"incomplete\" status=\"warning\">\n  Unfulfilled\n</Badge>\n```\n\n<!-- content-for: android -->\n\n![Incomplete badge. Default badge with incomplete status](/images-from-old-styleguide/components/Badge/android/incomplete@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Incomplete badge. Default badge with incomplete status](/images-from-old-styleguide/components/Badge/ios/incomplete@2x.png)\n\n<!-- /content-for -->\n\n### Partially complete badge\n\nUse to indicate when a given task has been partially completed. For example, when merchants have partially fulfilled an order.\n\n```jsx\n<Badge progress=\"partiallyComplete\" status=\"attention\">\n  Partially fulfilled\n</Badge>\n```\n\n<!-- content-for: android -->\n\n![Partially complete badge. Default badge with partially complete status](/images-from-old-styleguide/components/Badge/android/partially-complete@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Partially complete badge. Default badge with partially complete status](/images-from-old-styleguide/components/Badge/ios/partially-complete@2x.png)\n\n<!-- /content-for -->\n\n### Complete badge\n\nUse to indicate when a given task has been completed. For example, when merchants have fulfilled an order.\n\n```jsx\n<Badge progress=\"complete\">Fulfilled</Badge>\n```\n\n### Badge with statusAndProgressLabelOverride\n\nUse when the status and progress accessibilityLabels are not appropriate to a given context.\n\n```jsx\n<Badge\n  status=\"success\"\n  progress=\"complete\"\n  statusAndProgressLabelOverride=\"Status: Published. Your online store is visible.\"\n>\n  Published\n</Badge>\n```\n\n<!-- content-for: android -->\n\n![Complete badge. Default badge with complete status](/images-from-old-styleguide/components/Badge/android/complete@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Complete badge. Default badge with complete status](/images-from-old-styleguide/components/Badge/ios/complete@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Related components\n\n- To represent an interactive list of categories provided by merchants, [use tags](https://polaris.shopify.com/components/forms/tag)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nBadges that convey information with icons or color include text provided by the [visually hidden component](https://polaris.shopify.com/components/titles-and-text/visually-hidden#navigation). This text is read out by assistive technologies like screen readers so that merchants with vision issues can access the meaning of the badge in context.\n\n<!-- /content-for -->\n",
  "Banner": "\n\n# Banner\n\nInforms merchants about important changes or persistent conditions. Use this component if you need to communicate to merchants in a prominent way. Banners are placed at the top of the page or section they apply to, and below the page or section header.\n\n---\n\n## Best practices\n\nBanners should:\n\n- Be used thoughtfully and sparingly for only the most important information.\n- Not be used to call attention to what a merchant needs to do in the UI instead of making the action clear in the UI itself.\n- Not be the primary entry point to information or actions merchants need on a regular basis.\n- Be dismissible unless they contain critical information or an important step merchants need to take.\n- Use the default icon for `success`, `info`, `warning` and `critical` statuses. If the icon is changed, use only [major, duotone icons](https://polaris.shopify.com/design/icons#using-icons-in-your-designs).\n\n### Placement\n\nBanners should be placed in the appropriate context:\n\n- Banners relevant to an entire page should be placed at the top of that page, below the page header. They should occupy the full width of the content area.\n- Banners related to a section of a page (like a card, popover, or modal) should be placed inside that section, below any section heading. These banners have less spacing and a pared-back design to fit within a content context.\n- Banners related to an element more specific that a section should be placed immediately above or below that element.\n\n---\n\n## Content guidelines\n\nBanners should:\n\n- Focus on a single theme, piece of information, or required action to avoid\n  overwhelming merchants.\n- Be concise and scannable—merchants shouldn’t need to spend a lot of time\n  figuring out what they need to know and do.\n- Be limited to a few important calls to action with no more than one primary\n  action.\n- Not be used for marketing information or upsell—[use callout cards](https://polaris.shopify.com/components/structure/callout-card) instead.\n\nTo learn about writing helpful and accessible error message text, see the guidelines for [error messages](https://polaris.shopify.com/experiences/error-messages).\n\n### Title\n\nBanner titles should follow the content guidelines for [headings and subheadings](https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings).\n\n### Body content\n\nBody content should:\n\n- Be concise: keep content to 1 to 2 sentences where possible\n- Clarify the benefit of the main task\n- Be written in sentence case and use appropriate punctuation\n- Avoid repeating the heading\n- Explain how to resolve the issue, particularly for warning and critical\n  banners\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nYour online store has a maximum of 20 themes. Delete unused themes to add more.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nYou have reached your theme limit. Your online store has reached its maximum\nof 20 themes. To add more themes, delete themes you’re no longer using.\n\n</div></div>\n\n### Button and links\n\nButtons and links should be:\n\n- Clear and predictable: merchants should be able to anticipate what will\n  happen when they click a button. Never deceive merchants by mislabeling a\n  button.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nBuy shipping label\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nBuy\n\n</div></div>\n\n- Action-led: buttons should always lead with a strong verb that encourages\n  action. To provide enough context to merchants use the {verb}+{noun} format on\n  buttons except in the case of common actions like Save, Close, Cancel, or OK.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nActivate Apple Pay\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nTry Apple Pay\n\n</div></div>\n\n- Scannable: avoid unnecessary words and articles such as the, an, or a.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nAdd menu item\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nAdd a menu item\n\n</div></div>\n\nLink text should:\n\n- Set the expectation of where merchants will be taken\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nOrder #001\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nOrder\n\n</div></div>\n\n- Use consistent content to label navigation. For example, if a navigational\n  link leads to a page called Orders, label the link Orders.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nPayments\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nFinance section\n\n</div></div>\n\n### Secondary body content\n\nBody content should be:\n\n- Actionable: start sentences with imperative verbs when telling merchants\n  what actions are available to them (especially something new). Don’t use\n  permissive language like “you can”.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nGet performance data for all your sales channels.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nNow you can get performance data for all your sales channels.\n\n</div></div>\n\n- Structured for merchant success: always put the most critical information\n  first.\n- Clear: use the verb “need” to help merchants understand when they’re required\n  to do something.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nTo buy a shipping label, you need to enter the total weight of your shipment,\nincluding packaging.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nTo buy a shipping label, you must enter the total weight of your shipment,\nincluding packaging.\n\n</div></div>\n\n---\n\n## Examples\n\n### Default banners\n\n- Use to convey general information or actions that aren’t critical. For example, you might show a banner that asks for merchant feedback.\n- Default banners contain lower priority information and should always be dismissible.\n\n```jsx\n<Banner title=\"Order archived\" onDismiss={() => {}}>\n  <p>This order was archived on March 7, 2017 at 3:12pm EDT.</p>\n</Banner>\n```\n\n<!-- content-for: android -->\n\n![Default banner for Android](/images-from-old-styleguide/components/Banner/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Default banner for iOS](/images-from-old-styleguide/components/Banner/ios/default@2x.png)\n\n<!-- /content-for -->\n\n### Dismissible banner\n\n<!-- example-for: web -->\n\nMake all banners dismissible, unless they contain critical information or an important action that merchants are required to take.\n\n```jsx\n<Banner onDismiss={() => {}}>\n  <p>\n    Use your finance report to get detailed information about your business.{' '}\n    <Link url=\"\">Let us know what you think</Link>\n  </p>\n</Banner>\n```\n\n### Banner with footer call-to-action\n\nUse when you want merchants to take an action after reading the banner.\n\n```jsx\n<Banner\n  title=\"Some of your product variants are missing weights\"\n  status=\"warning\"\n  action={{content: 'Edit variant weights', url: ''}}\n  secondaryAction={{content: 'Learn more', url: ''}}\n  onDismiss={() => {}}\n>\n  <p>\n    Add weights to show accurate rates at checkout and when buying shipping\n    labels in Shopify.\n  </p>\n</Banner>\n```\n\n<!-- content-for: android -->\n\n![Banner with footer call-to-action for Android](/images-from-old-styleguide/components/Banner/android/footer-action@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Banner with footer call-to-action for iOS](/images-from-old-styleguide/components/Banner/ios/footer-action@2x.png)\n\n<!-- /content-for -->\n\n### Informational banners\n\nUse to update merchants about a change or give them advice.\n\n```jsx\n<Banner\n  title=\"USPS has updated their rates\"\n  action={{content: 'Update rates', url: ''}}\n  secondaryAction={{content: 'Learn more'}}\n  status=\"info\"\n  onDismiss={() => {}}\n>\n  <p>Make sure you know how these changes affect your store.</p>\n</Banner>\n```\n\n<!-- content-for: android -->\n\n![Informational banner for Android](/images-from-old-styleguide/components/Banner/android/informational@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Informational banner for iOS](/images-from-old-styleguide/components/Banner/ios/informational@2x.png)\n\n<!-- /content-for -->\n\n### Success banner\n\n- Default to using toasts for success messages, unless the feedback is delayed, persistent, or has a call to action\n- Include next steps if applicable\n\n```jsx\n<Banner\n  title=\"Your shipping label is ready to print.\"\n  status=\"success\"\n  action={{content: 'Print label'}}\n  onDismiss={() => {}}\n/>\n```\n\n<!-- content-for: android -->\n\n![Success banner for Android](/images-from-old-styleguide/components/Banner/android/success@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Success banner for iOS](/images-from-old-styleguide/components/Banner/ios/success@2x.png)\n\n<!-- /content-for -->\n\n### Warning banners\n\n- Use to display information that needs attention or that merchants need to take action on\n- Seeing these banners can be stressful for merchants so be cautious about using them\n\n```jsx\n<Banner\n  title=\"Before you can purchase a shipping label, this change needs to be made:\"\n  action={{content: 'Edit address'}}\n  status=\"warning\"\n>\n  <List>\n    <List.Item>\n      The name of the city you’re shipping to has characters that aren’t\n      allowed. City name can only include spaces and hyphens.\n    </List.Item>\n  </List>\n</Banner>\n```\n\n<!-- content-for: android -->\n\n![Warning banner for Android](/images-from-old-styleguide/components/Banner/android/warning@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Warning banner for iOS](/images-from-old-styleguide/components/Banner/ios/warning@2x.png)\n\n<!-- /content-for -->\n\n### Critical banners\n\n- Use to communicate problems that have to be resolved immediately for merchants to complete a task\n- For example, you will show this banner for orders with high fraud risk\n- Seeing these banners can be stressful for merchants so be cautious about using them\n\n```jsx\n<Banner\n  title=\"High risk of fraud detected\"\n  action={{content: 'Review risk analysis'}}\n  status=\"critical\"\n>\n  <p>\n    Before fulfilling this order or capturing payment, please{' '}\n    <Link url=\"\">review the Risk Analysis</Link> and determine if this order is\n    fraudulent.\n  </p>\n</Banner>\n```\n\n<!-- content-for: android -->\n\n![Critical banner for Android](/images-from-old-styleguide/components/Banner/android/critical@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Critical banner for iOS](/images-from-old-styleguide/components/Banner/ios/critical@2x.png)\n\n<!-- /content-for -->\n\n### Banner in a modal\n\n<!-- example-for: web -->\n\nBanners inside of modals render with less spacing and a pared-back design to fit within a content context.\n\n```jsx\nfunction BannerInModalExample() {\n  const [active, setActive] = useState(false);\n\n  const handleChange = useCallback(() => setActive(!active), [active]);\n\n  return (\n    <div style={{height: '500px'}}>\n      <Button onClick={handleChange}>Open</Button>\n      <Modal\n        open={active}\n        onClose={handleChange}\n        title=\"Reach more shoppers with Instagram product tags\"\n        primaryAction={{\n          content: 'Add Instagram',\n          onAction: handleChange,\n        }}\n        secondaryActions={[\n          {\n            content: 'Learn more',\n            onAction: handleChange,\n          },\n        ]}\n      >\n        <Modal.Section>\n          <TextContainer>\n            <Banner action={{content: 'Connect account'}} status=\"warning\">\n              <p>\n                Connect your instagram account to your shop before proceeding.\n              </p>\n            </Banner>\n            <p>\n              Use Instagram posts to share your products with millions of\n              people. Let shoppers buy from your store without leaving\n              Instagram.\n            </p>\n          </TextContainer>\n        </Modal.Section>\n      </Modal>\n    </div>\n  );\n}\n```\n\n### Banner with focus\n\n<!-- example-for: web -->\n\nBanner can programmatically receive focus. Use this functionality to draw the merchant’s attention to the banner.\n\n```jsx\nfunction BannerWithFocusExample() {\n  const banner = useRef();\n\n  useEffect(() => banner.current.focus(), []);\n\n  return (\n    <Banner\n      title=\"High risk of fraud detected\"\n      onDismiss={() => {}}\n      status=\"critical\"\n      ref={banner}\n    >\n      <p>\n        Before fulfilling this order or capturing payment, please review the\n        fraud analysis and determine if this order is fraudulent\n      </p>\n    </Banner>\n  );\n}\n```\n\n### Banner in a card\n\n<!-- example-for: web -->\n\nBanners inside of cards render with less spacing and a pared-back design to fit within a content context.\n\n```jsx\n<Card title=\"Online store dashboard\" sectioned>\n  <TextContainer>\n    <Banner onDismiss={() => {}}>\n      <p>\n        Use your finance report to get detailed information about your business.{' '}\n        <Link url=\"\">Let us know what you think</Link>\n      </p>\n    </Banner>\n\n    <p>View a summary of your online store’s performance.</p>\n  </TextContainer>\n</Card>\n```\n\n---\n\n## Related components\n\n- To inform merchants about a new feature or opportunity, [use callout cards](https://polaris.shopify.com/components/structure/callout-card)\n- To group similar concepts together in the interface, [use a card](https://polaris.shopify.com/components/structure/card)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nBanners provide context and assist workflows for merchants with disabilities.\n\n- Critical and warning banners have a `role=”alert”` and are announced by assistive technologies when they appear.\n- All other banners have a `role=”status”` and are read after any critical announcements.\n- All banners have an `aria-live` attribute and are announced by assistive technologies when their content is updated. These announcements can be disabled by using the prop `stopAnnouncements`.\n- Banners use `aria-describedby` to describe their purpose to assistive technologies when they’re announced or receive focus. If a banner has a `title`, then the title content is used for the `aria-describedby`. If the banner doesn’t have a `title`, then all of the banner content is used for the `aria-describedby`.\n- Banner containers have a `tabindex=”0”` and display a visible keyboard focus indicator. Because of this, merchants can discover banners while tabbing through forms or other interactions, and developers can programmatically move focus to banners.\n- Banners use a combination of [icons](https://polaris.shopify.com/design/icons) and [colors](https://polaris.shopify.com/design/colors) to show their meaning and level of importance to merchants.\n\n### Error notifications in forms\n\n#### Critical banners\n\nWhen merchants submit long or complex forms with errors, use a critical banner to summarize what went wrong. Place the banner at the top of the form and move focus to the banner when the form is submitted. This allows all merchants to move through the form in a logical order to correct the issues.\n\n#### Inline errors\n\nAlways include [inline error](https://polaris.shopify.com/components/forms/inline-error) messages for specific form fields so that merchants know what to do in context as they correct their mistakes.\n\nTo learn about creating helpful and accessible error message text, see the guidelines for [error messages](https://polaris.shopify.com/experiences/error-messages).\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Put banners close in context to the problem they’re referring to\n- Give banners with a lot of information a clear title that summarizes their content\n- Move focus to banners if they’re relevant to the merchant’s current workflow and need to be addressed immediately\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Move focus to banners if they appear on page load, or outside the merchant’s current workflow\n- Use warning or critical (`role=”alert”`) banners to convey information that the merchant doesn’t need to address immediately\n\n</div></div>\n\n<!-- /content-for -->\n",
  "Button": "\n\n# Button\n\nButtons are used primarily for actions, such as “Add”, “Close”, “Cancel”, or “Save”. Plain buttons, which look similar to links, are used for less important or less commonly used actions, such as “view shipping settings”.\n\nFor navigational actions that appear within or directly following a sentence, use the [link component](https://polaris.shopify.com/components/navigation/link).\n\n---\n\n## Best practices\n\nButtons should:\n\n- Be clearly and accurately labeled.\n- Lead with a strong, actionable verb.\n- Use established button colors appropriately. For example, only use a red\n  button for an action that’s difficult or impossible to undo.\n- Prioritize the most important actions. Too many calls to action can cause\n  confusion and make merchants unsure of what to do next.\n- Be positioned in consistent locations in the interface.\n\n### Buttons versus links\n\nButtons are used primarily for actions, such as “Add”, “Close”, “Cancel”, or “Save”. Plain buttons, which look similar to links, are used for less important or less commonly used actions, such as “view shipping settings”.\n\nLinks are used primarily for navigation, and usually appear within or directly following a sentence.\n\nThe HTML that renders for the `Button` and `Link` components carries meaning. Using these components intentionally and consistently results in:\n\n- a more inclusive experience for assistive technology users\n- a more cohesive visual experience for sighted users\n- products that are easier to maintain at scale\n\n---\n\n## Content guidelines\n\nButtons should follow the content guidelines for [buttons](https://polaris.shopify.com/content/actionable-language#section-buttons).\n\n---\n\n## Examples\n\n### Basic button\n\nUsed most in the interface. Only use another style if a button requires more or less visual weight.\n\n```jsx\n<Button>Add product</Button>\n```\n\n<!-- content-for: android -->\n\n![Basic button for Android](/images-from-old-styleguide/components/Button/android/basic@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Basic button for iOS](/images-from-old-styleguide/components/Button/ios/basic@2x.png)\n\n<!-- /content-for -->\n\n### Outline button\n\n<!-- example-for: web -->\n\nUse against shaded or colorful backgrounds. An outline button will maintain the appropriate visual weight and won’t clash with the background color.\n\n```jsx\n<Button outline>Add product</Button>\n```\n\n### Outline monochrome button\n\n<!-- example-for: web -->\n\nUse against shaded or colorful backgrounds where matching the current text colors is more appropriate than the current outline theme.\n\n```jsx\n<div style={{color: '#bf0711'}}>\n  <Button monochrome outline>\n    Retry\n  </Button>\n</div>\n```\n\n### Plain button\n\nUse for less important or less commonly used actions since they’re less prominent. For example, plain buttons are used as actions in cards.\n\n```jsx\n<Button plain>View shipping settings</Button>\n```\n\n<!-- content-for: android -->\n\n![Plain button for Android](/images-from-old-styleguide/components/Button/android/plain@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Plain button for iOS](/images-from-old-styleguide/components/Button/ios/plain@2x.png)\n\n<!-- /content-for -->\n\n### Plain monochrome button\n\n<!-- example-for: web -->\n\nUse for less important or less commonly used actions where matching the current text color is desired. For example in the InlineError component.\n\n```jsx\n<div>\n  Could not retrieve data.{' '}\n  <Button plain monochrome>\n    Try again\n  </Button>\n</div>\n```\n\n### Plain destructive button\n\n<!-- example-for: online-store-ui -->\n\nUse for actions that will delete merchant data or be otherwise difficult to recover from. Since they’re less prominent, use for less important or less commonly used destructive actions. For example, plain buttons are used as actions in cards.\n\n```jsx\n<Button plain destructive>\n  Remove\n</Button>\n```\n\n<!-- content-for: android -->\n\n![Destructive plain button for Android](/images-from-old-styleguide/components/Button/android/plain-destructive@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Destructive plain button for iOS](/images-from-old-styleguide/components/Button/ios/plain-destructive@2x.png)\n\n<!-- /content-for -->\n\n### Primary button\n\nUse to highlight the most important actions in any experience. Don’t use more than one primary button in a section or screen to avoid overwhelming merchants.\n\n```jsx\n<Button primary>Save theme</Button>\n```\n\n<!-- content-for: android -->\n\n![Primary button for Android](/images-from-old-styleguide/components/Button/android/primary@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Primary button for iOS](/images-from-old-styleguide/components/Button/ios/primary@2x.png)\n\n<!-- /content-for -->\n\n### Destructive button\n\nUse when the action will delete merchant data or be otherwise difficult to recover from. Destructive buttons should trigger a confirmation dialog before the action is completed. Be thoughtful about using destructive buttons because they can feel stressful for merchants.\n\n```jsx\n<Button destructive>Delete theme</Button>\n```\n\n<!-- content-for: android -->\n\n![Destructive basic button for Android](/images-from-old-styleguide/components/Button/android/basic-destructive@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Destructive basic button for iOS](/images-from-old-styleguide/components/Button/ios/basic-destructive@2x.png)\n\n<!-- /content-for -->\n\n### Slim button\n\n<!-- example-for: web -->\n\nUse when a table or list has a set of actions on each item to avoid making items taller than they need to be. Don’t use slim buttons for primary actions.\n\n```jsx\n<Button size=\"slim\">Save variant</Button>\n```\n\n### Large button\n\n<!-- example-for: web -->\n\nUse for the main call to action in empty states or for calls to action shown with large illustrations.\n\n```jsx\n<Button size=\"large\">Create store</Button>\n```\n\n### Full-width button\n\n<!-- example-for: web -->\n\nUse for buttons placed in a narrow column (especially when stacking multiple buttons) or for creating a set of buttons of equal width. Full-width buttons should rarely exceed 320 px wide.\n\n```jsx\n<Button fullWidth>Add customer</Button>\n```\n\n### Text-aligned button\n\n<!-- example-for: web -->\n\nUse for plain or monochrome buttons that could have a long length and should be aligned when they potentially overflow onto the next line.\n\n```jsx\n<Button plain textAlign=\"left\">\n  This is a really long string of text that overflows onto the next line we need\n  to put in a lot of words now you can see the alignment. It is very long but a\n  customer could potentially name something this long.\n</Button>\n```\n\n### Pressed button\n\n<!-- example-for: web -->\n\nButtons are sometimes used as a toggle for other parts of the user interface.\n\n```jsx\nfunction PressedButton() {\n  const [isFirstButtonActive, setIsFirstButtonActive] = useState(true);\n\n  const handleFirstButtonClick = useCallback(() => {\n    if (isFirstButtonActive) return;\n    setIsFirstButtonActive(true);\n  }, [isFirstButtonActive]);\n\n  const handleSecondButtonClick = useCallback(() => {\n    if (!isFirstButtonActive) return;\n    setIsFirstButtonActive(false);\n  }, [isFirstButtonActive]);\n\n  return (\n    <ButtonGroup segmented>\n      <Button pressed={isFirstButtonActive} onClick={handleFirstButtonClick}>\n        First button\n      </Button>\n      <Button pressed={!isFirstButtonActive} onClick={handleSecondButtonClick}>\n        Second button\n      </Button>\n    </ButtonGroup>\n  );\n}\n```\n\n### Plain disclosure button\n\n<!-- example-for: web -->\n\nUse to indicate that more content can be disclosed on click, like text in a collapsible.\n\n```jsx\nfunction DisclosureButtion() {\n  const [expanded, setExpanded] = useState(false);\n\n  return (\n    <Button\n      plain\n      disclosure={expanded ? 'up' : 'down'}\n      onClick={() => {\n        setExpanded(!expanded);\n      }}\n    >\n      {expanded ? 'Show less' : 'Show more'}\n    </Button>\n  );\n}\n```\n\n### Right-aligned disclosure\n\n<!-- example-for: web -->\n\nWhen working with `fullWidth + textAlign=\"left\"`, the `disclosure` will align itself to the far right.\n\n```jsx\nfunction RightAlignedDisclosureButton() {\n  const [expanded, setExpanded] = useState(false);\n\n  return (\n    <div style={{width: '200px'}}>\n      <Button\n        fullWidth\n        textAlign=\"left\"\n        disclosure={expanded ? 'up' : 'down'}\n        onClick={() => setExpanded(!expanded)}\n      >\n        {expanded ? 'Show less' : 'Show more'}\n      </Button>\n    </div>\n  );\n}\n```\n\n### Select disclosure button\n\n<!-- example-for: web -->\n\nUse to indicate that multiple options are available from this control, similar to a `<select />` HTML element.\n\n```jsx\n<div style={{height: '100px'}}>\n  <Button disclosure=\"select\" onClick={() => console.log('Open Popover')}>\n    Select options\n  </Button>\n</div>\n```\n\n### Split button\n\n<!-- example-for: web -->\n\nUse when there is only one primary action but other related actions can be taken.\n\n```jsx\n<div style={{height: '100px'}}>\n  <Button\n    primary\n    connectedDisclosure={{\n      accessibilityLabel: 'Other save actions',\n      actions: [{content: 'Save as draft'}],\n    }}\n  >\n    Save\n  </Button>\n</div>\n```\n\n### Disabled state\n\nUse for actions that aren’t currently available. The surrounding interface should make it clear why the button is disabled and what needs to be done to enable it.\n\n```jsx\n<ButtonGroup>\n  <Button disabled>Buy shipping label</Button>\n  <Button primary disabled>\n    Buy shipping label\n  </Button>\n  <Button destructive disabled>\n    Buy shipping label\n  </Button>\n  <Button outline disabled>\n    Buy shipping label\n  </Button>\n  <span style={{color: '#bf0711'}}>\n    <Button outline monochrome disabled>\n      Buy shipping label\n    </Button>\n  </span>\n  <Button plain disabled>\n    Buy shipping label\n  </Button>\n  <Button plain destructive disabled>\n    Buy shipping label\n  </Button>\n</ButtonGroup>\n```\n\n<!-- content-for: android -->\n\n![Disabled primary button for Android](/images-from-old-styleguide/components/Button/android/disabled@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Disabled primary button for iOS](/images-from-old-styleguide/components/Button/ios/disabled@2x.png)\n\n<!-- /content-for -->\n\n### Loading state\n\n<!-- example-for: web -->\n\nUse when a button has been pressed and the associated action is in progress.\n\n```jsx\n<Button loading>Save product</Button>\n```\n\n---\n\n## Related components\n\n- To combine or lay out multiple buttons, [use the button group component](https://polaris.shopify.com/components/actions/button-group)\n- For navigational actions that appear within or directly following a sentence, use the [link component](https://polaris.shopify.com/components/navigation/link)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nButtons can have different states that are visually and programmatically conveyed to merchants.\n\n- Use the `ariaControls` prop to add an `aria-controls` attribute to the button. Use the attribute to point to the unique `id` of the content that the button manages.\n- If a button expands or collapses adjacent content, then use the `ariaExpanded` prop to add the `aria-expanded` attribute to the button. Set the value to convey the current expanded (`true`) or collapsed (`false`) state of the content.\n- Use the `disabled` prop to set the `disabled` state of the button. This prevents merchants from being able to interact with the button, and conveys its inactive state to assistive technologies.\n- Use the `pressed` prop to add an `aria-pressed` attribute to the button.\n\n#### Navigation\n\nMerchants generally expect buttons to submit data or take action, and for links to navigate. If navigation is required for the button component, use the `url` prop. The control will output an anchor styled as a button, instead of a button in HTML, to help convey this difference.\n\nFor more information on making accessible links, see the [link component](https://polaris.shopify.com/components/navigation/link).\n\n### Labeling\n\nThe `accessibilityLabel` prop adds an `aria-label` attribute to the button, which can be accessed by assistive technologies like screen readers. Typically, this label text replaces the visible text on the button for merchants who use assistive technology.\n\nUse `accessibilityLabel` for a button if:\n\n- The button’s visible text doesn’t adequately convey the purpose of the button to non-visual merchants\n- The button has no text and relies on an icon alone to convey its purpose\n\nTo help support merchants who use speech activation software as well as sighted screen reader users, make sure that the `aria-label` text includes any button text that’s visible. Mismatches between visible and programmatic labeling can cause confusion, and might prevent voice recognition commands from working.\n\nWhen possible, give the button visible text that clearly conveys its purpose without the use of `accessibilityLabel`. When no additional content is needed, duplicating the button text with `accessibilityLabel` isn’t necessary.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n```jsx\n<Button>Edit shipping address</Button>\n```\n\n```jsx\n<Heading>Shipping address</Heading>\n<Button accessibilityLabel=\"Edit shipping address\">Edit</Button>\n```\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n```jsx\n<Button accessibilityLabel=\"Change your shipping address\">Edit</Button>\n```\n\n```jsx\n<Button accessibilityLabel=\"Edit\">Edit</Button>\n```\n\n</div></div>\n\n#### External links\n\nWhen you use the button component to create a link to an external resource:\n\n- Use the `external` prop to make the link open in a new tab (or window, depending on the merchant’s browser settings)\n- Use the `icon` prop to add the `external` icon to the button\n- Use the `accessibilityLabel` prop to include the warning about opening a new tab in the button text for non-visual screen reader users\n\nFor more information on making accessible links, see the [link component](https://polaris.shopify.com/components/navigation/link).\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n```jsx\n<Button\n  accessibilityLabel=\"Terms and conditions (opens a new window)\"\n  icon={ExternalMinor}\n  url=\"http://example.com\"\n  external\n>\n  Terms and conditions\n</Button>\n```\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n```jsx\n<Button url=\"http://example.com\" external>Terms and conditions</Button>\n<Button url=\"http://example.com\" external>\n  Terms and conditions\n</Button>\n```\n\n</div></div>\n\n### Keyboard support\n\nButtons use browser defaults for keyboard interactions.\n\n- Give buttons keyboard focus with the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)\n- Activate buttons with the <kbd>enter</kbd>/<kbd>return</kbd> key or the <kbd>space</kbd> key\n\n#### Custom key events\n\nUse the `onKeyDown`, `onKeyPress`, and `onKeyUp` props to create custom events for buttons. With these props, you can use buttons to create complex, custom interactions like drag-and-drop interfaces.\n\nSince these props introduce non-standard features to buttons, make sure to include accessible instructions so that merchants can understand how to use these features.\n\n<!-- /content-for -->\n",
  "Button group": "\n\n# Button group\n\nButton group displays multiple related actions stacked or in a horizontal row to help with arrangement and spacing.\n\n---\n\n## Best practices\n\nButton groups should:\n\n- Only use buttons that follow the\n  [best practices outlined in the button component](https://polaris.shopify.com/components/actions/button#best-practices)\n- Group together calls to action that have a relationship\n- Be used with consideration that too many calls to action can cause merchants\n  to be unsure of what to do next\n- Be thoughtful about how multiple buttons will look and work on small screens\n- Only be used in groups of up to six buttons if the buttons contain an icon\n  with no text\n\n---\n\n## Content guidelines\n\nButton groups should follow the [content guidelines](https://polaris.shopify.com/content/actionable-language#section-buttons) for buttons.\n\n---\n\n## Examples\n\n### Default button group\n\nUse when you have multiple buttons to space them out evenly.\n\n```jsx\n<ButtonGroup>\n  <Button>Cancel</Button>\n  <Button primary>Save</Button>\n</ButtonGroup>\n```\n\n<!-- content-for: android -->\n\n![Alt text](/images-from-old-styleguide/components/ButtonGroup/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Alt text](/images-from-old-styleguide/components/ButtonGroup/ios/default@2x.png)\n\n<!-- /content-for -->\n\n### Button group with segmented buttons\n\nUse to emphasize several buttons as a thematically-related set among other controls.\n\n```jsx\n<ButtonGroup segmented>\n  <Button>Bold</Button>\n  <Button>Italic</Button>\n  <Button>Underline</Button>\n</ButtonGroup>\n```\n\n### Outline button group with segmented buttons\n\nUse to emphasize several buttons as a thematically-related set among other controls.\n\n```jsx\n<ButtonGroup segmented>\n  <Button outline>Bold</Button>\n  <Button outline>Italic</Button>\n  <Button outline>Underline</Button>\n</ButtonGroup>\n```\n\n<!-- content-for: android -->\n\n![Alt text](/images-from-old-styleguide/components/ButtonGroup/android/segmented-button@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Alt text](/images-from-old-styleguide/components/ButtonGroup/ios/segmented-button@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Related components\n\n- To learn how to use individual buttons, [use the button component](https://polaris.shopify.com/components/actions/button)\n- To embed an action or navigation into a line of text, [use the link component](https://polaris.shopify.com/components/navigation/link)\n",
  "Callout card": "\n\n# Callout card\n\nCallout cards are used to encourage merchants to take an action related to a\nnew feature or opportunity. They are most commonly displayed in the\nsales channels section of Shopify.\n\n---\n\n## Best practices\n\nCallout cards should:\n\n- Clearly articulate the benefit of the feature and what it does\n- Provide merchants with a clear call to action\n- Be targeted to merchants who will most benefit from the feature\n- Be dismissable so merchants can get rid of cards about features they’re not\n  interested in\n- Use an illustration that helps to communicate the subject or merchant benefit\n\n---\n\n## Content guidelines\n\n### Title\n\nCallout card titles should follow the content guidelines for [headings and subheadings](https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings).\n\n### Body content\n\nBody content should be:\n\n- Actionable: start sentences with imperative verbs when telling merchants\n  what actions are available to them (especially something new). Don’t use\n  permissive language like “you can”.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nGet performance data for all your sales channels.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nNow you can get performance data for all your sales channels.\n\n</div></div>\n\n- Structured for merchant success: always put the most critical information\n  first\n- Clear: use the verb “need” to help merchants understand when they’re required\n  to do something\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nTo buy a shipping label, you need to enter the total weight of your shipment,\nincluding packaging.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nTo buy a shipping label, you must enter the total weight of your shipment,\nincluding packaging.\n\n</div></div>\n\n### Call to action\n\nButtons should be:\n\nClear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive merchants by mislabeling a button.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nBuy shipping label\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nBuy\n\n</div></div>\n\n- Action-led: buttons should always lead with a strong verb that encourages\n  action. To provide enough context to merchants use the {verb}+{noun} format on\n  buttons except in the case of common actions like Save, Close, Cancel, or OK.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nView shipping settings\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nView your settings\n\n</div></div>\n\n- Scannable: avoid unnecessary words and articles such as the, an, or a.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nAdd menu item\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nAdd a menu item\n\n</div></div>\n\n---\n\n## Examples\n\n### Default callout card\n\nUse to let merchants know about a feature or opportunity where there is a clear, single action they need to take to move to the next step.\n\n```jsx\n<CalloutCard\n  title=\"Customize the style of your checkout\"\n  illustration=\"https://cdn.shopify.com/s/assets/admin/checkout/settings-customizecart-705f57c725ac05be5a34ec20c05b94298cb8afd10aac7bd9c7ad02030f48cfa0.svg\"\n  primaryAction={{\n    content: 'Customize checkout',\n    url: 'https://www.shopify.com',\n  }}\n>\n  <p>Upload your store’s logo, change colors and fonts, and more.</p>\n</CalloutCard>\n```\n\n### Callout card with secondary action\n\nUse to let merchants know about a feature or opportunity where there are two distinct actions they can take on the information.\n\n```jsx\n<CalloutCard\n  title=\"Customize the style of your checkout\"\n  illustration=\"https://cdn.shopify.com/s/assets/admin/checkout/settings-customizecart-705f57c725ac05be5a34ec20c05b94298cb8afd10aac7bd9c7ad02030f48cfa0.svg\"\n  primaryAction={{content: 'Customize checkout'}}\n  secondaryAction={{content: 'Learn more about customizing checkout'}}\n>\n  <p>Upload your store’s logo, change colors and fonts, and more.</p>\n</CalloutCard>\n```\n\n### Dismissable callout card\n\nMake all callout cards dismissible so merchants can get rid of cards about features they’re not interested in.\n\n```jsx\n<CalloutCard\n  title=\"Customize the style of your checkout\"\n  illustration=\"https://cdn.shopify.com/s/assets/admin/checkout/settings-customizecart-705f57c725ac05be5a34ec20c05b94298cb8afd10aac7bd9c7ad02030f48cfa0.svg\"\n  primaryAction={{content: 'Customize checkout'}}\n  onDismiss={() => {}}\n>\n  <p>Upload your store’s logo, change colors and fonts, and more.</p>\n</CalloutCard>\n```\n\n---\n\n## Related components\n\n- To group similar concepts and tasks together, [use the card component](https://polaris.shopify.com/components/structure/card)\n- To create page-level layout, [use the layout component](https://polaris.shopify.com/components/structure/layout)\n- To explain a feature that merchants haven’t tried yet, [use the empty state component](https://polaris.shopify.com/components/structure/empty-state)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nThe required `title` prop gives the callout card a level 2 heading (`<h2>`). This helps with readability and provides structure to screen reader users.\n\nIllustrations included in callout cards are implemented as decorative images with empty `alt` attributes (`alt=\"\"` ) so that they’re skipped by screen readers.\n\nUse [actionable language](https://polaris.shopify.com/content/actionable-language#navigation) to ensure that the purpose of the callout card is clear to all merchants, including those with issues related to reading and language.\n\n<!-- /content-for -->\n",
  "Caption": "\n\n# Caption\n\nCaption text size is smaller than the recommended size for general reading. On web, it should be used only in a graph or as a timestamp for a list item. On Android and iOS, it can also be used as help text or as other kinds of secondary text for list items.\n\n---\n\n## Best practices\n\n- Use for secondary labels in graphs and charts\n- May be used for timestamps in lists of content\n- Don’t use this component for other cases\n- Don’t use this component for text longer than a few words\n- Don’t use this component for aesthetic effect or to break from the standard text size\n\n---\n\n## Content guidelines\n\n### Captions\n\nCaptions are primarily used in [data visualizations](https://polaris.shopify.com/design/data-visualizations). Stick to a few words and don’t use this component for complete sentences or longer content.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Use caption for labelling data visualizations\n  ![Diagram of using captions to label graphs and other data content](/images-from-old-styleguide/typography/display-styles/do-use-caption-for-labeling-data-visualizations@2x.png)\n- Received April 21, 2017\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Order #1001 was received on April 21, 2017\n- This is your recent activity\n\n</div></div>\n\n---\n\n## Examples\n\n### Default caption\n\nUse to provide details in situations where content is compact and space is tight.\n\n```jsx\n<List>\n  <List.Item>\n    Order #1001 <Caption>Received April 21, 2017</Caption>\n  </List.Item>\n  <List.Item>\n    Order #1002 <Caption>Received April 22, 2017</Caption>\n  </List.Item>\n</List>\n```\n\n<!-- content-for: android -->\n\n![Default caption](/images-from-old-styleguide/components/Caption/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Default caption](/images-from-old-styleguide/components/Caption/ios/default@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nFollow best practices for [data visualizations](https://polaris.shopify.com/design/data-visualizations) to ensure that the purpose of captions is clear to all merchants, including those with issues related to seeing or understanding data and complex information.\n\n<!-- /content-for -->\n",
  "Card": "\n\n# Card\n\nCards are used to group similar concepts and tasks together to make Shopify\neasier for merchants to scan, read, and get things done.\n\n---\n\n## Best practices\n\nCards should:\n\n- Use headings that set clear expectations about the card’s purpose\n- Prioritize information so the content merchants most need to know comes\n  first\n- Stick to single user flows or break more complicated flows into multiple\n  sections\n- Avoid too many call-to-action buttons or links and only one primary call to\n  action per card\n- Use calls to action on the bottom of the card for next steps and use the\n  space in the upper right corner of the card for persistent, optional actions\n  (such as an Edit link)\n\n---\n\n## Content guidelines\n\n### Title\n\nCard titles should follow the content guidelines for [headings and subheadings](https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings).\n\n### Body content\n\nBody content should be:\n\n- Actionable: start sentences with imperative verbs when telling merchants what\n  actions are available to them (especially something new). Don’t use permissive\n  language like “you can”.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nGet performance for all your sales channels.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nNow you can get performance data for all your sales channels.\n\n</div></div>\n\n- Structured for merchant success: always put the most critical information\n  first.\n- Clear: use the verb “need” to help merchants understand when they’re required\n  to do something.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nTo buy a shipping label, you need to enter the total weight of your shipment,\nincluding packaging.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nTo buy a shipping label, you must enter the total weight of your shipment,\nincluding packaging.\n\n</div></div>\n\n### Call-to-action button\n\nButtons should be:\n\n- Clear and predictable: merchants should be able to anticipate what will happen\n  when they click a button. Never deceive merchants by mislabeling a button.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Create order\n- Buy shipping label\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- New order\n- Buy\n\n</div></div>\n\nAction-led: buttons should always lead with a strong verb that encourages\naction. To provide enough context to merchants use the {verb}+{noun} format on\nbuttons except in the case of common actions like Save, Close, Cancel, or OK.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Activate Apple Pay\n- View shipping settings\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Try Apple Pay\n- View your settings\n\n</div></div>\n\nScannable: Avoid unnecessary words and articles such as the, an, or a.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nAdd menu item\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nAdd a menu item\n\n</div></div>\n\n### Section titles\n\nSection titles should be:\n\n- Informative: they should label the type of content grouped in the body\n  content below\n- Like headings: follow the same content guidelines as when you’re writing\n  headings\n\n### Action links\n\nLinks should be:\n\n- Used for secondary or persistent actions: links should be used to represent\n  lower priority actions than buttons, or persistent actions that merchants may\n  take at any time (such as a persistent Edit link).\n- Clearly labeled: merchants should not need to guess where they’ll end up if\n  they click on an action link. Never use “click here” as a link because it\n  doesn’t set expectations about what’s next.\n- Similar to buttons: Follow the same content guidelines as when you’re writing\n  text for buttons.\n\n---\n\n## Examples\n\n### Default card\n\nUse when you have a simple message to communicate to merchants that doesn’t require any secondary steps.\n\n```jsx\n<Card title=\"Online store dashboard\" sectioned>\n  <p>View a summary of your online store’s performance.</p>\n</Card>\n```\n\n<!-- content-for: android -->\n\n![Default card with a title and a short body](/images-from-old-styleguide/components/Card/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Default card with a title and a short body](/images-from-old-styleguide/components/Card/ios/default@2x.png)\n\n<!-- /content-for -->\n\n### Card with header actions\n\n<!-- content-for: web -->\n\nUse for less important card actions, or actions merchants may do before reviewing the contents of the card. For example, merchants may want to add items to a card containing a long list, or enter a customer’s new address.\n\n<!-- /content-for -->\n\n```jsx\n<Card sectioned title=\"Variants\" actions={[{content: 'Add variant'}]}>\n  <p>\n    Add variants if this product comes in multiple versions, like different\n    sizes or colors.\n  </p>\n</Card>\n```\n\n<!-- content-for: ios, android -->\n\nUse for less important card actions, or actions merchants may do before reviewing the contents of the card.\n\n- Use an icon for the action, if possible\n- Include no more than 2 actions\n\n<!-- /content-for -->\n\n<!-- content-for: android -->\n\n![Card with a title (Conditions), a short body and a header action to add a condition](/images-from-old-styleguide/components/Card/android/header-actions@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Card with a title (Conditions), a short body and a header action to add a condition](/images-from-old-styleguide/components/Card/ios/header-actions@2x.png)\n\n<!-- /content-for -->\n\n### Card with footer actions\n\n<!-- content-for: web -->\n\nUse footer actions for a card’s most important actions, or actions merchants should do after reviewing the contents of the card. For example, merchants should review the contents of a shipment before an important action like adding tracking information. Footer actions can be left or right aligned with the `footerActionAlignment` prop.\n\n<!-- /content-for -->\n\n```jsx\n<Card\n  title=\"Shipment 1234\"\n  secondaryFooterActions={[{content: 'Edit shipment'}]}\n  primaryFooterAction={{content: 'Add tracking number'}}\n>\n  <Card.Section title=\"Items\">\n    <List>\n      <List.Item>1 × Oasis Glass, 4-Pack</List.Item>\n      <List.Item>1 × Anubis Cup, 2-Pack</List.Item>\n    </List>\n  </Card.Section>\n</Card>\n```\n\n<!-- content-for: android, ios -->\n\nUse footer actions for a card’s most important actions, or actions merchants should do after reviewing the contents of the card.\n\n- Use buttons with labels\n- If you have more than 2 actions, consider using an overflow menu on the card\n\n<!-- /content-for -->\n\n<!-- content-for: android -->\n\n![Card featuring footer actions: add variant, edit options](/images-from-old-styleguide/components/Card/android/footer-actions@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Card featuring footer actions: add variant, edit options](/images-from-old-styleguide/components/Card/ios/footer-actions@2x.png)\n\n<!-- /content-for -->\n\n### Card with multiple footer actions\n\n<!-- example-for: web -->\n\nWhen multiple secondary footer actions are provided, they will render in an action list popover activated by a disclosure button. The disclosure button text can be customized with the `secondaryFooterActionsDisclosureText` prop.\n\n```jsx\n<Card\n  title=\"Shipment 1234\"\n  secondaryFooterActions={[\n    {content: 'Cancel shipment', destructive: true},\n    {content: 'Add another shipment', disabled: true},\n  ]}\n  primaryFooterAction={{content: 'Add tracking number'}}\n>\n  <Card.Section title=\"Items\">\n    <List>\n      <List.Item>1 × Oasis Glass, 4-Pack</List.Item>\n      <List.Item>1 × Anubis Cup, 2-Pack</List.Item>\n    </List>\n  </Card.Section>\n</Card>\n```\n\n### Card with custom footer actions\n\n<!-- example-for: web -->\n\nUse to present actionable content that is optional or not the primary purpose of the page.\n\n```jsx\n<Card title=\"Secure your account with 2-step authentication\">\n  <Card.Section>\n    <Stack spacing=\"loose\" vertical>\n      <p>\n        Two-step authentication adds an extra layer of security when logging in\n        to your account. A special code will be required each time you log in,\n        ensuring only you can access your account.\n      </p>\n      <Stack distribution=\"trailing\">\n        <ButtonGroup>\n          <Button>Enable two-step authentication</Button>\n          <Button plain>Learn more</Button>\n        </ButtonGroup>\n      </Stack>\n    </Stack>\n  </Card.Section>\n</Card>\n```\n\n### Card with destructive footer action\n\n<!-- example-for: web -->\n\nUse when a card action will delete merchant data or be otherwise difficult to recover from.\n\n```jsx\n<Card\n  title=\"Shipment 1234\"\n  secondaryFooterActions={[{content: 'Cancel shipment', destructive: true}]}\n  primaryFooterAction={{content: 'Add tracking number'}}\n>\n  <Card.Section title=\"Items\">\n    <List>\n      <List.Item>1 × Oasis Glass, 4-Pack</List.Item>\n      <List.Item>1 × Anubis Cup, 2-Pack</List.Item>\n    </List>\n  </Card.Section>\n</Card>\n```\n\n### Card with multiple sections\n\nUse when you have two related but distinct pieces of information to communicate to merchants. Multiple sections can help break up complicated concepts to make them easier to scan and understand.\n\n```jsx\n<Card title=\"Online store dashboard\">\n  <Card.Section>\n    <p>View a summary of your online store’s performance.</p>\n  </Card.Section>\n\n  <Card.Section>\n    <p>\n      View a summary of your online store’s performance, including sales,\n      visitors, top products, and referrals.\n    </p>\n  </Card.Section>\n</Card>\n```\n\n<!-- content-for: android -->\n\n![Shipping costs card with multiple sections: domestic, international](/images-from-old-styleguide/components/Card/android/multiple-sections@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Shipping costs card with multiple sections: domestic, international](/images-from-old-styleguide/components/Card/ios/multiple-sections@2x.png)\n\n<!-- /content-for -->\n\n### Card with multiple titled sections\n\n<!-- example-for: web -->\n\nUse when you have two related but distinct pieces of information to communicate to merchants that are complex enough to require a title to introduce them.\n\n```jsx\n<Card title=\"Online store dashboard\">\n  <Card.Section title=\"Reports\">\n    <p>View a summary of your online store’s performance.</p>\n  </Card.Section>\n\n  <Card.Section title=\"Summary\">\n    <p>\n      View a summary of your online store’s performance, including sales,\n      visitors, top products, and referrals.\n    </p>\n  </Card.Section>\n</Card>\n```\n\n### Card section with action\n\n<!-- example-for: web -->\n\nUse when your card section has actions that apply only to that section.\n\n```jsx\n<Card title=\"Customer\">\n  <Card.Section>\n    <p>John Smith</p>\n  </Card.Section>\n  <Card.Section title=\"Contact Information\" actions={[{content: 'Edit'}]}>\n    <p>john.smith@example.com</p>\n  </Card.Section>\n</Card>\n```\n\n### Card with subsection\n\n<!-- example-for: web -->\n\nUse when your card sections need further categorization.\n\n```jsx\n<Card title=\"Customer\">\n  <Card.Section>\n    <p>John Smith</p>\n  </Card.Section>\n  <Card.Section title=\"Addresses\">\n    <Card.Subsection>\n      123 First St\n      <br />\n      Somewhere\n      <br />\n      The Universe\n    </Card.Subsection>\n    <Card.Subsection>\n      123 Second St\n      <br />\n      Somewhere\n      <br />\n      The Universe\n    </Card.Subsection>\n  </Card.Section>\n  <Card.Section>\n    <Card.Subsection>\n      A single subsection without a sibling has no visual appearance\n    </Card.Subsection>\n  </Card.Section>\n</Card>\n```\n\n### Card section with destructive action\n\n<!-- content-for: web -->\n\nUse when a card action applies only to one section and will delete merchant data or be otherwise difficult to recover from.\n\n<!-- /content-for -->\n\n```jsx\n<Card title=\"Customer\">\n  <Card.Section>\n    <p>John Smith</p>\n  </Card.Section>\n  <Card.Section\n    title=\"Contact Information\"\n    actions={[{content: 'Delete', destructive: true}, {content: 'Edit'}]}\n  >\n    <p>john.smith@example.com</p>\n  </Card.Section>\n</Card>\n```\n\n<!-- content-for: android -->\n\n![Customer card with multiple titled sections: note, shipping address](/images-from-old-styleguide/components/Card/android/multiple-titled-sections@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Customer card with multiple titled sections: note, shipping address](/images-from-old-styleguide/components/Card/ios/multiple-titled-sections@2x.png)\n\n<!-- /content-for -->\n\n### Card with a subdued section\n\n<!-- example-for: web -->\n\nUse to indicate when one of the sections in your card contains inactive or disabled content.\n\n```jsx\n<Card title=\"Staff accounts\">\n  <Card.Section>\n    <List>\n      <List.Item>Felix Crafford</List.Item>\n      <List.Item>Ezequiel Manno</List.Item>\n    </List>\n  </Card.Section>\n\n  <Card.Section subdued title=\"Deactivated staff accounts\">\n    <List>\n      <List.Item>Felix Crafford</List.Item>\n      <List.Item>Ezequiel Manno</List.Item>\n    </List>\n  </Card.Section>\n</Card>\n```\n\n### Subdued card for secondary content\n\n<!-- example-for: web -->\n\nUse for content that you want to deprioritize. Subdued cards don’t stand out as much as cards with white backgrounds so don’t use them for information or actions that are critical to merchants.\n\n```jsx\n<Card title=\"Deactivated staff accounts\" sectioned subdued>\n  <List>\n    <List.Item>Felix Crafford</List.Item>\n    <List.Item>Ezequiel Manno</List.Item>\n  </List>\n</Card>\n```\n\n### Card with separate header\n\n<!-- example-for: web -->\n\nUse to be able to use custom React elements as header content.\n\n```jsx\n<Card>\n  <Card.Header\n    actions={[\n      {\n        content: 'Preview',\n      },\n    ]}\n    title=\"Staff accounts\"\n  >\n    <Popover\n      active\n      activator={\n        <Button disclosure plain>\n          Add account\n        </Button>\n      }\n      onClose={() => {}}\n    >\n      <ActionList items={[{content: 'Member'}, {content: 'Admin'}]} />\n    </Popover>\n  </Card.Header>\n  <Card.Section>\n    <List>\n      <List.Item>Felix Crafford</List.Item>\n      <List.Item>Ezequiel Manno</List.Item>\n    </List>\n  </Card.Section>\n</Card>\n```\n\n### Card section with custom React Node title\n\n<!-- example-for: web -->\n\nUse to render custom content such as icons, links, or buttons in a card section’s header.\n\n```jsx\n<Card title=\"Products\">\n  <Card.Section\n    title={\n      <Stack>\n        <Icon source={ProductsMajor} />\n        <Subheading>New Products</Subheading>\n      </Stack>\n    }\n  >\n    <List>\n      <List.Item>Socks</List.Item>\n      <List.Item>Super Shoes</List.Item>\n    </List>\n  </Card.Section>\n</Card>\n```\n\n### Card with all of its elements\n\n<!-- example-for: web -->\n\nUse as a broad example that includes most props available to card.\n\n```jsx\n<Card\n  secondaryFooterActions={[{content: 'Dismiss'}]}\n  primaryFooterAction={{content: 'Export Report'}}\n>\n  <Card.Header\n    actions={[\n      {\n        content: 'Total Sales',\n      },\n    ]}\n    title=\"Sales\"\n  >\n    <Popover\n      active={false}\n      activator={\n        <Button disclosure plain>\n          View Sales\n        </Button>\n      }\n      onClose={() => {}}\n    >\n      <ActionList items={[{content: 'Gross Sales'}, {content: 'Net Sales'}]} />\n    </Popover>\n  </Card.Header>\n  <Card.Section>\n    <TextContainer>\n      You can use sales reports to see information about your customers’ orders\n      based on criteria such as sales over time, by channel, or by staff.\n    </TextContainer>\n  </Card.Section>\n  <Card.Section title=\"Total Sales Breakdown\">\n    <ResourceList\n      resourceName={{singular: 'sale', plural: 'sales'}}\n      items={[\n        {\n          sales: 'Orders',\n          amount: 'USD$0.00',\n          url: 'reports/orders',\n        },\n        {\n          sales: 'Returns',\n          amount: '-USD$250.00',\n          url: 'reports/returns',\n        },\n      ]}\n      renderItem={(item) => {\n        const {sales, amount, url} = item;\n        return (\n          <ResourceList.Item\n            url={url}\n            accessibilityLabel={`View Sales for ${sales}`}\n          >\n            <Stack>\n              <Stack.Item fill>{sales}</Stack.Item>\n              <Stack.Item>{amount}</Stack.Item>\n            </Stack>\n          </ResourceList.Item>\n        );\n      }}\n    />\n  </Card.Section>\n  <Card.Section title=\"Deactivated reports\" subdued>\n    <List>\n      <List.Item>Payouts</List.Item>\n      <List.Item>Total Sales By Channel</List.Item>\n    </List>\n  </Card.Section>\n  <Card.Section title=\"Note\">\n    <TextContainer>\n      The sales reports are available only if your store is on the Shopify plan\n      or higher.\n    </TextContainer>\n  </Card.Section>\n</Card>\n```\n\n### Card with flushed sections\n\n<!-- example-for: web -->\n\nUse when you need further control over the spacing of your card sections.\n\n```jsx\n<Card>\n  <Card.Section flush>\n    <Image\n      source=\"https://polaris.shopify.com/bundles/bc7087219578918d62ac40bf4b4f99ce.png\"\n      alt=\"turtle illustration centered with body text and a button\"\n    />\n  </Card.Section>\n  <Card.Section subdued>\n    <TextContainer>\n      You can use sales reports to see information about your customers’ orders\n      based on criteria such as sales over time, by channel, or by staff.\n    </TextContainer>\n  </Card.Section>\n</Card>\n```\n\n---\n\n## Related components\n\n- To create page-level layout, [use the layout component](https://polaris.shopify.com/components/structure/layout)\n- To highlight a Shopify feature, [use the callout card component](https://polaris.shopify.com/components/structure/callout-card)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nThe required `title` prop gives the card a level 2 heading (`<h2>`). This helps with readability and provides structure to screen reader users.\n\nIf you use the `subdued` prop on a card or section, make sure that the card or section `title` conveys the reason for using `subdued`. This ensures that merchants with low vision, including those who use screen readers, can identify that the content is inactive or less important.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n```\n<Card title=\"Deactivated staff accounts\" sectioned subdued>\n  <List>\n    <List.Item>Felix Crafford</List.Item>\n    <List.Item>Ezequiel Manno</List.Item>\n  </List>\n</Card>\n```\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n```\n<Card title=\"Staff accounts\" sectioned subdued>\n  <List>\n    <List.Item>Felix Crafford</List.Item>\n    <List.Item>Ezequiel Manno</List.Item>\n  </List>\n</Card>\n```\n\n</div></div>\n\n<!-- /content-for -->\n",
  "Checkbox": "\n\n# Checkbox\n\nCheckboxes are most commonly used to give merchants a way to make a range of selections (zero, one, or multiple). They may also be used as a way to have merchants indicate they agree to specific terms and services.\n\n---\n\n## Best practices\n\nCheckboxes should:\n\n- Work independently from each other: selecting one checkbox shouldn’t change\n  the selection status of another checkbox in the list. The exception is when a\n  checkbox is used to make a bulk selection of multiple items.\n- Be framed positively: for example, `Turn on notifications` instead of\n  `Turn off notifications`\n- Always have a label when being used to toggling a setting on or off\n- Be listed according to a logical order, whether it’s alphabetical, numerical,\n  time-based, or some other clear system.\n- Link to more information or include a subtitle as required to provide more\n  explanation. Don’t rely on tooltips to explain a checkbox.\n\n---\n\n## Content guidelines\n\n### Lists with checkboxes\n\nLists that use checkboxes should:\n\n- Start with a capital letter\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Option 1\n- Option 2\n- Option 3\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- option 1\n- option 2\n- option 3\n\n</div></div>\n\n- Not use commas or semicolons at the end of each line\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Red\n- Yellow\n- Blue\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Red;\n- Yellow;\n- Blue.\n\n</div></div>\n\n- In the rare case where the checkbox is asking merchants to agree to terms\n  or service, use the first person\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nI agree to the Terms of Service.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nYou agree to the Terms of Service\n\n</div></div>\n\n---\n\n## Examples\n\n### Default checkboxes\n\nUse in forms to toggle the state of something on or off. Default checkboxes can appear in two states: selected and disabled, or unselected.\n\n```jsx\nfunction CheckboxExample() {\n  const [checked, setChecked] = useState(false);\n  const handleChange = useCallback((newChecked) => setChecked(newChecked), []);\n\n  return (\n    <Checkbox\n      label=\"Basic checkbox\"\n      checked={checked}\n      onChange={handleChange}\n    />\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Default checkbox on Android](/images-from-old-styleguide/components/Checkbox/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Default checkbox on iOS](/images-from-old-styleguide/components/Checkbox/ios/default@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Related components\n\n- To present a list of options where merchants can only make a single choice, [use the radio button component](https://polaris.shopify.com/components/forms/radio-button)\n- To display a list of related content, [use the choice list component](https://polaris.shopify.com/components/forms/choice-list)\n- To create an ungrouped list, [use the content list component](https://polaris.shopify.com/components/lists-and-tables/list)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nScreen readers convey the state of the checkbox automatically.\n\n- Use the `disabled` prop to apply the HTML `disabled` attribute to the checkbox `<input>`. This prevents merchants from being able to interact with the checkbox, and conveys its inactive state to assistive technologies.\n- Use the `id` prop to provide a unique `id` attribute value for the checkbox. If an `id` isn’t provided, then the component generates one. All checkboxes must have unique `id` values to work correctly with assistive technologies.\n- Setting `checked=\"indeterminate\"` conveys the state of the checkbox using `aria-checked=\"mixed\"`.\n- Setting the `ariaControls` prop conveys the ID of the element whose contents or presence are controlled by the checkbox to screen reader users with the `aria-controls` attribute.\n\n### Labeling\n\n- The required `label` prop conveys the purpose of the checkbox to all merchants\n- Use the `labelHidden` prop to visually hide the label but make it available to assistive technologies\n- When you provide help text via the `helpText` prop or an inline error message via the `error` prop, the help or error content is conveyed to screen reader users with the `aria-describedby` attribute\n\n### Keyboard support\n\n- Move focus to each checkbox using the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)\n- To interact with the checkbox when it has keyboard focus, press the <kbd>space</kbd> key\n\n<!-- /content-for -->\n",
  "Choice list": "\n\n# Choice list\n\nA choice list lets you create a list of grouped radio buttons or checkboxes.\nUse this component if you need to group together a related list of interactive\nchoices.\n\n---\n\n## Best practices\n\nChoice lists should:\n\n- Include a title that tells merchants what to do or explains the available options\n- Label options clearly based on what the option will do\n- Avoid mutually exclusive options when allowing multiple selection\n\n---\n\n## Content guidelines\n\n### List titles\n\nList titles should:\n\n- Help merchants understand how the items in the list are grouped together, or\n  should explain what kind of choice merchants are making\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nPick a shipping method\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nPick one\n\n</div></div>\n\n- Be concise and scannable:\n  - Use simple, clear language that can be read at a glance\n  - Keep list titles to a single sentence\n  - It the title introduces the list, it should end with a colon\n  - Should be written in sentence case\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nShipping options\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nShipping Options\n\n</div></div>\n\n- Not use colons\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nIf the customer abandons their checkout, send them an email reminder to complete their order\n\n<p>\n  <label><input type=\"radio\" name=\"foo\"> Never</label><br />\n  <label><input type=\"radio\" name=\"foo\"> 6 hours later</label><br />\n  <label><input type=\"radio\" name=\"foo\"> 24 hours later</label>\n</p>\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nIf the customer abandons their checkout, send them an email reminder to complete their order:\n\n<p>\n  <label><input type=\"radio\" name=\"bar\"> Never</label><br />\n  <label><input type=\"radio\" name=\"bar\"> 6 hours later</label><br />\n  <label><input type=\"radio\" name=\"bar\"> 24 hours later</label>\n</p>\n</div></div>\n\n### List choices\n\nEvery item in a choice list should:\n\n- Start with a capital letter\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Option 1\n- Option 2\n- Option 3\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- option 1\n- option 2\n- option 3\n\n</div></div>\n\n- Not use commas or semicolons at the end of each line\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Red\n- Yellow\n- Blue\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Red;\n- Yellow;\n- Blue.\n\n</div></div>\n\n- Be written in sentence case (the first word capitalized, the rest lowercase)\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Item one\n- Item two\n- Item three\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Item One\n- Item Two\n- Item Three\n\n</div></div>\n\n### Helper text and descriptions\n\nIf your list contains helper text, only the description below the list item should contain punctuation.\n\n---\n\n## Examples\n\n### Single choice list\n\nAllows merchants to select one option from a list.\n\n- Make sure all options are an either/or choice.\n\n```jsx\nfunction SingleChoiceListExample() {\n  const [selected, setSelected] = useState(['hidden']);\n\n  const handleChange = useCallback((value) => setSelected(value), []);\n\n  return (\n    <ChoiceList\n      title=\"Company name\"\n      choices={[\n        {label: 'Hidden', value: 'hidden'},\n        {label: 'Optional', value: 'optional'},\n        {label: 'Required', value: 'required'},\n      ]}\n      selected={selected}\n      onChange={handleChange}\n    />\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Single choice list for Android](/images-from-old-styleguide/components/ChoiceList/android/single-choice@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Single choice list for iOS](/images-from-old-styleguide/components/ChoiceList/ios/single-choice@2x.png)\n\n<!-- /content-for -->\n\n### Single choice list with error\n\nAllows for accessible error handling by connecting the error message to the field with the error.\n\n```jsx\nfunction ChoiceListWithErrorExample() {\n  const [selected, setSelected] = useState('hidden');\n\n  const handleChange = useCallback((value) => setSelected(value), []);\n\n  return (\n    <ChoiceList\n      title=\"Company name\"\n      choices={[\n        {label: 'Hidden', value: 'hidden', describedByError: true},\n        {label: 'Optional', value: 'optional'},\n        {label: 'Required', value: 'required'},\n      ]}\n      selected={selected}\n      onChange={handleChange}\n      error=\"Company name cannot be hidden at this time\"\n    />\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Single choice list with error for Android](/images-from-old-styleguide/components/ChoiceList/android/single-choice-error@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Single choice list with error for iOS](/images-from-old-styleguide/components/ChoiceList/ios/single-choice-error@2x.png)\n\n<!-- /content-for -->\n\n### Multi-choice list\n\nAllows merchants to select multiple options from a list.\n\n- Avoid options that are an either/or choice.\n\n```jsx\nfunction MultiChoiceListExample() {\n  const [selected, setSelected] = useState(['hidden']);\n\n  const handleChange = useCallback((value) => setSelected(value), []);\n\n  return (\n    <ChoiceList\n      allowMultiple\n      title=\"While the customer is checking out\"\n      choices={[\n        {\n          label: 'Use the shipping address as the billing address by default',\n          value: 'shipping',\n          helpText:\n            'Reduces the number of fields required to check out. The billing address can still be edited.',\n        },\n        {\n          label: 'Require a confirmation step',\n          value: 'confirmation',\n          helpText:\n            'Customers must review their order details before purchasing.',\n        },\n      ]}\n      selected={selected}\n      onChange={handleChange}\n    />\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Multi choice list for Android](/images-from-old-styleguide/components/ChoiceList/android/multi-choice@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Multi choice list for iOS](/images-from-old-styleguide/components/ChoiceList/ios/multi-choice@2x.png)\n\n<!-- /content-for -->\n\n### Single-choice or multi-choice list with children content (always rendered)\n\n<!-- example-for: web -->\n\nUse when you need merchants to view and/or interact with additional content under a choice. The content will always be rendered. Works for both single-choice and multi-choice list.\n\n```jsx\nfunction SingleOrMultiChoiceListWithChildrenContextExample() {\n  const [selected, setSelected] = useState(['none']);\n  const [textFieldValue, setTextFieldValue] = useState('');\n\n  const handleChoiceListChange = useCallback((value) => setSelected(value), []);\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  const renderChildren = useCallback(\n    () => (\n      <TextField\n        label=\"Minimum Quantity\"\n        labelHidden\n        onChange={handleTextFieldChange}\n        value={textFieldValue}\n        autoComplete=\"off\"\n      />\n    ),\n    [handleTextFieldChange, textFieldValue],\n  );\n\n  return (\n    <ChoiceList\n      title=\"Discount minimum requirements\"\n      choices={[\n        {label: 'None', value: 'none'},\n        {label: 'Minimum purchase', value: 'minimum_purchase'},\n        {\n          label: 'Minimum quantity',\n          value: 'minimum_quantity',\n          renderChildren,\n        },\n      ]}\n      selected={selected}\n      onChange={handleChoiceListChange}\n    />\n  );\n}\n```\n\n### Single-choice or multi-choice list with children content (only rendered when choice is selected)\n\n<!-- example-for: web -->\n\nUse when you need merchants to view and/or interact with additional content under a choice. The content is only rendered when the choice is selected. Works for both single-choice and multi-choice list.\n\n```jsx\nfunction SingleOrMultuChoiceListWithChildrenContextWhenSelectedExample() {\n  const [selected, setSelected] = useState(['none']);\n  const [textFieldValue, setTextFieldValue] = useState('');\n\n  const handleChoiceListChange = useCallback((value) => setSelected(value), []);\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  const renderChildren = useCallback(\n    (isSelected) =>\n      isSelected && (\n        <TextField\n          label=\"Minimum Quantity\"\n          labelHidden\n          onChange={handleTextFieldChange}\n          value={textFieldValue}\n          autoComplete=\"off\"\n        />\n      ),\n    [handleTextFieldChange, textFieldValue],\n  );\n\n  return (\n    <div style={{height: '150px'}}>\n      <ChoiceList\n        title=\"Discount minimum requirements\"\n        choices={[\n          {label: 'None', value: 'none'},\n          {label: 'Minimum purchase', value: 'minimum_purchase'},\n          {\n            label: 'Minimum quantity',\n            value: 'minimum_quantity',\n            renderChildren,\n          },\n        ]}\n        selected={selected}\n        onChange={handleChoiceListChange}\n      />\n    </div>\n  );\n}\n```\n\n---\n\n## Related components\n\n- To present a long list of radio buttons or when space is constrained, [use the select component](https://polaris.shopify.com/components/forms/select)\n- To build a group of radio buttons or checkboxes with a custom layout, use the [radio button component](https://polaris.shopify.com/components/forms/radio-button) or [checkbox component](https://polaris.shopify.com/components/forms/checkbox)\n- To display a simple, non-interactive list of related content, [use the list component](https://polaris.shopify.com/components/lists-and-tables/list)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nThe choice list component uses the accessibility features of the [checkbox](https://polaris.shopify.com/components/forms/checkbox) and [radio button](https://polaris.shopify.com/components/forms/radio-button) components.\n\n<!-- /content-for -->\n",
  "Collapsible": "\n\n# Collapsible\n\nThe collapsible component is used to put long sections of information under a block that merchants can expand or collapse.\n\n---\n\n## Best practices\n\nThe collapsible component should:\n\n- Be used for information that is lower priority or that merchants don’t need\n  to see all the time\n- Not be used to hide error messages or other critical information that requires\n  an immediate action\n\n---\n\n## Content guidelines\n\nCollapsible containers are cards with expandable and collapsible functionality, and should follow the content guidelines for [cards](https://polaris.shopify.com/components/structure/card#section-content-guidelines).\n\n---\n\n## Examples\n\n### Default collapsible component\n\nUse for a basic “show more” interaction when you need to display more content.\n\n```jsx\nfunction CollapsibleExample() {\n  const [open, setOpen] = useState(true);\n\n  const handleToggle = useCallback(() => setOpen((open) => !open), []);\n\n  return (\n    <div style={{height: '200px'}}>\n      <Card sectioned>\n        <Stack vertical>\n          <Button\n            onClick={handleToggle}\n            ariaExpanded={open}\n            ariaControls=\"basic-collapsible\"\n          >\n            Toggle\n          </Button>\n          <Collapsible\n            open={open}\n            id=\"basic-collapsible\"\n            transition={{duration: '500ms', timingFunction: 'ease-in-out'}}\n            expandOnPrint\n          >\n            <TextContainer>\n              <p>\n                Your mailing list lets you contact customers or visitors who\n                have shown an interest in your store. Reach out to them with\n                exclusive offers or updates about your products.\n              </p>\n              <Link url=\"#\">Test link</Link>\n            </TextContainer>\n          </Collapsible>\n        </Stack>\n      </Card>\n    </div>\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Collapsible on Android](/images-from-old-styleguide/components/Collapsible/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Collapsible on iOS](/images-from-old-styleguide/components/Collapsible/ios/default@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Related components\n\n- To control a collapsible component, use the [button](https://polaris.shopify.com/components/actions/button) component\n- To put long sections of information in a container that allows for scrolling, [use the scrollable component](https://polaris.shopify.com/components/behavior/scrollable)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nUse the collapsible component in conjunction with a [button](https://polaris.shopify.com/components/actions/button). Place the collapsible content immediately after the button that controls it, so merchants with vision or attention issues can easily discover what content is being affected.\n\n- Use the required `id` prop of the collapsible component to give the content a unique `id` value\n- Use the `ariaExpanded` prop on the button component to add an `aria-expanded` attribute, which conveys the expanded or collapsed state to screen reader users\n- Use the `ariaControls` prop on the button component, and set its value to the `id` value of the collapsible component\n\n<!-- /content-for -->\n",
  "Color picker": "\n\n# Color picker\n\nThe color picker is used to let merchants select a color visually. For\nexample, merchants use the color picker to customize the accent color of the\nemail templates for their shop.\n\n---\n\n## Best practices\n\n- Use the alpha slider if you want to allow merchants to be able to select a\n  transparent color\n\n---\n\n## Examples\n\n### Default color picker\n\nUse when merchants need to select a color to make the selection a visual\ntask rather than a technical one.\n\n```jsx\nfunction ColorPickerExample() {\n  const [color, setColor] = useState({\n    hue: 120,\n    brightness: 1,\n    saturation: 1,\n  });\n\n  return <ColorPicker onChange={setColor} color={color} />;\n}\n```\n\n### Colorpicker with transparent value\n\nUse when attached to a visual builder to allow the designated object to have a\ntransparent background that allows underlying objects to show through.\n\n```jsx\nfunction ColorPickerWithTransparentValueExample() {\n  const [color, setColor] = useState({\n    hue: 300,\n    brightness: 1,\n    saturation: 0.7,\n    alpha: 0.7,\n  });\n\n  return <ColorPicker onChange={setColor} color={color} allowAlpha />;\n}\n```\n\n### Colorpicker with transparent value full width\n\nUse when attached to a visual builder to allow the designated object to have a\ntransparent background that allows underlying objects to show through.\n\n```jsx\nfunction ColorPickerWithTransparentValueExample() {\n  const [color, setColor] = useState({\n    hue: 300,\n    brightness: 1,\n    saturation: 0.7,\n    alpha: 0.7,\n  });\n\n  return <ColorPicker fullWidth onChange={setColor} color={color} allowAlpha />;\n}\n```\n",
  "Combobox": "\n\n# Combobox\n\nCombobox uses an enhanced text field that allows merchants to filter through a list of options to pick one or more values. The list of options is displayed when a merchant focuses on the field.\n\n---\n\n## Anatomy\n\n![A diagram of the Combobox component showing the smaller primitive components it is composed of.](/images-from-old-styleguide/components/Combobox/combobox-anatomy.png)\n\nA combobox is made up of the following:\n\n1. **Text field**: The field people click in to activate the popover and filter through the options they can choose from. Once selected, the option will be shown in the text input.\n2. **Popover**: Renders to contain the Listbox.\n3. **Listbox**: Contains the list of all selectable items.\n4. **Listbox** options: The individual options that merchants can select. For context on ways the Listbox can be composed with various content, check out the [listbox documentation](https://polaris.shopify.com/components/forms/listbox).\n\n---\n\n## Best practices\n\nThe `Combobox` component should:\n\n- Be clearly labeled so the merchant knows what type of options will be available\n- Not be used within a popover\n- Indicate a loading state to the merchant while option data is being populated\n- Order items in an intentional way so it’s easy for the merchant to find a specific value\n\n---\n\n## Content guidelines\n\nThe input field for `Combobox` should follow the [content guidelines](https://polaris.shopify.com/components/forms/text-field) for text fields.\n\n---\n\n## Sorting and filtering\n\n### Sorting\n\nItem order should be intentional. Order them so it’s easy for the merchant to find a specific value. Some ways you can do this:\n\n- Sort options in alphabetical order\n- Display options based on how frequently the merchant selects an option\n\nIf multiple options can be selected, move selected items to the top of the list. If this doesn’t work for your context, you can override this behavior.\n\n### Filtering\n\n- By default, menu items are filtered based on whether or not they match the value of the textfield.\n- Filters are **not** case-sensitive by default.\n- You can apply custom filtering logic if the default behavior doesn’t make sense for your use case.\n\n---\n\n## Patterns\n\n### Tags autocomplete\n\nThe tag multiselect allows merchants to select, create, and browse from a long list of options.\n\n---\n\n## Examples\n\n### Single select autocomplete\n\nAllows merchants to select from a predefined list of options. It’s typically used when there are a large number of options to choose from.\n\n```jsx\nfunction ComboboxExample() {\n  const deselectedOptions = useMemo(\n    () => [\n      {value: 'rustic', label: 'Rustic'},\n      {value: 'antique', label: 'Antique'},\n      {value: 'vinyl', label: 'Vinyl'},\n      {value: 'vintage', label: 'Vintage'},\n      {value: 'refurbished', label: 'Refurbished'},\n    ],\n    [],\n  );\n\n  const [selectedOption, setSelectedOption] = useState();\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n\n  const updateText = useCallback(\n    (value) => {\n      setInputValue(value);\n\n      if (value === '') {\n        setOptions(deselectedOptions);\n        return;\n      }\n\n      const filterRegex = new RegExp(value, 'i');\n      const resultOptions = deselectedOptions.filter((option) =>\n        option.label.match(filterRegex),\n      );\n      setOptions(resultOptions);\n    },\n    [deselectedOptions],\n  );\n\n  const updateSelection = useCallback(\n    (selected) => {\n      const matchedOption = options.find((option) => {\n        return option.value.match(selected);\n      });\n\n      setSelectedOption(selected);\n      setInputValue((matchedOption && matchedOption.label) || '');\n    },\n    [options],\n  );\n\n  const optionsMarkup =\n    options.length > 0\n      ? options.map((option) => {\n          const {label, value} = option;\n\n          return (\n            <Listbox.Option\n              key={`${value}`}\n              value={value}\n              selected={selectedOption === value}\n              accessibilityLabel={label}\n            >\n              {label}\n            </Listbox.Option>\n          );\n        })\n      : null;\n\n  return (\n    <div style={{height: '225px'}}>\n      <Combobox\n        activator={\n          <Combobox.TextField\n            prefix={<Icon source={SearchMinor} color=\"inkLighter\" />}\n            onChange={updateText}\n            label=\"Search tags\"\n            labelHidden\n            value={inputValue}\n            placeholder=\"Search tags\"\n          />\n        }\n      >\n        {options.length > 0 ? (\n          <Listbox onSelect={updateSelection}>{optionsMarkup}</Listbox>\n        ) : null}\n      </Combobox>\n    </div>\n  );\n}\n```\n\n### Multi-select autocomplete\n\nAllows the merchant to select multiple options from a pre-defined list of options.\n\n```jsx\nfunction MultiComboboxExample() {\n  const deselectedOptions = useMemo(\n    () => [\n      {value: 'rustic', label: 'Rustic'},\n      {value: 'antique', label: 'Antique'},\n      {value: 'vinyl', label: 'Vinyl'},\n      {value: 'vintage', label: 'Vintage'},\n      {value: 'refurbished', label: 'Refurbished'},\n    ],\n    [],\n  );\n\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n\n  const updateText = useCallback(\n    (value) => {\n      setInputValue(value);\n\n      if (value === '') {\n        setOptions(deselectedOptions);\n        return;\n      }\n\n      const filterRegex = new RegExp(value, 'i');\n      const resultOptions = deselectedOptions.filter((option) =>\n        option.label.match(filterRegex),\n      );\n      setOptions(resultOptions);\n    },\n    [deselectedOptions],\n  );\n\n  const updateSelection = useCallback(\n    (selected) => {\n      if (selectedOptions.includes(selected)) {\n        setSelectedOptions(\n          selectedOptions.filter((option) => option !== selected),\n        );\n      } else {\n        setSelectedOptions([...selectedOptions, selected]);\n      }\n\n      const matchedOption = options.find((option) => {\n        return option.value.match(selected);\n      });\n      setInputValue((matchedOption && matchedOption.label) || '');\n    },\n    [options, selectedOptions],\n  );\n\n  const removeTag = useCallback(\n    (tag) => () => {\n      const options = [...selectedOptions];\n      options.splice(options.indexOf(tag), 1);\n      setSelectedOptions(options);\n    },\n    [selectedOptions],\n  );\n\n  const tagsMarkup = selectedOptions.map((option) => {\n    let tagLabel = '';\n    tagLabel = option.replace('_', ' ');\n    tagLabel = titleCase(tagLabel);\n    return (\n      <Tag key={`option${option}`} onRemove={removeTag(option)}>\n        {tagLabel}\n      </Tag>\n    );\n  });\n\n  const optionsMarkup =\n    options.length > 0\n      ? options.map((option) => {\n          const {label, value} = option;\n\n          return (\n            <Listbox.Option\n              key={`${value}`}\n              value={value}\n              selected={selectedOptions.includes(value)}\n              accessibilityLabel={label}\n            >\n              {label}\n            </Listbox.Option>\n          );\n        })\n      : null;\n\n  return (\n    <div style={{height: '225px'}}>\n      <Combobox\n        allowMultiple\n        activator={\n          <Combobox.TextField\n            prefix={<Icon source={SearchMinor} color=\"inkLighter\" />}\n            onChange={updateText}\n            label=\"Search tags\"\n            labelHidden\n            value={inputValue}\n            placeholder=\"Search tags\"\n          />\n        }\n      >\n        {optionsMarkup ? (\n          <Listbox onSelect={updateSelection}>{optionsMarkup}</Listbox>\n        ) : null}\n      </Combobox>\n      <TextContainer>\n        <Stack>{tagsMarkup}</Stack>\n      </TextContainer>\n    </div>\n  );\n\n  function titleCase(string) {\n    return string\n      .toLowerCase()\n      .split(' ')\n      .map((word) => word.replace(word[0], word[0].toUpperCase()))\n      .join('');\n  }\n}\n```\n\n### Multi-select autocomplete with vertical content\n\nAllows the merchant to select multiple options from a pre-defined list of options. Selected options are displayed as inline vertical content in the TextField.\n\n```jsx\nfunction MultiVerticalContentComboboxExample() {\n  const deselectedOptions = useMemo(\n    () => [\n      {value: 'rustic', label: 'Rustic'},\n      {value: 'antique', label: 'Antique'},\n      {value: 'vinyl', label: 'Vinyl'},\n      {value: 'vintage', label: 'Vintage'},\n      {value: 'refurbished', label: 'Refurbished'},\n    ],\n    [],\n  );\n\n  const [selectedOptions, setSelectedOptions] = useState(['rustic']);\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n\n  const updateText = useCallback(\n    (value) => {\n      setInputValue(value);\n\n      if (value === '') {\n        setOptions(deselectedOptions);\n        return;\n      }\n\n      const filterRegex = new RegExp(value, 'i');\n      const resultOptions = deselectedOptions.filter((option) =>\n        option.label.match(filterRegex),\n      );\n      setOptions(resultOptions);\n    },\n    [deselectedOptions],\n  );\n\n  const updateSelection = useCallback(\n    (selected) => {\n      if (selectedOptions.includes(selected)) {\n        setSelectedOptions(\n          selectedOptions.filter((option) => option !== selected),\n        );\n      } else {\n        setSelectedOptions([...selectedOptions, selected]);\n      }\n\n      const matchedOption = options.find((option) => {\n        return option.value.match(selected);\n      });\n      setInputValue((matchedOption && matchedOption.label) || '');\n    },\n    [options, selectedOptions],\n  );\n\n  const removeTag = useCallback(\n    (tag) => () => {\n      const options = [...selectedOptions];\n      options.splice(options.indexOf(tag), 1);\n      setSelectedOptions(options);\n    },\n    [selectedOptions],\n  );\n\n  const verticalContentMarkup =\n    selectedOptions.length > 0 ? (\n      <Stack spacing=\"extraTight\" alignment=\"center\">\n        {selectedOptions.map((option) => {\n          let tagLabel = '';\n          tagLabel = option.replace('_', ' ');\n          tagLabel = titleCase(tagLabel);\n          return (\n            <Tag key={`option${option}`} onRemove={removeTag(option)}>\n              {tagLabel}\n            </Tag>\n          );\n        })}\n      </Stack>\n    ) : null;\n\n  const optionsMarkup =\n    options.length > 0\n      ? options.map((option) => {\n          const {label, value} = option;\n\n          return (\n            <Listbox.Option\n              key={`${value}`}\n              value={value}\n              selected={selectedOptions.includes(value)}\n              accessibilityLabel={label}\n            >\n              {label}\n            </Listbox.Option>\n          );\n        })\n      : null;\n\n  return (\n    <div style={{height: '225px'}}>\n      <Combobox\n        allowMultiple\n        activator={\n          <Combobox.TextField\n            onChange={updateText}\n            label=\"Search tags\"\n            labelHidden\n            value={inputValue}\n            placeholder=\"Search tags\"\n            verticalContent={verticalContentMarkup}\n          />\n        }\n      >\n        {optionsMarkup ? (\n          <Listbox onSelect={updateSelection}>{optionsMarkup}</Listbox>\n        ) : null}\n      </Combobox>\n    </div>\n  );\n\n  function titleCase(string) {\n    return string\n      .toLowerCase()\n      .split(' ')\n      .map((word) => word.replace(word[0], word[0].toUpperCase()))\n      .join('');\n  }\n}\n```\n\n### Autocomplete with loading\n\nUse to indicate loading state to merchants while option data is processing.\n\n```jsx\nfunction LoadingAutocompleteExample() {\n  const deselectedOptions = useMemo(\n    () => [\n      {value: 'rustic', label: 'Rustic'},\n      {value: 'antique', label: 'Antique'},\n      {value: 'vinyl', label: 'Vinyl'},\n      {value: 'vintage', label: 'Vintage'},\n      {value: 'refurbished', label: 'Refurbished'},\n    ],\n    [],\n  );\n\n  const [selectedOption, setSelectedOption] = useState();\n  const [inputValue, setInputValue] = useState('');\n  const [options, setOptions] = useState(deselectedOptions);\n  const [loading, setLoading] = useState(false);\n\n  const updateText = useCallback(\n    (value) => {\n      setInputValue(value);\n\n      if (!loading) {\n        setLoading(true);\n      }\n\n      setTimeout(() => {\n        if (value === '') {\n          setOptions(deselectedOptions);\n          setLoading(false);\n          return;\n        }\n        const filterRegex = new RegExp(value, 'i');\n        const resultOptions = options.filter((option) =>\n          option.label.match(filterRegex),\n        );\n        setOptions(resultOptions);\n        setLoading(false);\n      }, 300);\n    },\n    [deselectedOptions, loading, options],\n  );\n\n  const updateSelection = useCallback(\n    (selected) => {\n      const matchedOption = options.find((option) => {\n        return option.value.match(selected);\n      });\n\n      setSelectedOption(selected);\n      setInputValue((matchedOption && matchedOption.label) || '');\n    },\n    [options],\n  );\n\n  const optionsMarkup =\n    options.length > 0\n      ? options.map((option) => {\n          const {label, value} = option;\n\n          return (\n            <Listbox.Option\n              key={`${value}`}\n              value={value}\n              selected={selectedOption === value}\n              accessibilityLabel={label}\n            >\n              {label}\n            </Listbox.Option>\n          );\n        })\n      : null;\n\n  const loadingMarkup = loading ? <Listbox.Loading /> : null;\n\n  const listboxMarkup =\n    optionsMarkup || loadingMarkup ? (\n      <Listbox onSelect={updateSelection}>\n        {optionsMarkup && !loading ? optionsMarkup : null}\n        {loadingMarkup}\n      </Listbox>\n    ) : null;\n\n  return (\n    <Combobox\n      activator={\n        <Combobox.TextField\n          prefix={<Icon source={SearchMinor} color=\"inkLighter\" />}\n          onChange={updateText}\n          label=\"Search tags\"\n          labelHidden\n          value={inputValue}\n          placeholder=\"Search tags\"\n        />\n      }\n    >\n      {listboxMarkup}\n    </Combobox>\n  );\n}\n```\n\n---\n\n## Related components\n\n- For an input field without suggested options, [use the text field component](https://polaris.shopify.com/components/forms/text-field)\n- For a list of selectable options not linked to an input field, [use the list box component](https://polaris.shopify.com/components/lists-and-tables/listbox)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n### Structure\n\nThe `Combobox` component is based on the [ARIA 1.2 combobox pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#combobox). It is a combination of a single-line `TextField` and a `Popover`. The current implementation expects a [`Listbox`](https://polaris.shopify.com/components/lists-and-tables/listbox) component to be used.\n\nThe `Combobox` popover displays below the text field or other control by default so it is easy for merchants to discover and use. However, you can change the position with the `preferredPosition` prop.\n\n`Combobox` features can be challenging for merchants with visual, motor, and cognitive disabilities. Even when they’re built using best practices, these features can be difficult to use with some assistive technologies. Merchants should always be able to search, enter data, or perform other activities without relying on the combobox.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Use combobox as progressive enhancement to make the interface easier to use for most merchants.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Require that merchants make a selection from the combobox to complete a task.\n\n</div></div>\n\n### Keyboard support\n\n- Give the combobox's text input keyboard focus with the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)\n\n<!-- /content-for -->\n",
  "Contextual save bar": "\n\n# Contextual Save Bar\n\nThe contextual save bar tells merchants their options once they have made changes to a form on the page. This component is also shown while creating a new object like a product or customer. Merchants can use this component to save or discard their work.\n\n---\n\n## Required components\n\nThe contextual save bar component must be wrapped in the [frame](https://polaris.shopify.com/components/structure/frame) component.\n\n---\n\n## Best practices\n\nThe contextual save bar component should:\n\n- Become visible when a form on the page has unsaved changes\n- Be used to save or discard in-progress changes\n- Provide brief and helpful context on the nature of in-progress changes\n- Save all changes on the page. Avoid scenarios where multiple forms on a single page can be edited at the same time. If specific sections of a page need to be independently editable, use an Edit button to launch a [modal dialog](https://polaris.shopify.com/components/overlays/modal) for each section where changes can be made and saved.\n\n---\n\n## Content guidelines\n\nMessages in the contextual save bar component should be informative, clear, and concise. They should follow the {adjective}+{noun} pattern. Don’t use full sentences.\n\nThe standard message content is\n\n- “Unsaved changes” when editing existing content\n- “Unsaved {resource name}” when creating a new object\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Unsaved changes\n- Unsaved product\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- You have unsaved changes\n- Red and white striped shirt not yet saved\n\n</div></div>\n\nActions in the contextual save bar component should consist of a strong verb that encourages action. They should not include a noun.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Save\n- Discard\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Save changes\n- Discard changes\n\n</div></div>\n\n---\n\n## Examples\n\n### Default contextual save bar\n\nUse the save action to provide an opportunity to save changes. Use the discard action to allow merchants the option to discard their changes. Use the message to provide helpful context on the nature of those changes.\n\n```jsx\n<div style={{height: '250px'}}>\n  <Frame\n    logo={{\n      width: 124,\n      contextualSaveBarSource:\n        'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-gray.svg?6215648040070010999',\n    }}\n  >\n    <ContextualSaveBar\n      message=\"Unsaved changes\"\n      saveAction={{\n        onAction: () => console.log('add form submit logic'),\n        loading: false,\n        disabled: false,\n      }}\n      discardAction={{\n        onAction: () => console.log('add clear form logic'),\n      }}\n    />\n  </Frame>\n</div>\n```\n\n### Contextual save bar during creation\n\nUse the save action to provide an opportunity to save a newly-created resource. Use the discard action to allow merchants the option to discard a new resource. Use the message to provide helpful context on the nature of the new resource.\n\n```jsx\n<div style={{height: '250px'}}>\n  <Frame\n    logo={{\n      width: 124,\n      contextualSaveBarSource:\n        'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-gray.svg?6215648040070010999',\n    }}\n  >\n    <ContextualSaveBar\n      message=\"Unsaved product\"\n      saveAction={{\n        onAction: () => console.log('add form submit logic'),\n        loading: false,\n        disabled: false,\n      }}\n      discardAction={{\n        onAction: () => console.log('add clear form logic'),\n      }}\n    />\n  </Frame>\n</div>\n```\n\n### Contextual save bar with flush contents\n\nUse the alignContentFlush flag when you want to omit the logo from the contextual save bar and\nrepurpose that space to extend the message contents fully to the left side of the container.\n\n```jsx\n<div style={{height: '250px'}}>\n  <Frame\n    logo={{\n      width: 124,\n      contextualSaveBarSource:\n        'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-gray.svg?6215648040070010999',\n    }}\n  >\n    <ContextualSaveBar\n      alignContentFlush\n      message=\"Unsaved changes\"\n      saveAction={{\n        onAction: () => console.log('add form submit logic'),\n      }}\n      discardAction={{\n        onAction: () => console.log('add clear form logic'),\n      }}\n    />\n  </Frame>\n</div>\n```\n\n### Contextual save bar full width\n\nUse the fullWidth flag when you want to remove the default max-width set on the contextual save bar.\n\n```jsx\n<div style={{height: '250px'}}>\n  <Frame\n    logo={{\n      width: 124,\n      contextualSaveBarSource:\n        'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-gray.svg?6215648040070010999',\n    }}\n  >\n    <ContextualSaveBar\n      fullWidth\n      message=\"Unsaved changes\"\n      saveAction={{\n        onAction: () => console.log('add form submit logic'),\n        loading: false,\n        disabled: false,\n      }}\n      discardAction={{\n        onAction: () => console.log('add clear form logic'),\n      }}\n    />\n  </Frame>\n</div>\n```\n\n---\n\n## Related components\n\n- To wrap your entire application, [use the frame component](https://polaris.shopify.com/components/structure/frame)\n- To build the outer wrapper of a page, including page title and associated actions, [use the page component](https://polaris.shopify.com/components/structure/page)\n- To wrap form elements and handle the submission of a form, [use the form component](https://polaris.shopify.com/components/forms/form)\n",
  "CustomProperties": "\n\n# Custom Properties\n\nUse the custom properties component to share global theme settings throughout the hierarchy of your application. Custom properties is included by default as a child of the [app provider component](https://polaris.shopify.com/components/structure/app-provider) but can be used independently to apply a base color scheme to its children.\n\n---\n\n## Examples\n\n### Custom properties rendered by the app provider\n\nThe app provider component renders a CustomProperties component with the default color scheme.\n\n```jsx\n<AppProvider i18n={{}}>\n  <Card\n    title=\"Shipment 1234\"\n    secondaryFooterActions={[{content: 'Edit shipment'}]}\n    primaryFooterAction={{content: 'Add tracking number'}}\n  >\n    <Card.Section title=\"Items\">\n      <List>\n        <List.Item>1 × Oasis Glass, 4-Pack</List.Item>\n        <List.Item>1 × Anubis Cup, 2-Pack</List.Item>\n      </List>\n    </Card.Section>\n  </Card>\n</AppProvider>\n```\n\n### Custom properties with a color scheme rendered by the app provider\n\nA color scheme can be passed to the app provider to determine what color scheme is globally applied to the application.\n\n```jsx\n<AppProvider i18n={{}} colorScheme=\"dark\">\n  <Card\n    title=\"Shipment 1234\"\n    secondaryFooterActions={[{content: 'Edit shipment'}]}\n    primaryFooterAction={{content: 'Add tracking number'}}\n  >\n    <Card.Section title=\"Items\">\n      <List>\n        <List.Item>1 × Oasis Glass, 4-Pack</List.Item>\n        <List.Item>1 × Anubis Cup, 2-Pack</List.Item>\n      </List>\n    </Card.Section>\n  </Card>\n</AppProvider>\n```\n\n### Custom properties with a different color scheme nested within an app provider\n\nCustom properties can be nested within the custom properties rendered by the app provider in order to override the color scheme at a local level.\n\n```jsx\n<AppProvider i18n={{}}>\n  <TextContainer>\n    <Card\n      title=\"Shipment 1234\"\n      secondaryFooterActions={[{content: 'Edit shipment'}]}\n      primaryFooterAction={{content: 'Add tracking number'}}\n    >\n      <Card.Section title=\"Items\">\n        <List>\n          <List.Item>1 × Oasis Glass, 4-Pack</List.Item>\n          <List.Item>1 × Anubis Cup, 2-Pack</List.Item>\n        </List>\n      </Card.Section>\n    </Card>\n    <CustomProperties colorScheme=\"dark\">\n      <Card\n        title=\"Shipment 1234\"\n        secondaryFooterActions={[{content: 'Edit shipment'}]}\n        primaryFooterAction={{content: 'Add tracking number'}}\n      >\n        <Card.Section title=\"Items\">\n          <List>\n            <List.Item>1 × Oasis Glass, 4-Pack</List.Item>\n            <List.Item>1 × Anubis Cup, 2-Pack</List.Item>\n          </List>\n        </Card.Section>\n      </Card>\n    </CustomProperties>\n  </TextContainer>\n</AppProvider>\n```\n\n---\n\n## Consuming custom properties colors in a component\n\nThe CustomProperties component uses [CSS custom properties](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) to share color values with components. For a full list of available CSS custom properties, see the [Polaris tokens docs](https://github.com/Shopify/polaris-react/blob/main/documentation/Color%20system.md).\n\n```scss\n.Card {\n  background-color: var(--p-surface);\n  box-shadow: var(--p-shadow-card);\n  border-radius: var(--p-border-radius-2);\n}\n```\n\n---\n\n## Related components\n\n- To share global settings throughout the hierarchy of your application, [use the app provider component](https://polaris.shopify.com/components/structure/app-provider)\n",
  "Data table": "\n\n# Data table\n\nData tables are used to organize and display all information from a data set. While a data visualization represents part of data set, a data table lets merchants view details from the entire set. This helps merchants compare and analyze the data.\n\n---\n\n## Examples\n\n### Default data table\n\nUse to present small amounts of data for merchants to view statically.\n\n```jsx\nfunction DataTableExample() {\n  const rows = [\n    ['Emerald Silk Gown', '$875.00', 124689, 140, '$122,500.00'],\n    ['Mauve Cashmere Scarf', '$230.00', 124533, 83, '$19,090.00'],\n    [\n      'Navy Merino Wool Blazer with khaki chinos and yellow belt',\n      '$445.00',\n      124518,\n      32,\n      '$14,240.00',\n    ],\n  ];\n\n  return (\n    <Page title=\"Sales by product\">\n      <Card>\n        <DataTable\n          columnContentTypes={[\n            'text',\n            'numeric',\n            'numeric',\n            'numeric',\n            'numeric',\n          ]}\n          headings={[\n            'Product',\n            'Price',\n            'SKU Number',\n            'Net quantity',\n            'Net sales',\n          ]}\n          rows={rows}\n          totals={['', '', '', 255, '$155,830.00']}\n        />\n      </Card>\n    </Page>\n  );\n}\n```\n\n### Sortable data table\n\nUse when clarity of the table’s content is needed. For example, to note the number of rows currently shown in a data table with pagination.\n\n```jsx\nfunction SortableDataTableExample() {\n  const [sortedRows, setSortedRows] = useState(null);\n\n  const initiallySortedRows = [\n    ['Emerald Silk Gown', '$875.00', 124689, 140, '$122,500.00'],\n    ['Mauve Cashmere Scarf', '$230.00', 124533, 83, '$19,090.00'],\n    [\n      'Navy Merino Wool Blazer with khaki chinos and yellow belt',\n      '$445.00',\n      124518,\n      32,\n      '$14,240.00',\n    ],\n  ];\n  const rows = sortedRows ? sortedRows : initiallySortedRows;\n\n  const handleSort = useCallback(\n    (index, direction) => setSortedRows(sortCurrency(rows, index, direction)),\n    [rows],\n  );\n\n  return (\n    <Page title=\"Sales by product\">\n      <Card>\n        <DataTable\n          columnContentTypes={[\n            'text',\n            'numeric',\n            'numeric',\n            'numeric',\n            'numeric',\n          ]}\n          headings={[\n            'Product',\n            'Price',\n            'SKU Number',\n            'Net quantity',\n            'Net sales',\n          ]}\n          rows={rows}\n          totals={['', '', '', 255, '$155,830.00']}\n          sortable={[false, true, false, false, true]}\n          defaultSortDirection=\"descending\"\n          initialSortColumnIndex={4}\n          onSort={handleSort}\n        />\n      </Card>\n    </Page>\n  );\n\n  function sortCurrency(rows, index, direction) {\n    return [...rows].sort((rowA, rowB) => {\n      const amountA = parseFloat(rowA[index].substring(1));\n      const amountB = parseFloat(rowB[index].substring(1));\n\n      return direction === 'descending' ? amountB - amountA : amountA - amountB;\n    });\n  }\n}\n```\n\n### Data table with footer\n\nUse when clarity of the table’s content is needed. For example, to note the number of rows currently shown in a data table with pagination.\n\n```jsx\nfunction DataTableFooterExample() {\n  const rows = [\n    ['Emerald Silk Gown', '$875.00', 124689, 140, '$122,500.00'],\n    ['Mauve Cashmere Scarf', '$230.00', 124533, 83, '$19,090.00'],\n    [\n      'Navy Merino Wool Blazer with khaki chinos and yellow belt',\n      '$445.00',\n      124518,\n      32,\n      '$14,240.00',\n    ],\n  ];\n\n  return (\n    <Page title=\"Sales by product\">\n      <Card>\n        <DataTable\n          columnContentTypes={[\n            'text',\n            'numeric',\n            'numeric',\n            'numeric',\n            'numeric',\n          ]}\n          headings={[\n            'Product',\n            'Price',\n            'SKU Number',\n            'Net quantity',\n            'Net sales',\n          ]}\n          rows={rows}\n          totals={['', '', '', 255, '$155,830.00']}\n          footerContent={`Showing ${rows.length} of ${rows.length} results`}\n        />\n      </Card>\n    </Page>\n  );\n}\n```\n\n### Data table with custom totals heading\n\nUse to provide a custom heading for the totals row.\n\n```jsx\nfunction DataTableExample() {\n  const rows = [\n    ['Emerald Silk Gown', '$875.00', 124689, 140, '$122,500.00'],\n    ['Mauve Cashmere Scarf', '$230.00', 124533, 83, '$19,090.00'],\n    [\n      'Navy Merino Wool Blazer with khaki chinos and yellow belt',\n      '$445.00',\n      124518,\n      32,\n      '$14,240.00',\n    ],\n  ];\n\n  return (\n    <Page title=\"Sales by product\">\n      <Card>\n        <DataTable\n          showTotalsInFooter\n          columnContentTypes={[\n            'text',\n            'numeric',\n            'numeric',\n            'numeric',\n            'numeric',\n          ]}\n          headings={[\n            'Product',\n            'Price',\n            'SKU Number',\n            'Net quantity',\n            'Net sales',\n          ]}\n          rows={rows}\n          totals={['', '', '', '', '$155,830.00']}\n          totalsName={{\n            singular: 'Total net sales',\n            plural: 'Total net sales',\n          }}\n        />\n      </Card>\n    </Page>\n  );\n}\n```\n\n### Data table with totals in footer\n\nUse to reposition the totals row in a more appropriate location based on the data stored in the\ntable for merchants to better understand its meaning.\n\n```jsx\nfunction DataTableExample() {\n  const rows = [\n    ['Emerald Silk Gown', '$875.00', 124689, 140, '$122,500.00'],\n    ['Mauve Cashmere Scarf', '$230.00', 124533, 83, '$19,090.00'],\n    [\n      'Navy Merino Wool Blazer with khaki chinos and yellow belt',\n      '$445.00',\n      124518,\n      32,\n      '$14,240.00',\n    ],\n  ];\n\n  return (\n    <Page title=\"Sales by product\">\n      <Card>\n        <DataTable\n          columnContentTypes={[\n            'text',\n            'numeric',\n            'numeric',\n            'numeric',\n            'numeric',\n          ]}\n          headings={[\n            'Product',\n            'Price',\n            'SKU Number',\n            'Net quantity',\n            'Net sales',\n          ]}\n          rows={rows}\n          totals={['', '', '', 255, '$155,830.00']}\n          showTotalsInFooter\n        />\n      </Card>\n    </Page>\n  );\n}\n```\n\n### Data table with row heading links\n\nUse to help merchants find relevant, finer grained data sets.\n\n```jsx\nfunction DataTableLinkExample() {\n  const rows = [\n    [\n      <Link\n        removeUnderline\n        url=\"https://www.example.com\"\n        key=\"emerald-silk-gown\"\n      >\n        Emerald Silk Gown\n      </Link>,\n      '$875.00',\n      124689,\n      140,\n      '$122,500.00',\n    ],\n    [\n      <Link\n        removeUnderline\n        url=\"https://www.example.com\"\n        key=\"mauve-cashmere-scarf\"\n      >\n        Mauve Cashmere Scarf\n      </Link>,\n      '$230.00',\n      124533,\n      83,\n      '$19,090.00',\n    ],\n    [\n      <Link\n        removeUnderline\n        url=\"https://www.example.com\"\n        key=\"navy-merino-wool\"\n      >\n        Navy Merino Wool Blazer with khaki chinos and yellow belt\n      </Link>,\n      '$445.00',\n      124518,\n      32,\n      '$14,240.00',\n    ],\n  ];\n\n  return (\n    <Page title=\"Sales by product\">\n      <Card>\n        <DataTable\n          columnContentTypes={[\n            'text',\n            'numeric',\n            'numeric',\n            'numeric',\n            'numeric',\n          ]}\n          headings={['Product', 'Price', 'SKU Number', 'Quantity', 'Net sales']}\n          rows={rows}\n          totals={['', '', '', 255, '$155,830.00']}\n        />\n      </Card>\n    </Page>\n  );\n}\n```\n\n### Data table with all of its elements\n\nUse as a broad example that includes most props available to data table.\n\n```jsx\nfunction FullDataTableExample() {\n  const [sortedRows, setSortedRows] = useState(null);\n\n  const initiallySortedRows = [\n    [\n      <Link\n        removeUnderline\n        url=\"https://www.example.com\"\n        key=\"emerald-silk-gown\"\n      >\n        Emerald Silk Gown\n      </Link>,\n      '$875.00',\n      124689,\n      140,\n      '$121,500.00',\n    ],\n    [\n      <Link\n        removeUnderline\n        url=\"https://www.example.com\"\n        key=\"mauve-cashmere-scarf\"\n      >\n        Mauve Cashmere Scarf\n      </Link>,\n      '$230.00',\n      124533,\n      83,\n      '$19,090.00',\n    ],\n    [\n      <Link\n        removeUnderline\n        url=\"https://www.example.com\"\n        key=\"navy-merino-wool\"\n      >\n        Navy Merino Wool Blazer with khaki chinos and yellow belt\n      </Link>,\n      '$445.00',\n      124518,\n      32,\n      '$14,240.00',\n    ],\n  ];\n\n  const rows = sortedRows ? sortedRows : initiallySortedRows;\n  const handleSort = useCallback(\n    (index, direction) => setSortedRows(sortCurrency(rows, index, direction)),\n    [rows],\n  );\n\n  return (\n    <Page title=\"Sales by product\">\n      <Card>\n        <DataTable\n          columnContentTypes={[\n            'text',\n            'numeric',\n            'numeric',\n            'numeric',\n            'numeric',\n          ]}\n          headings={[\n            'Product',\n            'Price',\n            'SKU Number',\n            'Net quantity',\n            'Net sales',\n          ]}\n          rows={rows}\n          totals={['', '', '', 255, '$155,830.00']}\n          sortable={[false, true, false, false, true]}\n          defaultSortDirection=\"descending\"\n          initialSortColumnIndex={4}\n          onSort={handleSort}\n          footerContent={`Showing ${rows.length} of ${rows.length} results`}\n        />\n      </Card>\n    </Page>\n  );\n\n  function sortCurrency(rows, index, direction) {\n    return [...rows].sort((rowA, rowB) => {\n      const amountA = parseFloat(rowA[index].substring(1));\n      const amountB = parseFloat(rowB[index].substring(1));\n\n      return direction === 'descending' ? amountB - amountA : amountA - amountB;\n    });\n  }\n}\n```\n\n### Data table with increased density and zebra striping\n\nUse as a broad example that includes most props available to data table.\n\n```jsx\nfunction FullDataTableExample() {\n  const [sortedRows, setSortedRows] = useState(null);\n\n  const initiallySortedRows = [\n    [\n      <Link\n        removeUnderline\n        url=\"https://www.example.com\"\n        key=\"emerald-silk-gown\"\n      >\n        Emerald Silk Gown\n      </Link>,\n      '$875.00',\n      124689,\n      140,\n      '$121,500.00',\n    ],\n    [\n      <Link\n        removeUnderline\n        url=\"https://www.example.com\"\n        key=\"mauve-cashmere-scarf\"\n      >\n        Mauve Cashmere Scarf\n      </Link>,\n      '$230.00',\n      124533,\n      83,\n      '$19,090.00',\n    ],\n    [\n      <Link\n        removeUnderline\n        url=\"https://www.example.com\"\n        key=\"navy-merino-wool\"\n      >\n        Navy Merino Wool Blazer with khaki chinos and yellow belt\n      </Link>,\n      '$445.00',\n      124518,\n      32,\n      '$14,240.00',\n    ],\n  ];\n\n  const rows = sortedRows ? sortedRows : initiallySortedRows;\n  const handleSort = useCallback(\n    (index, direction) => setSortedRows(sortCurrency(rows, index, direction)),\n    [rows],\n  );\n\n  return (\n    <Page title=\"Sales by product\">\n      <Card>\n        <DataTable\n          columnContentTypes={[\n            'text',\n            'numeric',\n            'numeric',\n            'numeric',\n            'numeric',\n          ]}\n          headings={[\n            'Product',\n            'Price',\n            'SKU Number',\n            'Net quantity',\n            'Net sales',\n          ]}\n          rows={rows}\n          totals={['', '', '', 255, '$155,830.00']}\n          sortable={[false, true, false, false, true]}\n          defaultSortDirection=\"descending\"\n          initialSortColumnIndex={4}\n          onSort={handleSort}\n          footerContent={`Showing ${rows.length} of ${rows.length} results`}\n          hasZebraStripingOnData\n          increasedTableDensity\n        />\n      </Card>\n    </Page>\n  );\n\n  function sortCurrency(rows, index, direction) {\n    return [...rows].sort((rowA, rowB) => {\n      const amountA = parseFloat(rowA[index].substring(1));\n      const amountB = parseFloat(rowB[index].substring(1));\n\n      return direction === 'descending' ? amountB - amountA : amountA - amountB;\n    });\n  }\n}\n```\n\n---\n\n## Best practices\n\nData tables should:\n\n- Show values across multiple categories and measures.\n- Allow for filtering and ordering when comparison is not a priority.\n- Help merchants visualize and scan many values from an entire data set.\n- Help merchants find other values in the data hierarchy through use of links.\n- Minimize clutter by only including values that supports the data’s purpose.\n- Include a summary row to surface the column totals.\n- Not include calculations within the summary row.\n- Wrap instead of truncate content. This is because if row titles start with the same word, they’ll all appear the same when truncated.\n- Not to be used for an actionable list of items that link to details pages. For this functionality, use the [resource list] component.\n\n### Alignment\n\nColumn content types are built into the component props so the following alignment rules are followed:\n\n- Numerical = Right aligned\n- Textual data = Left aligned\n- Align headers with their related data\n- Don’t center align\n\n---\n\n## Content guidelines\n\nHeaders should:\n\n- Be informative and descriptive\n- Concise and scannable\n- Include units of measurement symbols so they aren’t repeated throughout the columns\n- Use sentence case (first word capitalized, rest lowercase)\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nTemperature °C\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nTemperature\n\n</div></div>\n\nColumn content should:\n\n- Be concise and scannable\n- Not include units of measurement symbols (put those symbols in the headers)\n- Use sentence case (first word capitalized, rest lowercase)\n\n### Decimals\n\nKeep decimals consistent. For example, don’t use 3 decimals in one row and 2 in others.\n\n---\n\n## Related components\n\n- To create an actionable list of related items that link to details pages, such as a list of customers, use the [resource list component](https://polaris.shopify.com/components/lists-and-tables/resource-list).\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n### Structure\n\nNative HTML tables provide a large amount of structural information to screen reader users. Merchants who rely on screen readers can navigate tables and identify relationships between data cells (`<td>`) and headers (`<th>`) using keys specific to their screen reader.\n\nSortable tables use the `aria-sort` attribute to convey which columns are sortable (and in what direction). They also use `aria-label` on sorting buttons to convey what activating the button will do.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nUse tables for tabular data.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nUse tables for layout. For a table-like layout that doesn’t use table HTML elements, use the [resource list component](https://polaris.shopify.com/components/lists-and-tables/resource-list).\n\n</div></div>\n\n### Keyboard support\n\nSorting controls for the data table component are implemented with native HTML buttons.\n\n- Give buttons keyboard focus with the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)\n- Activate buttons with the <kbd>enter</kbd>/<kbd>return</kbd> and <kbd>space</kbd> keys\n\n<!-- /content-for -->\n",
  "Date picker": "\n\n# Date picker\n\nDate pickers let merchants choose dates from a visual calendar that’s\nconsistently applied wherever dates need to be selected across Shopify.\n\n---\n\n## Best practices\n\nDate pickers should:\n\n- Use smart defaults and highlight common selections\n- Close after a single date is selected unless a range with a start and end date is required\n- Set the start date on first click or tap and the end date on second click or tap if a range\n  is required\n- Not be used to enter a date that is many years in the future or the past\n- Follow [date format guidelines](https://polaris.shopify.com/content/grammar-and-mechanics#section-dates-numbers-and-addresses)\n\n---\n\n## Examples\n\n### Default date picker\n\nUse when merchants need to select a single day close to today (today is the default starting position for the date picker).\n\n```jsx\nfunction DatePickerExample() {\n  const [{month, year}, setDate] = useState({month: 1, year: 2018});\n  const [selectedDates, setSelectedDates] = useState({\n    start: new Date('Wed Feb 07 2018 00:00:00 GMT-0500 (EST)'),\n    end: new Date('Wed Feb 07 2018 00:00:00 GMT-0500 (EST)'),\n  });\n\n  const handleMonthChange = useCallback(\n    (month, year) => setDate({month, year}),\n    [],\n  );\n\n  return (\n    <DatePicker\n      month={month}\n      year={year}\n      onChange={setSelectedDates}\n      onMonthChange={handleMonthChange}\n      selected={selectedDates}\n    />\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Date picker on Android](/images-from-old-styleguide/components/DatePicker/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Date picker on iOS](/images-from-old-styleguide/components/DatePicker/ios/default@2x.png)\n\n<!-- /content-for -->\n\n### Ranged date picker\n\nUse when merchants need to select a range of days close to today (today is the default starting position for the date picker).\n\n```jsx\nfunction DatePickerExample() {\n  const [{month, year}, setDate] = useState({month: 1, year: 2018});\n  const [selectedDates, setSelectedDates] = useState({\n    start: new Date('Wed Feb 07 2018 00:00:00 GMT-0500 (EST)'),\n    end: new Date('Sat Feb 10 2018 00:00:00 GMT-0500 (EST)'),\n  });\n\n  const handleMonthChange = useCallback(\n    (month, year) => setDate({month, year}),\n    [],\n  );\n\n  return (\n    <DatePicker\n      month={month}\n      year={year}\n      onChange={setSelectedDates}\n      onMonthChange={handleMonthChange}\n      selected={selectedDates}\n      allowRange\n    />\n  );\n}\n```\n\n### Multi-month ranged date picker\n\nUse multi-month mode to show two months at a time.\n\n```jsx\nfunction DatePickerExample() {\n  const [{month, year}, setDate] = useState({month: 1, year: 2018});\n  const [selectedDates, setSelectedDates] = useState({\n    start: new Date('Wed Feb 07 2018 00:00:00 GMT-0500 (EST)'),\n    end: new Date('Mon Mar 12 2018 00:00:00 GMT-0500 (EST)'),\n  });\n\n  const handleMonthChange = useCallback(\n    (month, year) => setDate({month, year}),\n    [],\n  );\n\n  return (\n    <DatePicker\n      month={month}\n      year={year}\n      onChange={setSelectedDates}\n      onMonthChange={handleMonthChange}\n      selected={selectedDates}\n      multiMonth\n      allowRange\n    />\n  );\n}\n```\n\n### Date picker with disabled dates\n\nDate ranges may be disabed if you do not want them to be selectable\n\n```jsx\nfunction DatePickerExample() {\n  const [{month, year}, setDate] = useState({month: 1, year: 2018});\n  const [selectedDates, setSelectedDates] = useState({\n    start: new Date('Wed Feb 07 2018 00:00:00 GMT-0500 (EST)'),\n    end: new Date('Sat Feb 10 2018 00:00:00 GMT-0500 (EST)'),\n  });\n\n  const handleMonthChange = useCallback(\n    (month, year) => setDate({month, year}),\n    [],\n  );\n\n  return (\n    <DatePicker\n      month={month}\n      year={year}\n      onChange={setSelectedDates}\n      onMonthChange={handleMonthChange}\n      selected={selectedDates}\n      disableDatesBefore={new Date('Sat Feb 03 2018 00:00:00 GMT-0500 (EST)')}\n      disableDatesAfter={new Date('Sun Feb 18 2018 00:00:00 GMT-0500 (EST)')}\n      allowRange\n    />\n  );\n}\n```\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nSome users might find interacting with date pickers to be challenging. When you use the date picker component, always give users the option to enter the date using a text field component as well.\n\nIf you use the date picker within a [popover component](/components/overlays/popover), then use a button to trigger the popover instead of displaying the popover when the text input gets focus. This gives users more control over their experience.\n\n### Keyboard support\n\n- Press the <kbd>tab</kbd> key to move forward and <kbd>shift</kbd> + <kbd>tab</kbd> to move backward through the previous button, next button, and the calendar\n- When focus is in the calendar, move keyboard focus between the dates using the arrow keys\n- To select a date that has focus, press the <kbd>enter</kbd>/<kbd>return</kbd> key\n\n<!-- /content-for -->\n",
  "Description list": "\n\n# Description list\n\nDescription lists are a way to organize and explain related information.\nThey’re particularly useful when you need to list and define terms such as in a\nglossary.\n\n---\n\n## Best practices\n\nDescription lists should:\n\n- Contain terms and associated explanations, or descriptions for each term.\n- Provide information that isn’t action-oriented.\n- Not be an excuse for using unnecessarily complicated or jargon-filled\n  language. Generally, if merchants need a description list to understand the\n  language in Shopify, we should look for opportunities to simplify the language.\n- Not be used to upsell merchants on a feature or service.\n\n---\n\n## Content guidelines\n\n### Terms\n\nTerms should be:\n\n- Written in sentence case (the first word capitalized, the rest lowercase)\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Discount code\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Discount Code\n\n</div></div>\n\n### Term description\n\nTerms descriptions should be:\n\n- Directly related to the term they’re describing\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Discount code: A series of numbers and/or letters that an online shopper may enter at checkout\n  to get a discount or special offer.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Discount code: Having a sale on your store is a great way to sell products quickly.\n\n</div></div>\n\n- Written to describe the merchant benefit or utility\n- No more than one or two short sentences in length\n- Written in sentence case with all appropriate punctuation, including ending\n  each sentence with a period\n- Conversational by using articles (the, a, an)\n- Written using plain language\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Abandoned checkout: The details of a checkout that was started but not completed, including the\n  products added and the customer’s details.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Abandoned checkout: Details of products added to checkout but not purchased\n\n</div></div>\n\n---\n\n## Examples\n\n### Default description list\n\nUse when you need to present merchants with a list of items or terms alongside descriptions and explanations.\n\n```jsx\n<DescriptionList\n  items={[\n    {\n      term: 'Logistics',\n      description:\n        'The management of products or other resources as they travel between a point of origin and a destination.',\n    },\n    {\n      term: 'Sole proprietorship',\n      description:\n        'A business structure where a single individual both owns and runs the company.',\n    },\n    {\n      term: 'Discount code',\n      description:\n        'A series of numbers and/or letters that an online shopper may enter at checkout to get a discount or special offer.',\n    },\n  ]}\n/>\n```\n\n<!-- content-for: android -->\n\n![Description list for Android](/images-from-old-styleguide/components/DescriptionList/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Description list for iOS](/images-from-old-styleguide/components/DescriptionList/ios/default@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Related components\n\n- To create a list of actions or navigation, [use the action list component](https://polaris.shopify.com/components/actions/action-list).\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nThe description list component produces a description list wrapper (`<dl>`), terms (`<dt>`), and definitions (`<dd>`) to convey the relationships between the list items to assistive technology users.\n\n<!-- /content-for -->\n",
  "Display text": "\n\n# Display text\n\nDisplay styles make a bold visual statement. Use them to create impact when the\nmain goal is visual storytelling. For example, use display text to convince or\nreassure merchants such as in marketing content or to capture attention during onboarding.\n\n---\n\n## Best practices\n\n- Use when the primary goal of the page is communication rather than\n  interaction.\n- Use larger display text sizes when a page is focused around a single message.\n  In these cases it may be paired with an illustration.\n- Use smaller display text to pair with larger text, or alone as part of more\n  complex data displays such as dashboards.\n\n---\n\n## Content guidelines\n\n### Display text\n\nDisplay text should be:\n\n- Benefits-driven and focused on information that is most important to\n  merchants\n- Concise and scannable:\n  - Use simple, clear language that can be read at a glance\n  - Keep display text content to a short sentence that’s just a few words in\n    length\n  - Avoid using punctuation such as periods, commas, or semicolons\n  - Avoid using exclamation marks—display text already makes enough of a\n    statement without an exclamation mark\n  - Write in sentence case\n\n---\n\n## Examples\n\n### Extra large\n\nUse this size sparingly and never multiple times on the same page.\n\n```jsx\n<DisplayText size=\"extraLarge\">Good evening, Dominic.</DisplayText>\n```\n\n<!-- content-for: android -->\n\n![Extra large display text](/images-from-old-styleguide/components/DisplayText/android/extra-large@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Extra large display text](/images-from-old-styleguide/components/DisplayText/ios/extra-large@2x.png)\n\n<!-- /content-for -->\n\n### Large\n\n<!-- example-for: web -->\n\nUse for display text that’s more important than the medium size, but less important than extra large.\n\n```jsx\n<DisplayText size=\"large\">Good evening, Dominic.</DisplayText>\n```\n\n### Medium\n\nUse for display text that’s more important than the small size, but less important than large.\n\n```jsx\n<DisplayText size=\"medium\">Good evening, Dominic.</DisplayText>\n```\n\n<!-- content-for: android -->\n\n![Medium and large display text](/images-from-old-styleguide/components/DisplayText/android/medium-large@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Medium and large display text](/images-from-old-styleguide/components/DisplayText/ios/medium-large@2x.png)\n\n<!-- /content-for -->\n\n### Small\n\n<!-- example-for: web -->\n\nUse for text that would otherwise use body text, but that needs to scale with other display text.\n\n```jsx\n<DisplayText size=\"small\">Good evening, Dominic.</DisplayText>\n```\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nAlthough display text creates an interesting visual experience, it doesn’t replace the semantic structure provided by HTML headings.\n\nBy default, the display text component outputs text in an HTML paragraph (`<p>`). If a heading tag is needed for display text, use the `element` prop to set the heading level.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nUse display text to create visual interest along with a meaningful heading structure.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nUse display text in place of standard headings. Use the [heading component](https://polaris.shopify.com/components/titles-and-text/heading) and [subheading component](https://polaris.shopify.com/components/titles-and-text/subheading) to provide structure.\n\n</div></div>\n\n<!-- /content-for -->\n",
  "Drop zone": "\n\n# Drop zone\n\nThe drop zone component lets users upload files by dragging and dropping the files into an area on a page, or activating a button.\n\n---\n\n## Best practices\n\n### Drop zone\n\nDrop zones should:\n\n- Inform merchants when the file(s) can’t be uploaded:\n  - When possible, use validation errors on drag to detect and explain things like file size limits or file types accepted.\n  - Use the [banner component](https://polaris.shopify.com/components/feedback-indicators/banner) with a critical status to communicate errors that happen on the server.\n- Provide feedback once the file(s) have been dropped and uploading begins.\n- For convenience, allow files to be dropped anywhere on the page by enabling `dropOnPage`.\n- Provide a file upload button to allow merchants to select files for upload in a traditional way. Do this by using the `DropZone.FileUpload` subcomponent.\n\n### Validation errors\n\nThe drop zone component validates file type by default. File types you wish to accept can be defined by editing the `accept` property. This component also accepts custom validations using the `customValidator` property. When validation fails, the component sets itself to error mode.\n\n---\n\n## Content guidelines\n\n### Client-side validation error messages\n\nClient-side validation errors give instant feedback.\n\nValidation error messages should be:\n\n- Explicit: help merchants understand why their file can’t be uploaded and what they should change to successfully upload their file\n- In sentence case: capitalize only the first word in the message\n- Concise: use simple, clear language that can be read at a glance. For example:\n\n`File size must be less than 20MB`\n\n`File type must be .gif, .jpg, .png or .svg`\n\n### Server-side upload error messages\n\nServer-side upload errors give feedback after file submission.\n\nUpload error messages should:\n\n- Be displayed as a [banner](https://polaris.shopify.com/components/feedback-indicators/banner) with a critical status\n- Show the name of the file(s) that were not uploaded successfully\n- Describe why the file(s) couldn’t be uploaded and what merchants should change to upload their file successfully, as seen below\n\n```\nThe following images couldn’t be uploaded:\n\n* “keep-it-real.png” is too large. Try a file size less than 20MB.\n* “realer-than-real.zip” is not supported. File type must be .gif, .jpg, .png or .svg.\n* “so-so-real.png” was interrupted due to weak network connection, [retry upload](#)\n```\n\n---\n\n## Examples\n\n### Drop zone with file upload\n\nUse to allow merchants to upload files. They can drag and drop files into the dashed area, or upload traditionally by clicking the “Add file” button or anywhere inside the dashed area.\n\n```jsx\nfunction DropZoneExample() {\n  const [files, setFiles] = useState([]);\n\n  const handleDropZoneDrop = useCallback(\n    (_dropFiles, acceptedFiles, _rejectedFiles) =>\n      setFiles((files) => [...files, ...acceptedFiles]),\n    [],\n  );\n\n  const validImageTypes = ['image/gif', 'image/jpeg', 'image/png'];\n\n  const fileUpload = !files.length && <DropZone.FileUpload />;\n  const uploadedFiles = files.length > 0 && (\n    <div style={{padding: '0'}}>\n      <Stack vertical>\n        {files.map((file, index) => (\n          <Stack alignment=\"center\" key={index}>\n            <Thumbnail\n              size=\"small\"\n              alt={file.name}\n              source={\n                validImageTypes.includes(file.type)\n                  ? window.URL.createObjectURL(file)\n                  : NoteMinor\n              }\n            />\n            <div>\n              {file.name} <Caption>{file.size} bytes</Caption>\n            </div>\n          </Stack>\n        ))}\n      </Stack>\n    </div>\n  );\n\n  return (\n    <DropZone onDrop={handleDropZoneDrop}>\n      {uploadedFiles}\n      {fileUpload}\n    </DropZone>\n  );\n}\n```\n\n### Drop zone with a label\n\nUse to pair with a label for better accessibility.\n\n```jsx\n<DropZone label=\"Theme files\">\n  <DropZone.FileUpload />\n</DropZone>\n```\n\n### Drop zone with image file upload\n\nUse for cases that accept image file formats.\n\n```jsx\nfunction DropZoneWithImageFileUpload() {\n  const [files, setFiles] = useState([]);\n  const [rejectedFiles, setRejectedFiles] = useState([]);\n  const hasError = rejectedFiles.length > 0;\n\n  const handleDrop = useCallback(\n    (_droppedFiles, acceptedFiles, rejectedFiles) => {\n      setFiles((files) => [...files, ...acceptedFiles]);\n      setRejectedFiles(rejectedFiles);\n    },\n    [],\n  );\n\n  const fileUpload = !files.length && <DropZone.FileUpload />;\n  const uploadedFiles = files.length > 0 && (\n    <Stack vertical>\n      {files.map((file, index) => (\n        <Stack alignment=\"center\" key={index}>\n          <Thumbnail\n            size=\"small\"\n            alt={file.name}\n            source={window.URL.createObjectURL(file)}\n          />\n          <div>\n            {file.name} <Caption>{file.size} bytes</Caption>\n          </div>\n        </Stack>\n      ))}\n    </Stack>\n  );\n\n  const errorMessage = hasError && (\n    <Banner\n      title=\"The following images couldn’t be uploaded:\"\n      status=\"critical\"\n    >\n      <List type=\"bullet\">\n        {rejectedFiles.map((file, index) => (\n          <List.Item key={index}>\n            {`\"${file.name}\" is not supported. File type must be .gif, .jpg, .png or .svg.`}\n          </List.Item>\n        ))}\n      </List>\n    </Banner>\n  );\n\n  return (\n    <Stack vertical>\n      {errorMessage}\n      <DropZone accept=\"image/*\" type=\"image\" onDrop={handleDrop}>\n        {uploadedFiles}\n        {fileUpload}\n      </DropZone>\n    </Stack>\n  );\n}\n```\n\n### Drop zone with single file upload\n\nUse to accept only one file.\n\n```jsx\nfunction DropZoneExample() {\n  const [file, setFile] = useState();\n\n  const handleDropZoneDrop = useCallback(\n    (_dropFiles, acceptedFiles, _rejectedFiles) =>\n      setFile((file) => acceptedFiles[0]),\n    [],\n  );\n\n  const validImageTypes = ['image/gif', 'image/jpeg', 'image/png'];\n\n  const fileUpload = !file && <DropZone.FileUpload />;\n  const uploadedFile = file && (\n    <Stack>\n      <Thumbnail\n        size=\"small\"\n        alt={file.name}\n        source={\n          validImageTypes.includes(file.type)\n            ? window.URL.createObjectURL(file)\n            : NoteMinor\n        }\n      />\n      <div>\n        {file.name} <Caption>{file.size} bytes</Caption>\n      </div>\n    </Stack>\n  );\n\n  return (\n    <DropZone allowMultiple={false} onDrop={handleDropZoneDrop}>\n      {uploadedFile}\n      {fileUpload}\n    </DropZone>\n  );\n}\n```\n\n### Drop zone with drop on page\n\nUse to accept files for upload when dropped anywhere on the page.\n\n```jsx\nfunction DropZoneWithDropOnPageExample() {\n  const [files, setFiles] = useState([]);\n\n  const handleDropZoneDrop = useCallback(\n    (dropFiles, _acceptedFiles, _rejectedFiles) =>\n      setFiles((files) => [...files, ...dropFiles]),\n    [],\n  );\n\n  const validImageTypes = ['image/gif', 'image/jpeg', 'image/png'];\n\n  const uploadedFiles = files.length > 0 && (\n    <Stack vertical>\n      {files.map((file, index) => (\n        <Stack alignment=\"center\" key={index}>\n          <Thumbnail\n            size=\"small\"\n            alt={file.name}\n            source={\n              validImageTypes.includes(file.type)\n                ? window.URL.createObjectURL(file)\n                : NoteMinor\n            }\n          />\n          <div>\n            {file.name} <Caption>{file.size} bytes</Caption>\n          </div>\n        </Stack>\n      ))}\n    </Stack>\n  );\n\n  const uploadMessage = !uploadedFiles && <DropZone.FileUpload />;\n\n  return (\n    <Page\n      breadcrumbs={[{content: 'Products'}]}\n      title=\"Jar With Lock-Lid\"\n      primaryAction={{content: 'Save', disabled: true}}\n      secondaryActions={[\n        {content: 'Duplicate'},\n        {content: 'View on your store'},\n      ]}\n      pagination={{\n        hasPrevious: true,\n        hasNext: true,\n      }}\n    >\n      <DropZone dropOnPage onDrop={handleDropZoneDrop}>\n        {uploadedFiles}\n        {uploadMessage}\n      </DropZone>\n    </Page>\n  );\n}\n```\n\n### Drop zone accepts only SVG files\n\nUse to accept only SVG files.\n\n```jsx\nfunction DropZoneAcceptingSVGFilesExample() {\n  const [files, setFiles] = useState([]);\n  const [rejectedFiles, setRejectedFiles] = useState([]);\n  const hasError = rejectedFiles.length > 0;\n\n  const handleDropZoneDrop = useCallback(\n    (_dropFiles, acceptedFiles, rejectedFiles) => {\n      setFiles((files) => [...files, ...acceptedFiles]);\n      setRejectedFiles(rejectedFiles);\n    },\n    [],\n  );\n\n  const uploadedFiles = files.length > 0 && (\n    <Stack vertical>\n      {files.map((file, index) => (\n        <Stack alignment=\"center\" key={index}>\n          <Thumbnail\n            size=\"small\"\n            alt={file.name}\n            source={window.URL.createObjectURL(file)}\n          />\n          <div>\n            {file.name} <Caption>{file.size} bytes</Caption>\n          </div>\n        </Stack>\n      ))}\n    </Stack>\n  );\n\n  const errorMessage = hasError && (\n    <Banner\n      title=\"The following images couldn’t be uploaded:\"\n      status=\"critical\"\n    >\n      <List type=\"bullet\">\n        {rejectedFiles.map((file, index) => (\n          <List.Item key={index}>\n            {`\"${file.name}\" is not supported. File type must be .svg.`}\n          </List.Item>\n        ))}\n      </List>\n    </Banner>\n  );\n\n  return (\n    <Stack vertical>\n      {errorMessage}\n      <DropZone\n        accept=\"image/svg+xml\"\n        type=\"image\"\n        errorOverlayText=\"File type must be .svg\"\n        onDrop={handleDropZoneDrop}\n      >\n        {uploadedFiles}\n      </DropZone>\n    </Stack>\n  );\n}\n```\n\n### Nested drop zone\n\nUse to allow merchants to upload files in a wider area than the visible drop zone.\n\n```jsx\nfunction NestedDropZoneExample() {\n  const [files, setFiles] = useState([]);\n\n  const handleDrop = useCallback((dropFiles) => {\n    setFiles((files) => [...files, dropFiles]);\n  }, []);\n\n  const handleDropZoneClick = useCallback(() => {}, []);\n\n  const validImageTypes = ['image/gif', 'image/jpeg', 'image/png'];\n\n  const fileUpload = !files.length && <DropZone.FileUpload />;\n  const uploadedFiles = files.length > 0 && (\n    <Stack vertical>\n      {files.map((file, index) => (\n        <Stack alignment=\"center\" key={index}>\n          <Thumbnail\n            size=\"small\"\n            alt={file.name}\n            source={\n              validImageTypes.includes(file.type)\n                ? window.URL.createObjectURL(file)\n                : NoteMinor\n            }\n          />\n          <div>\n            {file.name} <Caption>{file.size} bytes</Caption>\n          </div>\n        </Stack>\n      ))}\n    </Stack>\n  );\n\n  return (\n    <DropZone outline={false} onDrop={handleDrop}>\n      <Card sectioned>\n        <DropZone onClick={handleDropZoneClick}>\n          {uploadedFiles}\n          {fileUpload}\n        </DropZone>\n      </Card>\n    </DropZone>\n  );\n}\n```\n\n### Medium-sized drop zone\n\nUse for cases with limited space. To improve usability, nest medium-sized drop zone in a larger drop zone with no outline. See the nested dropzone example.\n\n```jsx\n<div style={{width: 114, height: 114}}>\n  <DropZone>\n    <DropZone.FileUpload />\n  </DropZone>\n</div>\n```\n\n### Small-sized drop zone\n\nUse for cases with tight space constraints, such as variant thumbnails on the Product details page. To improve usability, nest small-sized drop zone in a larger drop zone with no outline. See the nested dropzone example.\n\n```jsx\n<div style={{width: 50, height: 50}}>\n  <DropZone>\n    <DropZone.FileUpload />\n  </DropZone>\n</div>\n```\n\n### Drop zone with custom FileUpload text\n\nUse for cases where you want the child contents of the dropzone to determine its height.\n\n```jsx\nfunction DropZoneExample() {\n  const [files, setFiles] = useState([]);\n\n  const handleDropZoneDrop = useCallback(\n    (_dropFiles, acceptedFiles, _rejectedFiles) =>\n      setFiles((files) => [...files, ...acceptedFiles]),\n    [],\n  );\n\n  const validImageTypes = ['image/gif', 'image/jpeg', 'image/png'];\n\n  const fileUpload = !files.length && (\n    <DropZone.FileUpload actionHint=\"Accepts .gif, .jpg, and .png\" />\n  );\n\n  const uploadedFiles = files.length > 0 && (\n    <Stack vertical>\n      {files.map((file, index) => (\n        <Stack alignment=\"center\" key={index}>\n          <Thumbnail\n            size=\"small\"\n            alt={file.name}\n            source={\n              validImageTypes.includes(file.type)\n                ? window.URL.createObjectURL(file)\n                : NoteMinor\n            }\n          />\n          <div>\n            {file.name} <Caption>{file.size} bytes</Caption>\n          </div>\n        </Stack>\n      ))}\n    </Stack>\n  );\n\n  return (\n    <DropZone onDrop={handleDropZoneDrop} variableHeight>\n      {uploadedFiles}\n      {fileUpload}\n    </DropZone>\n  );\n}\n```\n\n### Drop zone with custom file dialog trigger\n\nUse to trigger the file dialog from an action somewhere else on the page.\n\n```jsx\nfunction DropZoneWithCustomFileDialogExample() {\n  const [files, setFiles] = useState([]);\n  const [openFileDialog, setOpenFileDialog] = useState(false);\n\n  const handleDropZoneDrop = useCallback(\n    (dropFiles, _acceptedFiles, _rejectedFiles) =>\n      setFiles((files) => [...files, ...dropFiles]),\n    [],\n  );\n  const toggleOpenFileDialog = useCallback(\n    () => setOpenFileDialog((openFileDialog) => !openFileDialog),\n    [],\n  );\n\n  const validImageTypes = ['image/gif', 'image/jpeg', 'image/png'];\n\n  const uploadedFiles = files.length > 0 && (\n    <Stack vertical>\n      {files.map((file, index) => (\n        <Stack alignment=\"center\" key={index}>\n          <Thumbnail\n            size=\"small\"\n            alt={file.name}\n            source={\n              validImageTypes.indexOf(file.type) > -1\n                ? window.URL.createObjectURL(file)\n                : NoteMinor\n            }\n          />\n          <div>\n            {file.name} <Caption>{file.size} bytes</Caption>\n          </div>\n        </Stack>\n      ))}\n    </Stack>\n  );\n\n  return (\n    <Card\n      sectioned\n      title=\"Product Images\"\n      actions={[\n        {\n          content: 'Upload Image',\n          onAction: toggleOpenFileDialog,\n        },\n      ]}\n    >\n      <DropZone\n        openFileDialog={openFileDialog}\n        onDrop={handleDropZoneDrop}\n        onFileDialogClose={toggleOpenFileDialog}\n      >\n        {uploadedFiles}\n      </DropZone>\n    </Card>\n  );\n}\n```\n\n---\n\n## Drop zone file upload\n\nUse file upload with the drop zone component to let merchants select files for upload in a traditional way.\n\n### File upload properties\n\n| Prop        | Type   | Description                        | Default                   |\n| ----------- | ------ | ---------------------------------- | ------------------------- |\n| actionTitle | string | String that appears in file upload | 'Add file'                |\n| actionHint  | string | String that appears in file upload | 'or drop files to upload' |\n\n---\n\n## Related components\n\n- To provide context to upload errors when they occur, use the [banner component](https://polaris.shopify.com/components/feedback-indicators/banner)\n- To provide feedback during file upload, use the [spinner component](https://polaris.shopify.com/components/feedback-indicators/spinner)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nThe drop zone component builds on the native HTML `<input type=\"upload\">` element. It includes a visual`<button>` as well as a drag and drop area that can receive keyboard focus.\n\n### Keyboard support\n\nTo upload a file with the keyboard, merchants can interact with the drag-and-drop region.\n\n- To give the input keyboard focus, use the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)\n- To activate the input, use the <kbd>enter</kbd>/<kbd>return</kbd> or <kbd>space</kbd> keys\n\n<!-- /content-for -->\n",
  "Empty state": "\n\n# Empty state\n\nEmpty states are used when a list, table, or chart has no items or data to show. This is an opportunity to provide explanation or guidance to help merchants progress. The empty state component is intended for use when a full page in the admin is empty, and not for individual elements or areas in the interface.\n\n---\n\n## Best practices\n\nEmpty states should:\n\n- Orient merchants by clearly explaining the benefit and utility of a product\n  or feature\n- Simplify a complicated experience by focusing on a few key features and\n  benefits\n- Use simple and clear language that empowers merchants to move their business\n  forward\n- Be encouraging and never make merchants feel unsuccessful or guilty because\n  they haven’t used a product or feature\n- Explain the steps merchants need to take to activate a product or feature\n- Use illustrations thoughtfully as outlined in our [illustration guidelines](https://polaris.shopify.com/design/illustrations)\n- Use only one primary call-to-action button\n- Provide extra spacing at the bottom of an empty state that is within content\n  (card, modal, or navigation) to match the image that was passed into the component\n  with a white space above it of 40px\n\n---\n\n## Content guidelines\n\n### Title\n\nEmpty state titles should:\n\n- Be action-oriented: encourage merchants to take the step required to activate the product or feature\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Create orders and send invoices\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Orders and invoices\n\n</div></div>\n\n- Follow the content guidelines for [headings and subheadings](https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings)\n\n### Subtitle\n\nEmpty state subtitles act like body content. They should:\n\n- Describe or explain what’s in the empty state title or item title\n- Be conversational: include articles such as the, a, and an\n\n### Primary action\n\nButtons are used for the most important actions you want merchants to take.\nThey should be:\n\n- Clear and predictable: merchants should be able to anticipate what will\n  happen when they click a button. Never deceive merchants by using misleading\n  titles.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Create order\n- Buy shipping label\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- New order\n- Buy\n\n</div></div>\n\n- Action-led: buttons should always lead with a strong verb that encourages\n  action. To provide enough context to merchants use the {verb}+{noun} format on\n  buttons except in the case of common actions like Save, Close, Cancel, or OK.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Activate Apple Pay\n- View shipping settings\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Try Apple Pay\n- View your settings\n\n</div></div>\n\n- Scannable: avoid unnecessary words and articles such as the, an, or a.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Add menu item\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Add a menu item\n\n</div></div>\n\n### Secondary action\n\nSecondary actions are used for less important actions such as “Learn more” or\n“Close” buttons. They should follow all the other content rules outlined for\nprimary buttons.\n\n---\n\n## Examples\n\n### Default empty state\n\nUse to explain a single feature before merchants have used it.\n\n```jsx\n<Card sectioned>\n  <EmptyState\n    heading=\"Manage your inventory transfers\"\n    action={{content: 'Add transfer'}}\n    secondaryAction={{content: 'Learn more', url: 'https://help.shopify.com'}}\n    image=\"https://cdn.shopify.com/s/files/1/0262/4071/2726/files/emptystate-files.png\"\n  >\n    <p>Track and receive your incoming inventory from suppliers.</p>\n  </EmptyState>\n</Card>\n```\n\n<!-- content-for: android -->\n\n![Default empty state](/images-from-old-styleguide/components/EmptyState/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Default empty state](/images-from-old-styleguide/components/EmptyState/ios/default@2x.png)\n\n<!-- /content-for -->\n\n### Empty state with subdued footer context\n\n<!-- example-for: web -->\n\nUse to provide additional but non-critical context for a new product or feature. Can also be used to include a subdued call to action for secondary or tertiary actions.\n\n```jsx\n<Card sectioned>\n  <EmptyState\n    heading=\"Manage your inventory transfers\"\n    action={{content: 'Add transfer'}}\n    secondaryAction={{content: 'Learn more', url: 'https://help.shopify.com'}}\n    footerContent={\n      <p>\n        If you don’t want to add a transfer, you can import your inventory from{' '}\n        <Link monochrome url=\"/settings\">\n          settings\n        </Link>\n        .\n      </p>\n    }\n    image=\"https://cdn.shopify.com/s/files/1/0262/4071/2726/files/emptystate-files.png\"\n  >\n    <p>Track and receive your incoming inventory from suppliers.</p>\n  </EmptyState>\n</Card>\n```\n\n### Empty state with full width layout\n\n<!-- example-for: web -->\n\n```jsx\n<Card sectioned>\n  <EmptyState\n    heading=\"Upload a file to get started\"\n    action={{content: 'Upload files'}}\n    image=\"https://cdn.shopify.com/s/files/1/0262/4071/2726/files/emptystate-files.png\"\n    fullWidth\n  >\n    <p>\n      You can use the Files section to upload images, videos, and other\n      documents. This example shows the content with a centered layout and full\n      width.\n    </p>\n  </EmptyState>\n</Card>\n```\n\n---\n\n## Related components\n\n- To learn more about illustrations for empty states, [read the illustration guidelines](https://polaris.shopify.com/design/illustrations)\n- To create page-level layout, [use the layout component](https://polaris.shopify.com/components/structure/layout)\n- To highlight a Shopify feature, [use the callout card component](https://polaris.shopify.com/components/structure/callout-card)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nEmpty state illustrations are implemented as decorative images, so they use an empty `alt` attribute and are skipped by technologies like screen readers.\n\n<!-- /content-for -->\n",
  "Exception list": "\n\n# Exception list\n\nUse exception lists to help merchants notice important, standout information that adds extra context to a task. Exception lists often consist of a title and description. Each item in the list either has a bullet or icon at the front.\n\n---\n\n## Best practices\n\nThe exception list component should:\n\n- Be attached to another component\n- Inform merchants about extra context that will help them make better decisions\n- Only surface noteworthy, actionable content, like a high risk order or out of stock item\n- Used sparingly, so that it has more impact and doesn’t add clutter\n- Only use an icon if it adds clarity to the content or helps merchants visualize the meaning\n\n<!-- improvement -->\n\n### Opportunity for improvement\n\nException lists aren’t clickable. If you have an idea that could make this component better, please [open an issue](https://github.com/shopify/polaris-react/issues).\n\n<!-- end -->\n\n---\n\n## Content guidelines\n\nException lists should:\n\n- Highlight an exceptional state that helps merchants make a decision\n- Use the appropriate [color](https://polaris.shopify.com/design/colors) to suit the tone of the message\n- Have a description (a title is optional)\n- Be concise\n\nFor error states, exception lists should:\n\n- Either tell merchants how to solve the problem or be attached to an item that lets merchants fix the problem\n\nIf placed next to an item in a [resource list](https://polaris.shopify.com/components/lists-and-tables/resource-list), exceptions lists should:\n\n- Make the entire list item clickable because the exception list itself isn’t clickable\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- ![Exception list being used inside a resource list item](/images-from-old-styleguide/exception-list/do-exception-list@2x.png)\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- ![Exception list being used in place of a banner](/images-from-old-styleguide/exception-list/dont-exception-list@2x.png)\n\n</div></div>\n\n---\n\n## Examples\n\n### Exception list with icon\n\nUse icons to add clarity or assist in visualizing the meaning\n\n```jsx\n<ExceptionList\n  items={[\n    {\n      icon: NoteMinor,\n      description: 'This customer is awesome. Make sure to treat them right!',\n    },\n  ]}\n/>\n```\n\n---\n\n## Related components\n\n<!-- remove comment and adjust link when component is built -->\n\n<!-- * To display an error in a card or section, use the [contextual banner]() component -->\n\n- To display an error at the top of a page, or to indicate multiple errors in a form, use the [banner](https://polaris.shopify.com/components/feedback-indicators/banner) component\n- Exceptions lists are often used in the [resource list](https://polaris.shopify.com/components/lists-and-tables/resource-list) component to display conditional content\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nItems in an exception list are organized as list items (`<li>`) in an unordered list wrapper (`<ul>`), so they’re conveyed as a group of related elements to assistive technology users.\n\nIcons displayed with exception list items are meant to visually reinforce the adjacent information, not to convey information on their own. They are skipped by screen readers using `aria-hidden=\"true\"`.\n\n<!-- /content-for -->\n",
  "Filters": "\n\n# Filters\n\nFilters is a composite component that filters the items of a list or table.\n\nMerchants use filters to:\n\n- view different subsets of items in a list or table\n- filter by typing into a text field\n- filter by selecting filters or promoted filters\n\nThe way that merchants interact with filters depends on the components that you decide to incorporate. In its simplest form, filters includes a text field and a set of filters, which can be displayed in different ways. For example, you could show promoted filters and a More button that opens a [sheet](https://polaris.shopify.com/components/overlays/sheet) containing more filters. What the filters are and how they’re exposed to merchants is flexible.\n\n---\n\n## Accessibility\n\nThe filters component relies on the accessibility features of multiple other components:\n\n- [Text field](https://polaris.shopify.com/components/forms/text-field)\n- [Button](https://polaris.shopify.com/components/actions/button)\n- [Popover](https://polaris.shopify.com/components/overlays/popover)\n- [Sheet](https://polaris.shopify.com/components/overlays/sheet)\n- [Collapsible](https://polaris.shopify.com/components/behavior/collapsible)\n\n### Maintain accessibility with custom features\n\nSince custom HTML can be passed to the component for additional actions, ensure that the filtering system you build is accessible as a whole.\n\nAll merchants must:\n\n- be able to identify and understand labels for all controls\n- be notified of state changes\n- be able to complete all actions with the keyboard\n\n---\n\n## Best practices\n\nThe filters component should:\n\n- help reduce merchant effort by promoting the filtering categories that are most commonly used\n- include no more than 2 or 3 promoted filters\n- consider small screen sizes when designing the interface for each filter and the total number filters to include\n- use children only for content that’s related or relevant to filtering\n\n---\n\n## Content guidelines\n\n### Text field\n\nThe text field should be clearly labeled so it’s obvious to merchants what they should enter into the field.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Filter orders\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Enter text here\n\n</div></div>\n\n### Filter badges\n\nUse the name of the filter if the purpose of the name is clear on its own. For example, when you see a filter badge that reads **Fulfilled**, it’s intuitive that it falls under the Fulfillment status category.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Fulfilled, Unfulfilled\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Fulfillment: Fulfilled, Unfulfilled\n\n</div></div>\n\nIf the filter name is ambiguous on its own, add a descriptive word related to the status. For example, **Low** doesn’t make sense out of context. Add the word “risk” so that merchants know it’s from the Risk category.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- High risk, Low risk\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- High, Low\n\n</div></div>\n\nGroup tags from the same category together.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- (Unfulfilled, Fulfilled)\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- (Unfulfilled) (fulfilled)\n\n</div></div>\n\nIf all tag pills selected: truncate in the middle\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Paid, par… unpaid\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- All payment status filters selected, Paid, unpa…\n\n</div></div>\n\n---\n\n## Examples\n\n### Filtering with a resource list\n\n```jsx\nfunction ResourceListFiltersExample() {\n  const [accountStatus, setAccountStatus] = useState(null);\n  const [moneySpent, setMoneySpent] = useState(null);\n  const [taggedWith, setTaggedWith] = useState(null);\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleAccountStatusChange = useCallback(\n    (value) => setAccountStatus(value),\n    [],\n  );\n  const handleMoneySpentChange = useCallback(\n    (value) => setMoneySpent(value),\n    [],\n  );\n  const handleTaggedWithChange = useCallback(\n    (value) => setTaggedWith(value),\n    [],\n  );\n  const handleFiltersQueryChange = useCallback(\n    (value) => setQueryValue(value),\n    [],\n  );\n  const handleAccountStatusRemove = useCallback(\n    () => setAccountStatus(null),\n    [],\n  );\n  const handleMoneySpentRemove = useCallback(() => setMoneySpent(null), []);\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(null), []);\n  const handleFiltersClearAll = useCallback(() => {\n    handleAccountStatusRemove();\n    handleMoneySpentRemove();\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [\n    handleAccountStatusRemove,\n    handleMoneySpentRemove,\n    handleQueryValueRemove,\n    handleTaggedWithRemove,\n  ]);\n\n  const filters = [\n    {\n      key: 'accountStatus',\n      label: 'Account status',\n      filter: (\n        <ChoiceList\n          title=\"Account status\"\n          titleHidden\n          choices={[\n            {label: 'Enabled', value: 'enabled'},\n            {label: 'Not invited', value: 'not invited'},\n            {label: 'Invited', value: 'invited'},\n            {label: 'Declined', value: 'declined'},\n          ]}\n          selected={accountStatus || []}\n          onChange={handleAccountStatusChange}\n          allowMultiple\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'moneySpent',\n      label: 'Money spent',\n      filter: (\n        <RangeSlider\n          label=\"Money spent is between\"\n          labelHidden\n          value={moneySpent || [0, 500]}\n          prefix=\"$\"\n          output\n          min={0}\n          max={2000}\n          step={1}\n          onChange={handleMoneySpentChange}\n        />\n      ),\n    },\n  ];\n\n  const appliedFilters = [];\n  if (!isEmpty(accountStatus)) {\n    const key = 'accountStatus';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, accountStatus),\n      onRemove: handleAccountStatusRemove,\n    });\n  }\n  if (!isEmpty(moneySpent)) {\n    const key = 'moneySpent';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, moneySpent),\n      onRemove: handleMoneySpentRemove,\n    });\n  }\n  if (!isEmpty(taggedWith)) {\n    const key = 'taggedWith';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, taggedWith),\n      onRemove: handleTaggedWithRemove,\n    });\n  }\n\n  return (\n    <div style={{height: '568px'}}>\n      <Card>\n        <ResourceList\n          resourceName={{singular: 'customer', plural: 'customers'}}\n          filterControl={\n            <Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleFiltersQueryChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleFiltersClearAll}\n            />\n          }\n          items={[\n            {\n              id: 341,\n              url: 'customers/341',\n              name: 'Mae Jemison',\n              location: 'Decatur, USA',\n            },\n            {\n              id: 256,\n              url: 'customers/256',\n              name: 'Ellen Ochoa',\n              location: 'Los Angeles, USA',\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, location} = item;\n            const media = <Avatar customer size=\"medium\" name={name} />;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <h3>\n                  <TextStyle variation=\"strong\">{name}</TextStyle>\n                </h3>\n                <div>{location}</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </Card>\n    </div>\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case 'moneySpent':\n        return `Money spent is between $${value[0]} and $${value[1]}`;\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      case 'accountStatus':\n        return value.map((val) => `Customer ${val}`).join(', ');\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n```\n\n### Filtering with a data table\n\n```jsx\nfunction DataTableFiltersExample() {\n  const [availability, setAvailability] = useState(null);\n  const [productType, setProductType] = useState(null);\n  const [taggedWith, setTaggedWith] = useState(null);\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleAvailabilityChange = useCallback(\n    (value) => setAvailability(value),\n    [],\n  );\n  const handleProductTypeChange = useCallback(\n    (value) => setProductType(value),\n    [],\n  );\n  const handleTaggedWithChange = useCallback(\n    (value) => setTaggedWith(value),\n    [],\n  );\n  const handleFiltersQueryChange = useCallback(\n    (value) => setQueryValue(value),\n    [],\n  );\n  const handleAvailabilityRemove = useCallback(() => setAvailability(null), []);\n  const handleProductTypeRemove = useCallback(() => setProductType(null), []);\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(null), []);\n  const handleFiltersClearAll = useCallback(() => {\n    handleAvailabilityRemove();\n    handleProductTypeRemove();\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [\n    handleAvailabilityRemove,\n    handleQueryValueRemove,\n    handleProductTypeRemove,\n    handleTaggedWithRemove,\n  ]);\n\n  const filters = [\n    {\n      key: 'availability',\n      label: 'Availability',\n      filter: (\n        <ChoiceList\n          title=\"Availability\"\n          titleHidden\n          choices={[\n            {label: 'Online Store', value: 'Online Store'},\n            {label: 'Point of Sale', value: 'Point of Sale'},\n            {label: 'Buy Button', value: 'Buy Button'},\n          ]}\n          selected={availability || []}\n          onChange={handleAvailabilityChange}\n          allowMultiple\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'productType',\n      label: 'Product type',\n      filter: (\n        <ChoiceList\n          title=\"Product type\"\n          titleHidden\n          choices={[\n            {label: 'T-Shirt', value: 'T-Shirt'},\n            {label: 'Accessory', value: 'Accessory'},\n            {label: 'Gift card', value: 'Gift card'},\n          ]}\n          selected={productType || []}\n          onChange={handleProductTypeChange}\n          allowMultiple\n        />\n      ),\n    },\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n    },\n  ];\n\n  const appliedFilters = [];\n  if (!isEmpty(availability)) {\n    const key = 'availability';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, availability),\n      onRemove: handleAvailabilityRemove,\n    });\n  }\n  if (!isEmpty(productType)) {\n    const key = 'productType';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, productType),\n      onRemove: handleProductTypeRemove,\n    });\n  }\n  if (!isEmpty(taggedWith)) {\n    const key = 'taggedWith';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, taggedWith),\n      onRemove: handleTaggedWithRemove,\n    });\n  }\n\n  return (\n    <div style={{height: '568px'}}>\n      <Card>\n        <Card.Section>\n          <Filters\n            queryValue={queryValue}\n            filters={filters}\n            appliedFilters={appliedFilters}\n            onQueryChange={handleFiltersQueryChange}\n            onQueryClear={handleQueryValueRemove}\n            onClearAll={handleFiltersClearAll}\n          />\n        </Card.Section>\n        <DataTable\n          columnContentTypes={[\n            'text',\n            'numeric',\n            'numeric',\n            'numeric',\n            'numeric',\n          ]}\n          headings={[\n            'Product',\n            'Price',\n            'SKU Number',\n            'Net quantity',\n            'Net sales',\n          ]}\n          rows={[\n            ['Emerald Silk Gown', '$875.00', 124689, 140, '$122,500.00'],\n            ['Mauve Cashmere Scarf', '$230.00', 124533, 83, '$19,090.00'],\n            [\n              'Navy Merino Wool Blazer with khaki chinos and yellow belt',\n              '$445.00',\n              124518,\n              32,\n              '$14,240.00',\n            ],\n          ]}\n          totals={['', '', '', 255, '$155,830.00']}\n        />\n      </Card>\n    </div>\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      case 'availability':\n        return value.map((val) => `Available on ${val}`).join(', ');\n      case 'productType':\n        return value.join(', ');\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n```\n\n### Filters with children content\n\n```jsx\nfunction FiltersExample() {\n  const [taggedWith, setTaggedWith] = useState(null);\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleTaggedWithChange = useCallback(\n    (value) => setTaggedWith(value),\n    [],\n  );\n  const handleQueryValueChange = useCallback(\n    (value) => setQueryValue(value),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(null), []);\n\n  const handleClearAll = useCallback(() => {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n\n  const filters = [\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: 'taggedWith',\n          label: disambiguateLabel('taggedWith', taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  return (\n    <div style={{height: '568px'}}>\n      <Card>\n        <ResourceList\n          resourceName={{singular: 'customer', plural: 'customers'}}\n          filterControl={\n            <Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleQueryValueChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleClearAll}\n            >\n              <div style={{paddingLeft: '8px'}}>\n                <Button onClick={() => console.log('New filter saved')}>\n                  Save\n                </Button>\n              </div>\n            </Filters>\n          }\n          items={[\n            {\n              id: 341,\n              url: 'customers/341',\n              name: 'Mae Jemison',\n              location: 'Decatur, USA',\n            },\n            {\n              id: 256,\n              url: 'customers/256',\n              name: 'Ellen Ochoa',\n              location: 'Los Angeles, USA',\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, location} = item;\n            const media = <Avatar customer size=\"medium\" name={name} />;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <h3>\n                  <TextStyle variation=\"strong\">{name}</TextStyle>\n                </h3>\n                <div>{location}</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </Card>\n    </div>\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n```\n\n### All filters disabled\n\n```jsx\nfunction DisableAllFiltersExample() {\n  const [taggedWith, setTaggedWith] = useState(null);\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleTaggedWithChange = useCallback(\n    (value) => setTaggedWith(value),\n    [],\n  );\n  const handleQueryValueChange = useCallback(\n    (value) => setQueryValue(value),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(null), []);\n\n  const handleClearAll = useCallback(() => {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n\n  const filters = [\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: 'taggedWith',\n          label: disambiguateLabel('taggedWith', taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  return (\n    <div style={{height: '568px'}}>\n      <Card>\n        <ResourceList\n          resourceName={{singular: 'customer', plural: 'customers'}}\n          filterControl={\n            <Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleQueryValueChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleClearAll}\n              disabled\n            >\n              <div style={{paddingLeft: '8px'}}>\n                <Button\n                  disabled\n                  onClick={() => console.log('New filter saved')}\n                >\n                  Save\n                </Button>\n              </div>\n            </Filters>\n          }\n          items={[\n            {\n              id: 341,\n              url: 'customers/341',\n              name: 'Mae Jemison',\n              location: 'Decatur, USA',\n            },\n            {\n              id: 256,\n              url: 'customers/256',\n              name: 'Ellen Ochoa',\n              location: 'Los Angeles, USA',\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, location} = item;\n            const media = <Avatar customer size=\"medium\" name={name} />;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <h3>\n                  <TextStyle variation=\"strong\">{name}</TextStyle>\n                </h3>\n                <div>{location}</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </Card>\n    </div>\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n```\n\n### Some filters disabled\n\n```jsx\nfunction DisableSomeFiltersExample() {\n  const [taggedWith, setTaggedWith] = useState(null);\n  const [vendor, setVendor] = useState(null);\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleTaggedWithChange = useCallback(\n    (value) => setTaggedWith(value),\n    [],\n  );\n  const handleQueryValueChange = useCallback(\n    (value) => setQueryValue(value),\n    [],\n  );\n  const handleVendorChange = useCallback((value) => setVendor(value), []);\n\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(null), []);\n  const handleVendorRemove = useCallback(() => setVendor(null), []);\n\n  const handleClearAll = useCallback(() => {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n    handleVendorRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove, handleVendorRemove]);\n\n  const filters = [\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'vendor',\n      label: 'Vendor',\n      filter: (\n        <TextField\n          label=\"Vendor\"\n          value={vendor}\n          onChange={handleVendorChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n      disabled: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: 'taggedWith',\n          label: disambiguateLabel('taggedWith', taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  return (\n    <div style={{height: '568px'}}>\n      <Card>\n        <ResourceList\n          resourceName={{singular: 'customer', plural: 'customers'}}\n          filterControl={\n            <Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleQueryValueChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleClearAll}\n            >\n              <div style={{paddingLeft: '8px'}}>\n                <Button\n                  disabled\n                  onClick={() => console.log('New filter saved')}\n                >\n                  Save\n                </Button>\n              </div>\n            </Filters>\n          }\n          items={[\n            {\n              id: 341,\n              url: 'customers/341',\n              name: 'Mae Jemison',\n              location: 'Decatur, USA',\n            },\n            {\n              id: 256,\n              url: 'customers/256',\n              name: 'Ellen Ochoa',\n              location: 'Los Angeles, USA',\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, location} = item;\n            const media = <Avatar customer size=\"medium\" name={name} />;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <h3>\n                  <TextStyle variation=\"strong\">{name}</TextStyle>\n                </h3>\n                <div>{location}</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </Card>\n    </div>\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n```\n\n### Filters without clear button\n\n```jsx\nfunction Playground() {\n  const [taggedWith, setTaggedWith] = useState(null);\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleTaggedWithChange = useCallback(\n    (value) => setTaggedWith(value),\n    [],\n  );\n  const handleQueryValueChange = useCallback(\n    (value) => setQueryValue(value),\n    [],\n  );\n\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(null), []);\n\n  const handleClearAll = useCallback(() => {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n\n  const filters = [\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n      hideClearButton: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: 'taggedWith',\n          label: disambiguateLabel('taggedWith', taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  return (\n    <div style={{height: '568px'}}>\n      <Card>\n        <ResourceList\n          resourceName={{singular: 'customer', plural: 'customers'}}\n          filterControl={\n            <Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleQueryValueChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleClearAll}\n            >\n              <div style={{paddingLeft: '8px'}}>\n                <Button\n                  disabled\n                  onClick={() => console.log('New filter saved')}\n                >\n                  Save\n                </Button>\n              </div>\n            </Filters>\n          }\n          items={[\n            {\n              id: 341,\n              url: 'customers/341',\n              name: 'Mae Jemison',\n              location: 'Decatur, USA',\n            },\n            {\n              id: 256,\n              url: 'customers/256',\n              name: 'Ellen Ochoa',\n              location: 'Los Angeles, USA',\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, location} = item;\n            const media = <Avatar customer size=\"medium\" name={name} />;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <h3>\n                  <TextStyle variation=\"strong\">{name}</TextStyle>\n                </h3>\n                <div>{location}</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </Card>\n    </div>\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n```\n\n### Filters with help text\n\n```jsx\nfunction ResourceListFiltersExample() {\n  const [accountStatus, setAccountStatus] = useState(null);\n  const [moneySpent, setMoneySpent] = useState(null);\n  const [taggedWith, setTaggedWith] = useState(null);\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleAccountStatusChange = useCallback(\n    (value) => setAccountStatus(value),\n    [],\n  );\n  const handleMoneySpentChange = useCallback(\n    (value) => setMoneySpent(value),\n    [],\n  );\n  const handleTaggedWithChange = useCallback(\n    (value) => setTaggedWith(value),\n    [],\n  );\n  const handleFiltersQueryChange = useCallback(\n    (value) => setQueryValue(value),\n    [],\n  );\n  const handleAccountStatusRemove = useCallback(\n    () => setAccountStatus(null),\n    [],\n  );\n  const handleMoneySpentRemove = useCallback(() => setMoneySpent(null), []);\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(null), []);\n  const handleFiltersClearAll = useCallback(() => {\n    handleAccountStatusRemove();\n    handleMoneySpentRemove();\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [\n    handleAccountStatusRemove,\n    handleMoneySpentRemove,\n    handleQueryValueRemove,\n    handleTaggedWithRemove,\n  ]);\n\n  const filters = [\n    {\n      key: 'accountStatus',\n      label: 'Account status',\n      filter: (\n        <ChoiceList\n          title=\"Account status\"\n          titleHidden\n          choices={[\n            {label: 'Enabled', value: 'enabled'},\n            {label: 'Not invited', value: 'not invited'},\n            {label: 'Invited', value: 'invited'},\n            {label: 'Declined', value: 'declined'},\n          ]}\n          selected={accountStatus || []}\n          onChange={handleAccountStatusChange}\n          allowMultiple\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'moneySpent',\n      label: 'Money spent',\n      filter: (\n        <RangeSlider\n          label=\"Money spent is between\"\n          labelHidden\n          value={moneySpent || [0, 500]}\n          prefix=\"$\"\n          output\n          min={0}\n          max={2000}\n          step={1}\n          onChange={handleMoneySpentChange}\n        />\n      ),\n    },\n  ];\n\n  const appliedFilters = [];\n  if (!isEmpty(accountStatus)) {\n    const key = 'accountStatus';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, accountStatus),\n      onRemove: handleAccountStatusRemove,\n    });\n  }\n  if (!isEmpty(moneySpent)) {\n    const key = 'moneySpent';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, moneySpent),\n      onRemove: handleMoneySpentRemove,\n    });\n  }\n  if (!isEmpty(taggedWith)) {\n    const key = 'taggedWith';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, taggedWith),\n      onRemove: handleTaggedWithRemove,\n    });\n  }\n\n  return (\n    <div style={{height: '568px'}}>\n      <Card>\n        <ResourceList\n          resourceName={{singular: 'customer', plural: 'customers'}}\n          filterControl={\n            <Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleFiltersQueryChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleFiltersClearAll}\n              helpText=\"To reactivate filtering, remove your current filters.\"\n              disabled\n            />\n          }\n          items={[\n            {\n              id: 341,\n              url: 'customers/341',\n              name: 'Mae Jemison',\n              location: 'Decatur, USA',\n            },\n            {\n              id: 256,\n              url: 'customers/256',\n              name: 'Ellen Ochoa',\n              location: 'Los Angeles, USA',\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, location} = item;\n            const media = <Avatar customer size=\"medium\" name={name} />;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <h3>\n                  <TextStyle variation=\"strong\">{name}</TextStyle>\n                </h3>\n                <div>{location}</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </Card>\n    </div>\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case 'moneySpent':\n        return `Money spent is between $${value[0]} and $${value[1]}`;\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      case 'accountStatus':\n        return value.map((val) => `Customer ${val}`).join(', ');\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n```\n\n### Filters with query field hidden\n\n```jsx\nfunction ResourceListFiltersExample() {\n  const [accountStatus, setAccountStatus] = useState(null);\n  const [moneySpent, setMoneySpent] = useState(null);\n  const [taggedWith, setTaggedWith] = useState(null);\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleAccountStatusChange = useCallback(\n    (value) => setAccountStatus(value),\n    [],\n  );\n  const handleMoneySpentChange = useCallback(\n    (value) => setMoneySpent(value),\n    [],\n  );\n  const handleTaggedWithChange = useCallback(\n    (value) => setTaggedWith(value),\n    [],\n  );\n  const handleFiltersQueryChange = useCallback(\n    (value) => setQueryValue(value),\n    [],\n  );\n  const handleAccountStatusRemove = useCallback(\n    () => setAccountStatus(null),\n    [],\n  );\n  const handleMoneySpentRemove = useCallback(() => setMoneySpent(null), []);\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(null), []);\n  const handleFiltersClearAll = useCallback(() => {\n    handleAccountStatusRemove();\n    handleMoneySpentRemove();\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [\n    handleAccountStatusRemove,\n    handleMoneySpentRemove,\n    handleQueryValueRemove,\n    handleTaggedWithRemove,\n  ]);\n\n  const filters = [\n    {\n      key: 'accountStatus',\n      label: 'Account status',\n      filter: (\n        <ChoiceList\n          title=\"Account status\"\n          titleHidden\n          choices={[\n            {label: 'Enabled', value: 'enabled'},\n            {label: 'Not invited', value: 'not invited'},\n            {label: 'Invited', value: 'invited'},\n            {label: 'Declined', value: 'declined'},\n          ]}\n          selected={accountStatus || []}\n          onChange={handleAccountStatusChange}\n          allowMultiple\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n    {\n      key: 'moneySpent',\n      label: 'Money spent',\n      filter: (\n        <RangeSlider\n          label=\"Money spent is between\"\n          labelHidden\n          value={moneySpent || [0, 500]}\n          prefix=\"$\"\n          output\n          min={0}\n          max={2000}\n          step={1}\n          onChange={handleMoneySpentChange}\n        />\n      ),\n    },\n  ];\n\n  const appliedFilters = [];\n  if (!isEmpty(accountStatus)) {\n    const key = 'accountStatus';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, accountStatus),\n      onRemove: handleAccountStatusRemove,\n    });\n  }\n  if (!isEmpty(moneySpent)) {\n    const key = 'moneySpent';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, moneySpent),\n      onRemove: handleMoneySpentRemove,\n    });\n  }\n  if (!isEmpty(taggedWith)) {\n    const key = 'taggedWith';\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, taggedWith),\n      onRemove: handleTaggedWithRemove,\n    });\n  }\n\n  return (\n    <div style={{height: '568px'}}>\n      <Card>\n        <ResourceList\n          resourceName={{singular: 'customer', plural: 'customers'}}\n          filterControl={\n            <Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleFiltersQueryChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleFiltersClearAll}\n              hideQueryField\n            />\n          }\n          items={[\n            {\n              id: 341,\n              url: 'customers/341',\n              name: 'Mae Jemison',\n              location: 'Decatur, USA',\n            },\n            {\n              id: 256,\n              url: 'customers/256',\n              name: 'Ellen Ochoa',\n              location: 'Los Angeles, USA',\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, location} = item;\n            const media = <Avatar customer size=\"medium\" name={name} />;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <h3>\n                  <TextStyle variation=\"strong\">{name}</TextStyle>\n                </h3>\n                <div>{location}</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </Card>\n    </div>\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case 'moneySpent':\n        return `Money spent is between $${value[0]} and $${value[1]}`;\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      case 'accountStatus':\n        return value.map((val) => `Customer ${val}`).join(', ');\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n```\n",
  "Footer help": "\n\n# Footer help\n\nFooter help is used to refer merchants to more information related to the product or feature they’re using.\n\n---\n\n## Best practices\n\nFooter help should:\n\n- Be positioned at the bottom of the interface\n- Provide links to help that’s related to the experience on the screen\n- Not be used to promote features or provide explanations for how something works\n- Never link to information designed to upsell to merchants\n- In rare cases, link to blog posts when there isn’t any help documentation to help merchants with the most logical next step in the workflow\n\nIf you’re a Shopify app developer, footer help could also:\n\n- Provide links to contact information or a support ticketing system\n\nIt’s recommended to link your footer help component to [help documentation](https://polaris.shopify.com/content/help-documentation). Linking directly to your contact information might result in receiving a higher number of emails or calls.\n\n---\n\n## Content guidelines\n\n### Footer help\n\nBy default, footer help should link to information in the Shopify Help Center and should follow this content pattern:\n\n- Learn more about {X}\n\nLinks should be:\n\nClearly labeled: Merchants shouldn’t need to guess where they’ll end up if they click on an action link. Never use “click here” as a link because it doesn’t set expectations about what’s next.\n\nFor Shopify app developers linking to contact information, footer help should follow this content pattern:\n\n- Option 1: {Contact us} about [X]\n- Option 2: Reach out to us at {contact info}\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Learn more about [shipping zones]\n- [Contact us] about email marketing\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Go to [docs] to learn about zones.\n- Find out about [themes].\n\n</div></div>\n\n---\n\n## Examples\n\n### Footer help box\n\nUse to direct merchants to more information related to the product or feature they’re working on.\n\n```jsx\n<FooterHelp>\n  Learn more about{' '}\n  <Link url=\"https://help.shopify.com/manual/orders/fulfill-orders\">\n    fulfilling orders\n  </Link>\n</FooterHelp>\n```\n\n---\n\n## Related components and documentation\n\n- To learn how to embed a link in a piece of text, [use the link component](https://polaris.shopify.com/components/link)\n- To learn how to write documentation for an app or theme, [use the the guide on how to write product documentation](https://polaris.shopify.com/content/help-documentation)\n- To learn how to provide support for an app, [use the guide on supporting your app](https://help.shopify.com/en/api/app-store/being-successful-in-the-app-store/supporting-your-app)\n",
  "Form": "\n\n# Form\n\nA wrapper component that handles the submission of forms.\n\n---\n\n## Best practices\n\nThe form component should be used to:\n\n- Wrap around all form input elements\n- Emulate the native HTML `form` element behavior with a custom `onSubmit` callback\n\n---\n\n## Examples\n\n### Custom onSubmit\n\nUse onSubmit as a callback for when your form is submitted.\n\n```jsx\nfunction FormOnSubmitExample() {\n  const [newsletter, setNewsletter] = useState(false);\n  const [email, setEmail] = useState('');\n\n  const handleSubmit = useCallback((_event) => {\n    setEmail('');\n    setNewsletter(false);\n  }, []);\n\n  const handleNewsLetterChange = useCallback(\n    (value) => setNewsletter(value),\n    [],\n  );\n\n  const handleEmailChange = useCallback((value) => setEmail(value), []);\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <FormLayout>\n        <Checkbox\n          label=\"Sign up for the Polaris newsletter\"\n          checked={newsletter}\n          onChange={handleNewsLetterChange}\n        />\n\n        <TextField\n          value={email}\n          onChange={handleEmailChange}\n          label=\"Email\"\n          type=\"email\"\n          autoComplete=\"email\"\n          helpText={\n            <span>\n              We’ll use this email address to inform you on future changes to\n              Polaris.\n            </span>\n          }\n        />\n\n        <Button submit>Submit</Button>\n      </FormLayout>\n    </Form>\n  );\n}\n```\n\n### Form without native validation\n\nUse in forms to toggle native form validation.\n\n```jsx\nfunction FormWithoutNativeValidationExample() {\n  const [url, setUrl] = useState('');\n\n  const handleSubmit = useCallback((_event) => setUrl(''), []);\n\n  const handleUrlChange = useCallback((value) => setUrl(value), []);\n\n  return (\n    <Form noValidate onSubmit={handleSubmit}>\n      <FormLayout>\n        <TextField\n          value={url}\n          onChange={handleUrlChange}\n          label=\"App URL\"\n          type=\"url\"\n          autoComplete=\"off\"\n        />\n\n        <Button submit>Submit</Button>\n      </FormLayout>\n    </Form>\n  );\n}\n```\n\n---\n\n## Related components\n\n- To arrange fields within a form using standard spacing, [use the form layout component](https://polaris.shopify.com/components/forms/form-layout)\n- To see all of the components that make up a form, [visit the form section](https://polaris.shopify.com/components/forms/checkbox#navigation) of the component library\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nThe form component wraps content in an HTML `<form>` element. This helps to support assistive technologies that use different interaction and browse modes.\n\nForms can have only one submit button and it must be at the end of the form. By default, buttons added to the form are given a `type` attribute set to `button` to avoid conflicts. To make a button the submit button instead (`type=\"submit\"`), set the `submit` prop on the button.\n\n### Keyboard support\n\nBy default, the `implicitSubmit` prop is set to `true`. This allows merchants to submit the form with the <kbd>enter</kbd>/<kbd>return</kbd> key when focus is in any text field inside the form. This provides a shortcut for keyboard users. If this behavior doesn’t fit the form, then set the prop to `false`.\n\n<!-- /content-for -->\n",
  "Form layout": "\n\n# Form layout\n\nUse form layout to arrange fields within a form using standard spacing. By default it stacks fields vertically but also supports horizontal groups of fields.\n\n---\n\n## Best practices\n\nForms should:\n\n- Be considerate of merchants’ time and privacy by only asking for information that’s required\n- Group related tasks under section titles to provide more context and make the interface easier to scan\n- Follow a logical, predictable order—for example, always ask for first name first, and last name second on forms\n\n---\n\n## Content guidelines\n\n### Form section title\n\nForm section titles should follow the content guidelines for [headings and subheadings](https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings).\n\n### Field label\n\nA label is a short description of a field. Labels are not help text, and they shouldn’t be used to provide instruction, but they should be meaningful and clearly indicate what is expected. Labels should be:\n\n- Placed above or beside the form field\n- Short and succinct (1–3 words)\n- Written in sentence case (the first word capitalized, the rest lowercase)\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Email address\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- What is your email address?\n\n</div></div>\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Phone number\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- My phone number is:\n\n</div></div>\n\n### Help text\n\nHelp text provides extra guidance to people filling out a form field. This text is easy for people to ignore, so merchants should not need to depend on it to fill out a form. As with all forms, help text should be succinct and easy to read.\n\n---\n\n## Examples\n\n### Default form layout\n\nUse to stack form fields vertically, which makes them easier to scan and complete.\n\n```jsx\n<FormLayout>\n  <TextField label=\"Store name\" onChange={() => {}} autoComplete=\"off\" />\n  <TextField\n    type=\"email\"\n    label=\"Account email\"\n    onChange={() => {}}\n    autoComplete=\"email\"\n  />\n</FormLayout>\n```\n\n<!-- content-for: android -->\n\n![Default form layout for Android](/images-from-old-styleguide/components/FormLayout/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Default form layout for iOS](/images-from-old-styleguide/components/FormLayout/ios/default@2x.png)\n\n<!-- /content-for -->\n\n### Field group\n\nUse field groups to arrange multiple fields in a row.\n\nWorks best for familiar layouts such as a row of city, state, and zip code fields. Use caution when arranging unrelated fields next to each other as this makes fields easier to miss.\n\nField groups will wrap automatically on smaller screens.\n\n```jsx\n<FormLayout>\n  <FormLayout.Group>\n    <TextField\n      type=\"number\"\n      label=\"Minimum order\"\n      onChange={() => {}}\n      autoComplete=\"off\"\n    />\n    <TextField\n      type=\"number\"\n      label=\"Maximum order\"\n      onChange={() => {}}\n      autoComplete=\"off\"\n    />\n  </FormLayout.Group>\n</FormLayout>\n```\n\n<!-- content-for: android -->\n\n![Form layout with field group for Android](/images-from-old-styleguide/components/FormLayout/android/field-group@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Form layout with field group for iOS](/images-from-old-styleguide/components/FormLayout/ios/field-group@2x.png)\n\n<!-- /content-for -->\n\n### Condensed field group\n\n<!-- example-for: web -->\n\nFor very short inputs, the width of the inputs may be reduced in order to fit more fields in the row.\n\n```jsx\n<FormLayout>\n  <FormLayout.Group condensed>\n    <TextField label=\"Length\" onChange={() => {}} autoComplete=\"off\" />\n    <TextField label=\"Width\" onChange={() => {}} autoComplete=\"off\" />\n    <TextField label=\"Height\" onChange={() => {}} autoComplete=\"off\" />\n    <TextField label=\"Unit\" onChange={() => {}} autoComplete=\"off\" />\n  </FormLayout.Group>\n</FormLayout>\n```\n\n---\n\n## Related components\n\n- To arrange the largest sections of a page, [use the layout component](https://polaris.shopify.com/components/structure/layout)\n",
  "Frame": "\n\n# Frame\n\nThe frame component, while not visible in the user interface itself, provides the structure for an application. It wraps the main elements and houses the primary [navigation](https://polaris.shopify.com/components/navigation/navigation), [top bar](https://polaris.shopify.com/components/structure/top-bar), [toast](https://polaris.shopify.com/components/feedback-indicators/toast), and [contextual save bar](https://polaris.shopify.com/components/forms/contextual-save-bar) components.\n\n---\n\n## Best practices\n\nFor the best experience when creating an application frame, use the following components:\n\n- [Top bar](https://polaris.shopify.com/components/structure/top-bar)\n- [Navigation](https://polaris.shopify.com/components/navigation/navigation)\n- [Contextual save bar](https://polaris.shopify.com/components/forms/contextual-save-bar)\n- [Toast](https://polaris.shopify.com/components/feedback-indicators/toast)\n- [Loading](https://polaris.shopify.com/components/feedback-indicators/loading)\n\n---\n\n## Examples\n\n### Frame in an application\n\nUse to present the frame structure and all of its elements.\n\n```jsx\nfunction FrameExample() {\n  const defaultState = useRef({\n    emailFieldValue: 'dharma@jadedpixel.com',\n    nameFieldValue: 'Jaded Pixel',\n  });\n  const skipToContentRef = useRef(null);\n\n  const [toastActive, setToastActive] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDirty, setIsDirty] = useState(false);\n  const [searchActive, setSearchActive] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n  const [userMenuActive, setUserMenuActive] = useState(false);\n  const [mobileNavigationActive, setMobileNavigationActive] = useState(false);\n  const [modalActive, setModalActive] = useState(false);\n  const [nameFieldValue, setNameFieldValue] = useState(\n    defaultState.current.nameFieldValue,\n  );\n  const [emailFieldValue, setEmailFieldValue] = useState(\n    defaultState.current.emailFieldValue,\n  );\n  const [storeName, setStoreName] = useState(\n    defaultState.current.nameFieldValue,\n  );\n  const [supportSubject, setSupportSubject] = useState('');\n  const [supportMessage, setSupportMessage] = useState('');\n\n  const handleSubjectChange = useCallback(\n    (value) => setSupportSubject(value),\n    [],\n  );\n  const handleMessageChange = useCallback(\n    (value) => setSupportMessage(value),\n    [],\n  );\n  const handleDiscard = useCallback(() => {\n    setEmailFieldValue(defaultState.current.emailFieldValue);\n    setNameFieldValue(defaultState.current.nameFieldValue);\n    setIsDirty(false);\n  }, []);\n  const handleSave = useCallback(() => {\n    defaultState.current.nameFieldValue = nameFieldValue;\n    defaultState.current.emailFieldValue = emailFieldValue;\n\n    setIsDirty(false);\n    setToastActive(true);\n    setStoreName(defaultState.current.nameFieldValue);\n  }, [emailFieldValue, nameFieldValue]);\n  const handleNameFieldChange = useCallback((value) => {\n    setNameFieldValue(value);\n    value && setIsDirty(true);\n  }, []);\n  const handleEmailFieldChange = useCallback((value) => {\n    setEmailFieldValue(value);\n    value && setIsDirty(true);\n  }, []);\n  const handleSearchResultsDismiss = useCallback(() => {\n    setSearchActive(false);\n    setSearchValue('');\n  }, []);\n  const handleSearchFieldChange = useCallback((value) => {\n    setSearchValue(value);\n    setSearchActive(value.length > 0);\n  }, []);\n  const toggleToastActive = useCallback(\n    () => setToastActive((toastActive) => !toastActive),\n    [],\n  );\n  const toggleUserMenuActive = useCallback(\n    () => setUserMenuActive((userMenuActive) => !userMenuActive),\n    [],\n  );\n  const toggleMobileNavigationActive = useCallback(\n    () =>\n      setMobileNavigationActive(\n        (mobileNavigationActive) => !mobileNavigationActive,\n      ),\n    [],\n  );\n  const toggleIsLoading = useCallback(\n    () => setIsLoading((isLoading) => !isLoading),\n    [],\n  );\n  const toggleModalActive = useCallback(\n    () => setModalActive((modalActive) => !modalActive),\n    [],\n  );\n\n  const toastMarkup = toastActive ? (\n    <Toast onDismiss={toggleToastActive} content=\"Changes saved\" />\n  ) : null;\n\n  const userMenuActions = [\n    {\n      items: [{content: 'Community forums'}],\n    },\n  ];\n\n  const contextualSaveBarMarkup = isDirty ? (\n    <ContextualSaveBar\n      message=\"Unsaved changes\"\n      saveAction={{\n        onAction: handleSave,\n      }}\n      discardAction={{\n        onAction: handleDiscard,\n      }}\n    />\n  ) : null;\n\n  const userMenuMarkup = (\n    <TopBar.UserMenu\n      actions={userMenuActions}\n      name=\"Dharma\"\n      detail={storeName}\n      initials=\"D\"\n      open={userMenuActive}\n      onToggle={toggleUserMenuActive}\n    />\n  );\n\n  const searchResultsMarkup = (\n    <ActionList\n      items={[{content: 'Shopify help center'}, {content: 'Community forums'}]}\n    />\n  );\n\n  const searchFieldMarkup = (\n    <TopBar.SearchField\n      onChange={handleSearchFieldChange}\n      value={searchValue}\n      placeholder=\"Search\"\n    />\n  );\n\n  const topBarMarkup = (\n    <TopBar\n      showNavigationToggle\n      userMenu={userMenuMarkup}\n      searchResultsVisible={searchActive}\n      searchField={searchFieldMarkup}\n      searchResults={searchResultsMarkup}\n      onSearchResultsDismiss={handleSearchResultsDismiss}\n      onNavigationToggle={toggleMobileNavigationActive}\n    />\n  );\n\n  const navigationMarkup = (\n    <Navigation location=\"/\">\n      <Navigation.Section\n        items={[\n          {\n            label: 'Back to Shopify',\n            icon: ArrowLeftMinor,\n          },\n        ]}\n      />\n      <Navigation.Section\n        separator\n        title=\"Jaded Pixel App\"\n        items={[\n          {\n            label: 'Dashboard',\n            icon: HomeMajor,\n            onClick: toggleIsLoading,\n          },\n          {\n            label: 'Jaded Pixel Orders',\n            icon: OrdersMajor,\n            onClick: toggleIsLoading,\n          },\n        ]}\n        action={{\n          icon: ConversationMinor,\n          accessibilityLabel: 'Contact support',\n          onClick: toggleModalActive,\n        }}\n      />\n    </Navigation>\n  );\n\n  const loadingMarkup = isLoading ? <Loading /> : null;\n\n  const skipToContentTarget = (\n    <a id=\"SkipToContentTarget\" ref={skipToContentRef} tabIndex={-1} />\n  );\n\n  const actualPageMarkup = (\n    <Page title=\"Account\">\n      <Layout>\n        {skipToContentTarget}\n        <Layout.AnnotatedSection\n          title=\"Account details\"\n          description=\"Jaded Pixel will use this as your account information.\"\n        >\n          <Card sectioned>\n            <FormLayout>\n              <TextField\n                label=\"Full name\"\n                value={nameFieldValue}\n                onChange={handleNameFieldChange}\n                autoComplete=\"name\"\n              />\n              <TextField\n                type=\"email\"\n                label=\"Email\"\n                value={emailFieldValue}\n                onChange={handleEmailFieldChange}\n                autoComplete=\"email\"\n              />\n            </FormLayout>\n          </Card>\n        </Layout.AnnotatedSection>\n      </Layout>\n    </Page>\n  );\n\n  const loadingPageMarkup = (\n    <SkeletonPage>\n      <Layout>\n        <Layout.Section>\n          <Card sectioned>\n            <TextContainer>\n              <SkeletonDisplayText size=\"small\" />\n              <SkeletonBodyText lines={9} />\n            </TextContainer>\n          </Card>\n        </Layout.Section>\n      </Layout>\n    </SkeletonPage>\n  );\n\n  const pageMarkup = isLoading ? loadingPageMarkup : actualPageMarkup;\n\n  const modalMarkup = (\n    <Modal\n      open={modalActive}\n      onClose={toggleModalActive}\n      title=\"Contact support\"\n      primaryAction={{\n        content: 'Send',\n        onAction: toggleModalActive,\n      }}\n    >\n      <Modal.Section>\n        <FormLayout>\n          <TextField\n            label=\"Subject\"\n            value={supportSubject}\n            onChange={handleSubjectChange}\n            autoComplete=\"off\"\n          />\n          <TextField\n            label=\"Message\"\n            value={supportMessage}\n            onChange={handleMessageChange}\n            autoComplete=\"off\"\n            multiline\n          />\n        </FormLayout>\n      </Modal.Section>\n    </Modal>\n  );\n\n  const logo = {\n    width: 124,\n    topBarSource:\n      'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-color.svg?6215648040070010999',\n    contextualSaveBarSource:\n      'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-gray.svg?6215648040070010999',\n    url: 'http://jadedpixel.com',\n    accessibilityLabel: 'Jaded Pixel',\n  };\n\n  return (\n    <div style={{height: '500px'}}>\n      <AppProvider\n        i18n={{\n          Polaris: {\n            Avatar: {\n              label: 'Avatar',\n              labelWithInitials: 'Avatar with initials {initials}',\n            },\n            ContextualSaveBar: {\n              save: 'Save',\n              discard: 'Discard',\n            },\n            TextField: {\n              characterCount: '{count} characters',\n            },\n            TopBar: {\n              toggleMenuLabel: 'Toggle menu',\n\n              SearchField: {\n                clearButtonLabel: 'Clear',\n                search: 'Search',\n              },\n            },\n            Modal: {\n              iFrameTitle: 'body markup',\n            },\n            Frame: {\n              skipToContent: 'Skip to content',\n              navigationLabel: 'Navigation',\n              Navigation: {\n                closeMobileNavigationLabel: 'Close navigation',\n              },\n            },\n          },\n        }}\n      >\n        <Frame\n          logo={logo}\n          topBar={topBarMarkup}\n          navigation={navigationMarkup}\n          showMobileNavigation={mobileNavigationActive}\n          onNavigationDismiss={toggleMobileNavigationActive}\n          skipToContentTarget={skipToContentRef.current}\n        >\n          {contextualSaveBarMarkup}\n          {loadingMarkup}\n          {pageMarkup}\n          {toastMarkup}\n          {modalMarkup}\n        </Frame>\n      </AppProvider>\n    </div>\n  );\n}\n```\n\n### Frame with an offset\n\nUse to present the frame structure and all of its elements with an offset provided to the theme.\n\n```jsx\nfunction FrameExample() {\n  const defaultState = useRef({\n    emailFieldValue: 'dharma@jadedpixel.com',\n    nameFieldValue: 'Jaded Pixel',\n  });\n  const skipToContentRef = useRef(null);\n\n  const [toastActive, setToastActive] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDirty, setIsDirty] = useState(false);\n  const [searchActive, setSearchActive] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n  const [userMenuActive, setUserMenuActive] = useState(false);\n  const [mobileNavigationActive, setMobileNavigationActive] = useState(false);\n  const [modalActive, setModalActive] = useState(false);\n  const [nameFieldValue, setNameFieldValue] = useState(\n    defaultState.current.nameFieldValue,\n  );\n  const [emailFieldValue, setEmailFieldValue] = useState(\n    defaultState.current.emailFieldValue,\n  );\n  const [storeName, setStoreName] = useState(\n    defaultState.current.nameFieldValue,\n  );\n  const [supportSubject, setSupportSubject] = useState('');\n  const [supportMessage, setSupportMessage] = useState('');\n\n  const handleSubjectChange = useCallback(\n    (value) => setSupportSubject(value),\n    [],\n  );\n  const handleMessageChange = useCallback(\n    (value) => setSupportMessage(value),\n    [],\n  );\n  const handleDiscard = useCallback(() => {\n    setEmailFieldValue(defaultState.current.emailFieldValue);\n    setNameFieldValue(defaultState.current.nameFieldValue);\n    setIsDirty(false);\n  }, []);\n  const handleSave = useCallback(() => {\n    defaultState.current.nameFieldValue = nameFieldValue;\n    defaultState.current.emailFieldValue = emailFieldValue;\n\n    setIsDirty(false);\n    setToastActive(true);\n    setStoreName(defaultState.current.nameFieldValue);\n  }, [emailFieldValue, nameFieldValue]);\n  const handleNameFieldChange = useCallback((value) => {\n    setNameFieldValue(value);\n    value && setIsDirty(true);\n  }, []);\n  const handleEmailFieldChange = useCallback((value) => {\n    setEmailFieldValue(value);\n    value && setIsDirty(true);\n  }, []);\n  const handleSearchResultsDismiss = useCallback(() => {\n    setSearchActive(false);\n    setSearchValue('');\n  }, []);\n  const handleSearchFieldChange = useCallback((value) => {\n    setSearchValue(value);\n    setSearchActive(value.length > 0);\n  }, []);\n  const toggleToastActive = useCallback(\n    () => setToastActive((toastActive) => !toastActive),\n    [],\n  );\n  const toggleUserMenuActive = useCallback(\n    () => setUserMenuActive((userMenuActive) => !userMenuActive),\n    [],\n  );\n  const toggleMobileNavigationActive = useCallback(\n    () =>\n      setMobileNavigationActive(\n        (mobileNavigationActive) => !mobileNavigationActive,\n      ),\n    [],\n  );\n  const toggleIsLoading = useCallback(\n    () => setIsLoading((isLoading) => !isLoading),\n    [],\n  );\n  const toggleModalActive = useCallback(\n    () => setModalActive((modalActive) => !modalActive),\n    [],\n  );\n\n  const toastMarkup = toastActive ? (\n    <Toast onDismiss={toggleToastActive} content=\"Changes saved\" />\n  ) : null;\n\n  const userMenuActions = [\n    {\n      items: [{content: 'Community forums'}],\n    },\n  ];\n\n  const contextualSaveBarMarkup = isDirty ? (\n    <ContextualSaveBar\n      message=\"Unsaved changes\"\n      saveAction={{\n        onAction: handleSave,\n      }}\n      discardAction={{\n        onAction: handleDiscard,\n      }}\n    />\n  ) : null;\n\n  const userMenuMarkup = (\n    <TopBar.UserMenu\n      actions={userMenuActions}\n      name=\"Dharma\"\n      detail={storeName}\n      initials=\"D\"\n      open={userMenuActive}\n      onToggle={toggleUserMenuActive}\n    />\n  );\n\n  const searchResultsMarkup = (\n    <ActionList\n      items={[{content: 'Shopify help center'}, {content: 'Community forums'}]}\n    />\n  );\n\n  const searchFieldMarkup = (\n    <TopBar.SearchField\n      onChange={handleSearchFieldChange}\n      value={searchValue}\n      placeholder=\"Search\"\n    />\n  );\n\n  const topBarMarkup = (\n    <TopBar\n      showNavigationToggle\n      userMenu={userMenuMarkup}\n      searchResultsVisible={searchActive}\n      searchField={searchFieldMarkup}\n      searchResults={searchResultsMarkup}\n      onSearchResultsDismiss={handleSearchResultsDismiss}\n      onNavigationToggle={toggleMobileNavigationActive}\n    />\n  );\n\n  const navigationMarkup = (\n    <Navigation location=\"/\">\n      <Navigation.Section\n        items={[\n          {\n            label: 'Back to Shopify',\n            icon: ArrowLeftMinor,\n          },\n        ]}\n      />\n      <Navigation.Section\n        separator\n        title=\"Jaded Pixel App\"\n        items={[\n          {\n            label: 'Dashboard',\n            icon: HomeMajor,\n            onClick: toggleIsLoading,\n          },\n          {\n            label: 'Jaded Pixel Orders',\n            icon: OrdersMajor,\n            onClick: toggleIsLoading,\n          },\n        ]}\n        action={{\n          icon: ConversationMinor,\n          accessibilityLabel: 'Contact support',\n          onClick: toggleModalActive,\n        }}\n      />\n    </Navigation>\n  );\n\n  const loadingMarkup = isLoading ? <Loading /> : null;\n\n  const skipToContentTarget = (\n    <a id=\"SkipToContentTarget\" ref={skipToContentRef} tabIndex={-1} />\n  );\n\n  const actualPageMarkup = (\n    <Page title=\"Account\">\n      <Layout>\n        {skipToContentTarget}\n        <Layout.AnnotatedSection\n          title=\"Account details\"\n          description=\"Jaded Pixel will use this as your account information.\"\n        >\n          <Card sectioned>\n            <FormLayout>\n              <TextField\n                label=\"Full name\"\n                value={nameFieldValue}\n                onChange={handleNameFieldChange}\n                autoComplete=\"name\"\n              />\n              <TextField\n                type=\"email\"\n                label=\"Email\"\n                value={emailFieldValue}\n                onChange={handleEmailFieldChange}\n                autoComplete=\"email\"\n              />\n            </FormLayout>\n          </Card>\n        </Layout.AnnotatedSection>\n      </Layout>\n    </Page>\n  );\n\n  const loadingPageMarkup = (\n    <SkeletonPage>\n      <Layout>\n        <Layout.Section>\n          <Card sectioned>\n            <TextContainer>\n              <SkeletonDisplayText size=\"small\" />\n              <SkeletonBodyText lines={9} />\n            </TextContainer>\n          </Card>\n        </Layout.Section>\n      </Layout>\n    </SkeletonPage>\n  );\n\n  const pageMarkup = isLoading ? loadingPageMarkup : actualPageMarkup;\n\n  const modalMarkup = (\n    <Modal\n      open={modalActive}\n      onClose={toggleModalActive}\n      title=\"Contact support\"\n      primaryAction={{\n        content: 'Send',\n        onAction: toggleModalActive,\n      }}\n    >\n      <Modal.Section>\n        <FormLayout>\n          <TextField\n            label=\"Subject\"\n            value={supportSubject}\n            onChange={handleSubjectChange}\n            autoComplete=\"off\"\n          />\n          <TextField\n            label=\"Message\"\n            value={supportMessage}\n            onChange={handleMessageChange}\n            autoComplete=\"off\"\n            multiline\n          />\n        </FormLayout>\n      </Modal.Section>\n    </Modal>\n  );\n\n  const logo = {\n    width: 124,\n    topBarSource:\n      'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-color.svg?6215648040070010999',\n    contextualSaveBarSource:\n      'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-gray.svg?6215648040070010999',\n    url: 'http://jadedpixel.com',\n    accessibilityLabel: 'Jaded Pixel',\n  };\n\n  return (\n    <div style={{height: '500px', background: '#DE1373'}}>\n      <AppProvider\n        i18n={{\n          Polaris: {\n            Avatar: {\n              label: 'Avatar',\n              labelWithInitials: 'Avatar with initials {initials}',\n            },\n            ContextualSaveBar: {\n              save: 'Save',\n              discard: 'Discard',\n            },\n            TextField: {\n              characterCount: '{count} characters',\n            },\n            TopBar: {\n              toggleMenuLabel: 'Toggle menu',\n\n              SearchField: {\n                clearButtonLabel: 'Clear',\n                search: 'Search',\n              },\n            },\n            Modal: {\n              iFrameTitle: 'body markup',\n            },\n            Frame: {\n              skipToContent: 'Skip to content',\n              navigationLabel: 'Navigation',\n              Navigation: {\n                closeMobileNavigationLabel: 'Close navigation',\n              },\n            },\n          },\n        }}\n      >\n        <Frame\n          logo={logo}\n          offset=\"60px\"\n          globalRibbon={\n            <div style={{background: '#C0FFEE', padding: '30px'}}>\n              Global ribbon\n            </div>\n          }\n          topBar={topBarMarkup}\n          navigation={navigationMarkup}\n          showMobileNavigation={mobileNavigationActive}\n          onNavigationDismiss={toggleMobileNavigationActive}\n          skipToContentTarget={skipToContentRef.current}\n        >\n          {contextualSaveBarMarkup}\n          {loadingMarkup}\n          {pageMarkup}\n          {toastMarkup}\n          {modalMarkup}\n        </Frame>\n      </AppProvider>\n    </div>\n  );\n}\n```\n\n---\n\n## Related components\n\n- To display the navigation component on small screens, to provide search and a user menu, or to style the [frame](https://polaris.shopify.com/components/structure/frame) component to reflect an application’s brand, use the [top bar](https://polaris.shopify.com/components/structure/top-bar) component.\n- To display the primary navigation within the frame of an application, use the [navigation](https://polaris.shopify.com/components/structure/navigation) component.\n- To tell merchants their options once they have made changes to a form on the page use the [contextual save bar](https://polaris.shopify.com/components/forms/contextual-save-bar) component.\n- To provide quick, at-a-glance feedback on the outcome of an action, use the [toast](https://polaris.shopify.com/components/feedback-indicators/toast) component.\n- To indicate to merchants that a page is loading or an upload is processing use the [loading](https://polaris.shopify.com/components/feedback-indicators/loading) component.\n",
  "Heading": "\n\n# Heading\n\nHeadings are used as the titles of each major section of a page in the interface. For example, [card components](https://polaris.shopify.com/components/card) generally use headings as their title.\n\n---\n\n## Best practices\n\nHeadings should:\n\n- Clearly describe the section of interface they refer to\n- Highlight the most important concept or piece of information merchants need to know\n- Sit at the top of the section of interface they’re referring to\n\n---\n\n## Content guidelines\n\nHeadings should follow the content guidelines for [headings and subheadings](https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings).\n\n---\n\n## Examples\n\n### Typographic heading\n\nUse for the title of each top-level page section.\n\n```jsx\n<Heading>Online store dashboard</Heading>\n```\n\n<!-- content-for: android -->\n\n![Typographic heading](/images-from-old-styleguide/components/Heading/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Typographic heading](/images-from-old-styleguide/components/Heading/ios/default@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Related components\n\n- To break up a section with a heading into sub-sections, [use the subheading component](https://polaris.shopify.com/components/subheading)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nA clear and consistent heading structure helps merchants who have difficulty with reading or language. It also helps screen reader users to navigate the page using keystrokes that are custom to their screen reader.\n\nUse the `element` prop to determine the specific HTML element that’s output for the heading. The component defaults to a level 2 heading (`<h2>`). Use a different value for the `element` prop if a different heading fits the context better.\n\nLearn more about writing helpful [headings and subheadings](https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings).\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nUse headings to support the hierarchy and structure of the page.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nUse headings for style alone.\n\n</div></div>\n\n<!-- /content-for -->\n",
  "Icon": "\n\n# Icon\n\nIcons are used to visually communicate core parts of the product and available actions. They can act as wayfinding tools to help merchants more easily understand where they are in the product, and common interaction patterns that are available.\n\n---\n\n## Examples\n\n### Default icon\n\nUse to visually communicate core parts of the product and available actions.\n\n```jsx\n<Icon source={CirclePlusMinor} />\n```\n\n### Colored icon\n\nApply a color to the icon.\n\n```jsx\n<div>\n  <Icon source={CirclePlusMinor} color=\"base\" />\n  <Icon source={CirclePlusMinor} color=\"subdued\" />\n  <Icon source={CirclePlusMinor} color=\"primary\" />\n  <Icon source={CirclePlusMinor} color=\"highlight\" />\n  <Icon source={CirclePlusMinor} color=\"success\" />\n  <Icon source={CirclePlusMinor} color=\"warning\" />\n  <Icon source={CirclePlusMinor} color=\"critical\" />\n</div>\n```\n\n### Icon with backdrop\n\nApply a backdrop to the icon.\n\n```jsx\n<div>\n  <Icon source={CirclePlusMinor} color=\"base\" backdrop />\n  <Icon source={CirclePlusMinor} color=\"highlight\" backdrop />\n  <Icon source={CirclePlusMinor} color=\"success\" backdrop />\n  <Icon source={CirclePlusMinor} color=\"warning\" backdrop />\n  <Icon source={CirclePlusMinor} color=\"critical\" backdrop />\n</div>\n```\n\n### User provided icon\n\nSpecify an SVG as a string to render it in an image tag, instead of an inline SVG to prevent script injection.\n\n```jsx\n<Icon source=\"<svg viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'><path d='M10.707 17.707l5-5a.999.999 0 1 0-1.414-1.414L11 14.586V3a1 1 0 1 0-2 0v11.586l-3.293-3.293a.999.999 0 1 0-1.414 1.414l5 5a.999.999 0 0 0 1.414 0' /></svg>\" />\n```\n\n### User provided icon with color and currentColor\n\nWhen using changing color of an svg and it uses currentColor, the white color is applied.\n\n```jsx\nfunction IconWithReactChild() {\n  const iconContent = () => {\n    return (\n      <svg viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n        <circle cx=\"10\" cy=\"10\" r=\"10\" fill=\"rebeccapurple\" />\n        <circle cx=\"10\" cy=\"10\" r=\"6\" fill=\"currentColor\" />\n        <circle cx=\"10\" cy=\"10\" r=\"3\" />\n      </svg>\n    );\n  };\n\n  return <Icon source={iconContent} color=\"warning\" />;\n}\n```\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nUsing icons can be a great help to merchants who have difficulties with reading, language, attention, and low vision.\n\nIf the icon appears without text, then use the `accessibilityLabel` prop to give the icon a text alternative. This adds an `aria-label` that’s conveyed to screen reader users.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Pair text and icons for clarity\n- Give the icon a text equivalent if its purpose isn’t conveyed in another way\n- Review our [alternative text](https://polaris.shopify.com/content/alternative-text) guidelines to make sure your use of icon works for all merchants\n\n```jsx\n<Icon source={OrdersMajor} />\n<p>No orders yet</p>\n```\n\n```jsx\n<Button icon={CirclePlusMinor}>Add a product</Button>\n```\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Describe what the icon looks like\n- Include “icon” in the text equivalent\n- Duplicate adjacent text in the alternative text\n- Duplicate information provided programmatically\n\n```jsx\n<Icon source={CirclePlusMinor} accessibilityLabel=\"Circle plus icon\" />\n```\n\n</div></div>\n\n<!-- /content-for -->\n\n---\n\n## Related guidelines\n\n- To learn about implementing Polaris icons with [Polaris React](https://github.com/Shopify/polaris-react) in your projects, see the [`@shopify/polaris-icons` documentation](https://www.npmjs.com/package/@shopify/polaris-icons)\n- To learn about the best practices for designing and using icons in your projects, see the [icon design guidelines](https://polaris.shopify.com/design/icons)\n- To learn how to name icons, see the [icon naming guidelines](https://polaris.shopify.com/content/naming#section-icons)\n",
  "Index table": "\n\n# Index table\n\nAn index table displays a collection of objects of the same type, like orders or products. The main job of an index table is to help merchants get an at-a-glance of the objects to perform actions or navigate to a full-page representation of it.\n\nIndex tables can also:\n\n- Support [customized index rows and columns](https://polaris.shopify.com/components/lists-and-tables/resource-item)\n- Include bulk actions so merchants can act on multiple objects at once\n- Support sorting and [filtering](https://polaris.shopify.com/components/lists-and-tables/filters) of long lists\n- Be paired with pagination to make long lists digestible\n\n---\n\n## Examples\n\n### Simple index table\n\nA index table with simple items and no bulk actions, sorting, or filtering.\n\n```jsx\nfunction SimpleIndexTableExample() {\n  const customers = [\n    {\n      id: '3411',\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n      orders: 20,\n      amountSpent: '$2,400',\n    },\n    {\n      id: '2561',\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n      orders: 30,\n      amountSpent: '$140',\n    },\n  ];\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(customers);\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent}, index) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{location}</IndexTable.Cell>\n        <IndexTable.Cell>{orders}</IndexTable.Cell>\n        <IndexTable.Cell>{amountSpent}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <Card>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={customers.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        headings={[\n          {title: 'Name'},\n          {title: 'Location'},\n          {title: 'Order count'},\n          {title: 'Amount spent'},\n        ]}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </Card>\n  );\n}\n```\n\n### Simple small screen index table\n\nA small screen index table with simple items and no bulk actions, sorting, or filtering.\n\n```jsx\nfunction SimpleSmallScreenIndexTableExample() {\n  const customers = [\n    {\n      id: '3412',\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n      orders: 20,\n      amountSpent: '$2,400',\n    },\n    {\n      id: '2562',\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n      orders: 30,\n      amountSpent: '$140',\n    },\n  ];\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(customers);\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent}, index) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <div style={{padding: '12px 16px'}}>\n          <p>\n            <TextStyle variation=\"strong\">{name}</TextStyle>\n          </p>\n          <p>{location}</p>\n          <p>{orders}</p>\n          <p>{amountSpent}</p>\n        </div>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <div style={{width: '430px'}}>\n      <Card>\n        <IndexTable\n          resourceName={resourceName}\n          itemCount={customers.length}\n          selectedItemsCount={\n            allResourcesSelected ? 'All' : selectedResources.length\n          }\n          onSelectionChange={handleSelectionChange}\n          condensed\n          headings={[\n            {title: 'Name'},\n            {title: 'Location'},\n            {title: 'Order count'},\n            {title: 'Amount spent'},\n          ]}\n        >\n          {rowMarkup}\n        </IndexTable>\n      </Card>\n    </div>\n  );\n}\n```\n\n### IndexTable with empty state\n\nUse to explain the purpose of a index table when no resources exist yet. This allows a smooth transition from a list in a loading state to a list where zero, one, or many resources exist.\n\n```jsx\nfunction IndexTableWithCustomEmptyStateExample() {\n  const customers = [];\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(customers);\n\n  const emptyStateMarkup = (\n    <EmptySearchResult\n      title={'No customers yet'}\n      description={'Try changing the filters or search term'}\n      withIllustration\n    />\n  );\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent}, index) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{location}</IndexTable.Cell>\n        <IndexTable.Cell>{orders}</IndexTable.Cell>\n        <IndexTable.Cell>{amountSpent}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <Card>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={customers.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        emptyState={emptyStateMarkup}\n        headings={[\n          {title: 'Name'},\n          {title: 'Location'},\n          {title: 'Order count'},\n          {title: 'Amount spent'},\n        ]}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </Card>\n  );\n}\n```\n\n### IndexTable with bulk actions\n\nAllows merchants to select items and perform an action on the selection.\n\n```jsx\nfunction IndexTableWithBulkActionsExample() {\n  const customers = [\n    {\n      id: '3413',\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n      orders: 20,\n      amountSpent: '$2,400',\n    },\n    {\n      id: '2563',\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n      orders: 30,\n      amountSpent: '$140',\n    },\n  ];\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(customers);\n\n  const promotedBulkActions = [\n    {\n      content: 'Edit customers',\n      onAction: () => console.log('Todo: implement bulk edit'),\n    },\n  ];\n  const bulkActions = [\n    {\n      content: 'Add tags',\n      onAction: () => console.log('Todo: implement bulk add tags'),\n    },\n    {\n      content: 'Remove tags',\n      onAction: () => console.log('Todo: implement bulk remove tags'),\n    },\n    {\n      content: 'Delete customers',\n      onAction: () => console.log('Todo: implement bulk delete'),\n    },\n  ];\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent}, index) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{location}</IndexTable.Cell>\n        <IndexTable.Cell>{orders}</IndexTable.Cell>\n        <IndexTable.Cell>{amountSpent}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <Card>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={customers.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        bulkActions={bulkActions}\n        promotedBulkActions={promotedBulkActions}\n        headings={[\n          {title: 'Name'},\n          {title: 'Location'},\n          {title: 'Order count'},\n          {title: 'Amount spent'},\n        ]}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </Card>\n  );\n}\n```\n\n### IndexTable with multiple promoted bulk actions\n\nAllows merchants to select items and perform different actions on the selection.\n\n```jsx\nfunction IndexTableWithMultiplePromotedBulkActionsExample() {\n  const customers = [\n    {\n      id: '3413',\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n      orders: 20,\n      amountSpent: '$2,400',\n    },\n    {\n      id: '2563',\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n      orders: 30,\n      amountSpent: '$140',\n    },\n  ];\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(customers);\n\n  const promotedBulkActions = [\n    {\n      content: 'Capture payments',\n      onAction: () => console.log('Todo: implement payment capture'),\n    },\n    {\n      title: 'Edit customers',\n      actions: [\n        {\n          content: 'Add customers',\n          onAction: () => console.log('Todo: implement adding customers'),\n        },\n        {\n          content: 'Delete customers',\n          onAction: () => console.log('Todo: implement deleting customers'),\n        },\n      ],\n    },\n    {\n      title: 'Export',\n      actions: [\n        {\n          content: 'Export as PDF',\n          onAction: () => console.log('Todo: implement PDF exporting'),\n        },\n        {\n          content: 'Export as CSV',\n          onAction: () => console.log('Todo: implement CSV exporting'),\n        },\n      ],\n    },\n  ];\n  const bulkActions = [\n    {\n      content: 'Add tags',\n      onAction: () => console.log('Todo: implement bulk add tags'),\n    },\n    {\n      content: 'Remove tags',\n      onAction: () => console.log('Todo: implement bulk remove tags'),\n    },\n    {\n      content: 'Delete customers',\n      onAction: () => console.log('Todo: implement bulk delete'),\n    },\n  ];\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent}, index) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{location}</IndexTable.Cell>\n        <IndexTable.Cell>{orders}</IndexTable.Cell>\n        <IndexTable.Cell>{amountSpent}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <Card>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={customers.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        bulkActions={bulkActions}\n        promotedBulkActions={promotedBulkActions}\n        headings={[\n          {title: 'Name'},\n          {title: 'Location'},\n          {title: 'Order count'},\n          {title: 'Amount spent'},\n        ]}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </Card>\n  );\n}\n```\n\n### IndexTable with bulk actions and selection across pages\n\nAllows merchants to select items, perform an action on the selection and select resources across pages.\n\n```jsx\nfunction IndexTableWithBulkActionsAndSelectionAcrossPagesExample() {\n  const customers = [\n    {\n      id: '3414',\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n      orders: 20,\n      amountSpent: '$2,400',\n    },\n    {\n      id: '2564',\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n      orders: 30,\n      amountSpent: '$140',\n    },\n  ];\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(customers);\n\n  const promotedBulkActions = [\n    {\n      content: 'Edit customers',\n      onAction: () => console.log('Todo: implement bulk edit'),\n    },\n  ];\n  const bulkActions = [\n    {\n      content: 'Add tags',\n      onAction: () => console.log('Todo: implement bulk add tags'),\n    },\n    {\n      content: 'Remove tags',\n      onAction: () => console.log('Todo: implement bulk remove tags'),\n    },\n    {\n      content: 'Delete customers',\n      onAction: () => console.log('Todo: implement bulk delete'),\n    },\n  ];\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent}, index) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{location}</IndexTable.Cell>\n        <IndexTable.Cell>{orders}</IndexTable.Cell>\n        <IndexTable.Cell>{amountSpent}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <Card>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={customers.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        hasMoreItems\n        bulkActions={bulkActions}\n        promotedBulkActions={promotedBulkActions}\n        headings={[\n          {title: 'Name'},\n          {title: 'Location'},\n          {title: 'Order count'},\n          {title: 'Amount spent'},\n        ]}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </Card>\n  );\n}\n```\n\n### IndexTable with loading state\n\nNotifies merchants that index table items are being processed.\n\n```jsx\nfunction IndexTableWithLoadingExample() {\n  const customers = [\n    {\n      id: '3415',\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n      orders: 20,\n      amountSpent: '$2,400',\n    },\n    {\n      id: '2565',\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n      orders: 30,\n      amountSpent: '$140',\n    },\n  ];\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(customers);\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent}, index) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{location}</IndexTable.Cell>\n        <IndexTable.Cell>{orders}</IndexTable.Cell>\n        <IndexTable.Cell>{amountSpent}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <Card>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={customers.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        loading\n        headings={[\n          {title: 'Name'},\n          {title: 'Location'},\n          {title: 'Order count'},\n          {title: 'Amount spent'},\n        ]}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </Card>\n  );\n}\n```\n\n### IndexTable with filtering\n\nAllows merchants to narrow the index table to a subset of the original items.\n\n```jsx\nfunction IndexTableWithFilteringExample() {\n  const customers = [\n    {\n      id: '3416',\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n      orders: 20,\n      amountSpent: '$2,400',\n    },\n    {\n      id: '2566',\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n      orders: 30,\n      amountSpent: '$140',\n    },\n  ];\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(customers);\n  const [taggedWith, setTaggedWith] = useState('VIP');\n  const [queryValue, setQueryValue] = useState(null);\n  const [sortValue, setSortValue] = useState('today');\n\n  const handleTaggedWithChange = useCallback(\n    (value) => setTaggedWith(value),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(null), []);\n  const handleClearAll = useCallback(() => {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n  const handleSortChange = useCallback((value) => setSortValue(value), []);\n\n  const filters = [\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: 'taggedWith',\n          label: disambiguateLabel('taggedWith', taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  const sortOptions = [\n    {label: 'Today', value: 'today'},\n    {label: 'Yesterday', value: 'yesterday'},\n    {label: 'Last 7 days', value: 'lastWeek'},\n  ];\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent}, index) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{location}</IndexTable.Cell>\n        <IndexTable.Cell>{orders}</IndexTable.Cell>\n        <IndexTable.Cell>{amountSpent}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <Card>\n      <div style={{padding: '16px', display: 'flex'}}>\n        <div style={{flex: 1}}>\n          <Filters\n            queryValue={queryValue}\n            filters={filters}\n            appliedFilters={appliedFilters}\n            onQueryChange={setQueryValue}\n            onQueryClear={handleQueryValueRemove}\n            onClearAll={handleClearAll}\n          />\n        </div>\n        <div style={{paddingLeft: '0.25rem'}}>\n          <Select\n            labelInline\n            label=\"Sort by\"\n            options={sortOptions}\n            value={sortValue}\n            onChange={handleSortChange}\n          />\n        </div>\n      </div>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={customers.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        headings={[\n          {title: 'Name'},\n          {title: 'Location'},\n          {title: 'Order count'},\n          {title: 'Amount spent'},\n        ]}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </Card>\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n```\n\n### Index table with row status\n\nAn index table with rows differentiated by status.\n\n```jsx\nfunction IndexTableWithRowStatusExample() {\n  const customers = [\n    {\n      id: '3411',\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n      orders: 20,\n      amountSpent: '$2,400',\n      status: 'success',\n    },\n    {\n      id: '2561',\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n      orders: 30,\n      amountSpent: '$140',\n      status: 'subdued',\n    },\n  ];\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(customers);\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent, status}, index) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n        status={status}\n      >\n        <IndexTable.Cell>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{location}</IndexTable.Cell>\n        <IndexTable.Cell>{orders}</IndexTable.Cell>\n        <IndexTable.Cell>{amountSpent}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <Card>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={customers.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        headings={[\n          {title: 'Name'},\n          {title: 'Location'},\n          {title: 'Order count'},\n          {title: 'Amount spent'},\n        ]}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </Card>\n  );\n}\n```\n\n### Index table with sticky last column\n\nAn index table with a sticky last column that stays visible on scroll. The last heading will also be sticky if not hidden.\n\n```jsx\nfunction StickyLastCellIndexTableExample() {\n  const customers = [\n    {\n      id: '3411',\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n      orders: 20,\n      amountSpent: '$2,400',\n    },\n    {\n      id: '2561',\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n      orders: 30,\n      amountSpent: '$140',\n    },\n  ];\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(customers);\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent}, index) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{location}</IndexTable.Cell>\n        <IndexTable.Cell>{orders}</IndexTable.Cell>\n        <IndexTable.Cell>{amountSpent}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <Card>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={customers.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        headings={[\n          {title: 'Name'},\n          {title: 'Location'},\n          {title: 'Order count'},\n          {title: 'Amount spent', hidden: false},\n        ]}\n        lastColumnSticky\n      >\n        {rowMarkup}\n      </IndexTable>\n    </Card>\n  );\n}\n```\n\n### Index table without checkboxes\n\nAn index table without checkboxes and bulk actions.\n\n```jsx\nfunction IndexTableWithoutCheckboxesExample() {\n  const customers = [\n    {\n      id: '3411',\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n      orders: 20,\n      amountSpent: '$2,400',\n    },\n    {\n      id: '2561',\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n      orders: 30,\n      amountSpent: '$140',\n    },\n  ];\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent}, index) => (\n      <IndexTable.Row id={id} key={id} position={index}>\n        <IndexTable.Cell>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{location}</IndexTable.Cell>\n        <IndexTable.Cell>{orders}</IndexTable.Cell>\n        <IndexTable.Cell>{amountSpent}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <Card>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={customers.length}\n        headings={[\n          {title: 'Name'},\n          {title: 'Location'},\n          {title: 'Order count'},\n          {title: 'Amount spent', hidden: false},\n        ]}\n        selectable={false}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </Card>\n  );\n}\n```\n\n### IndexTable with all of its elements\n\nUse as a broad example that includes most of the elements and props available to index table.\n\n```jsx\nfunction IndexTableWithAllElementsExample() {\n  const customers = [\n    {\n      id: '3417',\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n      orders: 20,\n      amountSpent: '$2,400',\n    },\n    {\n      id: '2567',\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n      orders: 30,\n      amountSpent: '$140',\n    },\n  ];\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(customers);\n  const [taggedWith, setTaggedWith] = useState('VIP');\n  const [queryValue, setQueryValue] = useState(null);\n  const [sortValue, setSortValue] = useState('today');\n\n  const handleTaggedWithChange = useCallback(\n    (value) => setTaggedWith(value),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(null), []);\n  const handleClearAll = useCallback(() => {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n  const handleSortChange = useCallback((value) => setSortValue(value), []);\n\n  const promotedBulkActions = [\n    {\n      content: 'Edit customers',\n      onAction: () => console.log('Todo: implement bulk edit'),\n    },\n  ];\n  const bulkActions = [\n    {\n      content: 'Add tags',\n      onAction: () => console.log('Todo: implement bulk add tags'),\n    },\n    {\n      content: 'Remove tags',\n      onAction: () => console.log('Todo: implement bulk remove tags'),\n    },\n    {\n      content: 'Delete customers',\n      onAction: () => console.log('Todo: implement bulk delete'),\n    },\n  ];\n\n  const filters = [\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: 'taggedWith',\n          label: disambiguateLabel('taggedWith', taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  const sortOptions = [\n    {label: 'Today', value: 'today'},\n    {label: 'Yesterday', value: 'yesterday'},\n    {label: 'Last 7 days', value: 'lastWeek'},\n  ];\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent}, index) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <IndexTable.Cell>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{location}</IndexTable.Cell>\n        <IndexTable.Cell>{orders}</IndexTable.Cell>\n        <IndexTable.Cell>{amountSpent}</IndexTable.Cell>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <Card>\n      <div style={{padding: '16px', display: 'flex'}}>\n        <div style={{flex: 1}}>\n          <Filters\n            queryValue={queryValue}\n            filters={filters}\n            appliedFilters={appliedFilters}\n            onQueryChange={setQueryValue}\n            onQueryClear={handleQueryValueRemove}\n            onClearAll={handleClearAll}\n          />\n        </div>\n        <div style={{paddingLeft: '0.25rem'}}>\n          <Select\n            labelInline\n            label=\"Sort by\"\n            options={sortOptions}\n            value={sortValue}\n            onChange={handleSortChange}\n          />\n        </div>\n      </div>\n      <IndexTable\n        resourceName={resourceName}\n        itemCount={customers.length}\n        selectedItemsCount={\n          allResourcesSelected ? 'All' : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        hasMoreItems\n        bulkActions={bulkActions}\n        promotedBulkActions={promotedBulkActions}\n        lastColumnSticky\n        headings={[\n          {title: 'Name'},\n          {title: 'Location'},\n          {title: 'Order count'},\n          {title: 'Amount spent', hidden: false},\n        ]}\n      >\n        {rowMarkup}\n      </IndexTable>\n    </Card>\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n```\n\n### Small screen IndexTable with all of its elements\n\nUse as a broad example that includes most of the elements and props available to index table.\n\n```jsx\nfunction SmallScreenIndexTableWithAllElementsExample() {\n  const customers = [\n    {\n      id: '3418',\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n      orders: 20,\n      amountSpent: '$2,400',\n    },\n    {\n      id: '2568',\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n      orders: 30,\n      amountSpent: '$140',\n    },\n  ];\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(customers);\n  const [taggedWith, setTaggedWith] = useState('VIP');\n  const [queryValue, setQueryValue] = useState(null);\n  const [sortValue, setSortValue] = useState('today');\n\n  const handleTaggedWithChange = useCallback(\n    (value) => setTaggedWith(value),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(null), []);\n  const handleClearAll = useCallback(() => {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n  const handleSortChange = useCallback((value) => setSortValue(value), []);\n\n  const promotedBulkActions = [\n    {\n      content: 'Edit customers',\n      onAction: () => console.log('Todo: implement bulk edit'),\n    },\n  ];\n  const bulkActions = [\n    {\n      content: 'Add tags',\n      onAction: () => console.log('Todo: implement bulk add tags'),\n    },\n    {\n      content: 'Remove tags',\n      onAction: () => console.log('Todo: implement bulk remove tags'),\n    },\n    {\n      content: 'Delete customers',\n      onAction: () => console.log('Todo: implement bulk delete'),\n    },\n  ];\n\n  const filters = [\n    {\n      key: 'taggedWith',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: 'taggedWith',\n          label: disambiguateLabel('taggedWith', taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  const sortOptions = [\n    {label: 'Today', value: 'today'},\n    {label: 'Yesterday', value: 'yesterday'},\n    {label: 'Last 7 days', value: 'lastWeek'},\n  ];\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent}, index) => (\n      <IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      >\n        <div style={{padding: '.75rem 1rem'}}>\n          <p>\n            <TextStyle variation=\"strong\">{name}</TextStyle>\n          </p>\n          <p>{location}</p>\n          <p>{orders}</p>\n          <p>{amountSpent}</p>\n        </div>\n      </IndexTable.Row>\n    ),\n  );\n\n  return (\n    <div style={{width: '430px'}}>\n      <Card>\n        <div style={{padding: '16px', display: 'flex'}}>\n          <div style={{flex: 1}}>\n            <Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={setQueryValue}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleClearAll}\n            />\n          </div>\n          <div style={{paddingLeft: '0.25rem'}}>\n            <Select\n              labelInline\n              label=\"Sort by\"\n              options={sortOptions}\n              value={sortValue}\n              onChange={handleSortChange}\n            />\n          </div>\n        </div>\n        <IndexTable\n          resourceName={resourceName}\n          itemCount={customers.length}\n          selectedItemsCount={\n            allResourcesSelected ? 'All' : selectedResources.length\n          }\n          onSelectionChange={handleSelectionChange}\n          hasMoreItems\n          condensed\n          bulkActions={bulkActions}\n          promotedBulkActions={promotedBulkActions}\n          headings={[\n            {title: 'Name'},\n            {title: 'Location'},\n            {title: 'Order count'},\n            {title: 'Amount spent'},\n          ]}\n        >\n          {rowMarkup}\n        </IndexTable>\n      </Card>\n    </div>\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case 'taggedWith':\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n```\n\n---\n\n## Build\n\nUsing an index table in a project involves combining the following components and subcomponents:\n\n- IndexTable\n- [IndexTableRow](#index-table-row)\n- [IndexTableCell](#index-table-cell)\n- [Filters](https://polaris.shopify.com/components/lists-and-tables/filters) (optional)\n- Pagination component (optional)\n\n<!-- hint -->\n\nThe index table component provides the UI elements for list sorting, filtering, and pagination, but doesn’t provide the logic for these operations. When a sort option is changed, filter added, or second page requested, you’ll need to handle that event (including any network requests) and then update the component with new props.\n\n<!-- end -->\n\n---\n\n## Purpose\n\nShopify is organized around objects that represent merchants businesses, like customers, products, and orders. Each individual order, for example, is given a dedicated page that can be linked to. In Shopify, we call these types of objects _resources_, and we call the object’s dedicated page its _details page_.\n\n### Problem\n\nTake orders as an example. Merchants may have a lot of them. They need a way to scan their orders, view the different attributes on each order, and find out which ones need action first. In other words, they need a way find an individual order, call up more information about it, and take action on it.\n\n### Solution\n\nIndex tables function as:\n\n- A content format, presenting a set of individual resources with multiple columns of information for each\n- A system for taking action on one or more individual resources\n- A way to navigate to an individual resource’s details page\n\nBecause a details page displays all the content and actions for an individual resource, you can think of a resource list as a summary of these details pages. In this way resource lists bridge a middle level in Shopify’s navigation hierarchy.\n\n---\n\n## Best practices\n\nIndex tables should:\n\n- Have items that perform an action when clicked. The action should navigate to the resource’s details page or otherwise provide more detail about the item.\n- [Customize the content and layout](https://polaris.shopify.com/components/lists-and-tables/resource-item) of their items rows to surface information to support merchants’ needs.\n- Support sorting if the list can be long, and especially if different merchant tasks benefit from different sort orders.\n- Support [filtering](https://polaris.shopify.com/components/lists-and-tables/filters) if the list can be long.\n- Paginate when the current list contains more than 50 items.\n- Use the [skeleton page](https://polaris.shopify.com/components/feedback-indicators/skeleton-page) component on initial page load for the rest of the page if the loading prop is true and items are processing.\n\nIndex tables can optionally:\n\n- Provide bulk actions for tasks that are often applied to many list items at once. For example, merchants may want to add the same tag to a large number of products.\n\n---\n\n## Content guidelines\n\nIndex tables should:\n\n- Identify the type of resource, usually with a heading\n\n  <div class=\"usage-list\"><div class=\"usage-list-part\">\n\n  #### Do\n\n  - Products\n  - Showing 50 products\n\n  </div><div class=\"usage-list-part\">\n\n#### Don’t\n\n  - _No heading_\n\n  </div></div>\n\n- Indicate when not all members of a resource are being shown. For a card summarizing and linking to recently purchased products:\n\n  <div class=\"usage-list\"><div class=\"usage-list-part\">\n\n  #### Do\n\n  - Popular products this week\n\n  </div><div class=\"usage-list-part\">\n\n#### Don’t\n\n  - Products\n\n  </div></div>\n\n- Follow the verb + noun formula for bulk actions\n\n- Follow the [content guidelines for filter options and applied filters](https://polaris.shopify.com/components/lists-and-tables/filters#section-content-guidelines)\n\n---\n\n<a name=\"index-table-row\"></a>\n\n## IndexTableRow\n\nAn `IndexTableRow` is used to render a row representing an item within an `IndexTable`\n\n### IndexTableRow properties\n\n| Prop     | Type      | Description                                                     |\n| -------- | --------- | --------------------------------------------------------------- |\n| id       | string    | A unique identifier for the row                                 |\n| selected | boolean   | A boolean property indicating whether the row is selected       |\n| position | number    | The index position of the row                                   |\n| subdued  | boolean   | A boolean property indicating whether the row should be subdued |\n| status   | RowStatus | A property indicating whether the row should have a status      |\n\n<a name=\"index-table-cell\"></a>\n\n## IndexTableCell\n\nAn `IndexTableCell` is used to render a single cell within an `IndexTableRow`\n\n### IndexTableCell properties\n\n| Prop  | Type    | Description                                                                      |\n| ----- | ------- | -------------------------------------------------------------------------------- |\n| flush | boolean | A boolean property indicating whether the cell should remove the default padding |\n\n---\n\n## Related components\n\n- To create an actionable list of related items that link to details pages, such as a list of customers, use the [resource list component](https://polaris.shopify.com/components/lists-and-tables/resource-list)\n- To present structured data for comparison and analysis, like when helping merchants to gain insights or review analytics, use the [data table component](https://polaris.shopify.com/components/lists-and-tables/data-table)\n- To display a simple list of related content, [use the list component](https://polaris.shopify.com/components/lists-and-tables/list)\n",
  "Inline error": "\n\n# Inline error\n\nInline errors are brief, in-context messages that tell merchants something went wrong with a single or group of inputs in a form. Use inline errors to help merchants understand why a form input may not be valid and how to fix it.\n\n---\n\n## Best practices\n\nInline errors should:\n\n- Be brief\n- Be written in sentence case\n- Be visible immediately upon a form input that is not valid\n- Be removed as soon as the input is valid so merchants can immediately tell they fixed the issue\n- Describe specific solutions so merchants can successfully complete their task in the form\n- Not be placed out of context of the input or group of inputs they describe\n\n[Learn more about error message patterns](https://polaris.shopify.com/experiences/error-messages#section-form-validation)\n\n---\n\n## Content guidelines\n\n### Inline error messages\n\nSince the error message is directly below the source of the problem, the copy only needs to explain why the error happened. Optionally, the message can clarify what to do next or offer a one-click fix.\n\nInline error messages should:\n\n- Clearly explain what went wrong, give a next step, or offer a one-click fix\n- Be short and concise, no more than a single sentence\n- Use [passive voice](https://polaris.shopify.com/content/grammar-and-mechanics) so merchants don’t feel like they’re being blamed for the error\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Store name is required\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- You didn’t enter a store name.\n\n</div></div>\n\n---\n\n## Examples\n\n### Basic inline error\n\nUse when the merchant has entered information that is not valid into multiple fields inside of a form, or needs to be displayed in a non-standard position in the form layout.\n\n```jsx\n<InlineError message=\"Store name is required\" fieldID=\"myFieldID\" />\n```\n\n<!-- content-for: android -->\n\n![Inline error for Android](/images-from-old-styleguide/components/InlineError/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Inline error for iOS](/images-from-old-styleguide/components/InlineError/ios/default@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Related components\n\n- To create a list of exceptions that describe a resource, [use the exception list component](https://polaris.shopify.com/components/lists-and-tables/exception-list)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n- Use the required `fieldID` prop to give the inline error a unique `id`. This ties the error to a form field using `aria-describedby` so that it's conveyed to screen reader users.\n- Use the required `message` prop to provide the text that describes the error.\n- The inline error [icon](https://polaris.shopify.com/design/icons) helps visually identify the error message for merchants who have difficulty seeing [colors](https://polaris.shopify.com/design/colors) or who use settings that remove color from the page.\n\n<!-- /content-for -->\n",
  "Keyboard accessories": "\n\n# Keyboard accessories\n\nOn iOS and Android, software keyboards appear on the screen when typing. Keyboard accessories allows additional content and actions based on what merchants are doing. For example, when merchants are updating a description and need controls for bolding, italicizing, and underlining.\n\n---\n\n## Best practices\n\nKeyboard accessories should:\n\n- Have a maximum height of:\n  - 44pt on iOS\n  - 48dp on Android\n- Include a horizontally swipeable interaction if there is a lot of content or a large number of actions you need to make available to merchants\n  - Provide an easy hint or introduction to make merchants aware of the swipe interaction\n- Make actions grouped and expandable if possible, in order to reduce visual noise and complexity for merchants\n\n---\n\n## Examples\n\n### Keyboard accessories with actions\n\n<!-- example-for: ios, android -->\n\nUse the action accessories to add actions that are relevant to what merchants are entering on the screen.\n\n<!-- content-for: android -->\n\n![Keyboard accessory with actions](/images-from-old-styleguide/components/KeyboardAccessories/android/toolbar@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Keyboard accessory with actions](/images-from-old-styleguide/components/KeyboardAccessories/ios/toolbar@2x.png)\n\n<!-- /content-for -->\n\n### Keyboard accessories with text field\n\n<!-- example-for: ios, android -->\n\nUse to make message entry easier in messaging and chat-based products.\n\n<!-- content-for: android -->\n\n![Keyboard accessory with text field](/images-from-old-styleguide/components/KeyboardAccessories/android/text-field@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Keyboard accessory with text field](/images-from-old-styleguide/components/KeyboardAccessories/ios/text-field@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Related components\n\n- To make more actions visible in keyboard accessories, use [the icon component](https://polaris.shopify.com/components/images-and-icons/icon) for action labels\n- To group actions within keyboard accessories, use [the button group component](https://polaris.shopify.com/components/actions/button-group)\n- For chat-based interfaces, use [the text field component](https://polaris.shopify.com/components/forms/text-field) in keyboard accessories\n",
  "Keyboard key": "\n\n# Keyboard key\n\nKeyboard key is used to educate merchants about keyboard shortcuts.\n\n---\n\n## Best practices\n\nThe keyboard key component should:\n\n- Include a heading to introduce and explain the shortcuts being described when more than one shortcut is listed\n- Include an action label to describe what will happen if merchants use the key combination\n\n---\n\n## Content guidelines\n\n### Heading\n\nHeadings above the keyboard key should:\n\n- Label the type of keyboard shortcuts being presented\n- Follow the content guidelines for [headings and subheadings](https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings)\n\n### Shortcut description\n\nThe shortcut description should describe what action is taken when merchants tap certain keys. When a hotkey combination takes merchants to a location in the interface, the format should be:\n\n| Properties | Type   | Description                           |\n| ---------- | ------ | ------------------------------------- |\n| children   | string | The content to display inside the key |\n\n---\n\n## Examples\n\n### List of keyboard shortcuts\n\nUse to list a related set of keyboard shortcuts.\n\n```jsx\n<KeyboardKey>Ctrl</KeyboardKey>\n```\n\n---\n\n## Related components\n\n- To add a tooltip for a button with an associated keyboard shortcut, [use the tooltip component](https://polaris.shopify.com/components/tooltip)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nThe text of the keyboard key component is read by screen readers, but the visual formatting isn’t conveyed. Ensure that merchants are able to understand information about keyboard shortcuts without relying on the visual style of the component.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Pair lists of keyboard shortcut information with a heading that describes the section (“Keyboard shortcuts”).\n- Provide inline keyboard instructions with context.\n\n```JSX\nPress the <KeyboardKey>Ctrl</KeyboardKey> key.\n```\n\n</div><div class=\"usage-list-part\">\n\n#### Don't\n\n- Use the keyboard key component alone to convey keyboard instructions.\n\n```JSX\nUse <KeyboardKey>Ctrl</KeyboardKey>\n```\n\n</div></div>\n\n<!-- /content-for -->\n",
  "Layout": "\n\n# Layout\n\nThe layout component is used to create the main layout on a page. Layouts sections come in three main configurations: one-column, two-column, and annotated. One and two column layouts can be combined in the same page. Annotated layouts should be used on their own and only on settings pages.\n\n---\n\n## Best practices\n\nThe layout component should:\n\n- Use sections with white backgrounds for primary content and sections with grey backgrounds for secondary content that is less important\n- Center cards on the background when there is no secondary card on the page to stop the content from becoming too wide\n- Group similar concepts and actions together in cards\n- Separate different cards using a full-width divider\n- Structure primary/secondary, two-column layouts so the primary ⅔ section is used for main information and the secondary ⅓ section is used for information that might not be used as often but remains helpful for context or secondary tasks\n- Use equal-width layouts with two or more columns when each layout section has the same importance\n\n---\n\n## Content guidelines\n\nThe content that appears in the layout component comes from cards and annotated sections.\n\n### Cards\n\nContent from cards should follow the content guidelines for [cards](https://polaris.shopify.com/components/structure/card#section-content-guidelines).\n\n### Annotated section titles\n\nAnnotated section titles should follow the content guidelines for [headings and subheadings](https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings).\n\n### Annotated section descriptions\n\nAnnotated section descriptions should:\n\n- Be used if the explanation or purpose of the associated cards isn’t clear\n- Provide instructions for any choices merchants need to make, or explain the purpose of the section\n- Be short, no more than 1–3 sentences\n- Direct merchants to more content in the Help Center with “Learn more” links\n- Not repeat the section title\n- Use complete sentences and regular punctuation\n\n---\n\n## Examples\n\n### One-column layout\n\nUse to have a single section on its own in a full-width container. Use for simple pages and as a container for banners and other full-width content.\n\n```jsx\n<Layout>\n  <Layout.Section>\n    <Card title=\"Online store dashboard\" sectioned>\n      <p>View a summary of your online store’s performance.</p>\n    </Card>\n  </Layout.Section>\n</Layout>\n```\n\n### Two columns with primary and secondary widths\n\nUse to follow a normal section with a secondary section to create a 2/3 + 1/3 layout on detail pages (such as individual product or order pages). Can also be used on any page that needs to structure a lot of content. This layout stacks the columns on small screens.\n\n```jsx\n<Layout>\n  <Layout.Section>\n    <Card title=\"Order details\" sectioned>\n      <p>View a summary of your order.</p>\n    </Card>\n  </Layout.Section>\n  <Layout.Section secondary>\n    <Card title=\"Tags\" sectioned>\n      <p>Add tags to your order.</p>\n    </Card>\n  </Layout.Section>\n</Layout>\n```\n\n### Two columns with equal width\n\nUse to create a ½ + ½ layout. Can be used to display content of equal importance. This layout will stack the columns on small screens.\n\n```jsx\n<Layout>\n  <Layout.Section oneHalf>\n    <Card title=\"Florida\" actions={[{content: 'Manage'}]}>\n      <Card.Section>\n        <TextStyle variation=\"subdued\">455 units available</TextStyle>\n      </Card.Section>\n      <Card.Section title=\"Items\">\n        <ResourceList\n          resourceName={{singular: 'product', plural: 'products'}}\n          items={[\n            {\n              id: 341,\n              url: 'produdcts/341',\n              name: 'Black & orange scarf',\n              sku: '9234194023',\n              quantity: '254',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/black-orange-stripes_373x@2x.jpg\"\n                  alt=\"Black orange scarf\"\n                />\n              ),\n            },\n            {\n              id: 256,\n              url: 'produdcts/256',\n              name: 'Tucan scarf',\n              sku: '9234194010',\n              quantity: '201',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/tucan-scarf_373x@2x.jpg\"\n                  alt=\"Tucan scarf\"\n                />\n              ),\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, sku, media, quantity} = item;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <h3>\n                  <TextStyle variation=\"strong\">{name}</TextStyle>\n                </h3>\n                <div>SKU: {sku}</div>\n                <div>{quantity} available</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </Card.Section>\n    </Card>\n  </Layout.Section>\n  <Layout.Section oneHalf>\n    <Card title=\"Nevada\" actions={[{content: 'Manage'}]}>\n      <Card.Section>\n        <TextStyle variation=\"subdued\">301 units available</TextStyle>\n      </Card.Section>\n      <Card.Section title=\"Items\">\n        <ResourceList\n          resourceName={{singular: 'product', plural: 'products'}}\n          items={[\n            {\n              id: 342,\n              url: 'produdcts/342',\n              name: 'Black & orange scarf',\n              sku: '9234194023',\n              quantity: '100',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/black-orange-stripes_373x@2x.jpg\"\n                  alt=\"Black orange scarf\"\n                />\n              ),\n            },\n            {\n              id: 257,\n              url: 'produdcts/257',\n              name: 'Tucan scarf',\n              sku: '9234194010',\n              quantity: '201',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/tucan-scarf_373x@2x.jpg\"\n                  alt=\"Tucan scarf\"\n                />\n              ),\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, sku, media, quantity} = item;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <h3>\n                  <TextStyle variation=\"strong\">{name}</TextStyle>\n                </h3>\n                <div>SKU: {sku}</div>\n                <div>{quantity} available</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </Card.Section>\n    </Card>\n  </Layout.Section>\n</Layout>\n```\n\n### Three columns with equal width\n\nUse to create a ⅓ + ⅓ + ⅓ layout. Can be used to display content of equal importance. This layout will stack the columns on small screens.\n\n```jsx\n<Layout>\n  <Layout.Section oneThird>\n    <Card title=\"Florida\" actions={[{content: 'Manage'}]}>\n      <Card.Section>\n        <TextStyle variation=\"subdued\">455 units available</TextStyle>\n      </Card.Section>\n      <Card.Section title=\"Items\">\n        <ResourceList\n          resourceName={{singular: 'product', plural: 'products'}}\n          items={[\n            {\n              id: 343,\n              url: 'produdcts/343',\n              name: 'Black & orange scarf',\n              sku: '9234194023',\n              quantity: '254',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/black-orange-stripes_373x@2x.jpg\"\n                  alt=\"Black orange scarf\"\n                />\n              ),\n            },\n            {\n              id: 258,\n              url: 'produdcts/258',\n              name: 'Tucan scarf',\n              sku: '9234194010',\n              quantity: '201',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/tucan-scarf_373x@2x.jpg\"\n                  alt=\"Tucan scarf\"\n                />\n              ),\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, sku, media, quantity} = item;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <h3>\n                  <TextStyle variation=\"strong\">{name}</TextStyle>\n                </h3>\n                <div>SKU: {sku}</div>\n                <div>{quantity} available</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </Card.Section>\n    </Card>\n  </Layout.Section>\n  <Layout.Section oneThird>\n    <Card title=\"Nevada\" actions={[{content: 'Manage'}]}>\n      <Card.Section>\n        <TextStyle variation=\"subdued\">301 units available</TextStyle>\n      </Card.Section>\n      <Card.Section title=\"Items\">\n        <ResourceList\n          resourceName={{singular: 'product', plural: 'products'}}\n          items={[\n            {\n              id: 344,\n              url: 'produdcts/344',\n              name: 'Black & orange scarf',\n              sku: '9234194023',\n              quantity: '100',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/black-orange-stripes_373x@2x.jpg\"\n                  alt=\"Black orange scarf\"\n                />\n              ),\n            },\n            {\n              id: 259,\n              url: 'produdcts/259',\n              name: 'Tucan scarf',\n              sku: '9234194010',\n              quantity: '201',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/tucan-scarf_373x@2x.jpg\"\n                  alt=\"Tucan scarf\"\n                />\n              ),\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, sku, media, quantity} = item;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <h3>\n                  <TextStyle variation=\"strong\">{name}</TextStyle>\n                </h3>\n                <div>SKU: {sku}</div>\n                <div>{quantity} available</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </Card.Section>\n    </Card>\n  </Layout.Section>\n  <Layout.Section oneThird>\n    <Card title=\"Minneapolis\" actions={[{content: 'Manage'}]}>\n      <Card.Section>\n        <TextStyle variation=\"subdued\">1931 units available</TextStyle>\n      </Card.Section>\n      <Card.Section title=\"Items\">\n        <ResourceList\n          resourceName={{singular: 'product', plural: 'products'}}\n          items={[\n            {\n              id: 345,\n              url: 'produdcts/345',\n              name: 'Black & orange scarf',\n              sku: '9234194023',\n              quantity: '1230',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/black-orange-stripes_373x@2x.jpg\"\n                  alt=\"Black orange scarf\"\n                />\n              ),\n            },\n            {\n              id: 260,\n              url: 'produdcts/260',\n              name: 'Tucan scarf',\n              sku: '9234194010',\n              quantity: '701',\n              media: (\n                <Thumbnail\n                  source=\"https://burst.shopifycdn.com/photos/tucan-scarf_373x@2x.jpg\"\n                  alt=\"Tucan scarf\"\n                />\n              ),\n            },\n          ]}\n          renderItem={(item) => {\n            const {id, url, name, sku, media, quantity} = item;\n\n            return (\n              <ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              >\n                <h3>\n                  <TextStyle variation=\"strong\">{name}</TextStyle>\n                </h3>\n                <div>SKU: {sku}</div>\n                <div>{quantity} available</div>\n              </ResourceList.Item>\n            );\n          }}\n        />\n      </Card.Section>\n    </Card>\n  </Layout.Section>\n</Layout>\n```\n\n### Annotated layout\n\nUse for settings pages. When settings are grouped thematically in annotated sections, the title and description on each section helps merchants quickly find the setting they’re looking for.\n\n```jsx\n<Layout>\n  <Layout.AnnotatedSection\n    id=\"storeDetails\"\n    title=\"Store details\"\n    description=\"Shopify and your customers will use this information to contact you.\"\n  >\n    <Card sectioned>\n      <FormLayout>\n        <TextField label=\"Store name\" onChange={() => {}} autoComplete=\"off\" />\n        <TextField\n          type=\"email\"\n          label=\"Account email\"\n          onChange={() => {}}\n          autoComplete=\"email\"\n        />\n      </FormLayout>\n    </Card>\n  </Layout.AnnotatedSection>\n</Layout>\n```\n\n### Annotated layout with Banner at the top\n\nUse for settings pages that need a banner or other content at the top.\n\n```jsx\n<Layout>\n  <Layout.Section>\n    <Banner title=\"Order archived\" onDismiss={() => {}}>\n      <p>This order was archived on March 7, 2017 at 3:12pm EDT.</p>\n    </Banner>\n  </Layout.Section>\n  <Layout.AnnotatedSection\n    id=\"storeDetails\"\n    title=\"Store details\"\n    description=\"Shopify and your customers will use this information to contact you.\"\n  >\n    <Card sectioned>\n      <FormLayout>\n        <TextField label=\"Store name\" onChange={() => {}} autoComplete=\"off\" />\n        <TextField\n          type=\"email\"\n          label=\"Account email\"\n          onChange={() => {}}\n          autoComplete=\"email\"\n        />\n      </FormLayout>\n    </Card>\n  </Layout.AnnotatedSection>\n</Layout>\n```\n\n---\n\n## Related components\n\n- To visually group content in a layout section, [use the card component](https://polaris.shopify.com/components/structure/card)\n- To lay out a set of smaller components in a row, [use the stack component](https://polaris.shopify.com/components/structure/stack)\n- To lay out form fields, [use the form layout component](https://polaris.shopify.com/components/forms/form-layout)\n",
  "Link": "\n\n# Link\n\nLinks take users to another place, and usually appear within or directly following a sentence.\n\nFor actions that aren’t related to navigation, use the [button component](https://polaris.shopify.com/components/actions/button).\n\n---\n\n## Best practices\n\n### Buttons versus links\n\nLinks are used primarily for navigation, and usually appear within or directly following a sentence.\n\nButtons are used primarily for actions, such as “Add”, “Close”, “Cancel”, or “Save”. Plain buttons, which look similar to links, are used for less important or less commonly used actions, such as “view shipping settings”.\n\nThe HTML that renders for the `Button` and `Link` components carries meaning. Using these components intentionally and consistently results in:\n\n- a more inclusive experience for assistive technology users\n- a more cohesive visual experience for sighted users\n- products that are easier to maintain at scale\n\n### Unstyled links\n\nIf the existing link styles don’t meet the needs of your project, then use the `UnstyledLink` component to create a custom link style.\n\n---\n\n## Content guidelines\n\nThe link component should follow the content guidelines for [links](https://polaris.shopify.com/content/actionable-language#section-links).\n\n---\n\n## Examples\n\n### Default links\n\nUse for text links in larger spans of text.\n\n```jsx\n<Link url=\"https://help.shopify.com/manual\">fulfilling orders</Link>\n```\n\n### Monochrome link\n\nUse for text links that are the same color as the surrounding text.\n\n```jsx\n<Link monochrome url=\"https://help.shopify.com/manual\">\n  fulfilling orders\n</Link>\n```\n\n### Monochrome link in a banner\n\nMonochrome styles will be applied to links rendered within a `Banner`.\n\n```jsx\n<Banner>\n  Learn more about{' '}\n  <Link url=\"https://help.shopify.com/manual\">fulfilling orders</Link>\n</Banner>\n```\n\n### External link\n\nUse for text links that should open in a new browser tab (or window, depending on the merchant’s browser settings). Use this only when opening a page in the same tab might disrupt the merchant’s workflow.\n\n```jsx\n<Link url=\"https://help.shopify.com/manual\" external>\n  Shopify Help Center\n</Link>\n```\n\n---\n\n## Related components\n\n- For actions that don’t appear within or directly following a sentence, use the [button component](https://polaris.shopify.com/components/actions/button)\n\n---\n\n## Accessibility\n\n<!-- content-for: web -->\n\nUse the `url` prop to give the link component a valid `href` value. This allows the element to be identified as a link to assistive technologies and gives it default keyboard support.\n\nThe Link component is underlined to give interactive elements a shape. This allows links to not rely on color from being the only way users can tell if an element is interactive.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Remove the link underline when link is repeated in a list or navigation\n- Use underlines for links when used inline content\n\n```jsx\n<p>\n  Learn more about <Link>Fraud Protect</Link>.\n</p>\n```\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Remove underlines when the user cannot determine it's interactivity\n\n```jsx\n<Link removeUnderline>Learn more about Fraud Protect.</Link>\n```\n\n</div></div>\n\n### Submitting data\n\nMerchants generally expect links to navigate, and not to submit data or take action. If you need a component that doesn’t have a URL associated with it, then use the [button component](https://polaris.shopify.com/components/actions/button) instead.\n\n### Labeling\n\nGive links text that clearly describes their purpose.\n\nThe `accessibilityLabel` prop adds an `aria-label` attribute to the link, which can be accessed by assistive technologies like screen readers. Typically, this label text replaces the visible text on the link for merchants who use assistive technology.\n\nTo provide consistency and clarity:\n\n- Use the same text for links that navigate to the same content\n- Use different text for links that navigate to different content\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n```jsx\n<Link url=\"https://help.shopify.com/manual\">fulfilling orders</Link>\n```\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n```jsx\n<Link>fulfilling orders</Link>\n```\n\n</div></div>\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n```jsx\n/* Somewhere in the code: */\n<Link url=\"https://help.shopify.com/manual\">fulfilling orders</Link>\n\n/* Elsewhere in the code: */\n<Link url=\"https://help.shopify.com/manual\">fulfilling orders</Link>\n```\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n```jsx\n/* Somewhere in the code: */\n<Link url=\"https://help.shopify.com/manual\">fulfilling orders</Link>\n\n/* Elsewhere in the code: */\n<Link url=\"https://help.shopify.com/manual\">order fulfillment section</Link>\n```\n\n</div></div>\n\n#### External links\n\nThe `external` prop adds an icon and a notification that the link opens a new tab. Use the `external` prop to make the link open in a new tab (or window, depending on the merchant’s browser settings). Open a page in a new tab only when opening a page in the same tab might disrupt the merchant’s workflow.\n\n### Keyboard support\n\nLinks use browser defaults for keyboard interaction.\n\n- Give links keyboard focus with the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)\n- Activate links with the <kbd>enter</kbd>/<kbd>return</kbd> key\n\n<!-- /content-for -->\n",
  "List": "\n\n# List\n\nLists display a set of related text-only content. Each list item begins with a bullet or a number.\n\n---\n\n## Best practices\n\nLists should:\n\n- Break up chunks of related content to make the information easier for\n  merchants to scan\n- Be phrased consistently (try to start each item with a noun or a\n  verb and be consistent with each item)\n- Not be used for lists where the entire item represents an action\n\n---\n\n## Content guidelines\n\n### List items\n\nEvery item in a list should:\n\n- Start with a capital letter\n- Not use commas or semicolons at the end of each line\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Red\n- Yellow\n- Blue\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Red;\n- Yellow;\n- Blue.\n\n</div></div>\n\n- Be written in sentence case\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Item one\n- Item two\n- Item three\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Item One\n- Item Two\n- Item Three\n\n</div></div>\n\n---\n\n## Examples\n\n### Bulleted list\n\nUse for a text-only list of related items that don’t need to be in a specific order and don’t require an icon or other indicator.\n\n```jsx\n<List type=\"bullet\">\n  <List.Item>Yellow shirt</List.Item>\n  <List.Item>Red shirt</List.Item>\n  <List.Item>Green shirt</List.Item>\n</List>\n```\n\n<!-- content-for: android -->\n\n![Bulleted list on Android](/images-from-old-styleguide/components/List/android/bullets@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Bulleted list on iOS](/images-from-old-styleguide/components/List/ios/bullets@2x.png)\n\n<!-- /content-for -->\n\n### Numbered list\n\nUse for a text-only list of related items when an inherent order, priority, or sequence needs to be communicated.\n\n```jsx\n<List type=\"number\">\n  <List.Item>First item</List.Item>\n  <List.Item>Second item</List.Item>\n  <List.Item>Third Item</List.Item>\n</List>\n```\n\n<!-- content-for: android -->\n\n![Numbered list on Android](/images-from-old-styleguide/components/List/android/numbered@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Numbered list on iOS](/images-from-old-styleguide/components/List/ios/numbered@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Related components\n\n- To create a list of checkboxes or radio buttons, [use the choice list component](https://polaris.shopify.com/components/forms/choice-list)\n- To present a collection of objects of the same type such as customers, products, or orders, [use the resource list component](https://polaris.shopify.com/components/lists-and-tables/resource-list)\n- When text labels for each item are useful for describing the content, [use the Description List component](https://polaris.shopify.com/components/lists-and-tables/description-list)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nThe list component outputs list items (`<li>`) inside a list wrapper (`<ul>` for bullet lists or `<ol>` for numbered lists). By default, list items are conveyed as a group of related elements to assistive technology users.\n\nTo group items for layout only, consider using the [stack component](https://polaris.shopify.com/components/structure/stack).\n\n<!-- /content-for -->\n",
  "Listbox": "\n\n# Listbox\n\nA Listbox is a vertical list of interactive options, with room for icons, descriptions, and other elements.\n\n---\n\n## Anatomy\n\n![A diagram of the Listbox component showing the smaller primitive components it can be composed of.](/images-from-old-styleguide/components/Listbox/listbox-anatomy.png)\n\nA listbox can be composed of:\n\n1. **Options:** The individual options inside the Listbox that merchants can select or deselect.\n2. **Dividers:** Placed between items and are useful in complex lists when there’s a lot of information for the merchant to parse.\n3. **Section headers:** Used at the begining of a section when it’s necessary to call out the content being displayed. In most cases, the surrounding context should be enough for the merchant to understand the information in the list.\n\n---\n\n## Best practices\n\nListboxes should:\n\n- Be clearly labeled so it’s noticeable to the merchant what type of options will be available\n- Limit the number of options displayed at once\n- Indicate a loading state to the merchant while option data is being populated\n\n---\n\n## Content guidelines\n\n### Option lists\n\nEach item in a `Listbox` should be clear and descriptive.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Traffic referrer source\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Source\n\n</div></div>\n\n## Patterns that use `Listbox`\n\nLocation picker\n\n---\n\n## Examples\n\n### Basic Listbox\n\nBasic implementation of a control element used to let merchants select options\n\n```jsx\nfunction BaseListboxExample() {\n  return (\n    <Listbox accessibilityLabel=\"Basic Listbox example\">\n      <Listbox.Option value=\"UniqueValue-1\">Item 1</Listbox.Option>\n      <Listbox.Option value=\"UniqueValue-2\">Item 2</Listbox.Option>\n      <Listbox.Option value=\"UniqueValue-3\">Item 3</Listbox.Option>\n    </Listbox>\n  );\n}\n```\n\n### Listbox with Loading\n\nImplementation of a control element showing a loading indicator to let merchants know more options are being loaded\n\n```jsx\nfunction ListboxWithLoadingExample() {\n  return (\n    <Listbox accessibilityLabel=\"Listbox with loading example\">\n      <Listbox.Option value=\"UniqueValue-1\">Item 1</Listbox.Option>\n      <Listbox.Option value=\"UniqueValue-2\">Item 2</Listbox.Option>\n      <Listbox.Option value=\"UniqueValue-3\">Item 3</Listbox.Option>\n      <Listbox.Loading />\n    </Listbox>\n  );\n}\n```\n\n### Listbox with Action\n\nImplementation of a control element used to let merchants take an action\n\n```jsx\nfunction ListboxWithActionExample() {\n  return (\n    <Listbox accessibilityLabel=\"Listbox with Action example\">\n      <Listbox.Option value=\"UniqueValue-1\">Item 1</Listbox.Option>\n      <Listbox.Option value=\"UniqueValue-2\" divider>\n        Item 2\n      </Listbox.Option>\n      <Listbox.Action value=\"ActionValue\">\n        <Stack spacing=\"tight\">\n          <Icon source={CirclePlusMinor} color=\"base\" />\n          <div>Add item</div>\n        </Stack>\n      </Listbox.Action>\n    </Listbox>\n  );\n}\n```\n\n### Listbox with custom element\n\nImplementation of a control with custom rendering of options\n\n```jsx\nfunction ListboxWithCustomElementExample() {\n  return (\n    <Listbox accessibilityLabel=\"Listbox with custom element example\">\n      <Listbox.Action value=\"ActionValue\" divider>\n        Add item\n      </Listbox.Action>\n      <Listbox.Option value=\"UniqueValue-1\">\n        <div>Item 1</div>\n      </Listbox.Option>\n      <Listbox.Option value=\"UniqueValue-2\">\n        <div>Item 2</div>\n      </Listbox.Option>\n      <Listbox.Option value=\"UniqueValue-3\">\n        <div>Item 3</div>\n      </Listbox.Option>\n      <Listbox.Loading accessibilityLabel=\"items are loading\" />\n    </Listbox>\n  );\n}\n```\n\n---\n\n## Related components\n\n- For a text field and popover container, [use the combobox component](https://polaris.shopify.com/components/forms/combobox)\n- [Autocomplete](https://polaris.shopify.com/components/forms/autocomplete) can be used as a convenience wrapper in lieu of Combobox and Listbox.\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n### Structure\n\nThe `Listbox` component is based on the [Aria 1.2 Listbox pattern](https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox).\n\nIt is important to not present interactive elements inside of list box options as they can interfere with navigation\nfor assistive technology users.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Use labels\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Use interactive elements inside the list\n\n</div></div>\n\n### Keyboard support\n\n- Access the list of options with the up and down arrow keys\n- Select an option that has focus with the <kbd>enter</kbd>/<kbd>return</kbd> key\n\n<!-- /content-for -->\n",
  "Loading": "\n\n# Loading\n\nThe loading component is used to indicate to merchants that a page is loading or an upload is processing.\n\n---\n\n## Examples\n\n### Default loading\n\nUse to indicate that the page is loading.\n\n```jsx\n<div style={{height: '100px'}}>\n  <Frame>\n    <Loading />\n  </Frame>\n</div>\n```\n\n---\n\n## Required components\n\nThe loading component must be wrapped in the [frame](https://polaris.shopify.com/components/structure/frame) component.\n\n---\n\n## Best practices\n\nThe loading component should:\n\n- Indicate that the page requested is loading.\n- Indicate that an upload has started and the action will soon complete.\n- Be used to give feedback for an entire page load or a page mutation like saving a product.\n- Be used alongside a component or page element that contains `aria-busy` to represent what is loading.\n\n---\n\n## Related components\n\n- To indicate that an action has been received, use the [Spinner](https://polaris.shopify.com/components/feedback-indicators/spinner)\n- To improve user experience and reduce the appearance of long loading times, use the [Progress bar](https://polaris.shopify.com/components/feedback-indicators/progress-bar) component.\n- To better represent loading content, use [Skeleton page](https://polaris.shopify.com/components/feedback-indicators/skeleton-page) along with [Skeleton body text](https://polaris.shopify.com/components/feedback-indicators/skeleton-body-text) and [Skeleton display text](https://polaris.shopify.com/components/feedback-indicators/skeleton-display-text) components.\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nThe loading component is implemented using the [ARIA 1.1 progressbar pattern](https://www.w3.org/TR/wai-aria-1.1/#progressbar). It outputs an ARIA `role=\"progressbar\"` and uses `aria-valuemin`, `aria-value-max`, and `aria-valuenow` to convey the loaded percentage to screen reader users.\n\n<!-- /content-for -->\n",
  "Media card": "\n\n# Media card\n\nMedia cards provide a consistent layout to present visual information to merchants. Visual media is used to provide additional context to the written information it's paired with.\n\n---\n\n## Best practices\n\nMedia cards should:\n\n- Provide merchants with a clear call to action.\n- Always pair text with a visual component, for example, body text paired with an image, video, etc.\n- Use media to enhance the written content. The written content should be able to stand alone without an explanation from the paired media.\n- Show targeted content toward specific audiences to maximize relevance.\n- Be dismissable.\n\n---\n\n## Content guidelines\n\n- Don’t use media cards as advertisements for your feature. Instead they should educate the merchant about how to accomplish tasks related to the section they’re in.\n\n### Title\n\nMedia card titles should follow the content guidelines for [headings and subheadings](https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings).\n\n### Body content\n\nBody content should be:\n\n- Actionable: start sentences with imperative verbs when telling merchants what actions are available to them, especially something new. Don’t use permissive language like “you can”.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nGet performance data for all of your sales channels.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nNow you can get performance data for all of your sales channels.\n\n</div></div>\n\n- Structured for merchant success: always put the most critical information\n  first\n- Clear: use the verb “need” to help merchants understand when they’re required\n  to do something\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nTo buy a shipping label, you need to enter the total weight of your shipment,\nincluding packaging.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nTo buy a shipping label, you must enter the total weight of your shipment,\nincluding packaging.\n\n</div></div>\n\n### Call to action\n\nButtons should be:\n\nClear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive merchants by mislabeling a button.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nBuy shipping label\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nBuy\n\n</div></div>\n\n- Action-led: buttons should always lead with a strong verb that encourages\n  action. To provide enough context to merchants use the {verb}+{noun} format on\n  buttons except in the case of common actions like Save, Close, Cancel, or OK.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nView shipping settings\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nView your settings\n\n</div></div>\n\n- Scannable: avoid unnecessary words and articles such as the, an, or a.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nAdd menu item\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nAdd a menu item\n\n</div></div>\n\n---\n\n## Examples\n\n### Basic media card\n\nUse to surface educational information about a feature or opportunity.\n\n```jsx\n<MediaCard\n  title=\"Getting Started\"\n  primaryAction={{\n    content: 'Learn about getting started',\n    onAction: () => {},\n  }}\n  description=\"Discover how Shopify can power up your entrepreneurial journey.\"\n  popoverActions={[{content: 'Dismiss', onAction: () => {}}]}\n>\n  <img\n    alt=\"\"\n    width=\"100%\"\n    height=\"100%\"\n    style={{\n      objectFit: 'cover',\n      objectPosition: 'center',\n    }}\n    src=\"https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850\"\n  />\n</MediaCard>\n```\n\n### Basic media card with small visual\n\nUse when there are limited vertical space, or when the card should be less prominent.\n\n```jsx\n<MediaCard\n  title=\"Getting Started\"\n  primaryAction={{\n    content: 'Learn about getting started',\n    onAction: () => {},\n  }}\n  description=\"Discover how Shopify can power up your entrepreneurial journey.\"\n  popoverActions={[{content: 'Dismiss', onAction: () => {}}]}\n  size=\"small\"\n>\n  <img\n    alt=\"\"\n    width=\"100%\"\n    height=\"100%\"\n    style={{\n      objectFit: 'cover',\n      objectPosition: 'center',\n    }}\n    src=\"https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850\"\n  />\n</MediaCard>\n```\n\n### Media card with secondary action\n\nUse when there are two distinct actions merchants can take on the information in the card.\n\n```jsx\n<MediaCard\n  title=\"Get closer to launching your store\"\n  primaryAction={{\n    content: 'Add a product',\n    onAction: () => {},\n  }}\n  secondaryAction={{\n    content: 'Learn more',\n    onAction: () => {},\n  }}\n  description=\"Start your business with eye-catching inventory.\"\n  popoverActions={[{content: 'Dismiss', onAction: () => {}}]}\n>\n  <img\n    alt=\"\"\n    width=\"100%\"\n    height=\"100%\"\n    style={{objectFit: 'cover', objectPosition: 'center'}}\n    src=\"https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850\"\n  />\n</MediaCard>\n```\n\n### Media card with no actions\n\nUse when media card does not require any actions.\n\n```jsx\n<MediaCard\n  title=\"Getting Started\"\n  description=\"Discover how Shopify can power up your entrepreneurial journey.\"\n  popoverActions={[{content: 'Dismiss', onAction: () => {}}]}\n>\n  <img\n    alt=\"\"\n    width=\"100%\"\n    height=\"100%\"\n    style={{objectFit: 'cover', objectPosition: 'center'}}\n    src=\"https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850\"\n  />\n</MediaCard>\n```\n\n### Video card\n\nUse to provide a consistent layout for contextual learning content. Use to wrap thumbnails of educational videos about Shopify features in context.\n\n```jsx\n<MediaCard\n  title=\"Turn your side-project into a business\"\n  primaryAction={{\n    content: 'Learn more',\n    onAction: () => {},\n  }}\n  description={`In this course, you’ll learn how the Kular family turned their mom’s recipe book into a global business.`}\n  popoverActions={[{content: 'Dismiss', onAction: () => {}}]}\n>\n  <VideoThumbnail\n    videoLength={80}\n    thumbnailUrl=\"https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850\"\n  />\n</MediaCard>\n```\n\n### Portrait video card\n\nUse when vertical screen space is not limited or when the video card is the page’s primary content. For example, in an empty state.\n\n```jsx\n<MediaCard\n  portrait\n  title=\"Turn your side-project into a business\"\n  primaryAction={{\n    content: 'Learn more',\n    onAction: () => {},\n  }}\n  description=\"In this course, you’ll learn how the Kular family turned their mom’s recipe book into a global business.\"\n  popoverActions={[{content: 'Dismiss', onAction: () => {}}]}\n>\n  <VideoThumbnail\n    videoLength={80}\n    thumbnailUrl=\"https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850\"\n  />\n</MediaCard>\n```\n\n---\n\n## Related components\n\n- To create a video card, [use the video thumbnail component](https://polaris.shopify.com/components/images-and-icons/video-thumbnail)\n- To group similar concepts and tasks together, [use the card component](https://polaris.shopify.com/components/structure/card)\n- To create page-level layout, [use the layout component](https://polaris.shopify.com/components/structure/layout)\n- To explain a feature that merchants haven’t tried yet, [use the empty state component](https://polaris.shopify.com/components/structure/empty-state)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nThe required `title` prop gives the media card a level 2 heading (`<h2>`). This helps with readability and provides structure to screen reader users. It can also accept a ReactNode.\n\nUse [actionable language](https://polaris.shopify.com/content/actionable-language#navigation) to ensure that the purpose of the media card is clear to all merchants, including those with issues related to reading and language.\n\n<!-- /content-for -->\n",
  "Modal": "\n\n# Modal\n\nModals are overlays that require merchants to take an action before they can continue interacting with the rest of Shopify. They can be disruptive and should be used thoughtfully and sparingly.\n\n---\n\n## Use in an embedded application (deprecated)\n\nPassing an API key to the [app provider component](https://polaris.shopify.com/components/structure/app-provider#section-initializing-the-shopify-app-bridge) causes the modal component to delegate to the [Shopify App Bridge](https://help.shopify.com/en/api/embedded-apps/app-bridge) instead of rendering as it would in a stand-alone application.\n\nIn an embedded application context, not all documented properties are available. Some properties are only available in stand-alone applications.\n\nProperties that are available only in a stand-alone context are documented as `(stand-alone app use only)`. For instance the `children` property is documented as `(stand-alone app use only)`.\n\nThe following example shows the modal component in an embedded application context:\n\n```jsx\nfunction EmbeddedAppModalExample() {\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const handleModalClose = useCallback(() => setModalOpen(false), []);\n\n  return (\n    <AppProvider apiKey=\"YOUR_API_KEY\" i18n={{}} shopOrigin=\"YOUR_SHOP_ORIGIN\">\n      <Modal\n        src=\"https://my-app.com/upgrade-to-retail-package\"\n        open={modalOpen}\n        title=\"Upgrade your Shopify POS with the Retail Package\"\n        primaryAction={{\n          content: 'Add Retail Package',\n          onAction: handleModalClose,\n        }}\n        secondaryActions={[\n          {\n            content: 'Cancel',\n            onAction: handleModalClose,\n          },\n        ]}\n        onClose={handleModalClose}\n      />\n    </AppProvider>\n  );\n}\n```\n\n#### Deprecation rationale\n\nAs of v3.17.0, using `Modal` in an embedded app is deprecated. Support for this will be removed in v5.0 as the underlying Shopify App Bridge library will be removed from Polaris React. Learn more about the [deprecation rationale](https://github.com/Shopify/polaris-react/issues/814). Use [`Modal`](https://help.shopify.com/en/api/embedded-apps/app-bridge/react-components/modal) from [`@shopify/app-bridge-react`](https://help.shopify.com/en/api/embedded-apps/app-bridge/react-components) instead.\n\n---\n\n## Best practices\n\nUse modals for confirmations and conditional changes. They should be thought of as temporary and not be used for information or actions that need to live on in the UI in a persistent way. Don’t use modals to display complex forms or large amounts of information.\n\nModals should:\n\n- Require that merchants take an action.\n- Close when merchants press the `X` button, the `Cancel` button, or the <kbd>Esc</kbd> key, not when merchants click or tap the area outside the modal.\n- Not have more than two buttons (primary and secondary) at the bottom. This prevents unclear action hierarchy and crowding on mobile screens. Since modals are for focused tasks, they should have focused actions. In some cases however, a [tertiary action](#tertiary-actions) may be appropriate.\n\n---\n\n## Content guidelines\n\n### Title\n\nModal titles should:\n\n- Use a clear {verb}+{noun} question or statement\n- Follow the content guidelines for [headings and subheadings](https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings)\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Edit email address\n- Delete customer?\n- Discard unsaved changes?\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Edit the email address for this order\n- Are you sure you want to delete customer?\n- Discard?\n\n</div></div>\n\n### Body content\n\nBody content should be:\n\n- Actionable: start sentences with imperative verbs when telling a merchant what actions are available to them (especially something new). Don’t use permissive language like \"you can\".\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Notification emails will be sent to this address.\n- This can’t be undone.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- You can edit the email address where emails will be sent.\n- Are you sure you want to delete the variant Dark Blue Tee/Small/Silk? You cannot reverse this.\n\n</div></div>\n\n- Structured for merchant success: always put the most critical information first.\n- Clear: use the verb “need” to help merchants understand when they’re required to do something.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- To buy a shipping label, you need to enter the total weight of your shipment, including packaging.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- To buy a shipping label, you must enter the total weight of your shipment, including packaging.\n\n</div></div>\n\n### Primary and secondary actions\n\nActions should be:\n\n- Clear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive a merchant by mislabeling an action.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Create order\n- Buy shipping label\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- New order\n- Buy\n\n</div></div>\n\n- Action-led: actions should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on actions except in the case of common actions like Save, Close, Cancel, or OK.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Activate Apple Pay\n- View shipping settings\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Try Apple Pay\n- View your settings\n\n</div></div>\n\n- Scannable: avoid unnecessary words and articles such as the, an, or a.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Add menu item\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Add a menu item\n\n</div></div>\n\n<a name=\"tertiary-actions\"></a>\n\n### Tertiary actions\n\nTertiary actions should:\n\n- Only be used when the action requires the context of the content in the modal\n- Never be used to dismiss the modal\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Use a plain button for a tertiary action if needed\n  ![Screenshot of modal with a plain button as a tertiary action](/images-from-old-styleguide/components/Modal/do-use-plain-button-for-tertiary-action@2x.png)\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Use a tertiary action for a destructive action\n  ![Screenshot of modal with a destructive button as a tertiary action](/images-from-old-styleguide/components/Modal/dont-use-destructive-tertiary-action@2x.png)\n\n</div></div>\n\n### Footer\n\nBody content should be:\n\n- Actionable: start sentences with imperative verbs when telling a merchant what actions are available to them (especially something new). Don’t use permissive language like \"you can\".\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Notification emails will be sent to this address.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- You can edit the email address where emails will be sent.\n\n</div></div>\n\n- Structured for merchant success: always put the most critical information first.\n- Clear: use the verb “need” to help merchants understand when they’re required to do something.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- To buy a shipping label, you need to enter the total weight of your shipment, including packaging.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- To buy a shipping label, you must enter the total weight of your shipment, including packaging.\n\n</div></div>\n\n---\n\n## Examples\n\n### Basic modal\n\n<!-- example-for: web -->\n\nUse as the default option for a modal.\n\n```jsx\nfunction ModalExample() {\n  const [active, setActive] = useState(true);\n\n  const handleChange = useCallback(() => setActive(!active), [active]);\n\n  const activator = <Button onClick={handleChange}>Open</Button>;\n\n  return (\n    <div style={{height: '500px'}}>\n      <Modal\n        activator={activator}\n        open={active}\n        onClose={handleChange}\n        title=\"Reach more shoppers with Instagram product tags\"\n        primaryAction={{\n          content: 'Add Instagram',\n          onAction: handleChange,\n        }}\n        secondaryActions={[\n          {\n            content: 'Learn more',\n            onAction: handleChange,\n          },\n        ]}\n      >\n        <Modal.Section>\n          <TextContainer>\n            <p>\n              Use Instagram posts to share your products with millions of\n              people. Let shoppers buy from your store without leaving\n              Instagram.\n            </p>\n          </TextContainer>\n        </Modal.Section>\n      </Modal>\n    </div>\n  );\n}\n```\n\n### Modal with primary action\n\nUse to let merchants take a key action.\n\n```jsx\nfunction ModalWithPrimaryActionExample() {\n  const DISCOUNT_LINK = 'https://polaris.shopify.com/';\n\n  const [active, setActive] = useState(true);\n  const node = useRef(null);\n\n  const handleClick = useCallback(() => {\n    node.current && node.current.input.focus();\n  }, []);\n\n  const handleFocus = useCallback(() => {\n    if (node.current == null) {\n      return;\n    }\n    node.current.input.select();\n    document.execCommand('copy');\n  }, []);\n\n  const toggleModal = useCallback(() => setActive((active) => !active), []);\n\n  const activator = <Button onClick={toggleModal}>Open</Button>;\n\n  return (\n    <div style={{height: '500px'}}>\n      <Modal\n        activator={activator}\n        open={active}\n        onClose={toggleModal}\n        title=\"Get a shareable link\"\n        primaryAction={{\n          content: 'Close',\n          onAction: toggleModal,\n        }}\n      >\n        <Modal.Section>\n          <Stack vertical>\n            <Stack.Item>\n              <TextContainer>\n                <p>\n                  You can share this discount link with your customers via email\n                  or social media. Your discount will be automatically applied\n                  at checkout.\n                </p>\n              </TextContainer>\n            </Stack.Item>\n            <Stack.Item fill>\n              <TextField\n                ref={node}\n                label=\"Discount link\"\n                onFocus={handleFocus}\n                value={DISCOUNT_LINK}\n                onChange={() => {}}\n                autoComplete=\"off\"\n                connectedRight={\n                  <Button primary onClick={handleClick}>\n                    Copy link\n                  </Button>\n                }\n              />\n            </Stack.Item>\n          </Stack>\n        </Modal.Section>\n      </Modal>\n    </div>\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Modal with primary action on Android](/images-from-old-styleguide/components/Modal/android/information@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Modal with primary action on iOS](/images-from-old-styleguide/components/Modal/ios/information@2x.png)\n\n<!-- /content-for -->\n\n### Modal with primary and secondary actions\n\nUse to let merchants take key actions at the bottom of the modal.\n\n```jsx\nfunction ModalWithPrimaryAndSecondaryActionsExample() {\n  const CURRENT_PAGE = 'current_page';\n  const ALL_CUSTOMERS = 'all_customers';\n  const SELECTED_CUSTOMERS = 'selected_customers';\n  const CSV_EXCEL = 'csv_excel';\n  const CSV_PLAIN = 'csv_plain';\n\n  const [active, setActive] = useState(true);\n  const [selectedExport, setSelectedExport] = useState([]);\n  const [selectedExportAs, setSelectedExportAs] = useState([]);\n\n  const handleModalChange = useCallback(() => setActive(!active), [active]);\n\n  const handleClose = () => {\n    handleModalChange();\n    handleSelectedExport([]);\n    handleSelectedExportAs([]);\n  };\n\n  const handleSelectedExport = useCallback(\n    (value) => setSelectedExport(value),\n    [],\n  );\n\n  const handleSelectedExportAs = useCallback(\n    (value) => setSelectedExportAs(value),\n    [],\n  );\n\n  const activator = <Button onClick={handleModalChange}>Open</Button>;\n\n  return (\n    <div style={{height: '500px'}}>\n      <Modal\n        activator={activator}\n        open={active}\n        onClose={handleClose}\n        title=\"Export customers\"\n        primaryAction={{\n          content: 'Export customers',\n          onAction: handleClose,\n        }}\n        secondaryActions={[\n          {\n            content: 'Cancel',\n            onAction: handleClose,\n          },\n        ]}\n      >\n        <Modal.Section>\n          <Stack vertical>\n            <Stack.Item>\n              <ChoiceList\n                title=\"Export\"\n                choices={[\n                  {label: 'Current page', value: CURRENT_PAGE},\n                  {label: 'All customers', value: ALL_CUSTOMERS},\n                  {label: 'Selected customers', value: SELECTED_CUSTOMERS},\n                ]}\n                selected={selectedExport}\n                onChange={handleSelectedExport}\n              />\n            </Stack.Item>\n            <Stack.Item>\n              <ChoiceList\n                title=\"Export as\"\n                choices={[\n                  {\n                    label:\n                      'CSV for Excel, Numbers, or other spreadsheet programs',\n                    value: CSV_EXCEL,\n                  },\n                  {label: 'Plain CSV file', value: CSV_PLAIN},\n                ]}\n                selected={selectedExportAs}\n                onChange={handleSelectedExportAs}\n              />\n            </Stack.Item>\n          </Stack>\n        </Modal.Section>\n      </Modal>\n    </div>\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Modal with primary and secondary actions on Android](/images-from-old-styleguide/components/Modal/android/basic@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Modal with primary and secondary actions on iOS](/images-from-old-styleguide/components/Modal/ios/basic@2x.png)\n\n<!-- /content-for -->\n\n### Large modal\n\n<!-- example-for: web -->\n\nUse when you need to increase the width of your modal.\n\n```jsx\nfunction LargeModalExample() {\n  const [active, setActive] = useState(true);\n  const [checked, setChecked] = useState(false);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const handleCheckbox = useCallback((value) => setChecked(value), []);\n\n  const activator = <Button onClick={toggleActive}>Open</Button>;\n\n  return (\n    <div style={{height: '500px'}}>\n      <Modal\n        large\n        activator={activator}\n        open={active}\n        onClose={toggleActive}\n        title=\"Import customers by CSV\"\n        primaryAction={{\n          content: 'Import customers',\n          onAction: toggleActive,\n        }}\n        secondaryActions={[\n          {\n            content: 'Cancel',\n            onAction: toggleActive,\n          },\n        ]}\n      >\n        <Modal.Section>\n          <Stack vertical>\n            <DropZone\n              accept=\".csv\"\n              errorOverlayText=\"File type must be .csv\"\n              type=\"file\"\n              onDrop={() => {}}\n            >\n              <DropZone.FileUpload />\n            </DropZone>\n            <Checkbox\n              checked={checked}\n              label=\"Overwrite existing customers that have the same email or phone\"\n              onChange={handleCheckbox}\n            />\n          </Stack>\n        </Modal.Section>\n      </Modal>\n    </div>\n  );\n}\n```\n\n### Small modal\n\n<!-- example-for: web -->\n\nUse when you need to decrease the width of your modal.\n\n```jsx\nfunction SmallModalExample() {\n  const [active, setActive] = useState(true);\n  const [checked, setChecked] = useState(false);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const handleCheckbox = useCallback((value) => setChecked(value), []);\n\n  const activator = <Button onClick={toggleActive}>Open</Button>;\n\n  return (\n    <div style={{height: '500px'}}>\n      <Modal\n        small\n        activator={activator}\n        open={active}\n        onClose={toggleActive}\n        title=\"Import customers by CSV\"\n        primaryAction={{\n          content: 'Import customers',\n          onAction: toggleActive,\n        }}\n        secondaryActions={[\n          {\n            content: 'Cancel',\n            onAction: toggleActive,\n          },\n        ]}\n      >\n        <Modal.Section>\n          <Stack vertical>\n            <DropZone\n              accept=\".csv\"\n              errorOverlayText=\"File type must be .csv\"\n              type=\"file\"\n              onDrop={() => {}}\n            >\n              <DropZone.FileUpload />\n            </DropZone>\n            <Checkbox\n              checked={checked}\n              label=\"Overwrite existing customers that have the same email or phone\"\n              onChange={handleCheckbox}\n            />\n          </Stack>\n        </Modal.Section>\n      </Modal>\n    </div>\n  );\n}\n```\n\n### Modal without a title\n\n<!-- example-for: web -->\n\nA title is required for accessibility, but you may hide it.\n\n```jsx\nfunction ModalWithoutTitleExample() {\n  const [active, setActive] = useState(true);\n\n  const handleChange = useCallback(() => setActive(!active), [active]);\n\n  const activator = <Button onClick={handleChange}>Open</Button>;\n\n  return (\n    <div style={{height: '500px'}}>\n      <Modal\n        title=\"Reach more shoppers with Instagram product tags\"\n        titleHidden\n        activator={activator}\n        open={active}\n        onClose={handleChange}\n        primaryAction={{\n          content: 'Add Instagram',\n          onAction: handleChange,\n        }}\n        secondaryActions={[\n          {\n            content: 'Learn more',\n            onAction: handleChange,\n          },\n        ]}\n      >\n        <Modal.Section>\n          <TextContainer>\n            <p>\n              Use Instagram posts to share your products with millions of\n              people. Let shoppers buy from your store without leaving\n              Instagram.\n            </p>\n          </TextContainer>\n        </Modal.Section>\n      </Modal>\n    </div>\n  );\n}\n```\n\n### Modal with scroll listener\n\n<!-- example-for: web -->\n\nUse to implement infinite scroll of modal content.\n\n```jsx\nfunction ModalWithScrollListenerExample() {\n  const [active, setActive] = useState(true);\n\n  const handleChange = useCallback(() => setActive(!active), [active]);\n\n  const handleScrollBottom = useCallback(() => alert('Scrolled to bottom'), []);\n\n  const activator = <Button onClick={handleChange}>Open</Button>;\n\n  return (\n    <div style={{height: '500px'}}>\n      <Modal\n        activator={activator}\n        open={active}\n        title=\"Scrollable content\"\n        onClose={handleChange}\n        onScrolledToBottom={handleScrollBottom}\n      >\n        {Array.from({length: 50}, (_, index) => (\n          <Modal.Section key={index}>\n            <TextContainer>\n              <p>\n                Item <a href=\"#\">#{index}</a>\n              </p>\n            </TextContainer>\n          </Modal.Section>\n        ))}\n      </Modal>\n    </div>\n  );\n}\n```\n\n### Modal with activator ref\n\n<!-- example-for: web -->\n\nProvide an activator ref when it’s more convenient than providing an element. This ensures proper focus management when closing the modal.\nSee the [accessibility features of a modal](https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/dialog.html) for more information regarding focus.\n\n```jsx\nfunction ModalExample() {\n  const [active, setActive] = useState(true);\n\n  const buttonRef = useRef(null);\n\n  const handleOpen = useCallback(() => setActive(true), []);\n\n  const handleClose = useCallback(() => {\n    setActive(false);\n  }, []);\n\n  const activator = (\n    <div ref={buttonRef}>\n      <Button onClick={handleOpen}>Open</Button>\n    </div>\n  );\n\n  return (\n    <div style={{height: '500px'}}>\n      {activator}\n      <Modal\n        activator={buttonRef}\n        open={active}\n        onClose={handleClose}\n        title=\"Reach more shoppers with Instagram product tags\"\n        primaryAction={{\n          content: 'Add Instagram',\n          onAction: handleClose,\n        }}\n        secondaryActions={[\n          {\n            content: 'Learn more',\n            onAction: handleClose,\n          },\n        ]}\n      >\n        <Modal.Section>\n          <TextContainer>\n            <p>\n              Use Instagram posts to share your products with millions of\n              people. Let shoppers buy from your store without leaving\n              Instagram.\n            </p>\n          </TextContainer>\n        </Modal.Section>\n      </Modal>\n    </div>\n  );\n}\n```\n\n### Modal without an activator prop\n\n<!-- example-for: web -->\n\nUse an external activator when technical limitations prevent you from passing the activator as an element or a ref. Make sure to focus the activator on close when choosing this approach.\nSee the [accessibility features of a modal](https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/dialog.html) for more information regarding focus.\n\n```jsx\nfunction ModalExample() {\n  const [active, setActive] = useState(true);\n\n  const button = useRef();\n\n  const handleOpen = useCallback(() => setActive(true), []);\n\n  const handleClose = useCallback(() => {\n    setActive(false);\n    requestAnimationFrame(() => button.current.querySelector('button').focus());\n  }, []);\n\n  return (\n    <div style={{height: '500px'}}>\n      <div ref={button}>\n        <Button onClick={handleOpen}>Open</Button>\n      </div>\n      <Modal\n        instant\n        open={active}\n        onClose={handleClose}\n        title=\"Reach more shoppers with Instagram product tags\"\n        primaryAction={{\n          content: 'Add Instagram',\n          onAction: handleClose,\n        }}\n        secondaryActions={[\n          {\n            content: 'Learn more',\n            onAction: handleClose,\n          },\n        ]}\n      >\n        <Modal.Section>\n          <TextContainer>\n            <p>\n              Use Instagram posts to share your products with millions of\n              people. Let shoppers buy from your store without leaving\n              Instagram.\n            </p>\n          </TextContainer>\n        </Modal.Section>\n      </Modal>\n    </div>\n  );\n}\n```\n\n### Warning modal\n\n<!-- example-for: android, ios -->\n\nUse to make it clear to the merchant that the action is potentially dangerous. Only use this option when the merchant is about to perform an action that can’t be undone or is difficult to undo.\n\n<!-- content-for: android -->\n\n![Warning modal on Android](/images-from-old-styleguide/components/Modal/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Warning modal on iOS](/images-from-old-styleguide/components/Modal/ios/default@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Related components\n\n- To present large amounts of additional information or actions that don’t require confirmation, [use the collapsible component](https://polaris.shopify.com/components/behavior/collapsible) to expand content in place within the page\n- To present a small amount of content or a menu of actions in a non-blocking overlay, [use the popover component](https://polaris.shopify.com/components/popover)\n- To communicate a change or condition that needs the merchant’s attention within the context of a page, [use the banner component](https://polaris.shopify.com/components/feedback-indicators/banner)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n- Modals use ARIA `role=”dialog”` to convey to screen reader users that they work like native dialog windows.\n- If you set the `title` prop to give the modal component a heading, then the `title` is used to label the dialog element with `aria-labelledby`. This helps to convey the purpose of the modal to screen reader users when it displays.\n- After a modal is closed, in order to return focus to the button that launched it, pass the button to the modal as an `activator`.\n\n### Keyboard support\n\n- When a modal opens, focus moves automatically to the modal container so it can be accessed by keyboard users\n- While the modal is open, keyboard focus shouldn’t leave the modal\n- Merchants can dismiss the modal with the keyboard by activating the `X` button, the `Cancel` button if one is provided, or by pressing the <kbd>Esc</kbd> key\n- After a modal is closed, focus returns to the button that launched it\n\n<!-- /content-for -->\n",
  "Navigation": "\n\n# Navigation\n\nThe navigation component is used to display the primary navigation in the sidebar of the [frame](https://polaris.shopify.com/components/structure/frame) of an application. Navigation includes a list of links that merchants use to move between sections of the application.\n\n---\n\n## Required components\n\nThe navigation component must be passed to the [frame](https://polaris.shopify.com/components/structure/frame) component. The mobile version of the navigation component appears in the [top bar](https://polaris.shopify.com/components/structure/top-bar) component.\n\n---\n\n## Best practices\n\nThe navigation component should:\n\n- Contain primary navigation items that perform an action when clicked. Each action should navigate to a URL or trigger another action like a modal overlay.\n- Only use secondary actions for supplementary actions to the primary actions.\n- Provide a non-primary link or action as a secondary action to a section or an item.\n- Group navigation items into sections based on related categories.\n- Use a section title to clarify the category of a section.\n- Use a major icon for item actions.\n- Use a minor icon for secondary actions.\n- Use the provided navigation section component to group navigation items.\n\n---\n\n## Content guidelines\n\nNavigation should:\n\n- Use sentence case for primary and secondary navigation items\n\n  <div class=\"usage-list\"><div class=\"usage-list-part\">\n\n  #### Do\n\n  - Online store\n\n  </div><div class=\"usage-list-part\">\n\n#### Don’t\n\n  - Online Store\n\n  </div></div>\n\n- Use as few words as possible to describe each item label\n\n  <div class=\"usage-list\"><div class=\"usage-list-part\">\n\n  #### Do\n\n  - Products\n\n  </div><div class=\"usage-list-part\">\n\n#### Don’t\n\n  - Products in your store\n\n  </div></div>\n\n- Use all caps for section labels\n\n  <div class=\"usage-list\"><div class=\"usage-list-part\">\n\n  #### Do\n\n  - SALES CHANNELS\n\n  </div><div class=\"usage-list-part\">\n\n#### Don’t\n\n  - Sales channels\n\n  </div></div>\n\n---\n\n<a name=\"subcomponent-section\"></a>\n\n## Navigation section\n\nA navigation section groups together related navigation items. Navigation sections can be clarified by a heading. Merchants can use a section to easily find navigation items within a specific category.\n\n### Section properties\n\n| Prop      | Type                     | Description                                                                                   |\n| --------- | ------------------------ | --------------------------------------------------------------------------------------------- |\n| items     | [Item[]](#type-item)     | A collection of navigation items to be rendered inside the section                            |\n| icon      | IconProps['source']      | An icon to be displayed next to the section title                                             |\n| title     | string                   | A string property providing a title for the navigation section                                |\n| fill      | boolean                  | A boolean property indicating whether the section should take up all vertical space available |\n| rollup    | [Rollup[]](#type-rollup) | An object determining the collapsing behavior of the navigation section                       |\n| action    | [Action[]](#type-action) | Renders an icon-only action as a supplementary action next to the section title               |\n| separator | boolean                  | A boolean property indicating whether the section should have a visual separator              |\n\n<a name=\"type-item\"></a>\n\n### Navigation section item\n\nThe content of the navigation component consists of navigation items. Each item is a link or action a merchant can take.\n\n#### Item properties\n\n| Prop               | Type                | Description                                                                                                                                             |\n| ------------------ | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| url                | string              | A location for the navigation item to navigate to when clicked                                                                                          |\n| matches            | boolean             | A boolean property indicating whether the navigation item should respond to a closely matching location property                                        |\n| exactMatch         | boolean             | A boolean property indicating whether the navigation item should respond to an exactly matching location property                                       |\n| matchPaths         | string[]            | A string property providing a collection of additional paths for the navigation item to respond to                                                      |\n| excludePaths       | string[]            | A string property providing an explicit collection of paths the navigation item should not respond to                                                   |\n| icon               | IconProps['source'] | An icon to be displayed next to the navigation. Please prefer minor icons here. If a major icon has to be used, set the `shouldResizeIcon` prop to true |\n| badge              | string \\| null      | A string property allowing content to be displayed in a badge next to the navigation item                                                               |\n| label              | string              | A string property allowing content to be displayed as link text in the navigation item                                                                  |\n| disabled           | boolean             | A boolean property indicating whether the navigation item is disabled                                                                                   |\n| new                | boolean             | Indicate whether the navigation item is new by adding an indicator dot to the parent and badge to the item (overwritten by the badge prop)              |\n| accessibilityLabel | string              | A visually hidden label for screen readers to understand the content of a navigation item                                                               |\n| selected           | boolean             | A boolean property indicating whether the navigation item is the currently-selected item                                                                |\n| shouldResizeIcon   | boolean             | Will allow for major icons to be displayed at the same size as minor icons                                                                              |\n| subNavigationItems | SubNavigationItem[] | A collection of navigation items rendered as nested secondary navigation items                                                                          |\n| secondaryAction    | SecondaryAction     | Renders an icon-only action as a supplementary action next to a navigation item                                                                         |\n| onClick()          | function            | A callback function to handle clicking on a navigation item                                                                                             |\n\n<a name=\"type-rollup\"></a>\n\n### Navigation section rollup\n\nRollup allows items in a navigation section to roll up and be revealed when they are of use to the merchant.\n\n#### Rollup properties\n\n| Prop       | Type   | Description                                                              |\n| ---------- | ------ | ------------------------------------------------------------------------ |\n| after      | number | A number of items after which the navigation section should be collapsed |\n| view       | string | A string property providing content for the section view action          |\n| hide       | string | A string property providing content for the section hide action          |\n| activePath | string | A string property representing the current URL of your application       |\n\n<a name=\"type-action\"></a>\n\n### Navigation section action\n\nAction allows a complementary icon-only action to render next to the section title.\n\n#### Action properties\n\n| Prop               | Type                | Description                                                                        |\n| ------------------ | ------------------- | ---------------------------------------------------------------------------------- |\n| icon               | IconProps['source'] | An icon to be displayed as the content of the action                               |\n| accessibilityLabel | string              | A visually hidden label for screen readers to understand the content of the action |\n| onClick()          | function            | A callback function to handle clicking on the action                               |\n\n---\n\n## Examples\n\n### Basic navigation\n\nUse to present a navigation menu in the [frame](https://polaris.shopify.com/components/structure/frame).\n\n```jsx\n<Frame>\n  <Navigation location=\"/\">\n    <Navigation.Section\n      items={[\n        {\n          url: '/',\n          label: 'Home',\n          icon: HomeMinor,\n        },\n        {\n          url: '/path/to/place',\n          label: 'Orders',\n          icon: OrdersMinor,\n          badge: '15',\n        },\n        {\n          url: '/path/to/place',\n          label: 'Products',\n          icon: ProductsMinor,\n        },\n      ]}\n    />\n  </Navigation>\n</Frame>\n```\n\n### Navigation with multiple secondary navigations\n\nUse to present a secondary action, related to a section and to title the section.\n\n```jsx\n<Frame>\n  <Navigation location=\"/\">\n    <Navigation.Section\n      items={[\n        {\n          url: '/path/to/place',\n          label: 'Home',\n          icon: HomeMinor,\n        },\n        {\n          url: '/path/to/place',\n          label: 'Orders',\n          icon: OrdersMinor,\n          badge: '15',\n          subNavigationItems: [\n            {\n              url: '/admin/orders/collections',\n              disabled: false,\n              selected: false,\n              label: 'Collections',\n            },\n            {\n              url: '/admin/orders/inventory',\n              disabled: false,\n              label: 'Inventory',\n            },\n          ],\n        },\n        {\n          url: '/path/to/place',\n          label: 'Marketing',\n          icon: MarketingMinor,\n          badge: '15',\n          subNavigationItems: [\n            {\n              url: '/admin/analytics/collections',\n              disabled: false,\n              selected: false,\n              label: 'Reports',\n            },\n            {\n              url: '/admin/analytics/inventory',\n              disabled: false,\n              label: 'Live view',\n            },\n          ],\n        },\n        {\n          url: '/admin/products',\n          label: 'Products',\n          icon: ProductsMinor,\n          selected: true,\n          subNavigationItems: [\n            {\n              url: '/?path=/story/all-components-navigation--navigation-with-multiple-secondary-navigations',\n              disabled: false,\n              selected: false,\n              label: 'Collections',\n            },\n            {\n              url: '/admin/products/inventory',\n              disabled: false,\n              selected: true,\n              label: 'Inventory',\n            },\n          ],\n        },\n      ]}\n    />\n  </Navigation>\n</Frame>\n```\n\n### Navigation with an active root item with secondary navigation items\n\nUse to present a secondary action, related to a section and to title the section.\n\n```jsx\n<Frame>\n  <Navigation location=\"/\">\n    <Navigation.Section\n      duplicateRootItem\n      items={[\n        {\n          url: '/path/to/place',\n          label: 'Home',\n          icon: HomeMinor,\n        },\n        {\n          url: '/path/to/place',\n          label: 'Orders',\n          icon: OrdersMinor,\n          badge: '15',\n        },\n        {\n          url: '/admin/products',\n          label: 'Products',\n          icon: ProductsMinor,\n          selected: true,\n          subNavigationItems: [\n            {\n              url: '/admin/products/collections',\n              disabled: false,\n              selected: false,\n              label: 'Collections',\n            },\n            {\n              url: '/admin/products/inventory',\n              disabled: false,\n              label: 'Inventory',\n            },\n          ],\n        },\n      ]}\n    />\n  </Navigation>\n</Frame>\n```\n\n### Navigation with a secondary action for a section and a section title\n\nUse to present a secondary action, related to a section and to title the section.\n\n```jsx\n<Frame>\n  <Navigation location=\"/\">\n    <Navigation.Section\n      items={[\n        {\n          url: '/path/to/place',\n          label: 'Home',\n          icon: HomeMinor,\n        },\n        {\n          url: '/path/to/place',\n          label: 'Orders',\n          icon: OrdersMinor,\n        },\n        {\n          url: '/path/to/place',\n          label: 'Products',\n          icon: ProductsMinor,\n        },\n      ]}\n    />\n    <Navigation.Section\n      title=\"Sales channels\"\n      items={[\n        {\n          url: '/path/to/place',\n          label: 'Online Store',\n          icon: OnlineStoreMinor,\n        },\n      ]}\n      action={{\n        accessibilityLabel: 'Add sales channel',\n        icon: CirclePlusOutlineMinor,\n        onClick: () => {},\n      }}\n    />\n  </Navigation>\n</Frame>\n```\n\n### Navigation with a secondary action for an item\n\nUse to add a different action for an item than the main action, like to view or add something.\n\n```jsx\n<Frame>\n  <Navigation location=\"/\">\n    <Navigation.Section\n      items={[\n        {\n          url: '/path/to/place',\n          label: 'Home',\n          icon: HomeMinor,\n        },\n        {\n          url: '/path/to/place',\n          label: 'Orders',\n          icon: OrdersMinor,\n          secondaryAction: {\n            url: '/admin/orders/add',\n            accessibilityLabel: 'Add an order',\n            icon: CirclePlusOutlineMinor,\n          },\n        },\n        {\n          url: '/path/to/place',\n          label: 'Products',\n          icon: ProductsMinor,\n        },\n      ]}\n    />\n  </Navigation>\n</Frame>\n```\n\n### Navigation with section rollup\n\nUse to show a limited number of items in a section with an option to expand the remaining items.\n\n```jsx\n<Frame>\n  <Navigation location=\"/\">\n    <Navigation.Section\n      items={[\n        {\n          url: '/path/to/place',\n          label: 'Home',\n          icon: HomeMinor,\n        },\n        {\n          url: '/path/to/place',\n          label: 'Orders',\n          icon: OrdersMinor,\n        },\n        {\n          url: '/path/to/place',\n          label: 'Products',\n          icon: ProductsMinor,\n        },\n      ]}\n      rollup={{\n        after: 2,\n        view: 'view',\n        hide: 'hide',\n        activePath: '/',\n      }}\n    />\n  </Navigation>\n</Frame>\n```\n\n### Navigation with section separator\n\nUse to add a horizontal line below the section.\n\n```jsx\n<Frame>\n  <Navigation location=\"/\">\n    <Navigation.Section\n      items={[\n        {\n          url: '/path/to/place',\n          label: 'Home',\n          icon: HomeMinor,\n        },\n        {\n          url: '/path/to/place',\n          label: 'Orders',\n          icon: OrdersMinor,\n        },\n        {\n          url: '/path/to/place',\n          label: 'Products',\n          icon: ProductsMinor,\n        },\n      ]}\n    />\n    <Navigation.Section\n      items={[\n        {\n          url: '/path/to/place',\n          label: 'Online Store',\n          icon: OnlineStoreMinor,\n        },\n      ]}\n      separator\n    />\n  </Navigation>\n</Frame>\n```\n\n### Navigation with various states and secondary elements\n\nThis example showcases the many elements that can compose a navigation, especially useful for testing purposes.\n\n```jsx\n<Frame>\n  <Navigation location=\"/\">\n    <Navigation.Section\n      items={[\n        {\n          url: '/path/to/place',\n          label: 'Inactive item',\n          icon: HomeMinor,\n        },\n        {\n          url: '/path/to/place',\n          label: 'Item with indicator',\n          icon: HomeMinor,\n          subNavigationItems: [\n            {\n              url: '/path/to/place/index',\n              disabled: false,\n              new: true,\n              label: 'New item',\n            },\n          ],\n        },\n        {\n          url: '/path/to/place',\n          label: 'External link item',\n          icon: HomeMinor,\n          external: true,\n        },\n        {\n          url: '/path/to/place',\n          label: 'New item',\n          new: true,\n          icon: HomeMinor,\n        },\n        {\n          url: '/path/to/place',\n          label: 'Badged item',\n          badge: 'Old',\n          icon: HomeMinor,\n        },\n        {\n          url: '/path/to/place',\n          label: 'Active with secondary action',\n          icon: OrdersMinor,\n          selected: true,\n          secondaryAction: {\n            url: '/admin/orders/add',\n            accessibilityLabel: 'Add an order',\n            icon: CirclePlusOutlineMinor,\n          },\n        },\n        {\n          url: '/admin/products',\n          label: 'Active item with sub navigation',\n          icon: ProductsMinor,\n          selected: true,\n          subNavigationItems: [\n            {\n              url: '/admin/products',\n              disabled: false,\n              selected: true,\n              label: 'Selected sub item',\n            },\n            {\n              url: '/admin/products/transfers',\n              disabled: false,\n              label: 'Default sub item',\n            },\n            {\n              url: '/admin/products/inventory',\n              disabled: true,\n              label: 'Disabled sub item',\n            },\n          ],\n        },\n        {\n          url: '/path/to/place',\n          label: 'Disabled item',\n          icon: CustomersMinor,\n          disabled: true,\n        },\n        {\n          url: '/path/to/place',\n          label: 'Overflow item',\n          icon: MarketingMinor,\n        },\n      ]}\n      rollup={{\n        after: 7,\n        view: 'view',\n        hide: 'hide',\n        activePath: '/',\n      }}\n    />\n    <Navigation.Section\n      title=\"These icons should have the same color\"\n      items={[\n        {\n          url: '/path/to/place',\n          label: 'Icon as svg',\n          icon: OnlineStoreMinor,\n        },\n        {\n          url: '/path/to/place',\n          label: 'Icon as img',\n          icon: '<svg viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M1.791 2.253l-.597 3.583A1 1 0 0 0 2.18 7h.893a1.5 1.5 0 0 0 1.342-.83L5 5l.585 1.17A1.5 1.5 0 0 0 6.927 7h1.146a1.5 1.5 0 0 0 1.342-.83L10 5l.585 1.17a1.5 1.5 0 0 0 1.342.83h1.146a1.5 1.5 0 0 0 1.342-.83L15 5l.585 1.17a1.5 1.5 0 0 0 1.342.83h.893a1 1 0 0 0 .986-1.164l-.597-3.583A1.5 1.5 0 0 0 16.729 1H3.271a1.5 1.5 0 0 0-1.48 1.253zM4 18.5A1.5 1.5 0 0 1 5.5 17H8v-3h4v3h2.5a1.5 1.5 0 0 1 1.5 1.5v.5H4v-.5z\"></path><path d=\"M2 9h2v4h12V9h2v4.5a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 2 13.5V9z\"></path></svg>',\n        },\n        {\n          url: '/',\n          label: 'Icon as img – Active',\n          icon: '<svg viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M1.791 2.253l-.597 3.583A1 1 0 0 0 2.18 7h.893a1.5 1.5 0 0 0 1.342-.83L5 5l.585 1.17A1.5 1.5 0 0 0 6.927 7h1.146a1.5 1.5 0 0 0 1.342-.83L10 5l.585 1.17a1.5 1.5 0 0 0 1.342.83h1.146a1.5 1.5 0 0 0 1.342-.83L15 5l.585 1.17a1.5 1.5 0 0 0 1.342.83h.893a1 1 0 0 0 .986-1.164l-.597-3.583A1.5 1.5 0 0 0 16.729 1H3.271a1.5 1.5 0 0 0-1.48 1.253zM4 18.5A1.5 1.5 0 0 1 5.5 17H8v-3h4v3h2.5a1.5 1.5 0 0 1 1.5 1.5v.5H4v-.5z\"></path><path d=\"M2 9h2v4h12V9h2v4.5a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 2 13.5V9z\"></path></svg>',\n        },\n        {\n          url: '/path/to/place',\n          label: 'Other secondary action',\n          icon: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\"><path d=\"M2.771 14.055A8 8 0 1 1 16 8c0 2.385-1.086 4.629-2.704 5.983A7.956 7.956 0 0 1 7.991 16c-.613 0-2.022-.003-5-.01h-.928l.708-1.935zm5.973-6.757c-.554-.302-.837-.565-.837-.92 0-.446.4-.735 1.017-.735a3.62 3.62 0 0 1 1.365.302l.502-1.577S10.328 4 8.963 4C7.057 4 5.73 5.117 5.73 6.68c0 .894.618 1.565 1.442 2.05.67.382.901.658.901 1.065 0 .42-.334.762-.952.762-.915 0-1.79-.486-1.79-.486l-.54 1.577s.797.552 2.15.552c1.956 0 3.373-.986 3.373-2.76-.013-.959-.721-1.642-1.571-2.142z\"/></svg>',\n          secondaryAction: {\n            url: '/path/to/place/view',\n            accessibilityLabel: 'View your online store',\n            icon: ViewMinor,\n          },\n        },\n      ]}\n      action={{\n        accessibilityLabel: 'Add sales channel',\n        icon: CirclePlusOutlineMinor,\n        onClick: () => {},\n      }}\n      separator\n    />\n  </Navigation>\n</Frame>\n```\n\n### Navigation with aria-labelledby\n\nThis example shows how to add an aria-labelledby to add a hidden label to the `nav` element.\n\n```jsx\n<Frame>\n  <Navigation location=\"/\" ariaLabelledBy=\"label-id\">\n    <VisuallyHidden>\n      <p id=\"label-id\">Hidden label</p>\n    </VisuallyHidden>\n    <Navigation.Section\n      items={[\n        {\n          url: '/path/to/place',\n          label: 'Home',\n          icon: HomeMinor,\n        },\n        {\n          url: '/path/to/place',\n          label: 'Orders',\n          icon: OrdersMinor,\n          badge: '15',\n        },\n        {\n          url: '/path/to/place',\n          label: 'Products',\n          icon: ProductsMinor,\n        },\n      ]}\n    />\n  </Navigation>\n</Frame>\n```\n\n### Navigation using Major icons\n\nThis example shows how to use the shouldResizeIcon prop when using Major icons\n\n```jsx\n<Frame>\n  <Navigation location=\"/\">\n    <Navigation.Section\n      items={[\n        {\n          url: '/path/to/place',\n          label: 'Home',\n          icon: HomeMajor,\n        },\n        {\n          url: '/path/to/place',\n          label: 'Orders',\n          icon: OrdersMajor,\n          badge: '15',\n        },\n        {\n          url: '/path/to/place',\n          label: 'Products',\n          icon: ProductsMajor,\n        },\n        {\n          url: '/path/to/place',\n          label: 'Customers',\n          icon: CustomersMajor,\n        },\n      ]}\n    />\n  </Navigation>\n</Frame>\n```\n\n---\n\n## Related components\n\n- To provide the structure for the navigation component, including the left sidebar and the top bar use the [frame](https://polaris.shopify.com/components/structure/frame) component.\n- To display the navigation component on small screens, to provide search and a user menu, or to theme the [frame](https://polaris.shopify.com/components/structure/frame) component to reflect an application’s brand, use the [top bar](https://polaris.shopify.com/components/structure/top-bar) component.\n- To tell merchants their options once they have made changes to a form on the page use the [contextual save bar](https://polaris.shopify.com/components/forms/contextual-save-bar) component.\n- To provide quick, at-a-glance feedback on the outcome of an action, use the [toast](https://polaris.shopify.com/components/feedback-indicators/toast) component.\n- To indicate to merchants that a page is loading or an upload is processing use the [loading](https://polaris.shopify.com/components/feedback-indicators/loading) component.\n- To alternate among related views within the same context, use the [tabs](https://polaris.shopify.com/components/navigation/tabs) component.\n- To embed a single action or link within a larger span of text, use the [link](https://polaris.shopify.com/components/navigation/link) component.\n",
  "Option list": "\n\n# Option list\n\nThe option list component lets you create a list of grouped items that\nmerchants can pick from. This can include single selection or multiple selection\nof options. Option list usually appears in a popover, and sometimes in a modal\nor a sidebar. Option lists are styled differently than\n[choice lists](https://polaris.shopify.com/components/forms/choice-list) and should not be used within a form, but as a standalone menu.\n\n---\n\n## Best practices\n\nThe option list component should:\n\n- Be placed on its own inside a container. Usually the container behaves like a\n  menu, as it does with [popover](https://polaris.shopify.com/components/overlays/popover). Don’t\n  place other components within the same container.\n- Not be used when a [select component](https://polaris.shopify.com/components/forms/select) will do.\n\n---\n\n## Content guidelines\n\n### Option lists\n\nEach item in an option list should be clear and descriptive.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Traffic referrer source\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Source\n\n</div></div>\n\n---\n\n## Examples\n\n### Simple option list\n\nUse for a group of similar selectable items when only one should be selectable at once.\n\n```jsx\nfunction OptionListExample() {\n  const [selected, setSelected] = useState([]);\n\n  return (\n    <Card>\n      <OptionList\n        title=\"Inventory Location\"\n        onChange={setSelected}\n        options={[\n          {value: 'byward_market', label: 'Byward Market'},\n          {value: 'centretown', label: 'Centretown'},\n          {value: 'hintonburg', label: 'Hintonburg'},\n          {value: 'westboro', label: 'Westboro'},\n          {value: 'downtown', label: 'Downtown'},\n        ]}\n        selected={selected}\n      />\n    </Card>\n  );\n}\n```\n\n### Multiple option list\n\nUse when you have a group of similar selectable items and more than one item can be selected at once.\n\n```jsx\nfunction MultipleOptionListExample() {\n  const [selected, setSelected] = useState([]);\n\n  return (\n    <Card>\n      <OptionList\n        title=\"Manage sales channels availability\"\n        onChange={setSelected}\n        options={[\n          {value: 'online_store', label: 'Online Store'},\n          {value: 'messenger', label: 'Messenger'},\n          {value: 'facebook', label: 'Facebook'},\n          {value: 'wholesale', label: 'Wholesale'},\n          {value: 'buzzfeed', label: 'BuzzFeed'},\n        ]}\n        selected={selected}\n        allowMultiple\n      />\n    </Card>\n  );\n}\n```\n\n### Option list with sections\n\nUse sections when you have multiple groups of similar selectable items.\n\n```jsx\nfunction OptionListWithSectionsExample() {\n  const [selected, setSelected] = useState([]);\n\n  return (\n    <Card>\n      <OptionList\n        onChange={setSelected}\n        sections={[\n          {\n            options: [\n              {value: 'type', label: 'Sale item type'},\n              {value: 'kind', label: 'Sale kind'},\n            ],\n          },\n          {\n            title: 'Traffic',\n            options: [\n              {value: 'source', label: 'Traffic referrer source'},\n              {value: 'host', label: 'Traffic referrer host'},\n              {value: 'path', label: 'Traffic referrer path'},\n            ],\n          },\n        ]}\n        selected={selected}\n        allowMultiple\n      />\n    </Card>\n  );\n}\n```\n\n### Option list in a popover\n\nUse when a set of selections won’t fit in the available screen space.\n\n```jsx\nfunction OptionListInPopoverExample() {\n  const [selected, setSelected] = useState([]);\n  const [popoverActive, setPopoverActive] = useState(true);\n\n  const togglePopoverActive = useCallback(\n    () => setPopoverActive((popoverActive) => !popoverActive),\n    [],\n  );\n\n  const activator = (\n    <Button onClick={togglePopoverActive} disclosure>\n      Options\n    </Button>\n  );\n\n  return (\n    <div style={{height: '275px'}}>\n      <Popover\n        active={popoverActive}\n        activator={activator}\n        onClose={togglePopoverActive}\n      >\n        <OptionList\n          title=\"Inventory Location\"\n          onChange={setSelected}\n          options={[\n            {\n              value: 'byward_market',\n              label: 'Byward Market',\n              active: true,\n            },\n            {value: 'centretown', label: 'Centretown'},\n            {\n              value: 'hintonburg',\n              label: 'Hintonburg',\n              active: true,\n            },\n            {value: 'westboro', label: 'Westboro'},\n            {value: 'downtown', label: 'Downtown'},\n          ]}\n          selected={selected}\n        />\n      </Popover>\n    </div>\n  );\n}\n```\n\n---\n\n## Related components\n\n- To render a list of actions,\n  [use the action list component](https://polaris.shopify.com/components/actions/action-list)\n- To create a list of grouped radio buttons or checkboxes,\n  [use the choice list component](https://polaris.shopify.com/components/forms/choice-list)\n- For a basic version of option list as a single choice menu,\n  [use the select component](https://polaris.shopify.com/components/forms/select)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nItems in an option list are organized as list items (`<li>`) in an unordered list (`<ul>`) and are conveyed as a group of related elements to assistive technology users.\n\nControls in simple option lists are [buttons](https://polaris.shopify.com/components/actions/button), and controls in multiple option lists are [checkboxes](https://polaris.shopify.com/components/forms/checkbox).\n\nIf you customize the option list, you can provide ARIA roles that fit the context. These roles must be valid according to the [W3C ARIA specification](https://www.w3.org/TR/wai-aria-1.1/) to be conveyed correctly to screen reader users.\n\n- The `role` prop adds an ARIA role to the option list wrapper\n- The `optionRole` prop adds an ARIA role to the option list items\n\n<!-- /content-for -->\n",
  "Page": "\n\n# Page\n\nUse to build the outer wrapper of a page, including the page title and associated actions.\n\n---\n\n## Best practices\n\nThe page component should:\n\n- Always provide a title for the page header.\n- Always provide breadcrumbs when a page has a parent page.\n- Be organized around a primary activity. If that primary activity is a single action, provide it as a primary button in the page header.\n- Provide other page-level actions as secondary actions in the page header.\n- When the page represents an object of a certain type, provide pagination links to the previous and next object of the same type.\n\n---\n\n## Content guidelines\n\n### Title\n\nTitles should:\n\n- Describe the page in as few words as possible.\n- Be the name of the object type (pluralized) when the page is a list of objects. For a list of orders, the page title should be “Orders”.\n- Not be truncated.\n\n### App icon\n\nApp icons should:\n\n- Provide their app icon\n- Only be provided for pages that are part of a Shopify app\n\n### Breadcrumbs\n\nThe content of each breadcrumb link should be the title of the page to which it links.\n\n### Page header actions\n\nPage header action labels should be:\n\n- Clear and predictable: merchants should be able to anticipate what will\n  happen when they click a page action. Never deceive merchants by mislabeling an action.\n\n- Action-led: they should always lead with a strong verb that encourages\n  action. To provide enough context to merchants, use the {verb}+{noun} format.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Create order\n- View in Postmates\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Create\n- Postmates deliveries\n\n</div></div>\n\n- Short: for secondary actions, when the noun represents the same object as the page itself, a verb alone may be used. If there is ambiguity (such as with the verb “Cancel”), always use the {verb}+{noun} format.\n\n  In the context of the orders list page:\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Import\n- Export\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Import orders\n- Export orders\n\n</div></div>\n\n- Scannable: avoid unnecessary words and articles such as the, an, or a.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nAdd menu item\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nAdd a menu item\n\n</div></div>\n\n---\n\n## Examples\n\n### Page with all header elements\n\n<!-- content-for: web -->\n\nUse for detail pages, which should have pagination and breadcrumbs, and also often have several actions.\n\n```jsx\n<Page\n  breadcrumbs={[{content: 'Products', url: '/products'}]}\n  title=\"3/4 inch Leather pet collar\"\n  titleMetadata={<Badge status=\"success\">Paid</Badge>}\n  subtitle=\"Perfect for any pet\"\n  compactTitle\n  primaryAction={{content: 'Save', disabled: true}}\n  secondaryActions={[\n    {\n      content: 'Duplicate',\n      accessibilityLabel: 'Secondary action label',\n      onAction: () => alert('Duplicate action'),\n    },\n    {\n      content: 'View on your store',\n      onAction: () => alert('View on your store action'),\n    },\n  ]}\n  actionGroups={[\n    {\n      title: 'Promote',\n      accessibilityLabel: 'Action group label',\n      actions: [\n        {\n          content: 'Share on Facebook',\n          accessibilityLabel: 'Individual action label',\n          onAction: () => alert('Share on Facebook action'),\n        },\n      ],\n    },\n  ]}\n  pagination={{\n    hasPrevious: true,\n    hasNext: true,\n  }}\n>\n  <Card title=\"Credit card\" sectioned>\n    <p>Credit card information</p>\n  </Card>\n</Page>\n```\n\n<!-- /content-for -->\n\n<!-- content-for: android -->\n\nUse for detail pages, which should have breadcrumbs, and also often have several actions.\n\nUse for building any page on Android.\n\n![Page on Android](/images-from-old-styleguide/components/Page/android/with-header@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nUse for detail pages, which should have breadcrumbs, and also often have several actions.\n\nUse for building any page on iOS.\n\n![Page on iOS](/images-from-old-styleguide/components/Page/ios/with-header@2x.png)\n\n<!-- /content-for -->\n\n### Page with custom primary action\n\n<!-- example-for: web -->\n\nUse to create a custom primary action.\n\n```jsx\n<Page\n  breadcrumbs={[{content: 'Settings', url: '/settings'}]}\n  title=\"General\"\n  primaryAction={\n    <Button\n      primary\n      connectedDisclosure={{\n        accessibilityLabel: 'Other save actions',\n        actions: [{content: 'Save as new'}],\n      }}\n    >\n      Save\n    </Button>\n  }\n>\n  <Card title=\"Credit card\" sectioned>\n    <p>Credit card information</p>\n  </Card>\n</Page>\n```\n\n### Page without primary action in header\n\n<!-- example-for: web -->\n\nUse when a primary action functions better as part of the page content instead of in the page header.\n\n```jsx\n<Page\n  breadcrumbs={[{content: 'Orders', url: '/orders'}]}\n  title=\"#1085\"\n  secondaryActions={[\n    {content: 'Print'},\n    {content: 'Unarchive'},\n    {content: 'Cancel order'},\n  ]}\n  pagination={{\n    hasPrevious: true,\n    hasNext: true,\n  }}\n>\n  <Card sectioned title=\"Fulfill order\">\n    <Stack alignment=\"center\">\n      <Stack.Item fill>\n        <p>Buy postage and ship remaining 2 items</p>\n      </Stack.Item>\n      <Button primary>Continue</Button>\n    </Stack>\n  </Card>\n</Page>\n```\n\n### Page with destructive secondary action\n\n<!-- example-for: web -->\n\nUsed to visually indicate that the secondary page action is destructive.\n\n```jsx\n<Page\n  title=\"General\"\n  secondaryActions={[{content: 'Delete', destructive: true}]}\n>\n  <p>Page content</p>\n</Page>\n```\n\n### Page with custom secondary action\n\n<!-- example-for: web -->\n\nUse to create a custom secondary action.\n\n```jsx\n<Page\n  title=\"General\"\n  secondaryActions={\n    <Button\n      connectedDisclosure={{\n        accessibilityLabel: 'Other save actions',\n        actions: [{content: 'Save as new'}],\n      }}\n    >\n      Save\n    </Button>\n  }\n>\n  <p>Page content</p>\n</Page>\n```\n\n### Page with subtitle\n\n<!-- example-for: web -->\n\nUse when the page title benefits from secondary content.\n\n```jsx\n<Page\n  breadcrumbs={[{content: 'Products', url: '/products'}]}\n  title=\"Invoice\"\n  subtitle=\"Statement period: May 3, 2019 to June 2, 2019\"\n  secondaryActions={[{content: 'Download', icon: ArrowDownMinor}]}\n>\n  <Card title=\"Credit card\" sectioned>\n    <p>Credit card information</p>\n  </Card>\n</Page>\n```\n\n### Page with external link\n\n<!-- example-for: web -->\n\nUse when a secondary action links to another website. Actions marked external open in a new browser tab.\n\n```jsx\n<Page\n  title=\"Jar With Lock-Lid\"\n  primaryAction={{content: 'Save', disabled: true}}\n  secondaryActions={[\n    {\n      content: 'Promote',\n      external: true,\n      icon: ExternalMinor,\n      url: 'https://www.facebook.com/business/learn/facebook-page-build-audience',\n    },\n  ]}\n>\n  <Card title=\"Credit card\" sectioned>\n    <p>Credit card information</p>\n  </Card>\n</Page>\n```\n\n### Page without pagination\n\n<!-- example-for: web -->\n\nUse when the page doesn’t represent a list of objects or a detail view for an object.\n\n```jsx\n<Page\n  breadcrumbs={[{content: 'Settings', url: '/settings'}]}\n  title=\"General\"\n  primaryAction={{content: 'Save'}}\n>\n  <Card title=\"Credit card\" sectioned>\n    <p>Credit card information</p>\n  </Card>\n</Page>\n```\n\n### Full-width page\n\n<!-- example-for: web -->\n\nUse for layouts that benefit from more screen width, such as wide tables or lists.\n\n```jsx\n<Page\n  fullWidth\n  title=\"Orders\"\n  primaryAction={{content: 'Create order', icon: PlusMinor}}\n  secondaryActions={[{content: 'Export'}]}\n  pagination={{\n    hasNext: true,\n  }}\n>\n  <Card title=\"Credit card\" sectioned>\n    <p>Credit card information</p>\n  </Card>\n</Page>\n```\n\n### Narrow width page\n\n<!-- example-for: web -->\n\nUse a narrow width layout if the page supports a single unified task. When merchants must review the entire page contents to complete their goal, this layout helps focus their attention in a single path from top to bottom.\n\n```jsx\n<Page\n  narrowWidth\n  breadcrumbs={[{content: 'Orders', url: '/orders'}]}\n  title=\"Add payment method\"\n  primaryAction={{content: 'Save', disabled: true}}\n>\n  <Card title=\"Credit card\" sectioned>\n    <p>Credit card information</p>\n  </Card>\n  <PageActions\n    primaryAction={{content: 'Save', disabled: true}}\n    secondaryActions={[{content: 'Delete'}]}\n  />\n</Page>\n```\n\n### Page with action groups\n\n<!-- example-for: web -->\n\nUse action groups for sets of actions that relate to one another, particularly when there are too many to display as secondary actions. Note that these groups will be further rolled up into a single action for smaller displays so that actions do not wrap or overflow the page bounds.\n\n```jsx\n<Page\n  title=\"Products\"\n  actionGroups={[\n    {\n      title: 'Promote',\n      actions: [\n        {\n          content: 'Share on Facebook',\n          onAction: () => {},\n        },\n      ],\n    },\n  ]}\n>\n  <Card title=\"Credit card\" sectioned>\n    <p>Credit card information</p>\n  </Card>\n</Page>\n```\n\n### Page with content after title (title metadata)\n\n<!-- example-for: web -->\n\nTitle metadata appears immediately after the page’s title. Use it to communicate brief, important and non-interactive status information about an entire page.\n\n```jsx\n<Page\n  breadcrumbs={[{content: 'Products', url: '/products'}]}\n  title=\"Jar With Lock-Lid\"\n  titleMetadata={<Badge status=\"attention\">Verified</Badge>}\n  primaryAction={{content: 'Save', disabled: true}}\n  secondaryActions={[{content: 'Duplicate'}, {content: 'View on your store'}]}\n  pagination={{\n    hasPrevious: true,\n    hasNext: true,\n  }}\n>\n  <Card title=\"Credit card\" sectioned>\n    <p>Credit card information</p>\n  </Card>\n</Page>\n```\n\n### Page with divider\n\n<!-- example-for: web -->\n\nUse when the page needs visual separation between the page header and the content.\n\n```jsx\n<Page\n  breadcrumbs={[{content: 'Settings', url: '/settings'}]}\n  title=\"General\"\n  divider\n>\n  <Card title=\"Credit card\" sectioned>\n    <p>Credit card information</p>\n  </Card>\n</Page>\n```\n\n---\n\n## Related components\n\n- To lay out the content within a page, use the [layout component](https://polaris.shopify.com/components/structure/layout)\n- To add pagination within the context of a list or other page content, use the [pagination component](https://polaris.shopify.com/components/navigation/pagination)\n- To add primary and secondary calls to action at the bottom of a page, see the [page actions component](https://polaris.shopify.com/components/structure/page-actions)\n",
  "Page actions": "\n\n# Page actions\n\nPage actions let merchants take key actions at the bottom of specific pages in the interface. This is important because sometimes the primary call to action is hard to access when merchants are at the bottom of a page.\n\n---\n\n## Best practices\n\nPage actions should:\n\n- Include a single primary action on the right. It should be the same as the primary action that shows in the title bar at the top of the page.\n- Include a maximum of two secondary actions, but doesn’t have to include any secondary actions.\n\n---\n\n## Content guidelines\n\n### Call to action buttons\n\nButtons should be:\n\n- Clear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive merchants by mislabeling a button.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Create order\n- Buy shipping label\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- New order\n- Buy\n\n</div></div>\n\n- Action-led: buttons should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on buttons except in the case of common actions like Save, Close, Cancel, or OK.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Activate Apple Pay\n- View shipping settings\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Try Apple Pay\n- View your settings\n\n</div></div>\n\n- Scannable: avoid unnecessary words and articles such as the, an, or a.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Add menu item\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Add a menu item\n\n</div></div>\n\n---\n\n## Examples\n\n### Default page actions\n\nUsed on a resource page (such as an individual order or product page) to let merchants take key actions at the bottom of the page. Usually, the primary action is Save and the secondary action is Delete.\n\n```jsx\n<PageActions\n  primaryAction={{\n    content: 'Save',\n  }}\n  secondaryActions={[\n    {\n      content: 'Delete',\n      destructive: true,\n    },\n  ]}\n/>\n```\n\n### Primary action only\n\nNot all page actions require a secondary action.\n\n```jsx\n<PageActions\n  primaryAction={{\n    content: 'Save',\n  }}\n/>\n```\n\n### Page actions with custom secondary action\n\nUse to create a custom secondary action.\n\n```jsx\n<PageActions\n  primaryAction={{\n    content: 'Save',\n  }}\n  secondaryActions={\n    <Button\n      connectedDisclosure={{\n        accessibilityLabel: 'Other save actions',\n        actions: [{content: 'Save as draft'}],\n      }}\n    >\n      Save\n    </Button>\n  }\n/>\n```\n\n---\n\n## Related components\n\n- To add actions to the top of a page, see the [page component’s](https://polaris.shopify.com/components/structure/page) action props\n- To create a call to action within the context of other page content, use the [button component](https://polaris.shopify.com/components/actions/button)\n- To let merchants move through a collection of items that spans multiple pages, see the [pagination component](https://polaris.shopify.com/components/navigation/pagination)\n",
  "Pagination": "\n\n# Pagination\n\nUse pagination to let merchants move through an ordered collection of items that has been split into pages. On the web, pagination uses buttons to move back and forth between pages. On iOS and Android, pagination uses infinite scrolling.\n\n---\n\n## Best practices\n\nOn all platforms, pagination should:\n\n- Only be used for lists with more than 25 items\n\nWeb pagination should:\n\n- Be placed at the bottom of a long list that has been split up into pages\n- Pagination should navigate to the previous and next set of items in the paged list\n- Hint when merchants are at the first or the last page by disabling the corresponding button\n\niOS and Android pagination should:\n\n- Start loading items when merchants are close to the bottom, roughly 5 items from the end\n- Show [a spinner](https://polaris.shopify.com/components/feedback-indicators/spinner) below the list to indicate that items have been requested\n\n---\n\n## Examples\n\n### Default pagination\n\n<!-- example-for: web -->\n\nUse for pagination at the bottom of lists.\n\n```jsx\n<Pagination\n  hasPrevious\n  onPrevious={() => {\n    console.log('Previous');\n  }}\n  hasNext\n  onNext={() => {\n    console.log('Next');\n  }}\n/>\n```\n\n### Pagination with keyboard navigation\n\n<!-- example-for: web -->\n\nAttach standard keyboard shortcuts to important pagination controls.\n\n```jsx\n<div style={{height: '100px'}}>\n  <Pagination\n    hasPrevious\n    previousKeys={[74]}\n    previousTooltip=\"j\"\n    onPrevious={() => {\n      console.log('Previous');\n    }}\n    hasNext\n    nextKeys={[75]}\n    nextTooltip=\"k\"\n    onNext={() => {\n      console.log('Next');\n    }}\n  />\n</div>\n```\n\n### Pagination with label\n\nAdd a label between navigation buttons to provide more context of the content being viewed by the user.\n\n```jsx\n<Pagination\n  label=\"Results\"\n  hasPrevious\n  onPrevious={() => {\n    console.log('Previous');\n  }}\n  hasNext\n  onNext={() => {\n    console.log('Next');\n  }}\n/>\n```\n\n### Infinite scroll\n\n<!-- example-for: ios, android -->\n\nUse for lists longer than 25 items. In mobile apps it’s natural to scroll to the bottom of the screen to load more items.\n\n<!-- content-for: android -->\n\n![Infinite scroll pagination on Android](/images-from-old-styleguide/components/Pagination/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Infinite scroll pagination on iOS](/images-from-old-styleguide/components/Pagination/ios/default@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Related components\n\n- To see how pagination is used on a page, see the [page component](https://polaris.shopify.com/components/structure/page)\n- To add primary and secondary calls to action at the bottom of a page, see the [page actions component](https://polaris.shopify.com/components/structure/page-actions)\n- The [resource list component](https://polaris.shopify.com/components/lists-and-tables/resource-list) is often combined with pagination to handle long lists of resources such as orders or customers\n- To create stand-alone navigational links or calls to action, use the [button component](https://polaris.shopify.com/components/actions/button)\n- To embed actions or pathways to more information within a sentence, use the [link component](https://polaris.shopify.com/components/navigation/link)\n",
  "Popover": "\n\n# Popover\n\nPopovers are small overlays that open on demand. They let merchants access additional content and actions without cluttering the page.\n\n---\n\n## Best practices\n\nPopovers should:\n\n- Always be positioned next to the button or other interface element that triggers them\n- Be used for secondary or less important information and actions since they’re hidden until merchants hit the trigger\n- Contain navigation or actions that share a relationships to each other\n- Be triggered by a clearly labeled button\n\n---\n\n## Content guidelines\n\n### Popover content\n\nIf a popover contains actions, they should:\n\n- Be clear and predictable: merchants should be able to anticipate what will happen when they click on an action item. Never deceive merchants by mislabeling an action.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Create order\n- Buy shipping label\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- New order\n- Buy\n\n</div></div>\n\n- Be action-led: buttons should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on buttons except in the case of common actions like Save, Close, Cancel, or OK.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Rename\n- Edit HTML\n- Duplicate\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- HTML editing options\n- File name changes\n- Duplicate this order so that you can make edits, updates, or changes\n\n</div></div>\n\n- Be scannable, especially when the popover contains a list of actions or options. Avoid unnecessary words and articles such as “the”, “an”, or “a”.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Add menu item\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Add a menu item\n\n</div></div>\n\nIf the popover includes a series of navigational links, each item should:\n\n- Be concise but still give merchants enough information so they can easily find and accurately navigate to the path they want.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Online store\n- Messenger\n- Facebook\n- Buy Button\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Sales channel\n\n</div></div>\n\n---\n\n## Examples\n\n### Popover with action list\n\nUse when presenting a set of actions in a disclosable menu.\n\n```jsx\nfunction PopoverWithActionListExample() {\n  const [popoverActive, setPopoverActive] = useState(true);\n\n  const togglePopoverActive = useCallback(\n    () => setPopoverActive((popoverActive) => !popoverActive),\n    [],\n  );\n\n  const activator = (\n    <Button onClick={togglePopoverActive} disclosure>\n      More actions\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover\n        active={popoverActive}\n        activator={activator}\n        autofocusTarget=\"first-node\"\n        onClose={togglePopoverActive}\n      >\n        <ActionList\n          actionRole=\"menuitem\"\n          items={[{content: 'Import'}, {content: 'Export'}]}\n        />\n      </Popover>\n    </div>\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Popover with action list for Android](/images-from-old-styleguide/components/Popover/android/action-list@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Popover with action list for iOS](/images-from-old-styleguide/components/Popover/ios/action-list@2x.png)\n\n<!-- /content-for -->\n\n### Popover with content and actions\n\nUse to present a combination of content, instructions, and actions in a panel for tasks that are of low or secondary importance to the current page. When used this way, popovers provide useful entry points to related features without overwhelming merchants.\n\n```jsx\nfunction PopoverContentExample() {\n  const [popoverActive, setPopoverActive] = useState(true);\n\n  const togglePopoverActive = useCallback(\n    () => setPopoverActive((popoverActive) => !popoverActive),\n    [],\n  );\n\n  const activator = (\n    <Button onClick={togglePopoverActive} disclosure>\n      Sales channels\n    </Button>\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Popover\n        active={popoverActive}\n        activator={activator}\n        autofocusTarget=\"first-node\"\n        onClose={togglePopoverActive}\n      >\n        <Popover.Pane fixed>\n          <Popover.Section>\n            <p>Available sales channels</p>\n          </Popover.Section>\n        </Popover.Pane>\n        <Popover.Pane>\n          <ActionList\n            actionRole=\"menuitem\"\n            items={[\n              {content: 'Online store'},\n              {content: 'Facebook'},\n              {content: 'Shopify POS'},\n            ]}\n          />\n        </Popover.Pane>\n      </Popover>\n    </div>\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Popover with content and actions for Android](/images-from-old-styleguide/components/Popover/android/action-content@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Popover with content and actions for iOS](/images-from-old-styleguide/components/Popover/ios/action-content@2x.png)\n\n<!-- /content-for -->\n\n### Popover with form components\n\n<!-- example-for: web -->\n\nUse to present secondary input tasks on demand.\n\n```jsx\nfunction PopoverFormExample() {\n  const [popoverActive, setPopoverActive] = useState(true);\n  const [tagValue, setTagValue] = useState('');\n\n  const togglePopoverActive = useCallback(\n    () => setPopoverActive((popoverActive) => !popoverActive),\n    [],\n  );\n\n  const handleTagValueChange = useCallback((value) => setTagValue(value), []);\n\n  const activator = (\n    <Button onClick={togglePopoverActive} disclosure>\n      Filter\n    </Button>\n  );\n\n  return (\n    <div style={{height: '280px'}}>\n      <Popover\n        active={popoverActive}\n        activator={activator}\n        onClose={togglePopoverActive}\n        ariaHaspopup={false}\n        sectioned\n      >\n        <FormLayout>\n          <Select label=\"Show all customers where:\" options={['Tagged with']} />\n          <TextField\n            label=\"Tags\"\n            value={tagValue}\n            onChange={handleTagValueChange}\n            autoComplete=\"off\"\n          />\n          <Button size=\"slim\">Add filter</Button>\n        </FormLayout>\n      </Popover>\n    </div>\n  );\n}\n```\n\n### Popover with lazy loaded list\n\n<!-- example-for: web -->\n\nUse to present merchants with a list that dynamically loads more items on scroll or arrow down.\n\n```jsx\nfunction PopoverLazyLoadExample() {\n  const [popoverActive, setPopoverActive] = useState(true);\n  const [visibleStaffIndex, setVisibleStaffIndex] = useState(5);\n  const staff = [\n    'Abbey Mayert',\n    'Abbi Senger',\n    'Abdul Goodwin',\n    'Abdullah Borer',\n    'Abe Nader',\n    'Abigayle Smith',\n    'Abner Torphy',\n    'Abraham Towne',\n    'Abraham Vik',\n    'Ada Fisher',\n    'Adah Pouros',\n    'Adam Waelchi',\n    'Adan Zemlak',\n    'Addie Wehner',\n    'Addison Wexler',\n    'Alex Hernandez',\n  ];\n\n  const togglePopoverActive = useCallback(\n    () => setPopoverActive((popoverActive) => !popoverActive),\n    [],\n  );\n\n  const handleScrolledToBottom = useCallback(() => {\n    const totalIndexes = staff.length;\n    const interval =\n      visibleStaffIndex + 3 < totalIndexes\n        ? 3\n        : totalIndexes - visibleStaffIndex;\n\n    if (interval > 0) {\n      setVisibleStaffIndex(visibleStaffIndex + interval);\n    }\n  }, [staff.length, visibleStaffIndex]);\n\n  const handleResourceListItemClick = useCallback(() => {}, []);\n\n  const activator = (\n    <Button onClick={togglePopoverActive} disclosure>\n      View staff\n    </Button>\n  );\n\n  const staffList = staff.slice(0, visibleStaffIndex).map((name) => ({\n    name,\n    initials: getInitials(name),\n  }));\n\n  return (\n    <Card sectioned>\n      <div style={{height: '280px'}}>\n        <Popover\n          sectioned\n          active={popoverActive}\n          activator={activator}\n          onClose={togglePopoverActive}\n          ariaHaspopup={false}\n        >\n          <Popover.Pane onScrolledToBottom={handleScrolledToBottom}>\n            <ResourceList items={staffList} renderItem={renderItem} />\n          </Popover.Pane>\n        </Popover>\n      </div>\n    </Card>\n  );\n\n  function renderItem({name, initials}) {\n    return (\n      <ResourceList.Item\n        id={name}\n        media={<Avatar size=\"medium\" name={name} initials={initials} />}\n        onClick={handleResourceListItemClick}\n      >\n        {name}\n      </ResourceList.Item>\n    );\n  }\n\n  function getInitials(name) {\n    return name\n      .split(' ')\n      .map((surnameOrFamilyName) => {\n        return surnameOrFamilyName.slice(0, 1);\n      })\n      .join('');\n  }\n}\n```\n\n### Action sheet\n\n<!-- example-for: ios -->\n\nUse when you have few actions that affects the whole page. Action sheets doesn’t support icons or additional information.\n\n<!-- content-for: ios -->\n\n![iOS action sheet](/images-from-old-styleguide/components/Popover/ios/action-sheet@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Related components\n\n- To put a list of actions in a popover, [use the action list component](https://polaris.shopify.com/components/actions/action-list)\n- To let merchants select simple options from a list, [use the select component](https://polaris.shopify.com/components/forms/select)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nPopovers usually contain an [option list](https://polaris.shopify.com/components/lists-and-tables/option-list) or an [action list](https://polaris.shopify.com/components/actions/action-list), but can also contain other controls or content.\n\nTo assist screen readers with sending focus to an [action list](https://polaris.shopify.com/components/actions/action-list), pass `autofocusTarget='first-node'` to `Popover`. This will avoid known issues a screen reader may have with keyboard support once focus is moved off the activator.\n\nWeb browsers assign a default value of 'menu' to the `aria-haspopup` role. You can use the prop `ariaHaspopup` to specify a value. Screen readers may fail to send focus to the `Popover` content when they expect the content to be adjacent to the element with `aria-haspopup` in the DOM tree. In this scenario, it is recommended not to provide the `ariaHaspopup` prop.\n\n### Keyboard support\n\n- When a popover opens, focus moves to the first focusable element or to the popover container\n- Once focus is in the popover, merchants can access controls in the popover using the <kbd>tab</kbd> key (and <kbd>shift</kbd> + <kbd>tab</kbd> backwards) and standard keystrokes for interacting\n- Merchants can dismiss the popover by tabbing out of it, pressing the <kbd>esc</kbd> key, or clicking outside of it\n- When the popover is closed, focus returns to the element that launched it\n\n<!-- /content-for -->\n",
  "Progress bar": "\n\n# Progress bar\n\nThe progress bar component is used to visually represent the completion of a task or operation. It shows how much of the task has been completed and how much is still left.\n\n---\n\n## Best practices\n\nProgress bar components should:\n\n- Give merchants an indication of how much of the task has completed and how much is left.\n- Not be used for entire page loads. In this case, use the [Skeleton page](https://polaris.shopify.com/components/feedback-indicators/skeleton-page) component.\n\n---\n\n## Examples\n\n### Default\n\nUse this component to visually represent the completion of a task or operation.\n\n```jsx\n<ProgressBar progress={75} />\n```\n\n### Small progress bar\n\nUse the size option when you need to increase or decrease the visual weight of the progress bar.\n\n```jsx\n<ProgressBar progress={40} size=\"small\" />\n```\n\n### Colored progress bars\n\nUse the color option when you need to blend the progress bar in a context that calls for it, such as a progress toward success or where it’s the primary focus.\n\n```jsx\n<div>\n  <ProgressBar progress={70} color=\"primary\" />\n  <br />\n  <ProgressBar progress={30} color=\"success\" />\n</div>\n```\n\n### Non-animated progress bar\n\nUse the animated prop when you want to show a static progress bar.\n\n```jsx\n<ProgressBar progress={80} animated={false} />\n```\n\n---\n\n## Related components\n\n- For tasks with a short load time, use the [Spinner](https://polaris.shopify.com/components/feedback-indicators/spinner) component\n- For full page loads, use the [Skeleton page](https://polaris.shopify.com/components/feedback-indicators/skeleton-page) component\n",
  "Radio button": "\n\n# Radio button\n\nUse radio buttons to present each item in a list of options where merchants must\nmake a single selection.\n\n---\n\n## Best practices\n\nRadio buttons should:\n\n- Always be used with an associated label component.\n- Be part of a list of radio buttons that:\n  - Include at least two or more choices.\n  - Are used to have merchants select only one option.\n  - Include mutually exclusive options—this means that each option must be\n    independent from every other option in the list. For example: Red, blue, and\n    yellow are mutually exclusive. Red, blue, yellow, red/blue are not mutually\n    exclusive.\n  - List options in a rational order that makes logical sense.\n  - Have a default option selected whenever possible.\n\n---\n\n## Content guidelines\n\n### Radio button labels\n\nRadio button labels should:\n\n- Be introduced with a colon or a heading\n- Start with a capital letter\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Option 1\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- option 1\n\n</div></div>\n\n- Not end in punctuation if it’s a single sentence, word, or a fragment\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Red\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Red;\n\n</div></div>\n\n### Toggle (Android and iOS only)\n\nToggle labels should:\n\n- Be clear what merchants are enabling or disabling\n- Start with a capital letter\n\nToggle values should:\n\n- Never be labeled\n\n---\n\n## Examples\n\n### Default radio button\n\nUse radio buttons where merchants must make a single selection.\n\n```jsx\nfunction RadioButtonExample() {\n  const [value, setValue] = useState('disabled');\n\n  const handleChange = useCallback(\n    (_checked, newValue) => setValue(newValue),\n    [],\n  );\n\n  return (\n    <Stack vertical>\n      <RadioButton\n        label=\"Accounts are disabled\"\n        helpText=\"Customers will only be able to check out as guests.\"\n        checked={value === 'disabled'}\n        id=\"disabled\"\n        name=\"accounts\"\n        onChange={handleChange}\n      />\n      <RadioButton\n        label=\"Accounts are optional\"\n        helpText=\"Customers will be able to check out with a customer account or as a guest.\"\n        id=\"optional\"\n        name=\"accounts\"\n        checked={value === 'optional'}\n        onChange={handleChange}\n      />\n    </Stack>\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Default radio button on Android](/images-from-old-styleguide/components/RadioButton/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Default radio button on iOS](/images-from-old-styleguide/components/RadioButton/ios/default@2x.png)\n\n<!-- /content-for -->\n\n### Toggle\n\n<!-- example-for: android, ios -->\n\nUse toggles when merchants need to make a binary choice (on or off).\n\n<!-- content-for: android -->\n\n![Android toggle with on or off options](/images-from-old-styleguide/components/RadioButton/android/toggle@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![iOS toggle with on or off options](/images-from-old-styleguide/components/RadioButton/ios/toggle@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Related components\n\n- To make simple lists of radio buttons easier to build, [use the choice list component](https://polaris.shopify.com/components/forms/choice-list)\n- For long lists of options, [consider the select component](https://polaris.shopify.com/components/forms/select) to avoid overwhelming merchants\n- To present merchants with a list of checkboxes, [use the choice list component](https://polaris.shopify.com/components/forms/choice-list) with the “allow multiple” option\n- To display non-interactive list of related content, [use the content list component](https://polaris.shopify.com/components/lists-and-tables/list)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nScreen readers convey the state of the radio button automatically.\n\n- Use the `disabled` prop to apply the HTML `disabled` attribute to the radio button `<input>`. This prevents merchants from being able to interact with the radio button, and conveys its inactive state to assistive technologies.\n- Use the `id` prop to provide a unique `id` attribute value for the radio button. If an `id` isn’t provided, then the component generates one. All radio buttons must have unique `id` values to work correctly with assistive technologies.\n\n### Labeling\n\n- The required `label` prop conveys the purpose of the radio button to all merchants\n- Use the `labelHidden` prop to visually hide the label but make it available to assistive technologies\n- When you provide help text via the `helpText` prop or an inline error message via the `error` prop, the help or error content is conveyed to screen reader users with the `aria-describedby` attribute\n\n### Keyboard support\n\n- Move focus to the radio button group using the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)\n- Use the up and down arrow keys to change which radio button is selected\n\n<!-- /content-for -->\n",
  "Range slider": "\n\n# Range slider\n\nA range slider is an input field that merchants can use to select a numeric value within a given range (minimum and maximum values).\n\n---\n\n## Best practices\n\nRange sliders should:\n\n- Always be used with a label, even if that label is `hidden`.\n- When a label is visible, it should clearly communicate the purpose of the range input and its values (min, max, step, value)\n- Be labeled as “Optional” when you need to request input that’s not required\n- Validate input as soon as merchants have finished interacting with a field (but not before)\n- Always be used with two text field components when range slider has dual thumbs, to provide accessible alternatives to both the lower and upper thumbs\n\n---\n\n## Content guidelines\n\n### Range label\n\nA label is a short description of the requested input. Labels are not instructional text but they should be meaningful and clearly indicate what is expected. Labels should be:\n\n- Placed above the form field\n- Short and succinct (1–3 words)\n- Written in sentence case (the first word capitalized, the rest lowercase)\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Saturation percentage\n- Banner width\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- What is the saturation value?\n- The banner width is:\n\n</div></div>\n\n### Designating optional fields\n\nTry to only ask for information that’s required. If you need to ask merchants\nto provide optional information, mark the field optional by placing the text “(optional)” at the end of the field’s label. Don’t mark required fields with asterisks.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Banner width (optional)\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Banner width\n\n</div></div>\n\n### Help text\n\nHelp text provides extra guidance or instruction to people filling out a form field. It can also be used to clarify how the information will be used. As with all form content, help text should be succinct and easy to read.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Video duration is calculated in seconds\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Example: 134 seconds\n\n</div></div>\n\n### Validation error messages\n\nError messages should:\n\n- Clearly explain what went wrong and how to fix it\n- Be short and concise, no more than a single sentence\n- Use [passive voice](https://polaris.shopify.com/content/grammar-and-mechanics) so merchants don’t feel like they’re being blamed for the error\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Video duration is required\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- You didn’t enter a duration\n\n</div></div>\n\n---\n\n## Examples\n\n### Default range slider\n\nUse when a single value between `0 and 100` needs to be selected.\n\n```jsx\nfunction RangeSliderExample() {\n  const [rangeValue, setRangeValue] = useState(32);\n\n  const handleRangeSliderChange = useCallback(\n    (value) => setRangeValue(value),\n    [],\n  );\n\n  return (\n    <Card sectioned title=\"Background color\">\n      <RangeSlider\n        label=\"Opacity percentage\"\n        value={rangeValue}\n        onChange={handleRangeSliderChange}\n        output\n      />\n    </Card>\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Range slider for Android](/images-from-old-styleguide/components/RangeSlider/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Range slider for iOS](/images-from-old-styleguide/components/RangeSlider/ios/default@2x.png)\n\n<!-- /content-for -->\n\n### Min and max range control\n\n<!-- example-for: web -->\n\nUse when a single value needs to be selected from a number range with a specific minimum and maximum.\n\n```jsx\nfunction RangeSliderWithPreciseRangeControlExample() {\n  const [rangeValue, setRangeValue] = useState(0);\n\n  const handleRangeSliderChange = useCallback(\n    (value) => setRangeValue(value),\n    [],\n  );\n\n  return (\n    <Card sectioned title=\"Navigation branding\">\n      <RangeSlider\n        output\n        label=\"Logo offset\"\n        min={-20}\n        max={20}\n        value={rangeValue}\n        onChange={handleRangeSliderChange}\n      />\n    </Card>\n  );\n}\n```\n\n### Step incremented range control\n\n<!-- example-for: web -->\n\nUse when a single value of a specific increment needs to be selected from a range of numbers.\n\n```jsx\nfunction RangeSliderWithPreciseRangeControlExample() {\n  const [rangeValue, setRangeValue] = useState(4);\n\n  const handleRangeSliderChange = useCallback(\n    (value) => setRangeValue(value),\n    [],\n  );\n\n  return (\n    <Card sectioned title=\"Navigation branding\">\n      <RangeSlider\n        output\n        label=\"Logo offset\"\n        min={-20}\n        max={20}\n        step={4}\n        value={rangeValue}\n        onChange={handleRangeSliderChange}\n      />\n    </Card>\n  );\n}\n```\n\n### Prefix and suffix elements\n\n<!-- example-for: web -->\n\nUse when the start or end of the range input benefits from additional content.\n\nThe height of the range slider component varies based on the presence or absence of props like `label` and `helpText`. Setting a React element on the `prefix` and `suffix` props is supported to enable control of spacing and alignment.\n\n```jsx\nfunction RangeSliderWithPrefixAndSuffixExample() {\n  const [rangeValue, setRangeValue] = useState(100);\n\n  const handleRangeSliderChange = useCallback(\n    (value) => setRangeValue(value),\n    [],\n  );\n\n  const suffixStyles = {\n    minWidth: '24px',\n    textAlign: 'right',\n  };\n\n  return (\n    <Card sectioned title=\"Text color\">\n      <RangeSlider\n        output\n        label=\"Hue color mix\"\n        min={0}\n        max={360}\n        value={rangeValue}\n        onChange={handleRangeSliderChange}\n        prefix={<p>Hue</p>}\n        suffix={<p style={suffixStyles}>{rangeValue}</p>}\n      />\n    </Card>\n  );\n}\n```\n\n### Dual thumb range slider\n\n<!-- example-for: web -->\n\nUse when two values need to be selected from a range of numbers.\n\n```jsx\nfunction DualThumbRangeSliderExample() {\n  const initialValue = [900, 1000];\n  const prefix = '$';\n  const min = 0;\n  const max = 2000;\n  const step = 10;\n\n  const [intermediateTextFieldValue, setIntermediateTextFieldValue] =\n    useState(initialValue);\n  const [rangeValue, setRangeValue] = useState(initialValue);\n\n  const handleRangeSliderChange = useCallback((value) => {\n    setRangeValue(value);\n    setIntermediateTextFieldValue(value);\n  }, []);\n\n  const handleLowerTextFieldChange = useCallback(\n    (value) => {\n      const upperValue = rangeValue[1];\n      setIntermediateTextFieldValue([parseInt(value, 10), upperValue]);\n    },\n    [rangeValue],\n  );\n\n  const handleUpperTextFieldChange = useCallback(\n    (value) => {\n      const lowerValue = rangeValue[0];\n      setIntermediateTextFieldValue([lowerValue, parseInt(value, 10)]);\n    },\n    [rangeValue],\n  );\n\n  const handleLowerTextFieldBlur = useCallback(() => {\n    const upperValue = rangeValue[1];\n    const value = intermediateTextFieldValue[0];\n\n    setRangeValue([parseInt(value, 10), upperValue]);\n  }, [intermediateTextFieldValue, rangeValue]);\n\n  const handleUpperTextFieldBlur = useCallback(() => {\n    const lowerValue = rangeValue[0];\n    const value = intermediateTextFieldValue[1];\n\n    setRangeValue([lowerValue, parseInt(value, 10)]);\n  }, [intermediateTextFieldValue, rangeValue]);\n\n  const handleEnterKeyPress = useCallback(\n    (event) => {\n      const newValue = intermediateTextFieldValue;\n      const oldValue = rangeValue;\n\n      if (event.keyCode === Key.Enter && newValue !== oldValue) {\n        setRangeValue(newValue);\n      }\n    },\n    [intermediateTextFieldValue, rangeValue],\n  );\n\n  const lowerTextFieldValue =\n    intermediateTextFieldValue[0] === rangeValue[0]\n      ? rangeValue[0]\n      : intermediateTextFieldValue[0];\n\n  const upperTextFieldValue =\n    intermediateTextFieldValue[1] === rangeValue[1]\n      ? rangeValue[1]\n      : intermediateTextFieldValue[1];\n\n  return (\n    <Card sectioned title=\"Minimum requirements\">\n      <div onKeyDown={handleEnterKeyPress}>\n        <RangeSlider\n          output\n          label=\"Money spent is between\"\n          value={rangeValue}\n          prefix={prefix}\n          min={min}\n          max={max}\n          step={step}\n          onChange={handleRangeSliderChange}\n        />\n        <Stack distribution=\"equalSpacing\" spacing=\"extraLoose\">\n          <TextField\n            label=\"Min money spent\"\n            type=\"number\"\n            value={`${lowerTextFieldValue}`}\n            prefix={prefix}\n            min={min}\n            max={max}\n            step={step}\n            onChange={handleLowerTextFieldChange}\n            onBlur={handleLowerTextFieldBlur}\n            autoComplete=\"off\"\n          />\n          <TextField\n            label=\"Max money spent\"\n            type=\"number\"\n            value={`${upperTextFieldValue}`}\n            prefix={prefix}\n            min={min}\n            max={max}\n            step={step}\n            onChange={handleUpperTextFieldChange}\n            onBlur={handleUpperTextFieldBlur}\n            autoComplete=\"off\"\n          />\n        </Stack>\n      </div>\n    </Card>\n  );\n}\n```\n\n---\n\n## Related components\n\n- To collect a number value as a text input, [use the text field component](https://polaris.shopify.com/components/forms/text-field)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nThe range slider provides a large click and tap target for the slider thumbs. Merchants can also tap or click on the slider track to move the closest slider thumb.\n\n### Single-thumb slider\n\nThe default range slider component uses the [ARIA 1.1 slider pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#slider) to build upon the default HTML `<input type=\"range\">`. The required `label` prop provides a label for the field that’s conveyed to assistive technologies when it receives focus. When the slider is used, the `value` prop should update visually and programmatically to reflect the current value.\n\nTo consistently provide the current value to assistive technologies, use the `min` and `max` props to provide the minimum and maximum values for the slider.\n\n### Dual-thumb slider\n\nThe dual-thumb range slider component uses the [ARIA 1.1 slider (multi-thumb) pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#slidertwothumb). However, the pattern isn’t consistently supported by screen readers, especially on mobile devices. Because of this, it’s best to pair the dual-thumb slider with a set of text fields for each value, or to provide another accessible method for entering information.\n\n### Keyboard\n\n- To move focus to a slider thumb, press the <kbd>tab</kbd> key to move forward and or <kbd>shift</kbd> + <kbd>tab</kbd> to move backward\n- When a thumb has focus, use the up and down or left and right arrow keys to move the thumb and update the associated value.\n\n<!-- /content-for -->\n",
  "Resource item": "\n\n# Resource item\n\nResource items represent specific objects within a collection, such as products or orders. They provide contextual information on the resource type and link to the object’s detail page.\n\n---\n\n## Examples\n\n### Simple resource item\n\nA basic resource item with its details filled in at the point of use.\n\n```jsx\nfunction ResourceItemExample() {\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  return (\n    <Card>\n      <ResourceList\n        resourceName={{singular: 'blog post', plural: 'blog posts'}}\n        items={[\n          {\n            id: 6,\n            url: 'posts/6',\n            title: 'How To Get Value From Wireframes',\n            author: 'Jonathan Mangrove',\n          },\n        ]}\n        selectedItems={selectedItems}\n        onSelectionChange={setSelectedItems}\n        selectable\n        renderItem={(item) => {\n          const {id, url, title, author} = item;\n          const authorMarkup = author ? <div>by {author}</div> : null;\n          return (\n            <ResourceItem\n              id={id}\n              url={url}\n              accessibilityLabel={`View details for ${title}`}\n              name={title}\n            >\n              <h3>\n                <TextStyle variation=\"strong\">{title}</TextStyle>\n              </h3>\n              {authorMarkup}\n            </ResourceItem>\n          );\n        }}\n      />\n    </Card>\n  );\n}\n```\n\n### Item with media\n\nThe media element can hold an [avatar](https://polaris.shopify.com/components/images-and-icons/avatar), [thumbnail](https://polaris.shopify.com/components/images-and-icons/thumbnail), or other small-format graphic.\n\n```jsx\n<Card>\n  <ResourceList\n    resourceName={{singular: 'customer', plural: 'customers'}}\n    items={[\n      {\n        id: 145,\n        url: 'customers/145',\n        avatarSource:\n          'https://burst.shopifycdn.com/photos/freelance-designer-working-on-laptop.jpg?width=746',\n        name: 'Yi So-Yeon',\n        location: 'Gwangju, South Korea',\n      },\n    ]}\n    renderItem={(item) => {\n      const {id, url, avatarSource, name, location} = item;\n\n      return (\n        <ResourceItem\n          id={id}\n          url={url}\n          media={\n            <Avatar customer size=\"medium\" name={name} source={avatarSource} />\n          }\n          accessibilityLabel={`View details for ${name}`}\n          name={name}\n        >\n          <h3>\n            <TextStyle variation=\"strong\">{name}</TextStyle>\n          </h3>\n          <div>{location}</div>\n        </ResourceItem>\n      );\n    }}\n  />\n</Card>\n```\n\n### Item with shortcut actions\n\nShortcut actions present popular actions from the resource’s details page for easy access. A shortcut action should be available on every item in the list.\n\n```jsx\n<Card>\n  <ResourceList\n    resourceName={{singular: 'customer', plural: 'customers'}}\n    items={[\n      {\n        id: 145,\n        url: 'customers/145',\n        avatarSource:\n          'https://burst.shopifycdn.com/photos/freelance-designer-working-on-laptop.jpg?width=746',\n        name: 'Yi So-Yeon',\n        location: 'Gwangju, South Korea',\n        latestOrderUrl: 'orders/1456',\n      },\n    ]}\n    renderItem={(item) => {\n      const {id, url, avatarSource, name, location, latestOrderUrl} = item;\n      const shortcutActions = latestOrderUrl\n        ? [{content: 'View latest order', url: latestOrderUrl}]\n        : null;\n\n      return (\n        <ResourceItem\n          id={id}\n          url={url}\n          media={\n            <Avatar customer size=\"medium\" name={name} source={avatarSource} />\n          }\n          shortcutActions={shortcutActions}\n          accessibilityLabel={`View details for ${name}`}\n          name={name}\n        >\n          <h3>\n            <TextStyle variation=\"strong\">{name}</TextStyle>\n          </h3>\n          <div>{location}</div>\n        </ResourceItem>\n      );\n    }}\n  />\n</Card>\n```\n\n### Item with vertical alignment\n\nUse to adjust the vertical alignment of item content.\n\n```jsx\n<Card>\n  <ResourceList\n    resourceName={{singular: 'customer', plural: 'customers'}}\n    items={[\n      {\n        id: 145,\n        url: 'customers/145',\n        avatarSource:\n          'https://burst.shopifycdn.com/photos/freelance-designer-working-on-laptop.jpg?width=746',\n        name: 'Yi So-Yeon',\n        location: 'Gwangju, South Korea',\n        lastOrder: 'Emerald Silk Gown',\n      },\n    ]}\n    renderItem={(item) => {\n      const {id, url, avatarSource, name, location, lastOrder} = item;\n      return (\n        <ResourceItem\n          verticalAlignment=\"center\"\n          id={id}\n          url={url}\n          media={\n            <Avatar customer size=\"medium\" name={name} source={avatarSource} />\n          }\n          accessibilityLabel={`View details for ${name}`}\n          name={name}\n        >\n          <h3>\n            <TextStyle variation=\"strong\">{name}</TextStyle>\n          </h3>\n          <div>{location}</div>\n          <div>{lastOrder}</div>\n        </ResourceItem>\n      );\n    }}\n  />\n</Card>\n```\n\n---\n\n## Required components\n\nThe resource item component must be wrapped in the [resource list](https://polaris.shopify.com/components/lists-and-tables/resource-list) component.\n\n---\n\n## Accessibility\n\nResource items function as links to the full-page representations of the items. Each item should have a unique `name` prop. For each `ResourceItem`, the `accessibilityLabel` prop should be used to give the link a unique `aria-label` value. The `aria-label` value should convey the link’s purpose, using the `name` value. Merchants who use screen readers or other text to speech tools should be able to easily distinguish each link from the others.\n\nWhen adding custom content to resource items, ensure that all text is available to all users and that all custom controls have a unique accessible name to help users understand what will happen when the control is activated.\n\n### Keyboard\n\nLinks can be activated with the <kbd>enter</kbd>/<kbd>return</kbd> key by default.\n\nIf you add custom controls to resource items, then make sure that the controls:\n\n- Can be used with the keyboard\n- Receive keyboard focus in a logical order\n- Display a visible focus indicator\n\n---\n\n## Best practices\n\nResource items should:\n\n- Be tailored to the specific type of context being displayed.\n- Perform an action when clicked. The action should navigate to the resource’s details page or provide more detail about the item.\n\nResource items can optionally:\n\n- Provide [shortcut actions](https://polaris.shopify.com/components/lists-and-tables/resource-list#study-custom-item-shortcut-actions) for quick access to frequent actions from the resource’s details page.\n\n---\n\n## Content guidelines\n\nResource items should:\n\n- Present the information that merchants need to find the items that they’re looking for.\n- Support merchant tasks for the particular type of resource.\n- Avoid colons.\n- [Shortcut actions](https://polaris.shopify.com/components/lists-and-tables/resource-list#study-custom-item-shortcut-actions) don’t need to follow the full verb + noun formula for buttons.\n\n---\n\n## Related components\n\nTo display a simple list of related content, [use the list component](https://polaris.shopify.com/components/lists-and-tables/list).\n",
  "Resource list": "\n\n# Resource list\n\nA resource list displays a collection of objects of the same type, like products or customers. The main job of a resource list is to help merchants find an object and navigate to a full-page representation of it.\n\nResource lists can also:\n\n- Support [customized list items](https://polaris.shopify.com/components/lists-and-tables/resource-item)\n- Include bulk actions so merchants can act on multiple objects at once\n- Support sorting and [filtering](https://polaris.shopify.com/components/lists-and-tables/filters) of long lists\n- Be paired with pagination to make long lists digestible\n\n---\n\n## Examples\n\n### Simple resource list\n\nA resource list with simple items and no bulk actions, sorting, or filtering.\n\n```jsx\n<Card>\n  <ResourceList\n    resourceName={{singular: 'customer', plural: 'customers'}}\n    items={[\n      {\n        id: 100,\n        url: 'customers/341',\n        name: 'Mae Jemison',\n        location: 'Decatur, USA',\n      },\n      {\n        id: 200,\n        url: 'customers/256',\n        name: 'Ellen Ochoa',\n        location: 'Los Angeles, USA',\n      },\n    ]}\n    renderItem={(item) => {\n      const {id, url, name, location} = item;\n      const media = <Avatar customer size=\"medium\" name={name} />;\n\n      return (\n        <ResourceItem\n          id={id}\n          url={url}\n          media={media}\n          accessibilityLabel={`View details for ${name}`}\n        >\n          <h3>\n            <TextStyle variation=\"strong\">{name}</TextStyle>\n          </h3>\n          <div>{location}</div>\n        </ResourceItem>\n      );\n    }}\n  />\n</Card>\n```\n\n### Resource list with empty state\n\nUse to explain the purpose of a list of resources when no resources exist yet. This allows a smooth transition from a list in a loading state to a list where zero, one, or many resources exist.\n\n```jsx\nfunction ResourceListWithEmptyStateExample() {\n  const items = [];\n  const appliedFilters = [];\n  const filters = [];\n\n  const filterControl = (\n    <Filters\n      disabled={!items.length}\n      queryValue=\"\"\n      filters={filters}\n      appliedFilters={appliedFilters}\n    />\n  );\n\n  const emptyStateMarkup =\n    !appliedFilters.length && !items.length ? (\n      <EmptyState\n        heading=\"Upload a file to get started\"\n        action={{content: 'Upload files'}}\n        image=\"https://cdn.shopify.com/s/files/1/2376/3301/products/emptystate-files.png\"\n      >\n        <p>\n          You can use the Files section to upload images, videos, and other\n          documents\n        </p>\n      </EmptyState>\n    ) : undefined;\n\n  return (\n    <Page title=\"Files\">\n      <Layout>\n        <Layout.Section>\n          <Card>\n            <ResourceList\n              emptyState={emptyStateMarkup}\n              items={items}\n              renderItem={() => {}}\n              filterControl={filterControl}\n              resourceName={{singular: 'file', plural: 'files'}}\n            />\n          </Card>\n        </Layout.Section>\n      </Layout>\n    </Page>\n  );\n}\n```\n\n### Resource list with selection and no bulk actions\n\nA resource list with simple items and selection.\n\n```jsx\nfunction ResourceListWithSelectionExample() {\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const items = [\n    {\n      id: 101,\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n    },\n    {\n      id: 201,\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n    },\n  ];\n\n  return (\n    <Card>\n      <ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        selectedItems={selectedItems}\n        onSelectionChange={setSelectedItems}\n        selectable\n      />\n    </Card>\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = <Avatar customer size=\"medium\" name={name} />;\n\n    return (\n      <ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        accessibilityLabel={`View details for ${name}`}\n      >\n        <h3>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </h3>\n        <div>{location}</div>\n      </ResourceItem>\n    );\n  }\n}\n```\n\n### Resource list with bulk actions\n\nAllows merchants to select items and perform an action on the selection.\n\n```jsx\nfunction ResourceListWithBulkActionsExample() {\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const items = [\n    {\n      id: 103,\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n    },\n    {\n      id: 203,\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n    },\n  ];\n\n  const promotedBulkActions = [\n    {\n      content: 'Edit customers',\n      onAction: () => console.log('Todo: implement bulk edit'),\n    },\n  ];\n\n  const bulkActions = [\n    {\n      content: 'Add tags',\n      onAction: () => console.log('Todo: implement bulk add tags'),\n    },\n    {\n      content: 'Remove tags',\n      onAction: () => console.log('Todo: implement bulk remove tags'),\n    },\n    {\n      content: 'Delete customers',\n      onAction: () => console.log('Todo: implement bulk delete'),\n    },\n  ];\n\n  return (\n    <Card>\n      <ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        selectedItems={selectedItems}\n        onSelectionChange={setSelectedItems}\n        promotedBulkActions={promotedBulkActions}\n        bulkActions={bulkActions}\n      />\n    </Card>\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = <Avatar customer size=\"medium\" name={name} />;\n\n    return (\n      <ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        accessibilityLabel={`View details for ${name}`}\n      >\n        <h3>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </h3>\n        <div>{location}</div>\n      </ResourceItem>\n    );\n  }\n}\n```\n\n### Resource list with loading state\n\nNotifies merchants that list items are being processed.\n\n```jsx\nfunction ResourceListWithLoadingExample() {\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const items = [\n    {\n      id: 104,\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n    },\n    {\n      id: 204,\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n    },\n  ];\n\n  const promotedBulkActions = [\n    {\n      content: 'Edit customers',\n      onAction: () => console.log('Todo: implement bulk edit'),\n    },\n  ];\n\n  const bulkActions = [\n    {\n      content: 'Add tags',\n      onAction: () => console.log('Todo: implement bulk add tags'),\n    },\n    {\n      content: 'Remove tags',\n      onAction: () => console.log('Todo: implement bulk remove tags'),\n    },\n    {\n      content: 'Delete customers',\n      onAction: () => console.log('Todo: implement bulk delete'),\n    },\n  ];\n\n  return (\n    <Card>\n      <ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        selectedItems={selectedItems}\n        onSelectionChange={setSelectedItems}\n        promotedBulkActions={promotedBulkActions}\n        bulkActions={bulkActions}\n        loading\n      />\n    </Card>\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = <Avatar customer size=\"medium\" name={name} />;\n\n    return (\n      <ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        accessibilityLabel={`View details for ${name}`}\n      >\n        <h3>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </h3>\n        <div>{location}</div>\n      </ResourceItem>\n    );\n  }\n}\n```\n\n### Resource list with total resource count\n\nUse to indicate that the number of resources shown is a subset of the total number of resources in the list.\n\n```jsx\nfunction ResourceListWithTotalItemsCount() {\n  return (\n    <Card>\n      <ResourceList\n        resourceName={{singular: 'customer', plural: 'customers'}}\n        items={[\n          {\n            id: 105,\n            url: 'customers/341',\n            name: 'Mae Jemison',\n            location: 'Decatur, USA',\n          },\n          {\n            id: 205,\n            url: 'customers/256',\n            name: 'Ellen Ochoa',\n            location: 'Los Angeles, USA',\n          },\n        ]}\n        renderItem={(item) => {\n          const {id, url, name, location} = item;\n          const media = <Avatar customer size=\"medium\" name={name} />;\n\n          return (\n            <ResourceItem\n              id={id}\n              url={url}\n              media={media}\n              accessibilityLabel={`View details for ${name}`}\n            >\n              <h3>\n                <TextStyle variation=\"strong\">{name}</TextStyle>\n              </h3>\n              <div>{location}</div>\n            </ResourceItem>\n          );\n        }}\n        showHeader\n        totalItemsCount={50}\n      />\n    </Card>\n  );\n}\n```\n\n### Resource list with sorting\n\nAllows merchants to change the way the list is sorted by selecting one of several options from a [Select](https://polaris.shopify.com/components/forms/select) control.\n\n```jsx\nfunction ResourceListWithSortingExample() {\n  const [sortValue, setSortValue] = useState('DATE_MODIFIED_DESC');\n\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const items = [\n    {\n      id: 106,\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n    },\n    {\n      id: 206,\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n    },\n  ];\n\n  return (\n    <Card>\n      <ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        sortValue={sortValue}\n        sortOptions={[\n          {label: 'Newest update', value: 'DATE_MODIFIED_DESC'},\n          {label: 'Oldest update', value: 'DATE_MODIFIED_ASC'},\n        ]}\n        onSortChange={(selected) => {\n          setSortValue(selected);\n          console.log(`Sort option changed to ${selected}.`);\n        }}\n      />\n    </Card>\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = <Avatar customer size=\"medium\" name={name} />;\n\n    return (\n      <ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        accessibilityLabel={`View details for ${name}`}\n      >\n        <h3>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </h3>\n        <div>{location}</div>\n      </ResourceItem>\n    );\n  }\n}\n```\n\n### Resource list with alternate tool\n\nAllows merchants to add an alternate tool in the current sort option location when sort may not be the most relevant action for the current list.\n\n```jsx\nfunction ResourceListWithAlternateToolExample() {\n  const resourceName = {\n    singular: 'Customer',\n    plural: 'Customers',\n  };\n\n  const items = [\n    {\n      id: 107,\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n    },\n    {\n      id: 207,\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n    },\n  ];\n\n  return (\n    <Card>\n      <ResourceList\n        items={items}\n        renderItem={renderItem}\n        resourceName={resourceName}\n        alternateTool={<Button>Email customers</Button>}\n      />\n    </Card>\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = <Avatar customer size=\"medium\" name={name} />;\n\n    return (\n      <ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        accessibilityLabel={`View details for ${name}`}\n      >\n        <h3>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </h3>\n        <div>{location}</div>\n      </ResourceItem>\n    );\n  }\n}\n```\n\n### Resource list with filtering\n\nAllows merchants to narrow the resource list to a subset of the original items.\n\n```jsx\nfunction ResourceListWithFilteringExample() {\n  const [taggedWith, setTaggedWith] = useState('VIP');\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleTaggedWithChange = useCallback(\n    (value) => setTaggedWith(value),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(null), []);\n  const handleClearAll = useCallback(() => {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const items = [\n    {\n      id: 108,\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n    },\n    {\n      id: 208,\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n    },\n  ];\n\n  const filters = [\n    {\n      key: 'taggedWith1',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: 'taggedWith1',\n          label: disambiguateLabel('taggedWith1', taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  const filterControl = (\n    <Filters\n      queryValue={queryValue}\n      filters={filters}\n      appliedFilters={appliedFilters}\n      onQueryChange={setQueryValue}\n      onQueryClear={handleQueryValueRemove}\n      onClearAll={handleClearAll}\n    >\n      <div style={{paddingLeft: '8px'}}>\n        <Button onClick={() => console.log('New filter saved')}>Save</Button>\n      </div>\n    </Filters>\n  );\n\n  return (\n    <Card>\n      <ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        filterControl={filterControl}\n      />\n    </Card>\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = <Avatar customer size=\"medium\" name={name} />;\n\n    return (\n      <ResourceItem id={id} url={url} media={media}>\n        <h3>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </h3>\n        <div>{location}</div>\n      </ResourceItem>\n    );\n  }\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case 'taggedWith1':\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n```\n\n### Resource list with a custom empty search result state\n\nAllows merchants to narrow the resource list to a subset of the original items. If the filters or search applied return no results, then display a custom empty search state.\n\n```jsx\nfunction ResourceListWithFilteringExample() {\n  const [taggedWith, setTaggedWith] = useState('VIP');\n  const [queryValue, setQueryValue] = useState(null);\n  const [items, setItems] = useState([]);\n\n  const handleTaggedWithChange = useCallback(\n    (value) => setTaggedWith(value),\n    [],\n  );\n  const handleQueryValueChange = useCallback((value) => {\n    setQueryValue(value);\n    setItems([]);\n  }, []);\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(null), []);\n  const handleClearAll = useCallback(() => {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const filters = [\n    {\n      key: 'taggedWith2',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: 'taggedWith2',\n          label: disambiguateLabel('taggedWith2', taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  const filterControl = (\n    <Filters\n      queryValue={queryValue}\n      filters={filters}\n      appliedFilters={appliedFilters}\n      onQueryChange={handleQueryValueChange}\n      onQueryClear={handleQueryValueRemove}\n      onClearAll={handleClearAll}\n    >\n      <div style={{paddingLeft: '8px'}}>\n        <Button onClick={() => console.log('New filter saved')}>Save</Button>\n      </div>\n    </Filters>\n  );\n\n  return (\n    <Card>\n      <ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        filterControl={filterControl}\n        emptySearchState={<div>This is a custom empty state</div>}\n      />\n    </Card>\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = <Avatar customer size=\"medium\" name={name} />;\n\n    return (\n      <ResourceItem id={id} url={url} media={media}>\n        <h3>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </h3>\n        <div>{location}</div>\n      </ResourceItem>\n    );\n  }\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case 'taggedWith2':\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n```\n\n### Resource list with item shortcut actions\n\nShortcut actions are intended to provide quick access to popular actions from the resource’s details page. They are shown when the mouse is hovered over the list item, and are not shown on small screen devices, so the action must also be accessible in another way.\n\n```jsx\n<Card>\n  <ResourceList\n    resourceName={{singular: 'customer', plural: 'customers'}}\n    items={[\n      {\n        id: 109,\n        url: 'customers/341',\n        name: 'Mae Jemison',\n        location: 'Decatur, USA',\n        latestOrderUrl: 'orders/1456',\n      },\n      {\n        id: 209,\n        url: 'customers/256',\n        name: 'Ellen Ochoa',\n        location: 'Los Angeles, USA',\n        latestOrderUrl: 'orders/1457',\n      },\n    ]}\n    renderItem={(item) => {\n      const {id, url, name, location, latestOrderUrl} = item;\n      const media = <Avatar customer size=\"medium\" name={name} />;\n      const shortcutActions = latestOrderUrl\n        ? [\n            {\n              content: 'View latest order',\n              accessibilityLabel: `View ${name}’s latest order`,\n              url: latestOrderUrl,\n            },\n          ]\n        : null;\n\n      return (\n        <ResourceItem\n          id={id}\n          url={url}\n          media={media}\n          accessibilityLabel={`View details for ${name}`}\n          shortcutActions={shortcutActions}\n        >\n          <h3>\n            <TextStyle variation=\"strong\">{name}</TextStyle>\n          </h3>\n          <div>{location}</div>\n        </ResourceItem>\n      );\n    }}\n  />\n</Card>\n```\n\n### Resource list with persistent item shortcut actions\n\nUse persistent shortcut actions in rare cases when the action cannot be made available on the item’s details page. Persistent shortcut actions roll up into an overflow menu on small screens.\n\n```jsx\n<Card>\n  <ResourceList\n    resourceName={{singular: 'customer', plural: 'customers'}}\n    items={[\n      {\n        id: 110,\n        url: 'customers/341',\n        name: 'Mae Jemison',\n        location: 'Decatur, USA',\n        latestOrderUrl: 'orders/1456',\n      },\n      {\n        id: 210,\n        url: 'customers/256',\n        name: 'Ellen Ochoa',\n        location: 'Los Angeles, USA',\n        latestOrderUrl: 'orders/1457',\n      },\n    ]}\n    renderItem={(item) => {\n      const {id, url, name, location, latestOrderUrl} = item;\n      const media = <Avatar customer size=\"medium\" name={name} />;\n      const shortcutActions = latestOrderUrl\n        ? [\n            {\n              content: 'View latest order',\n              accessibilityLabel: `View ${name}’s latest order`,\n              url: latestOrderUrl,\n            },\n          ]\n        : null;\n\n      return (\n        <ResourceItem\n          id={id}\n          url={url}\n          media={media}\n          accessibilityLabel={`View details for ${name}`}\n          shortcutActions={shortcutActions}\n          persistActions\n        >\n          <h3>\n            <TextStyle variation=\"strong\">{name}</TextStyle>\n          </h3>\n          <div>{location}</div>\n        </ResourceItem>\n      );\n    }}\n  />\n</Card>\n```\n\n### Resource list with multiselect\n\nAllows merchants to select or deselect multiple items at once.\n\n```jsx\nfunction ResourceListExample() {\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const items = [\n    {\n      id: 111,\n      url: 'customers/231',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n    },\n    {\n      id: 211,\n      url: 'customers/246',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n    },\n    {\n      id: 311,\n      url: 'customers/276',\n      name: 'Joe Smith',\n      location: 'Arizona, USA',\n    },\n    {\n      id: 411,\n      url: 'customers/349',\n      name: 'Haden Jerado',\n      location: 'Decatur, USA',\n    },\n    {\n      id: 511,\n      url: 'customers/419',\n      name: 'Tom Thommas',\n      location: 'Florida, USA',\n    },\n    {\n      id: 611,\n      url: 'customers/516',\n      name: 'Emily Amrak',\n      location: 'Texas, USA',\n    },\n  ];\n\n  const promotedBulkActions = [\n    {\n      content: 'Edit customers',\n      onAction: () => console.log('Todo: implement bulk edit'),\n    },\n  ];\n\n  const bulkActions = [\n    {\n      content: 'Add tags',\n      onAction: () => console.log('Todo: implement bulk add tags'),\n    },\n    {\n      content: 'Remove tags',\n      onAction: () => console.log('Todo: implement bulk remove tags'),\n    },\n    {\n      content: 'Delete customers',\n      onAction: () => console.log('Todo: implement bulk delete'),\n    },\n  ];\n\n  return (\n    <Card>\n      <ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        selectedItems={selectedItems}\n        onSelectionChange={setSelectedItems}\n        promotedBulkActions={promotedBulkActions}\n        bulkActions={bulkActions}\n        resolveItemId={resolveItemIds}\n      />\n    </Card>\n  );\n\n  function renderItem(item, _, index) {\n    const {id, url, name, location} = item;\n    const media = <Avatar customer size=\"medium\" name={name} />;\n\n    return (\n      <ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        sortOrder={index}\n        accessibilityLabel={`View details for ${name}`}\n      >\n        <h3>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </h3>\n        <div>{location}</div>\n      </ResourceItem>\n    );\n  }\n\n  function resolveItemIds({id}) {\n    return id;\n  }\n}\n```\n\n### Resource list with all of its elements\n\nUse as a broad example that includes most props available to resource list.\n\n```jsx\nfunction ResourceListExample() {\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [sortValue, setSortValue] = useState('DATE_MODIFIED_DESC');\n  const [taggedWith, setTaggedWith] = useState('VIP');\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleTaggedWithChange = useCallback(\n    (value) => setTaggedWith(value),\n    [],\n  );\n  const handleQueryValueChange = useCallback(\n    (value) => setQueryValue(value),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() => setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() => setQueryValue(null), []);\n  const handleClearAll = useCallback(() => {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n\n  const resourceName = {\n    singular: 'customer',\n    plural: 'customers',\n  };\n\n  const items = [\n    {\n      id: 112,\n      url: 'customers/341',\n      name: 'Mae Jemison',\n      location: 'Decatur, USA',\n      latestOrderUrl: 'orders/1456',\n    },\n    {\n      id: 212,\n      url: 'customers/256',\n      name: 'Ellen Ochoa',\n      location: 'Los Angeles, USA',\n      latestOrderUrl: 'orders/1457',\n    },\n  ];\n\n  const promotedBulkActions = [\n    {\n      content: 'Edit customers',\n      onAction: () => console.log('Todo: implement bulk edit'),\n    },\n  ];\n\n  const bulkActions = [\n    {\n      content: 'Add tags',\n      onAction: () => console.log('Todo: implement bulk add tags'),\n    },\n    {\n      content: 'Remove tags',\n      onAction: () => console.log('Todo: implement bulk remove tags'),\n    },\n    {\n      content: 'Delete customers',\n      onAction: () => console.log('Todo: implement bulk delete'),\n    },\n  ];\n\n  const filters = [\n    {\n      key: 'taggedWith3',\n      label: 'Tagged with',\n      filter: (\n        <TextField\n          label=\"Tagged with\"\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=\"off\"\n          labelHidden\n        />\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: 'taggedWith3',\n          label: disambiguateLabel('taggedWith3', taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  const filterControl = (\n    <Filters\n      queryValue={queryValue}\n      filters={filters}\n      appliedFilters={appliedFilters}\n      onQueryChange={handleQueryValueChange}\n      onQueryClear={handleQueryValueRemove}\n      onClearAll={handleClearAll}\n    >\n      <div style={{paddingLeft: '8px'}}>\n        <Button onClick={() => console.log('New filter saved')}>Save</Button>\n      </div>\n    </Filters>\n  );\n\n  return (\n    <Card>\n      <ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        selectedItems={selectedItems}\n        onSelectionChange={setSelectedItems}\n        promotedBulkActions={promotedBulkActions}\n        bulkActions={bulkActions}\n        sortValue={sortValue}\n        sortOptions={[\n          {label: 'Newest update', value: 'DATE_MODIFIED_DESC'},\n          {label: 'Oldest update', value: 'DATE_MODIFIED_ASC'},\n        ]}\n        onSortChange={(selected) => {\n          setSortValue(selected);\n          console.log(`Sort option changed to ${selected}.`);\n        }}\n        filterControl={filterControl}\n      />\n    </Card>\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location, latestOrderUrl} = item;\n    const media = <Avatar customer size=\"medium\" name={name} />;\n    const shortcutActions = latestOrderUrl\n      ? [{content: 'View latest order', url: latestOrderUrl}]\n      : null;\n    return (\n      <ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        accessibilityLabel={`View details for ${name}`}\n        shortcutActions={shortcutActions}\n        persistActions\n      >\n        <h3>\n          <TextStyle variation=\"strong\">{name}</TextStyle>\n        </h3>\n        <div>{location}</div>\n      </ResourceItem>\n    );\n  }\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case 'taggedWith3':\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === '' || value == null;\n    }\n  }\n}\n```\n\n---\n\n## Build\n\nUsing a resource list in a project involves combining the following components and subcomponents:\n\n- ResourceList\n- [ResourceItem](https://polaris.shopify.com/components/lists-and-tables/resource-item) or a customized list item\n- [Filters](https://polaris.shopify.com/components/lists-and-tables/filters) (optional)\n- Pagination component (optional)\n\n<!-- hint -->\n\nThe resource list component provides the UI elements for list sorting, filtering, and pagination, but doesn’t provide the logic for these operations. When a sort option is changed, filter added, or second page requested, you’ll need to handle that event (including any network requests) and then update the component with new props.\n\n<!-- end -->\n\n---\n\n## Purpose\n\nShopify is organized around objects that represent merchants businesses, like customers, products, and orders. Each individual order, for example, is given a dedicated page that can be linked to. In Shopify, we call these types of objects _resources_, and we call the object’s dedicated page its _details page_.\n\n### Problem\n\nTake orders as an example. Merchants may have a lot of them. They need a way to scan their orders, see what state they’re in and find out which ones need action first. In other words, they need a way find an individual order, call up more information about it, and take action on it.\n\n### Solution\n\nResource lists function as:\n\n- A content format, presenting a set of individual resources in a compact form\n- A system for taking action on one or more individual resources\n- A way to navigate to an individual resource’s details page\n\nBecause a details page displays all the content and actions for an individual resource, you can think of a resource list as a summary of these details pages. In this way resource lists bridge a middle level in Shopify’s navigation hierarchy.\n\n<div class=\"TypeContainerImage TypeContainerImage--PageBackground\">\n\n![Schematic showing content from a details page being surfaced on a resource list](/images-from-old-styleguide/resource-list/list-surfacing-show@2x.png)\n\n</div>\n\n<!-- hint -->\n\n#### Hint\n\n#### A resource list isn’t a data table\n\nOn wide screens, a resource list often looks like a table, especially if some content is aligned in columns. Despite this, resource lists and data tables have different purposes.\n\nA data table is a form of data visualization. It works best to present highly structured data for comparison and analysis.\n\nIf your use case is more about visualizing or analyzing data, use the [data table component](https://polaris.shopify.com/components/lists-and-tables/data-table). If your use case is more about finding and taking action on objects, use a resource list.\n\n<!-- end -->\n\n---\n\n## Best practices\n\nResource lists can live in many places in Shopify. You could include a short resource list in a card summarizing recent marketing activities. You could also dedicate an entire page to a resource list like Shopify’s main products list.\n\nResource lists should:\n\n- Have items that perform an action when clicked. The action should navigate to the resource’s details page or otherwise provide more detail about the item.\n- [Customize the content and layout](https://polaris.shopify.com/components/lists-and-tables/resource-item) of their list items to support merchants’ needs.\n- Support sorting if the list can be long, and especially if different merchant tasks benefit from different sort orders.\n- Support [filtering](https://polaris.shopify.com/components/lists-and-tables/filters) if the list can be long.\n- Paginate when the current list contains more than 50 items.\n- Use the [skeleton page](https://polaris.shopify.com/components/feedback-indicators/skeleton-page) component on initial page load for the rest of the page if the loading prop is true and items are processing.\n\nResource lists can optionally:\n\n- Provide bulk actions for tasks that are often applied to many list items at once. For example, merchants may want to add the same tag to a large number of products.\n\n---\n\n## Content guidelines\n\nResource lists should:\n\n- Identify the type of resource, usually with a heading\n\n  <div class=\"usage-list\"><div class=\"usage-list-part\">\n\n  #### Do\n\n  - Products\n  - Showing 50 products\n\n  </div><div class=\"usage-list-part\">\n\n#### Don’t\n\n  - _No heading_\n\n  </div></div>\n\n- Indicate when not all members of a resource are being shown. For a card summarizing and linking to recently purchased products:\n\n  <div class=\"usage-list\"><div class=\"usage-list-part\">\n\n  #### Do\n\n  - Popular products this week\n\n  </div><div class=\"usage-list-part\">\n\n#### Don’t\n\n  - Products\n\n  </div></div>\n\n- Follow the verb + noun formula for bulk actions\n\n- Follow the [content guidelines for filter options and applied filters](https://polaris.shopify.com/components/lists-and-tables/filters#section-content-guidelines)\n\n---\n\n## Related components\n\n- To present structured data for comparison and analysis, like when helping merchants to gain insights or review analytics, use the [data table component](https://polaris.shopify.com/components/lists-and-tables/data-table)\n- To display a simple list of related content, [use the list component](https://polaris.shopify.com/components/lists-and-tables/list)\n",
  "Scrollable": "\n\n# Scrollable\n\nThe scrollable component is a container for long form content, such as terms of service, that allows for scrolling so merchants can expose more text as they read.\n\n---\n\n## Best practices\n\nScrollable containers should:\n\n- Be used when it’s helpful to provide an extra visual cue to let merchants\n  know that content exists below or above the fold\n- Only be used for length text such as terms of service or other legal\n  disclaimers and never for instructional or action-oriented text\n\n---\n\n## Content guidelines\n\nScrollable containers are cards with scrolling functionality, and should follow the [content guidelines](https://polaris.shopify.com/components/structure/card#section-content-guidelines) for cards.\n\n---\n\n## Examples\n\n### Default scrollable container\n\nUse when you need to make a region within the page independently scrollable. It’s often used in modals and other panes where it’s helpful to provide an extra visual cue that content exists below or above the fold.\n\n```jsx\n<Card title=\"Terms of service\" sectioned>\n  <Scrollable shadow style={{height: '100px'}} focusable>\n    <p>\n      By signing up for the Shopify service (“Service”) or any of the services\n      of Shopify Inc. (“Shopify”) you are agreeing to be bound by the following\n      terms and conditions (“Terms of Service”). The Services offered by Shopify\n      under the Terms of Service include various products and services to help\n      you create and manage a retail store, whether an online store (“Online\n      Services”), a physical retail store (“POS Services”), or both. Any new\n      features or tools which are added to the current Service shall be also\n      subject to the Terms of Service. You can review the current version of the\n      Terms of Service at any time at https://www.shopify.com/legal/terms.\n      Shopify reserves the right to update and change the Terms of Service by\n      posting updates and changes to the Shopify website. You are advised to\n      check the Terms of Service from time to time for any updates or changes\n      that may impact you.\n    </p>\n  </Scrollable>\n</Card>\n```\n\n### Scroll to child component\n\nUse when you need to programmatically scroll a child component into view in the scrollable container.\n\n```jsx\n<Card title=\"Terms of service\" sectioned>\n  <Scrollable shadow style={{height: '100px'}}>\n    <ol>\n      <li>Account Terms</li>\n    </ol>\n    <p>\n      You must be 18 years or older or at least the age of majority in the\n      jurisdiction where you reside or from which you use this Service.\n    </p>\n    <p>\n      To access and use the Services, you must register for a Shopify account\n      (“Account”) by providing your full legal name, current address, phone\n      number, a valid email address, and any other information indicated as\n      required. Shopify may reject your application for an Account, or cancel an\n      existing Account, for any reason, in our sole discretion.\n    </p>\n    <p>\n      You acknowledge that Shopify will use the email address you provide as the\n      primary method for communication.\n    </p>\n    <p>\n      You are responsible for keeping your password secure. Shopify cannot and\n      will not be liable for any loss or damage from your failure to maintain\n      the security of your Account and password.\n    </p>\n    <p>\n      You are responsible for all activity and content such as photos, images,\n      videos, graphics, written content, audio files, code, information, or data\n      uploaded, collected, generated, stored, displayed, distributed,\n      transmitted or exhibited on or in connection with your Account\n      (“Materials”).\n    </p>\n    <p>\n      A breach or violation of any term in the Terms of Service, including the\n      AUP, as determined in the sole discretion of Shopify will result in an\n      immediate termination of your services.\n    </p>\n    <p>Which means</p>\n    <p>\n      You are responsible for your Account and any Materials you upload to the\n      Shopify Service. Remember that with any violation of these terms we will\n      cancel your service.\n    </p>\n\n    <p>If we need to reach you, we will send you an email.</p>\n\n    <ol>\n      <li>Account Activation</li>\n    </ol>\n    <Scrollable.ScrollTo>\n      <p>2.1 Shopify Account</p>\n    </Scrollable.ScrollTo>\n\n    <p>\n      Subject to section 2.1.2, the person signing up for the Service will be\n      the contracting party (“Account Owner”) for the purposes of our Terms of\n      Service and will be the person who is authorized to use any corresponding\n      account we may provide to the Account Owner in connection with the\n      Service.\n    </p>\n    <p>\n      If you are signing up for the Service on behalf of your employer, your\n      employer shall be the Account Owner. If you are signing up for the Service\n      on behalf of your employer, then you represent and warrant that you have\n      the authority to bind your employer to our Terms of Service.\n    </p>\n    <p>2.2 PayPal Express Checkout and Shopify Payments Accounts</p>\n\n    <p>\n      Upon completion of sign up for the Service, Shopify will create a PayPal\n      Express Checkout account on your behalf, using your email address.\n      Depending on your location, Shopify may also create a Shopify Payments\n      account on your behalf.\n    </p>\n    <p>\n      You acknowledge that PayPal Express Checkout and/or Shopify Payments will\n      be your default payments gateway(s) and that it is your sole\n      responsibility as the Account Owner to activate and maintain these\n      accounts. If you do not wish to keep either of the payment accounts\n      active, it is your responsibility to deactivate them. For the avoidance of\n      doubt, PayPal Express Checkout is a Third Party Service, as defined in\n      Section 15 of these Terms of Service.\n    </p>\n    <p>2.3 Apple Pay for Safari Account</p>\n\n    <p>\n      Upon completion of sign up for the Service, Shopify will create an Apple\n      Pay for Safari (“Apple Pay”) account on your behalf, using the URL(s) and\n      business name associated with your Account. Depending on your location,\n      Shopify may activate your Apple Pay account on your behalf, otherwise you\n      will be required to activate your Apple Pay account within your Account\n      admin. If you do not wish to keep your Apple Pay account active, it is\n      your responsibility to deactivate it. For the avoidance of doubt, Apple\n      Pay is a Third Party Service, as defined in Section 15 of these Terms of\n      Service.\n    </p>\n    <p>\n      If you use an Apple Pay supported payment gateway and your customers have\n      enabled Apple Pay on their device, customers may purchase goods and\n      services from your store using Apple Pay.\n    </p>\n    <p>\n      By using Apple Pay on your store, you are agreeing to be bound by the\n      Apple Pay Platform Web Merchant Terms and Conditions, as they may be\n      amended by Apple from time to time. If Apple amends the Apple Pay Platform\n      Web Merchant Terms and Conditions, the amended and restated version will\n      be posted here:{' '}\n      <a href=\"https://www.shopify.com/legal/apple-pay\">\n        https://www.shopify.com/legal/apple-pay\n      </a>\n      . Such amendments to the Apple Pay Platform Web Merchant Terms are effective\n      as of the date of posting. Your continued use of Apple Pay on your store after\n      the amended Apple Pay Platform Web Merchant Terms are posted constitutes your\n      agreement to, and acceptance of, the amended Apple Pay Platform Web Merchant\n      Terms. If you do not agree to any changes to the Apple Pay Platform Web Merchant\n      Terms, de-activate your Apple Pay account and do not continue to use Apple\n      Pay on your store.\n    </p>\n    <p>2.4 Google Payment</p>\n\n    <p>\n      Upon completion of sign up for the Service, if you have been enrolled in\n      Shopify Payments, Shopify will also create a Google Payment account on\n      your behalf. If you do not wish to keep your Google Payment account\n      active, it is your responsibility to deactivate it. For the avoidance of\n      doubt, Google Payment is a Third Party Service, as defined in Section 15\n      of these Terms of Service.\n    </p>\n\n    <p>\n      If you use a Google Payment supported payment gateway and your customers\n      have enabled Google Payment, customers may purchase goods and services\n      from your store using Google Payment.\n    </p>\n\n    <p>\n      By using Google Payment on your store, you are agreeing to be bound by the\n      Google Payment API Terms of Service, as they may be amended by Google from\n      time to time. If Google amends the Google Payment API Terms of Service,\n      the amended and restated version will be posted here:{' '}\n      <a href=\"https://payments.developers.google.com/terms/sellertos\">\n        https://payments.developers.google.com/terms/sellertos\n      </a>\n      . Such amendments to the Google Payment API Terms of Service are effective\n      as of the date of posting. Your continued use of Google Payment on your store\n      after the amended Google Payment API Terms of Service are posted constitutes\n      your agreement to, and acceptance of, the amended Google Payment API Terms\n      of Service. If you do not agree to any changes to the Google Payment API Terms\n      of Service, de-activate your Google Payment account and do not continue to\n      use Google Payment on your store.\n    </p>\n\n    <p>2.5 Domain Names</p>\n\n    <p>\n      Upon purchasing a domain name through Shopify, domain registration will be\n      preset to automatically renew each year so long as your Shopify Account\n      remains active. You acknowledge that it is your sole responsibility to\n      deactivate the auto-renewal function should you choose to do so.\n    </p>\n    <p>Which means</p>\n    <p>\n      The person signing up for the Shopify Service is responsible for the\n      account and is bound by these Terms of Service. If you signup on behalf of\n      your employer, your employer owns the account and is also bound by our\n      Terms of Service.\n    </p>\n\n    <p>\n      We automatically create accounts for you to accept payments. You are\n      responsible for activating and deactivating these accounts.\n    </p>\n\n    <p>\n      Any domain you purchase through us will automatically renew unless you opt\n      out.\n    </p>\n\n    <ol>\n      <li>General Conditions</li>\n    </ol>\n    <p>\n      You must read, agree with and accept all of the terms and conditions\n      contained in these Terms of Service, including the AUP and the Privacy\n      Policy before you may become a member of Shopify.\n    </p>\n\n    <p>\n      Technical support is only provided to paying Account holders and is only\n      available via email.\n    </p>\n    <p>\n      The Terms of Service shall be governed by and interpreted in accordance\n      with the laws of the Province of Ontario and the laws of Canada applicable\n      therein, without regard to principles of conflicts of laws. The parties\n      irrevocably and unconditionally submit to the exclusive jurisdiction of\n      the courts of the Province of Ontario with respect to any dispute or claim\n      arising out of or in connection with the Terms of Service. The United\n      Nations Convention on Contracts for the International Sale of Goods will\n      not apply to these Terms of Service and is hereby expressly excluded.\n    </p>\n    <p>\n      You acknowledge and agree that Shopify may amend these Terms of Service at\n      any time by posting the relevant amended and restated Terms of Service on\n      Shopify’s website, available at{' '}\n      <a href=\"https://www.shopify.com/legal/terms\">\n        https://www.shopify.com/legal/terms\n      </a>{' '}\n      and such amendments to the Terms of Service are effective as of the date\n      of posting. Your continued use of the Services after the amended Terms of\n      Service are posted to Shopify’s website constitutes your agreement to, and\n      acceptance of, the amended Terms of Service. If you do not agree to any\n      changes to the Terms of Service, do not continue to use the Service.\n    </p>\n    <p>\n      You may not use the Shopify service for any illegal or unauthorized\n      purpose nor may you, in the use of the Service, violate any laws in your\n      jurisdiction (including but not limited to copyright laws), the laws\n      applicable to you in your customer’s jurisdiction, or the laws of Canada\n      and the Province of Ontario. You will comply with all applicable laws,\n      rules and regulations in your use of the Service.\n    </p>\n    <p>\n      You agree not to reproduce, duplicate, copy, sell, resell or exploit any\n      portion of the Service, use of the Service, or access to the Service\n      without the express written permission by Shopify.\n    </p>\n    <p>\n      You shall not purchase search engine or other pay per click keywords (such\n      as Google AdWords), or domain names that use Shopify or Shopify trademarks\n      and/or variations and misspellings thereof.\n    </p>\n    <p>\n      Questions about the Terms of Service should be sent to{' '}\n      <a href=\"mailto:support@shopify.com\">support@shopify.com</a>.\n    </p>\n    <p>\n      You understand that your Materials (not including credit card\n      information), may be transferred unencrypted and involve (a) transmissions\n      over various networks; and (b) changes to conform and adapt to technical\n      requirements of connecting networks or devices. Credit Card information is\n      always encrypted during transfer over networks.\n    </p>\n    <p>\n      You acknowledge and agree that your use of the Service, including\n      information transmitted to or stored by Shopify, is governed by its\n      privacy policy at{' '}\n      <a href=\"https://www.shopify.com/legal/privacy\">\n        https://www.shopify.com/legal/privacy\n      </a>\n    </p>\n    <p>\n      The Terms of Service may be available in languages other than English. To\n      the extent of any inconsistencies or conflicts between these English Terms\n      of Service and Shopify’s Terms of Service available in another language,\n      the most current English version of the Terms of Service at{' '}\n      <a href=\"https://www.shopify.com/legal/terms\">\n        https://www.shopify.com/legal/terms\n      </a>{' '}\n      will prevail.\n    </p>\n    <p>Which means</p>\n    <p>\n      The Shopify service belongs to us. You are not allowed to rip it off or\n      use it for any illegal or sketchy purpose.\n    </p>\n\n    <p>\n      If a dispute arises the issue will be dealt with in the Province of\n      Ontario.\n    </p>\n\n    <p>\n      Your Materials may be transferred unencrypted and may be altered, but\n      credit card information is always encrypted.\n    </p>\n  </Scrollable>\n</Card>\n```\n\n---\n\n## Related components\n\n- To put long sections of information under a block that merchants can expand or collapse, [use the collapsible component](https://polaris.shopify.com/components/collapsible)\n",
  "Section header": "\n\n# Section header\n\nUse the section header component to group items in a list. It helps merchants to quickly see what items are related.\n\n---\n\n## Best practices\n\n- List the groups in a clear and obvious way, such as alphabetically or by date.\n- Avoid cluttering the list with long section titles that make it hard to scan.\n- Avoid using section headers if your list usually has only 1 item in every grouping. The more section headers there are, the harder it is for merchants to scan the list.\n\n---\n\n## Content guidelines\n\n- Keep titles short\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Created today\n- Created Aug 15\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Discount created today, Aug 15\n- Created August 15, 2018\n\n</div></div>\n\nRead more about [dates and numbers](https://polaris.shopify.com/content/grammar-and-mechanics#section-dates-numbers-and-addresses).\n\n- Use a clear sort order\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Today\n- Yesterday\n- Monday\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Recent\n- Other\n\n</div></div>\n\n---\n\n## Examples\n\n### Default\n\nUse to group related content together, for example orders received on the same day.\n\n<!-- content-for: android -->\n\n![Shipping costs card with multiple sections: domestic, international](/images-from-old-styleguide/components/SectionHeader/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Shipping costs card with multiple sections: domestic, international](/images-from-old-styleguide/components/SectionHeader/ios/default@2x.png)\n\n<!-- /content-for -->\n\n### Fixed\n\n<!-- example-for: ios -->\n\nUse if your list section could be longer than the height of the screen. For example you may need fixed section headers for a list of orders, because merchants may receive many orders in one day.\n\n![Shipping costs card with multiple sections: domestic, international](/images-from-old-styleguide/components/SectionHeader/ios/fixed@2x.png)\n\n---\n\n## Related components\n\n- Use section headers if you want to organize [resource list items](https://polaris.shopify.com/components/lists-and-tables/resource-list) into groups.\n",
  "Select": "\n\n# Select\n\nSelect lets merchants choose one option from an options menu. Consider select when you have 4 or more options, to avoid cluttering the interface.\n\n---\n\n## Best practices\n\nThe select component should:\n\n- Be used for selecting between 4 or more pre-defined options\n- Have a default option selected whenever possible\n- Use “Select” as a placeholder option only if there’s no logical default option\n\n---\n\n## Content guidelines\n\n### Select label\n\nLabels should:\n\n- Give a short description (1–3 words) of the requested input.\n- Be written in sentence case (the first word capitalized, the rest lowercase).\n- Avoid punctuation and articles (“the”, “an”, “a”).\n- Be independent sentences. To support [internationalization](https://polaris.shopify.com/foundations/internationalization), they should not act as the first part of a sentence that is finished by the component’s options.\n- Be descriptive, not instructional. If the selection needs more explanation, use help text below the field.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Email address\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- What is your email address?\n\n</div></div>\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Phone number\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- My phone number is:\n\n</div></div>\n\n### Select options\n\nOptions should:\n\n- Start with “Select” as a placeholder if there isn’t a default option\n- Be listed alphabetically or in another logical order so merchants can easily find the option they need\n- Be written in sentence case (the first word capitalized, the rest lowercase) and avoid using commas or semicolons at the end of each option\n- Be clearly labelled based on what the option will do\n\n---\n\n## Examples\n\n### Default select\n\n<!-- content-for: web -->\n\nPresents a classic dropdown menu or equivalent picker as determined by merchants’ browsers.\n\n```jsx\nfunction SelectExample() {\n  const [selected, setSelected] = useState('today');\n\n  const handleSelectChange = useCallback((value) => setSelected(value), []);\n\n  const options = [\n    {label: 'Today', value: 'today'},\n    {label: 'Yesterday', value: 'yesterday'},\n    {label: 'Last 7 days', value: 'lastWeek'},\n  ];\n\n  return (\n    <Select\n      label=\"Date range\"\n      options={options}\n      onChange={handleSelectChange}\n      value={selected}\n    />\n  );\n}\n```\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nThe iOS picker expands in-line. Merchants scroll to select the item they want.\n\n![iOS select, and select with option menu](/images-from-old-styleguide/components/Select/ios/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: android -->\n\nThe Android menu is similar in behavior to the web dropdown.\n\n![Android select, and select with option menu](/images-from-old-styleguide/components/Select/android/default@2x.png)\n\n<!-- /content-for -->\n\n### Select with inline label\n\n<!-- example-for: web -->\n\nUse only for cases where the select must fit on a single line, such as in a toolbar.\n\n```jsx\nfunction InlineLabelExample() {\n  const [selected, setSelected] = useState('newestUpdate');\n\n  const handleSelectChange = useCallback((value) => setSelected(value), []);\n\n  const options = [\n    {label: 'Newest update', value: 'newestUpdate'},\n    {label: 'Oldest update', value: 'oldestUpdate'},\n    {label: 'Most spent', value: 'mostSpent'},\n    {label: 'Most orders', value: 'mostOrders'},\n    {label: 'Last name A–Z', value: 'lastNameAlpha'},\n    {label: 'Last name Z–A', value: 'lastNameReverseAlpha'},\n  ];\n\n  return (\n    <Select\n      label=\"Sort by\"\n      labelInline\n      options={options}\n      onChange={handleSelectChange}\n      value={selected}\n    />\n  );\n}\n```\n\n### Disabled select\n\nUse for selections that aren’t currently available. The surrounding interface should make it clear why the select box is disabled and how to activate it.\n\n```jsx\n<Select\n  label=\"Date range\"\n  disabled\n  options={[\n    {label: 'Today', value: 'today'},\n    {label: 'Yesterday', value: 'yesterday'},\n    {label: 'Last 7 days', value: 'lastWeek'},\n  ]}\n/>\n```\n\n<!-- content-for: ios -->\n\n![Disabled select component on iOS](/images-from-old-styleguide/components/Select/ios/disabled@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: android -->\n\n![Disabled select component on Android](/images-from-old-styleguide/components/Select/android/disabled@2x.png)\n\n<!-- /content-for -->\n\n### Select with prefix\n\n<!-- example-for: web -->\n\nRenders any React element to the left of individual select options. Does not show in the dropdown.\n\n```jsx\nfunction PrefixExample() {\n  const [selected, setSelected] = useState('enabled');\n\n  const handleSelectChange = useCallback((value) => setSelected(value), []);\n\n  const options = [\n    {\n      label: 'Increase',\n      value: 'Increase',\n      prefix: <Icon source={CaretUpMinor} />,\n    },\n    {\n      label: 'Decrease',\n      value: 'Decrease',\n      prefix: <Icon source={CaretDownMinor} />,\n    },\n  ];\n\n  return (\n    <Select\n      label=\"Permission\"\n      options={options}\n      onChange={handleSelectChange}\n      value={selected}\n    />\n  );\n}\n```\n\n### Select with validation error\n\n<!-- example-for: web -->\n\nUse to let merchants know if there’s a problem with their selection. For selects, a selection is typically invalid only when using a placeholder option (“Select”) and no other selection has been made.\n\n```jsx\nfunction ValidationErrorExample() {\n  const [selected, setSelected] = useState('');\n\n  const handleSelectChange = useCallback((value) => setSelected(value), []);\n\n  return (\n    <Select\n      label=\"Province\"\n      options={['Alberta']}\n      value={selected}\n      onChange={handleSelectChange}\n      error=\"Province is required\"\n    />\n  );\n}\n```\n\n### Select with separate validation error\n\n<!-- example-for: web -->\n\nUse to let merchants know when their select input is invalid in the context of a group of form inputs that the select depends on.\n\nWhen the `error` prop has a boolean value of `true`, the select component indicates to merchants that their input is invalid without rendering an error message directly below it. It anticipates that an inline error component exists separately within the form.\n\nTo render an invalid select and its validation error separately:\n\n- Set a unique identifier to the select component `id` prop\n- Set a boolean to the select component `error` prop\n- Use an [inline error component](https://polaris.shopify.com/components/forms/inline-error) to describe the invalid select input and set its `fieldID` prop to the same unique identifier used for the text field `id`\n\n```jsx\nfunction SeparateValidationErrorExample() {\n  const [weight, setWeight] = useState('12');\n  const [unit, setUnit] = useState('');\n\n  const handleWeightChange = useCallback((value) => setWeight(value), []);\n  const handleUnitChange = useCallback((value) => setUnit(value), []);\n\n  const unitSelectID = 'unit';\n  const errorMessage = generateErrorMessage();\n  const formGroupMarkup = (\n    <Stack vertical spacing=\"extraTight\">\n      <FormLayout>\n        <FormLayout.Group condensed>\n          <TextField\n            label=\"Product weight\"\n            type=\"number\"\n            value={weight}\n            onChange={handleWeightChange}\n            error={Boolean(!weight && unit)}\n            autoComplete=\"off\"\n          />\n          <Select\n            id={unitSelectID}\n            label=\"Unit of measure\"\n            placeholder=\"Select\"\n            options={['oz', 'g', 'kg', 'lb']}\n            value={unit}\n            onChange={handleUnitChange}\n            error={Boolean(!unit && weight)}\n          />\n        </FormLayout.Group>\n      </FormLayout>\n      <InlineError message={errorMessage} fieldID={unitSelectID} />\n    </Stack>\n  );\n\n  return <Card sectioned>{formGroupMarkup}</Card>;\n\n  function generateErrorMessage() {\n    const weightError =\n      !weight && unit ? 'The numeric weight of the product ' : '';\n    const unitError =\n      !unit && weight ? 'The unit of measure for the product weight' : '';\n\n    if (!weightError && !unitError) {\n      return '';\n    }\n\n    return (\n      <span>\n        <TextStyle variation=\"negative\">\n          <p>\n            {`${weightError}${unitError} is required when weight based shipping rates are enabled. `}\n            <Link>Manage shipping</Link>\n          </p>\n        </TextStyle>\n      </span>\n    );\n  }\n}\n```\n\n---\n\n## Related components\n\n- To let merchants select one option from a list with less than 4 options, use [the choice list component](https://polaris.shopify.com/components/forms/choice-list)\n- To create a select where merchants can make multiple selections, or to allow advanced formatting of option text, use an [option list](https://polaris.shopify.com/components/lists-and-tables/option-list) inside a [popover](https://polaris.shopify.com/components/overlays/popover)\n",
  "Setting toggle": "\n\n# Setting toggle\n\nUse to give merchants control over a feature or option that can be turned\non or off.\n\n---\n\n## Best practices\n\nSettings toggles should:\n\n- Include different body content for the activated and deactivated states.\n- Clearly indicate whether the setting is activated or deactivated and explain the\n  implications of the state of the setting to merchants. (“Automatic messages\n  are deactivated. Your customers won’t receive automatic shipping updates.”)\n- Clearly state when a setting or feature is not available and why. Provide\n  actionable steps for merchants to unlock the functionality.\n\n---\n\n## Content guidelines\n\n### Toggle description\n\nToggle descriptions should:\n\n- Clearly indicate whether the setting is activated or deactivated\n- Explain the implications of the state of the setting to merchants\n  (“Automatic messages are deactivated. Your customers won’t receive automatic\n  shipping updates.”)\n\n### Primary button\n\nThe primary buttons for the setting toggle should always say either “Activate” or\n“Deactivate” depending on whether the setting can be turned on or off.\n\nFor example, if the setting toggle is on, the button should say “Deactivate” to\nallow merchants to turn it off. If the setting toggle is off, the button should\nsay “Activate” to allow merchants to turn it on.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Activate\n- Deactivate\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Enable\n- Disable\n- Turn on\n- Turn off\n\n</div></div>\n\n---\n\n## Examples\n\n### Default setting toggle\n\nUse on settings pages to allow merchants to toggle a setting that has an activated or a deactivated state.\n\n```jsx\nfunction SettingToggleExample() {\n  const [active, setActive] = useState(false);\n\n  const handleToggle = useCallback(() => setActive((active) => !active), []);\n\n  const contentStatus = active ? 'Deactivate' : 'Activate';\n  const textStatus = active ? 'activated' : 'deactivated';\n\n  return (\n    <SettingToggle\n      action={{\n        content: contentStatus,\n        onAction: handleToggle,\n      }}\n      enabled={active}\n    >\n      This setting is <TextStyle variation=\"strong\">{textStatus}</TextStyle>.\n    </SettingToggle>\n  );\n}\n```\n\n---\n\n## Related components\n\n- To let merchants connect or disconnect third-party services and apps, [use the account connection component](https://polaris.shopify.com/components/actions/account-connection)\n\n---\n\n## Accessibility\n\n<!-- content-for: web -->\n\nThe setting toggle component is implemented as an HTML `<button>`. The current label should convey what happens when the button is pressed.\n\nTo learn more about button accessibility, see the [button component](https://polaris.shopify.com/components/actions/button).\n\n<!-- /content-for-->\n",
  "Sheet": "\n\n# Sheet\n\nA sheet is a large container that enters from the edge of the screen when triggered by the merchant. It’s used to provide merchants with actions and information contextual to the page. It doesn’t interrupt their flow like a modal.\n\n---\n\n## Accessibility\n\nSheets provide an opportunity to let merchants dig into more detail on their current task, or access information for their current task in a different way. Although merchants may be able to see content in the sheet and the main page content at the same time, they should only be expected to interact with one or the other at any given time.\n\n### Keyboard support\n\n- Use the `onClose` prop so that the sheet can be closed with the <kbd>esc</kbd> key as well as with button-based controls\n- Use a button to open the sheet\n- When the sheet opens, focus moves to it so merchants who rely on the keyboard and screen readers can access it\n- Focus is kept in the sheet until it is dismissed\n- When the sheet closes, focus moves back to the button that launched it\n\n---\n\n## Responsive behavior\n\nAt small screen sizes, the sheet component enters the page from the bottom of the screen. At larger screen sizes, the sheet component enters the page from the right side of the scren.\n\n---\n\n## Best practices\n\nThe sheet component should:\n\n- Include a heading that summarizes the actions and information in the sheet, for example, More filters\n- Be openable through clear actions, like a link or button\n- Be close-able through clear actions, like Done, the [X] button, and the esc key\n- Include information and actions contextual to the current task\n- Not block merchants from completing their task, like a modal would\n- Not open from within another sheet (only one sheet can be open at a time)\n- Preserve its state—the settings and actions won’t reset when it’s closed\n\nThe sheet component is best used in cases where the merchant needs to see elements behind it, and for that reason it uses a transparent backdrop. The backdrop is a full screen overlay which closes its parent component when pressed.\n\n---\n\n## Examples\n\n### Basic sheet\n\n<!-- example-for: web -->\n\nUse as the default option for a sheet.\n\n```jsx\nfunction SheetExample() {\n  const [sheetActive, setSheetActive] = useState(true);\n  const [title, setTitle] = useState('Big yellow socks');\n  const [description, setDescription] = useState(\n    \"They’re big, yellow socks. What more could you possibly want from socks? These socks will change your life.\\n\\nThey’re made from light, hand-loomed cotton that’s so soft, you'll feel like you are walking on a cloud.\",\n  );\n  const [salesChannels, setSalesChannels] = useState([\n    {value: 'onlineStore', label: 'Online Store'},\n    {value: 'facebook', label: 'Facebook'},\n    {value: 'googleShopping', label: 'Google shopping'},\n    {value: 'facebookMarketing', label: 'Facebook Marketing'},\n  ]);\n  const [selected, setSelected] = useState([]);\n\n  const toggleSheetActive = useCallback(\n    () => setSheetActive((sheetActive) => !sheetActive),\n    [],\n  );\n  const handleSelectedChange = useCallback((value) => setSelected(value), []);\n  const handleTitleChange = useCallback((value) => setTitle(value), []);\n  const handleDescriptionChange = useCallback(\n    (value) => setDescription(value),\n    [],\n  );\n\n  const selectedSalesChannels = selected.map((key) => {\n    return salesChannels.reduce((accumulator, current) => {\n      accumulator[current.value] = current.label;\n      return accumulator;\n    }, {})[key];\n  });\n  const hasSelectedSalesChannels = selectedSalesChannels.length > 0;\n\n  const salesChannelsCardMarkup = hasSelectedSalesChannels ? (\n    <List>\n      {selectedSalesChannels.map((channel, index) => (\n        <List.Item key={index}>{channel}</List.Item>\n      ))}\n    </List>\n  ) : (\n    <div\n      style={{\n        alignItems: 'center',\n        display: 'flex',\n        justifyContent: 'space-between',\n        width: '100%',\n      }}\n    >\n      <p>No sales channels selected</p>\n      <Button onClick={toggleSheetActive}>Manage sales channels</Button>\n    </div>\n  );\n\n  const salesChannelAction = hasSelectedSalesChannels\n    ? [\n        {\n          onAction: toggleSheetActive,\n          content: 'Manage sales channels',\n        },\n      ]\n    : null;\n\n  return (\n    <Page narrowWidth>\n      <Card\n        sectioned\n        subdued\n        title=\"Product availability\"\n        actions={salesChannelAction}\n      >\n        {salesChannelsCardMarkup}\n      </Card>\n      <Sheet\n        open={sheetActive}\n        onClose={toggleSheetActive}\n        accessibilityLabel=\"Manage sales channels\"\n      >\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            height: '100%',\n          }}\n        >\n          <div\n            style={{\n              alignItems: 'center',\n              borderBottom: '1px solid #DFE3E8',\n              display: 'flex',\n              justifyContent: 'space-between',\n              padding: '1rem',\n              width: '100%',\n            }}\n          >\n            <Heading>Manage sales channels</Heading>\n            <Button\n              accessibilityLabel=\"Cancel\"\n              icon={MobileCancelMajor}\n              onClick={toggleSheetActive}\n              plain\n            />\n          </div>\n          <Scrollable style={{padding: '1rem', height: '100%'}}>\n            <ChoiceList\n              title=\"Select a sales channel\"\n              name=\"salesChannelsList\"\n              choices={salesChannels}\n              selected={selected}\n              titleHidden\n              allowMultiple\n              onChange={handleSelectedChange}\n            />\n          </Scrollable>\n          <div\n            style={{\n              alignItems: 'center',\n              borderTop: '1px solid #DFE3E8',\n              display: 'flex',\n              justifyContent: 'space-between',\n              padding: '1rem',\n              width: '100%',\n            }}\n          >\n            <Button onClick={toggleSheetActive}>Cancel</Button>\n            <Button primary onClick={toggleSheetActive}>\n              Done\n            </Button>\n          </div>\n        </div>\n      </Sheet>\n    </Page>\n  );\n}\n```\n\n---\n\n## Related components\n\n- To offer an action before merchants can go to the next step in the flow, use the [modal component](https://polaris.shopify.com/components/overlays/modal)\n- To present a small amount of content or a menu of actions in a non-blocking overlay, use the [popover component](https://polaris.shopify.com/components/overlays/popover)\n",
  "Skeleton body text": "\n\n# Skeleton body text\n\nSkeleton body text is used to provide a low fidelity representation of content before it appears on the page, and improves load times perceived by merchants. Can be used for content in or outside of a card.\n\n---\n\n## Best practices\n\nSkeleton body text component should:\n\n- Be used with [Skeleton page](https://polaris.shopify.com/components/feedback-indicators/skeleton-page) when page content loads all at once. Together, these components give merchants an indication of what the page layout will be once loaded.\n- Be used on its own, inside any content container component (like a [card](https://polaris.shopify.com/components/structure/card)), and when content loads after the main page load.\n- Try to match the number of lines to the content being loaded so it gives an accurate representation.\n\n---\n\n## Content guidelines\n\n### Skeleton body text\n\nShow static content that never changes on a page and use skeleton loading for dynamic content. Skeleton body text can sometimes be used to represent non-typographic content such as forms. Don’t use placeholder content that will change when the page fully loads.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nUse skeleton body text for dynamic content.\n![Image showing skeleton body text for dynamic content](/images-from-old-styleguide/skeleton/do-use-skeleton-body-for-dynamic-content@2x.png)\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nUse skeleton body text for static content or use placeholder content for dynamic content.\n![Image showing skeleton body text for static content](/images-from-old-styleguide/skeleton/dont-use-skeleton-body-for-static-or-placeholder-for-dynamic-text@2x.png)\n\n</div></div>\n\n---\n\n## Examples\n\n### Default paragraph\n\nUse this component to represent a block of content being loaded. For example, you could use it to represent an entire product description card on the product page.\n\n```jsx\n<SkeletonBodyText />\n```\n\n### Single line content\n\nUse this component to represent a short, single line of text, like a timestamp.\n\n```jsx\n<SkeletonBodyText lines={1} />\n```\n\n---\n\n## Related components\n\n- Use this component with [Skeleton page](https://polaris.shopify.com/components/feedback-indicators/skeleton-page) and [Skeleton display text](https://polaris.shopify.com/components/feedback-indicators/skeleton-display-text) to represent the content of a page while it’s loading.\n- When giving feedback for in-context operations, use [Progress bar](https://polaris.shopify.com/components/feedback-indicators/progress-bar) or [Spinner](https://polaris.shopify.com/components/feedback-indicators/spinner) component.\n",
  "Skeleton display text": "\n\n# Skeleton display text\n\nSkeleton display text is used to provide a low fidelity representation of content before it appears on the page, and improves load times perceived by merchants. Can be used for content in or outside of a card.\n\n---\n\n## Best practices\n\nSkeleton display text component should:\n\n- Give merchants an indication of what the page content will be once loaded\n- Use real content for display text that never changes\n\n---\n\n## Content guidelines\n\n### Skeleton display text\n\nShow static display text that that never changes on a page. For example, keep page titles, such as Products on the product list page, but use skeleton loading for page titles that change on the product details page.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nShow actual display text for static content and use skeleton display text for dynamic content.\n![Image showing skeleton display text for dynamic content](/images-from-old-styleguide/skeleton/do-show-display-text-for-static-content@2x.png)\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nUse skeleton display text for static content or placeholder content for dynamic content.\n![Image showing skeleton display text for static content and placeholder text for dynamic content](/images-from-old-styleguide/skeleton/dont-use-skeleton-for-static-or-placeholder-content-for-dynamic@2x.png)\n\n</div></div>\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nShow skeleton display text for dynamic page titles.\n\n<div class=\"TypographyUsageBlockImg\">\n\n![Image showing skeleton display text for dynamic page title](/images-from-old-styleguide/skeleton/do-use-skeleton-for-dynamic-page-titles@2x.png)\n\n</div>\n\n</div></div>\n\n---\n\n## Examples\n\n### Medium and large display text\n\nUse this component to represent medium and large display text such as large metrics on the reports list page, or for page titles.\n\n```jsx\n<SkeletonDisplayText size=\"medium\" />\n```\n\n### Extra large display text\n\nUse this component to represent extra large display text.\n\n```jsx\n<SkeletonDisplayText size=\"extraLarge\" />\n```\n\n### Small display text\n\nUse this component to represent small display text such as content headings.\n\n```jsx\n<SkeletonDisplayText size=\"small\" />\n```\n\n---\n\n## Related components\n\n- Use this component with [Skeleton page](https://polaris.shopify.com/components/feedback-indicators/skeleton-page) and [Skeleton body text](https://polaris.shopify.com/components/feedback-indicators/skeleton-body-text) to represent the content of a page before it’s loaded.\n- When giving feedback for in-context operations, use [Progress bar](https://polaris.shopify.com/components/feedback-indicators/progress-bar) or [Spinner](https://polaris.shopify.com/components/feedback-indicators/spinner) component.\n",
  "Skeleton page": "\n\n# Skeleton page\n\nSkeleton page is used with other skeleton loading components to provide a low fidelity representation of the user interface (UI) before content appears on the page. It improves load times perceived by merchants.\n\n---\n\n## Best practices\n\nSkeleton page component should:\n\n- Be used for pages where all content loads at the same time.\n- Give merchants an indication of what the page layout will be once loaded. Do this by mimicking its layout similarly to the state that will be loaded.\n\n---\n\n## Content guidelines\n\nShow page titles that never change for a page. For example, keep the title “Products” on the product list page, but use skeleton loading for titles that change on the product details page. Don’t use placeholder content for titles that will change when the page fully loads.\n\nSecondary actions are always represented with skeleton content. You can change the number of skeleton actions that best represent the number of actions once loaded.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nUse skeleton loading for dynamic content, and use actual content for content that doesn’t change.\n\n<div class=\"TypographyUsageBlockImg\">\n\n![Image showing skeleton loading for changing content](/images-from-old-styleguide/skeleton/do-use-skeleton-for-changing-content@2x.png)\n\n</div>\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nUse placeholder content that will change when the page fully loads. This will confuse merchants and create a jumpy loading experience.\n\n<div class=\"TypographyUsageBlockImg\">\n\n![Image showing placeholder content that will change](/images-from-old-styleguide/skeleton/dont-use-placeholder-content-that-will-change@2x.png)\n\n</div>\n\n</div></div>\n\n---\n\n## Examples\n\n### Page with dynamic content\n\nUse this component to compose a loading version of a page where the page title and header content are dynamic, meaning, the content changes.\n\n```jsx\n<SkeletonPage primaryAction>\n  <Layout>\n    <Layout.Section>\n      <Card sectioned>\n        <SkeletonBodyText />\n      </Card>\n      <Card sectioned>\n        <TextContainer>\n          <SkeletonDisplayText size=\"small\" />\n          <SkeletonBodyText />\n        </TextContainer>\n      </Card>\n      <Card sectioned>\n        <TextContainer>\n          <SkeletonDisplayText size=\"small\" />\n          <SkeletonBodyText />\n        </TextContainer>\n      </Card>\n    </Layout.Section>\n    <Layout.Section secondary>\n      <Card>\n        <Card.Section>\n          <TextContainer>\n            <SkeletonDisplayText size=\"small\" />\n            <SkeletonBodyText lines={2} />\n          </TextContainer>\n        </Card.Section>\n        <Card.Section>\n          <SkeletonBodyText lines={1} />\n        </Card.Section>\n      </Card>\n      <Card subdued>\n        <Card.Section>\n          <TextContainer>\n            <SkeletonDisplayText size=\"small\" />\n            <SkeletonBodyText lines={2} />\n          </TextContainer>\n        </Card.Section>\n        <Card.Section>\n          <SkeletonBodyText lines={2} />\n        </Card.Section>\n      </Card>\n    </Layout.Section>\n  </Layout>\n</SkeletonPage>\n```\n\n### Page with static content\n\nUse this component to compose a loading version of a page where the page title and header content are known and stay the same.\n\n```jsx\n<SkeletonPage title=\"Products\" primaryAction>\n  <Layout>\n    <Layout.Section>\n      <Card sectioned>\n        <SkeletonBodyText />\n      </Card>\n      <Card sectioned title=\"Images\">\n        <SkeletonBodyText />\n      </Card>\n      <Card sectioned title=\"Variants\">\n        <SkeletonBodyText />\n      </Card>\n    </Layout.Section>\n    <Layout.Section secondary>\n      <Card title=\"Sales channels\">\n        <Card.Section>\n          <SkeletonBodyText lines={2} />\n        </Card.Section>\n        <Card.Section>\n          <SkeletonBodyText lines={1} />\n        </Card.Section>\n      </Card>\n      <Card title=\"Organization\" subdued>\n        <Card.Section>\n          <SkeletonBodyText lines={2} />\n        </Card.Section>\n        <Card.Section>\n          <SkeletonBodyText lines={2} />\n        </Card.Section>\n      </Card>\n    </Layout.Section>\n  </Layout>\n</SkeletonPage>\n```\n\n---\n\n## Related components\n\n- Use the [Skeleton body text](https://polaris.shopify.com/components/feedback-indicators/skeleton-body-text) and [Skeleton display text](https://polaris.shopify.com/components/feedback-indicators/skeleton-display-text) components to represent blocks of content.\n- When giving feedback for in-context operations, use [Progress bar](https://polaris.shopify.com/components/feedback-indicators/progress-bar) or [Spinner](https://polaris.shopify.com/components/feedback-indicators/spinner) component.\n",
  "Skeleton tabs": "\n\n# Skeleton tabs\n\nSkeleton tabs are used to provide a low fidelity representation of content before it appears on the page, and improves load times perceived by merchants. Can be used for content in or outside of a card.\n\n---\n\n## Best practices\n\nSkeleton tabs component should:\n\n- Give merchants an indication of what the page content will be once loaded\n\n---\n\n## Examples\n\n### Simple skeleton tabs\n\n```jsx\n<Card>\n  <SkeletonTabs />\n</Card>\n```\n\n### Skeleton tabs with a custom count\n\n```jsx\n<Card>\n  <SkeletonTabs count={4} />\n</Card>\n```\n\n## Related components\n\n- Use this component with [Skeleton page](https://polaris.shopify.com/components/feedback-indicators/skeleton-page) and [Skeleton body text](https://polaris.shopify.com/components/feedback-indicators/skeleton-body-text) to represent the content of a page before it’s loaded.\n",
  "Skeleton thumbnail": "\n\n# Skeleton image\n\nSkeleton thumbnail is used to provide a low fidelity representation of an image before it appears on the page, and improves load times perceived by merchants. Use for thumbnails in or outside of a card.\n\n---\n\n## Best practices\n\nSkeleton thumbnail component should:\n\n- Try to match the size of the thumbnail to the content being loaded so it gives an accurate representation.\n\n---\n\n## Examples\n\n### Medium thumbnail\n\nUse this component to represent medium thumbnails.\n\n```jsx\n<SkeletonThumbnail size=\"medium\" />\n```\n\n### Large thumbnail\n\nUse this component to represent large thumbnails.\n\n```jsx\n<SkeletonThumbnail size=\"large\" />\n```\n\n### Small thumbnail\n\nUse this component to represent small thumbnails.\n\n```jsx\n<SkeletonThumbnail size=\"small\" />\n```\n\n---\n\n## Related components\n\n- Use this component with [Skeleton display text](https://polaris.shopify.com/components/feedback-indicators/skeleton-display-text) to represent the content of a card while it’s loading.\n",
  "Spinner": "\n\n# Spinner\n\nSpinners are used to notify merchants that their action is being processed. For loading states, spinners should only be used for content that can’t be represented with skeleton loading components, like for data charts.\n\n---\n\n## Examples\n\n### Default spinner\n\nUse to notify merchants that their requested action is being processed.\n\n```jsx\n<Spinner accessibilityLabel=\"Spinner example\" size=\"large\" />\n```\n\n<!-- content-for: android -->\n\n![Material design spinner for Android](/images-from-old-styleguide/components/Spinner/android/default@2x.gif)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Apple’s spinner for iOS](/images-from-old-styleguide/components/Spinner/ios/default@2x.gif)\n\n<!-- /content-for -->\n\n### Small spinner\n\n<!-- example-for: web -->\n\nSmaller than the default spinner.\n\n```jsx\n<Spinner accessibilityLabel=\"Small spinner example\" size=\"small\" />\n```\n\n### Spinner with focus management\n\nUse to direct the focus state from the control to the spinner, to the content.\n\n```jsx\nfunction SpinnerWithFocusManagement() {\n  const tabs = useRef([\n    {\n      id: 'all-customers',\n      content: 'All',\n      accessibilityLabel: 'All customers',\n      panelID: 'all-customers-content',\n    },\n    {\n      id: 'accepts-marketing',\n      content: 'Accepts marketing',\n      panelID: 'accepts-marketing-content',\n    },\n  ]);\n\n  const [selected, setSelected] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [value, setValue] = useState('');\n  const [textFieldFocused, setTextFieldFocused] = useState(false);\n\n  useEffect(() => {\n    setTextFieldFocused(!loading);\n  }, [loading]);\n\n  const handleTabChange = useCallback((selectedTab) => {\n    setLoading(true);\n    setSelected(selectedTab);\n    setTimeout(() => {\n      setValue('');\n      return setLoading(false);\n    }, 1500);\n  }, []);\n\n  const handleUrlChange = useCallback((value) => setValue(value), []);\n\n  const handleSubmit = useCallback((_event) => setValue(''), []);\n\n  const label = selected ? 'Marketing' : 'Customers';\n  const sectionMarkup = loading ? (\n    <Spinner\n      accessibilityLabel=\"Loading form field\"\n      hasFocusableParent={false}\n    />\n  ) : (\n    <Form noValidate onSubmit={handleSubmit}>\n      <FormLayout>\n        <TextField\n          value={value}\n          focused={textFieldFocused}\n          onChange={handleUrlChange}\n          label={label}\n          autoComplete=\"off\"\n        />\n        <Button submit>Submit</Button>\n      </FormLayout>\n    </Form>\n  );\n\n  return (\n    <Card>\n      <Tabs tabs={tabs.current} selected={selected} onSelect={handleTabChange}>\n        <Card.Section title={tabs.current[selected].content}>\n          {sectionMarkup}\n        </Card.Section>\n      </Tabs>\n    </Card>\n  );\n}\n```\n\n---\n\n## Accessibility\n\n<!-- content-for: web -->\n\nSVGs are often conveyed inconsistently to assistive technologies. The `Spinner` component’s accessibility is also highly contextual. When the parent component is focusable, you’ll need to set the `hasFocusableParent` prop for the appropriate `role` attribute to be applied.\n\nFor optimal user experience, use the `accessibilityLabel` prop to let assistive technology users know the purpose of the spinner.\n\n<!-- /content-for-->\n\n---\n\n## Best practices\n\nThe spinner component should:\n\n- Notify merchants that their request has been received and the action will soon complete.\n- Not be used to give feedback for an entire page load.\n- White can only be used with small spinners on actionable components like buttons.\n- On web, be used in conjunction with skeleton loading to represent non-typographic content. For example, line graphs on the Merchant analytics dashboard.\n\n---\n\n## Content guidelines\n\n### Accessibility label\n\nSpinner accessibility label should:\n\n- Accurately explain the state of the requested action. For example, “Loading”, “Submitting”, “Processing”.\n- Use as few words to describe the state as possible.\n\n---\n\n## Related components\n\n- To improve user experience and reduce the appearance of long loading times, use the [Progress bar](https://polaris.shopify.com/components/feedback-indicators/progress-bar) component.\n- To better represent loading content, use [Skeleton page](https://polaris.shopify.com/components/feedback-indicators/skeleton-page) along with [Skeleton body text](https://polaris.shopify.com/components/feedback-indicators/skeleton-body-text) and [Skeleton display text](https://polaris.shopify.com/components/feedback-indicators/skeleton-display-text) components.\n",
  "Stack": "\n\n# Stack\n\nUse to lay out a horizontal row of components or to achieve no-fuss vertical\ncentering. A stack is made of flexible items that wrap each of the stack’s\nchildren. Options provide control of the wrapping, spacing, and relative size of the items in the stack.\n\n---\n\n## Best practices\n\nStacks should:\n\n- Be used for small-scale layout tasks when you want a row of components that should wrap on small screen widths\n- Be used to vertically center two elements\n- Not be used for complex or unique arrangements of components\n- Not be used for large-scale page layout\n\n---\n\n## Examples\n\n### Default behavior\n\nUse to quickly lay out a horizontal row of components and maintain their relative sizes. On small screens, children rows wrap down to additional rows as needed.\n\n```jsx\n<Stack>\n  <Badge>Paid</Badge>\n  <Badge>Processing</Badge>\n  <Badge>Fulfilled</Badge>\n  <Badge>Completed</Badge>\n</Stack>\n```\n\n### Non-wrapping Stacks\n\nUse to create a stack where the children will not wrap to new rows on small screens. As noted above, the wrap option defaults to true. This means you must explicitly set it to false to turn it off.\n\n```jsx\n<Stack wrap={false}>\n  <Badge>Paid</Badge>\n  <Badge>Processing</Badge>\n  <Badge>Fulfilled</Badge>\n  <Badge>Completed</Badge>\n</Stack>\n```\n\n### Spacing options\n\nUse to control spacing of items in a stack in standard increments. Use tight for less spacing, loose for more spacing, or none to remove normal spacing altogether.\n\n```jsx\n<Stack spacing=\"loose\">\n  <Badge>Paid</Badge>\n  <Badge>Fulfilled</Badge>\n</Stack>\n```\n\n### Vertical centering with a stack\n\nUse to vertically center a set of items that have different heights.\n\n```jsx\n<Stack alignment=\"center\">\n  <Heading>\n    Order\n    <br />\n    #1136\n    <br />\n    was paid\n  </Heading>\n  <Badge>Paid</Badge>\n  <Badge>Fulfilled</Badge>\n</Stack>\n```\n\n### Fill available space proportionally\n\nUse to have the stack’s items fill the horizontal space in the container but maintain their relative proportions.\n\n```jsx\n<Stack distribution=\"fill\">\n  <Heading>Order #1136</Heading>\n  <Badge>Paid</Badge>\n  <Badge>Fulfilled</Badge>\n</Stack>\n```\n\n### Stack where items fill space evenly\n\nUse to have the stack’s items fill the horizontal space in the container and be equal widths, regardless of their content.\n\n```jsx\n<Stack distribution=\"fillEvenly\">\n  <Heading>Order #1136</Heading>\n  <Badge>Paid</Badge>\n  <Badge>Fulfilled</Badge>\n</Stack>\n```\n\n### Stack where a single item fills the remaining space\n\nUse for aligning buttons or secondary content to the right edge of another element, allowing it to wrap below on small screens.\n\n```jsx\n<Stack>\n  <Stack.Item fill>\n    <Heading>Order #1136</Heading>\n  </Stack.Item>\n  <Stack.Item>\n    <Badge>Paid</Badge>\n  </Stack.Item>\n  <Stack.Item>\n    <Badge>Fulfilled</Badge>\n  </Stack.Item>\n</Stack>\n```\n\n---\n\n## Stack item\n\nThe stack component will treat multiple elements wrapped in a stack item component as one item. By default, each individual element is treated as one stack item. Use the fill prop on a single stack item component to make it fill the rest of the available horizontal space. See the “Stack where a single item fills the remaining space” example.\n\n### Stack item properties\n\n| Prop     | Type    | Description                                                    | Default |\n| -------- | ------- | -------------------------------------------------------------- | ------- |\n| fill     | boolean | Fill the available horizontal space in the stack with the item | false   |\n| children | any     | Elements to display inside stack item                          |         |\n\n---\n\n## Related components\n\n- To create the large-scale structure of pages, [use the layout component](https://polaris.shopify.com/components/structure/layout)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nThe stack component is for alignment only and doesn’t provide any structural information for assistive technologies. To convey relationships between specific items, consider using the [list component](https://polaris.shopify.com/components/lists-and-tables/list).\n\n<!-- /content-for -->\n",
  "Stepper": "\n\n# Stepper\n\nUse stepper to increase or decrease a value in a counter field.\n\n---\n\n## Best practices\n\n- Make it clear what you’re increasing and decreasing the value of by placing it in close context of the value it’s changing.\n- Eliminate merchants’ need to remember values by using a numerical indicator outside of the stepper that shows the maximum value.\n\n---\n\n## Content guidelines\n\nAvoid truncating the value.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n7,820\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n78...\n\n</div></div>\n\nAvoid abbreviating values (10k, 1m), instead, make the text smaller to fit the space.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n52,834\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n52k\n\n</div></div>\n\n---\n\n## Examples\n\n### Default stepper\n\n<!-- example-for: android, ios -->\n\nThe stepper has two buttons, a minus and a plus button. It’s possible to tap into the text field as well.\n\n<!-- content-for: android -->\n\n![Default stepper with enabled decrease and increase button](/images-from-old-styleguide/components/Stepper/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Default stepper with enabled decrease and increase button](/images-from-old-styleguide/components/Stepper/ios/default@2x.png)\n\n<!-- /content-for -->\n\n### Disabled stepper\n\n<!-- example-for: android, ios -->\n\nIf you reach the bottom or top value, the appropriate button becomes disabled.\n\n<!-- content-for: android -->\n\n![Disabled stepper](/images-from-old-styleguide/components/Stepper/android/disabled@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Disabled stepper](/images-from-old-styleguide/components/Stepper/ios/disabled@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Related components\n\n- If values need to change dramatically, use [text field with number field](https://polaris.shopify.com/components/forms/text-field)\n- If values shouldn’t change or won’t be changing, use [disabled text field](https://polaris.shopify.com/components/forms/text-field)\n",
  "Subheading": "\n\n# Subheading\n\nSubheadings are used for the title of any sub-sections in top-level page sections.\n\n---\n\n## Best practices\n\nSubheadings should:\n\n- Be used to explain and clearly label logical groups in existing sections of a page\n- Not be used without a parent heading\n- Not be used in tables or list items, such as for the primary content in a [resource list](https://polaris.shopify.com/components/lists-and-tables/resource-list)\n\n---\n\n## Content guidelines\n\nSubheadings should follow the content guidelines for [headings and subheadings](https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings).\n\n---\n\n## Examples\n\n### Typographic subheading\n\nUsed for the title of any sub-sections in top-level page sections.\n\n```jsx\n<Subheading>Accounts</Subheading>\n```\n\n<!-- content-for: android -->\n\n![typographic subheading](/images-from-old-styleguide/components/Subheading/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![typographic subheading](/images-from-old-styleguide/components/Subheading/ios/default@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Related components\n\n- To break up major sections of a page with a title, [use the heading component](https://polaris.shopify.com/components/titles-and-text/heading)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nA clear and consistent heading structure helps merchants who have difficulty with reading or language. It also helps screen reader users to navigate the page using keystrokes that are custom to their screen reader.\n\nUse the `element` prop to determine the specific HTML element that’s output for the subheading. The component defaults to a level 3 heading (`<h3>`). Use a different value for the `element` prop if a different subheading fits the context better.\n\nLearn more about writing helpful [headings and subheadings](https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings).\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nUse subheadings to support the hierarchy and structure of the page.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- Use subheadings for style alone.\n- Use subheadings for major sections of the page.\n\n</div></div>\n\n<!-- /content-for -->\n",
  "Tabs": "\n\n# Tabs\n\nUse to alternate among related views within the same context.\n\n---\n\n## Best practices\n\nTabs should:\n\n- Represent the same kind of content, such as a list-view with different filters applied. Don’t use tabs to group content that is dissimilar.\n- Only be active one at a time.\n- Not force merchants to jump back and forth to do a single task. Merchants should be able to complete their work and find what they need under each tab.\n- Not be used for primary navigation.\n\n---\n\n## Content guidelines\n\n### Tabs\n\nTabs should:\n\n- Be clearly labeled to help differentiate the different sections beneath them.\n- Have short and scannable labels, generally kept to single word.\n- Relate to the section of Shopify they’re on. Imagine the page section title is an invisible noun after the tab. For example, the tabs for the orders section are:\n\n  - All\n  - Open\n  - Unfulfilled\n  - Unpaid\n\nThe tabs for the gift cards section are:\n\n- All\n- New\n- Partially used\n- Used\n- Disabled\n\nAnd for the customers section, the tabs are:\n\n- All\n- New\n- Returning\n- Abandoned checkouts\n- Email subscribers\n\nWhere possible, follow this pattern when writing tabs.\n\n---\n\n## Examples\n\n### Default tabs\n\nUse for most cases, especially when the number of tabs may be more than three.\n\n```jsx\nfunction TabsExample() {\n  const [selected, setSelected] = useState(0);\n\n  const handleTabChange = useCallback(\n    (selectedTabIndex) => setSelected(selectedTabIndex),\n    [],\n  );\n\n  const tabs = [\n    {\n      id: 'all-customers-1',\n      content: 'All',\n      accessibilityLabel: 'All customers',\n      panelID: 'all-customers-content-1',\n    },\n    {\n      id: 'accepts-marketing-1',\n      content: 'Accepts marketing',\n      panelID: 'accepts-marketing-content-1',\n    },\n    {\n      id: 'repeat-customers-1',\n      content: 'Repeat customers',\n      panelID: 'repeat-customers-content-1',\n    },\n    {\n      id: 'prospects-1',\n      content: 'Prospects',\n      panelID: 'prospects-content-1',\n    },\n  ];\n\n  return (\n    <Card>\n      <Tabs tabs={tabs} selected={selected} onSelect={handleTabChange}>\n        <Card.Section title={tabs[selected].content}>\n          <p>Tab {selected} selected</p>\n        </Card.Section>\n      </Tabs>\n    </Card>\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Default tabs on Android](/images-from-old-styleguide/components/Tabs/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Default tabs on iOS](/images-from-old-styleguide/components/Tabs/ios/default@2x.png)\n\n<!-- /content-for -->\n\n### Fitted tabs\n\nUse when tabs contain a few (2 or 3) items within a narrow column.\n\n```jsx\nfunction FittedTabsExample() {\n  const [selected, setSelected] = useState(0);\n\n  const handleTabChange = useCallback(\n    (selectedTabIndex) => setSelected(selectedTabIndex),\n    [],\n  );\n\n  const tabs = [\n    {\n      id: 'all-customers-fitted-2',\n      content: 'All',\n      accessibilityLabel: 'All customers',\n      panelID: 'all-customers-fitted-content-2',\n    },\n    {\n      id: 'accepts-marketing-fitted-2',\n      content: 'Accepts marketing',\n      panelID: 'accepts-marketing-fitted-Ccontent-2',\n    },\n  ];\n\n  return (\n    <Card>\n      <Tabs tabs={tabs} selected={selected} onSelect={handleTabChange} fitted>\n        <Card.Section title={tabs[selected].content}>\n          <p>Tab {selected} selected</p>\n        </Card.Section>\n      </Tabs>\n    </Card>\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Fixed tabs on Android](/images-from-old-styleguide/components/Tabs/android/fixed@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nAlso known as [Segmented controls](https://developer.apple.com/design/human-interface-guidelines/ios/controls/segmented-controls/) on iOS.\n\n![Fixed tabs on iOS](/images-from-old-styleguide/components/Tabs/ios/fixed@2x.png)\n\n<!-- /content-for -->\n\n### Tabs with badge content\n\nUse to inform a piece of information about the tabs.\n\n```jsx\nfunction TabsWithBadgeExample() {\n  const [selected, setSelected] = useState(0);\n\n  const handleTabChange = useCallback(\n    (selectedTabIndex) => setSelected(selectedTabIndex),\n    [],\n  );\n\n  const tabs = [\n    {\n      id: 'all-customers-fitted-3',\n      content: (\n        <span>\n          All <Badge status=\"new\">10+</Badge>\n        </span>\n      ),\n      accessibilityLabel: 'All customers',\n      panelID: 'all-customers-fitted-content-3',\n    },\n    {\n      id: 'accepts-marketing-fitted-3',\n      content: (\n        <span>\n          Accepts marketing <Badge status=\"new\">4</Badge>\n        </span>\n      ),\n      panelID: 'accepts-marketing-fitted-content-3',\n    },\n  ];\n\n  return (\n    <Card>\n      <Tabs tabs={tabs} selected={selected} onSelect={handleTabChange} fitted>\n        <Card.Section title={tabs[selected].content}>\n          <p>Tab {selected} selected</p>\n        </Card.Section>\n      </Tabs>\n    </Card>\n  );\n}\n```\n\n### Tabs with custom disclosure\n\nUse to provide information about the popover contents\n\n```jsx\nfunction TabsWithCustomDisclosureExample() {\n  const [selected, setSelected] = useState(0);\n\n  const handleTabChange = useCallback(\n    (selectedTabIndex) => setSelected(selectedTabIndex),\n    [],\n  );\n\n  const tabs = [\n    {\n      id: 'all-customers-4',\n      content: 'All',\n      accessibilityLabel: 'All customers',\n      panelID: 'all-customers-content-4',\n    },\n    {\n      id: 'accepts-marketing-4',\n      content: 'Accepts marketing',\n      panelID: 'accepts-marketing-content-4',\n    },\n    {\n      id: 'repeat-customers-4',\n      content: 'Repeat customers',\n      panelID: 'repeat-customers-content-4',\n    },\n    {\n      id: 'prospects-4',\n      content: 'Prospects',\n      panelID: 'prospects-content-4',\n    },\n  ];\n\n  return (\n    <Card>\n      <Tabs\n        tabs={tabs}\n        selected={selected}\n        onSelect={handleTabChange}\n        disclosureText=\"More views\"\n      >\n        <Card.Section title={tabs[selected].content}>\n          <p>Tab {selected} selected</p>\n        </Card.Section>\n      </Tabs>\n    </Card>\n  );\n}\n```\n",
  "Tag": "\n\n# Tag\n\nTags represent a set of interactive, merchant-supplied keywords that help label, organize, and categorize objects. Tags can be added or removed from an object by merchants.\n\n---\n\n## Best practices\n\nTags should:\n\n- Be presented close to or within the input control that allows merchants to add and remove tags\n\n---\n\n## Examples\n\n### Default tag\n\nUse to signify the attributes of an object.\n\n```jsx\n<Tag>Wholesale</Tag>\n```\n\n### Removable tag\n\nUse to allow merchants to remove attributes from an object.\n\n```jsx\nfunction RemovableTagExample() {\n  const [selectedTags, setSelectedTags] = useState([\n    'Rustic',\n    'Antique',\n    'Vinyl',\n    'Refurbished',\n    'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer at ipsum quam. Aliquam fermentum bibendum vestibulum. Vestibulum condimentum luctus metus, sed sagittis magna pellentesque eget. Duis dapibus pretium nisi, et venenatis tortor dignissim ut. Quisque eget lacus ac ex eleifend ultrices. Phasellus facilisis ex sit amet leo elementum condimentum. Ut vel maximus felis. Etiam eget diam eu eros blandit interdum. Sed eu metus sed justo aliquam iaculis ac sit amet ex. Curabitur justo magna, porttitor non pulvinar eu, malesuada at leo. Cras mollis consectetur eros, quis maximus lorem dignissim at. Proin in rhoncus massa. Vivamus lectus nunc, fringilla euismod risus commodo, mattis blandit nulla.',\n  ]);\n\n  const removeTag = useCallback(\n    (tag) => () => {\n      setSelectedTags((previousTags) =>\n        previousTags.filter((previousTag) => previousTag !== tag),\n      );\n    },\n    [],\n  );\n\n  const tagMarkup = selectedTags.map((option) => (\n    <Tag key={option} onRemove={removeTag(option)}>\n      {option}\n    </Tag>\n  ));\n\n  return <Stack spacing=\"tight\">{tagMarkup}</Stack>;\n}\n```\n\n### Clickable tag\n\nUse to allow merchants to add attributes to an object.\n\n```jsx\n<Tag onClick={() => console.log('Clicked')}>Wholesale</Tag>\n```\n\n### Tag with link\n\nUse to allow merchants to navigate to a resource. For example a customer segment or a smart collection\n\n```jsx\nfunction URLTagExample() {\n  return <Tag url=\"/collections/wholesale\">Wholesale</Tag>;\n}\n```\n\n### Tag with custom content\n\nUse when a tag needs to be visually distinguished from others, like when it's added automatically.\n\n```jsx\n<Tag url=\"/collections/wholesale\">\n  <Stack spacing=\"extraTight\">\n    <Icon source={WandMinor} />\n    <span>Wholesale</span>\n  </Stack>\n</Tag>\n```\n\n<!-- content-for: android -->\n\n![Tag for Android](/images-from-old-styleguide/components/Tag/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Tag for iOS](/images-from-old-styleguide/components/Tag/ios/default@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Related components\n\n- To show the status of an object, [use the badge component](https://polaris.shopify.com/components/images-and-icons/badge)\n- To add and remove tags, [use the text field component](https://polaris.shopify.com/components/forms/text-field)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n### Labeling\n\nThe button to remove a tag is automatically given a label using `aria-label` so that screen reader users can distinguish which tag will be removed.\n\n### Keyboard support\n\nThe control to remove a tag is implemented as a button with standard keyboard support.\n\n- Give buttons keyboard focus with the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)\n- To activate a button, press the <kbd>enter</kbd>/<kbd>return</kbd> or <kbd>space</kbd> key\n\nWhen a merchant uses the button to remove a tag, it is important to make sure that keyboard focus is managed. Moving focus to the next element in the page is recommended.\n\n<!-- /content-for -->\n",
  "Text container": "\n\n# Text container\n\nA text container is used to wrap text elements such as paragraphs, headings, and lists to give them vertical spacing.\n\n---\n\n## Best practices\n\nThe closer the spacing, the closer the relationship between content topics. The closeness visually represents the relationship.\n\n- Use tight spacing to relate content topics to each other\n- Use loose spacing to separate concepts that are independent of each other\n\n---\n\n## Examples\n\n### Default text container\n\nUse this component for default vertical spacing.\n\n```jsx\n<TextContainer>\n  <Heading>Install the Shopify POS App</Heading>\n  <p>\n    Shopify POS is the easiest way to sell your products in person. Available\n    for iPad, iPhone, and Android.\n  </p>\n</TextContainer>\n```\n\n<!-- content-for: android -->\n\n![Default text container](/images-from-old-styleguide/components/TextContainer/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Default text container](/images-from-old-styleguide/components/TextContainer/ios/default@2x.png)\n\n<!-- /content-for -->\n\n### Tight text container\n\nUse the tight spacing option to relate content topics to each other.\n\n```jsx\n<TextContainer spacing=\"tight\">\n  <Heading>Install the Shopify POS App</Heading>\n  <p>\n    Shopify POS is the easiest way to sell your products in person. Available\n    for iPad, iPhone, and Android.\n  </p>\n</TextContainer>\n```\n\n<!-- content-for: android -->\n\n![Tight text container](/images-from-old-styleguide/components/TextContainer/android/tight@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Tight text container](/images-from-old-styleguide/components/TextContainer/ios/tight@2x.png)\n\n<!-- /content-for -->\n\n### Loose text container\n\nUse the loose spacing option to separate concepts that are independent of each other.\n\n```jsx\n<TextContainer spacing=\"loose\">\n  <p>\n    Manage your Shopify store on-the-go with real-time notifications, access to\n    your dashboard, and order management, all from your smartphone.\n  </p>\n  <p>\n    Shopify POS is the fastest and easiest way to start accepting Visa,\n    Mastercard, American Express, and Discover right from your smartphone or\n    tablet.\n  </p>\n</TextContainer>\n```\n\n<!-- content-for: android -->\n\n![Loose text container](/images-from-old-styleguide/components/TextContainer/android/loose@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Loose text container](/images-from-old-styleguide/components/TextContainer/ios/loose@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Related components\n\n- For more layout variations, or if you’re looking to vertically space components other than text, use [Stack](https://polaris.shopify.com/components/structure/stack).\n",
  "Text field": "\n\n# Text field\n\nA text field is an input field that merchants can type into. It has a range of\noptions and supports several text formats including numbers.\n\n---\n\n## Best practices\n\nText fields should:\n\n- Be clearly labeled so it’s obvious to merchants what they should enter into the field\n- Be labeled as “Optional” when you need to request input that’s not required\n- Only ask for information that’s really needed\n- Validate input as soon as merchants have finished interacting with a field (but not before)\n\n### Autocomplete\n\nThe autocomplete attribute in an `input` field controls two types of browser behavior:\n\n1. **Browser autofill**: a feature that automatically populates form fields with previously-saved information, such as passwords, addresses, and credit card data.\n\n- Autofill is an important feature for our users. Google has found that [\"users complete forms up to 30% faster\"](https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill?hl=en) when using autofill.\n- The WHATWG has a list of supported autofill values for the `autocomplete` attribute. [Review the section \"4.10.18.7 Autofill\"](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill) for all the input types and their corresponding autocomplete attribute values.\n\n2. **Browser autocomplete** - a feature that displays previously submitted values for that field.\n\n- When this is on for a field, a user is presented a list with previously submitted values for the input\n\n**Recommendation**\n\n> Always add an autocomplete attribute and value to inputs if the type is: color, date, datetime-local, email, month, number, password, range, search, tel, text, time, url, or week.\n\n#### Turning autofill/autocomplete off\n\nEven if you do not want the browser to autofill a user's information, it is recommended you still have an autocomplete attribute with the value off or nope.\n\nUnfortunately, [not all browsers support](https://caniuse.com/input-autocomplete-onoff) or respect autocomplete=\"off\". This makes things challenging. Chrome, for example, [has a long outstanding bug](https://bugs.chromium.org/p/chromium/issues/detail?id=468153) and won't add support for off for now.\n\n| Browser | Support for `autocomplete=\"off\"` | Details                                                                                                                                                             |\n| ------- | -------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Chrome  | Partial                          | Intentionally ignores `off` value when the user uses the browser's autofill functionality. [See bug](https://bugs.chromium.org/p/chromium/issues/detail?id=468153). |\n| Safari  | Partial                          | Ignores `off` value for `username`, `email` and `password` fields.                                                                                                  |\n| Firefox | Partial                          | Ignores `off` value for login forms. [See bug](https://bugzilla.mozilla.org/show_bug.cgi?id=956906).                                                                |\n| Edge    | Partial                          | Intentionally ignores `off` value when the user uses the browser's autofill functionality.                                                                          |\n\nChrome does seem to turn autocomplete off when using the value nope (or any non valid string). However, we have seen some inconsistencies even with that support.\n\n**Recommendation (Chrome only)**\n\n- Turning off both **autofill** and **browser autocomplete** (previously submitted values) in Chrome\n  - Use `autocomplete=nope` and also **must have a `name` attribute**.\n- Turning off **browser autocomplete** (previously submitted values) in Chrome\n  - If you don't have `name` attribute and the field is not a typical autofill input (address, email, etc), use `autocomplete=off`.\n\n---\n\n## Content guidelines\n\nFor text field content guidelines, reference the [text fields experience](https://polaris.shopify.com/experiences/text-fields) page.\n\n---\n\n## Examples\n\n### Default text field\n\nUse to allow merchants to provide text input when the expected input is short. For longer input, use the auto grow or multiline options.\n\n```jsx\nfunction TextFieldExample() {\n  const [value, setValue] = useState('Jaded Pixel');\n\n  const handleChange = useCallback((newValue) => setValue(newValue), []);\n\n  return (\n    <TextField\n      label=\"Store name\"\n      value={value}\n      onChange={handleChange}\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Default text field](/images-from-old-styleguide/components/TextField/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Default text field](/images-from-old-styleguide/components/TextField/ios/default@2x.png)\n\n<!-- /content-for -->\n\n### Number field\n\nUse when input text should be a number.\n\n```jsx\nfunction NumberFieldExample() {\n  const [value, setValue] = useState('1');\n\n  const handleChange = useCallback((newValue) => setValue(newValue), []);\n\n  return (\n    <TextField\n      label=\"Quantity\"\n      type=\"number\"\n      value={value}\n      onChange={handleChange}\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n<!-- content-for: android -->\n\nThis will display the right keyboard on mobile devices.\n\n![Number text field with numeric keyboard](/images-from-old-styleguide/components/TextField/android/number@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nThis will display the right keyboard on mobile devices.\n\n![Number text field with numeric keyboard](/images-from-old-styleguide/components/TextField/ios/number@2x.png)\n\n<!-- /content-for -->\n\n### Email field\n\nUse when the text input should be an email address.\n\n```jsx\nfunction EmailFieldExample() {\n  const [value, setValue] = useState('bernadette.lapresse@jadedpixel.com');\n\n  const handleChange = useCallback((newValue) => setValue(newValue), []);\n\n  return (\n    <TextField\n      label=\"Email\"\n      type=\"email\"\n      value={value}\n      onChange={handleChange}\n      autoComplete=\"email\"\n    />\n  );\n}\n```\n\n<!-- content-for: android -->\n\nThis will display the right keyboard on mobile devices.\n\n![Email field with email keyboard](/images-from-old-styleguide/components/TextField/android/email@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nThis will display the right keyboard on mobile devices.\n\n![Email field with email keyboard](/images-from-old-styleguide/components/TextField/ios/email@2x.png)\n\n<!-- /content-for -->\n\n### Multiline text field\n\nUse when the expected input could be more than one line. The field will automatically grow to accommodate additional text.\n\n```jsx\nfunction MultilineFieldExample() {\n  const [value, setValue] = useState('1776 Barnes Street\\nOrlando, FL 32801');\n\n  const handleChange = useCallback((newValue) => setValue(newValue), []);\n\n  return (\n    <TextField\n      label=\"Shipping address\"\n      value={value}\n      onChange={handleChange}\n      multiline={4}\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Multi-line text field](/images-from-old-styleguide/components/TextField/android/multi-line@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Multi-line text field](/images-from-old-styleguide/components/TextField/ios/multi-line@2x.png)\n\n<!-- /content-for -->\n\n### Text field with hidden label\n\n<!-- example-for: web -->\n\nUse to visually hide the label when the text field’s purpose is clear from context. The label will remain available to screen readers. Use this option with care. In almost all cases, show the label.\n\n```jsx\nfunction HiddenLabelExample() {\n  const [value, setValue] = useState('12');\n  const [selected, setSelected] = useState('yes');\n\n  const handleTextChange = useCallback((newValue) => setValue(newValue), []);\n\n  const handleChoiceChange = useCallback(\n    (selections) => setSelected(selections[0]),\n    [],\n  );\n\n  return (\n    <FormLayout>\n      <ChoiceList\n        title=\"Gift card auto-expiration\"\n        choices={[\n          {label: 'Gift cards never expire', value: 'no'},\n          {label: 'Gift cards expire', value: 'yes'},\n        ]}\n        selected={[selected]}\n        onChange={handleChoiceChange}\n      />\n      <TextField\n        label=\"Gift cards expire after\"\n        type=\"number\"\n        labelHidden\n        value={value}\n        disabled={selected === 'no'}\n        onChange={handleTextChange}\n        autoComplete=\"off\"\n        connectedRight={\n          <Select\n            label=\"Unit of time\"\n            labelHidden\n            options={['months after purchase']}\n          />\n        }\n      />\n    </FormLayout>\n  );\n}\n```\n\n### Text field with label action\n\n<!-- example-for: web -->\n\nUse when an optional, secondary action is closely associated with a text field. For example, on a field for entering a customs tariff code, a label action might be to look up the appropriate code from a table.\n\n```jsx\nfunction LabelActionExample() {\n  const [textFieldValue, setTextFieldValue] = useState('6201.11.0000');\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Tariff code\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      labelAction={{content: 'Look up codes'}}\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n### TextField with right aligned text\n\n<!-- example-for: web -->\n\nUse when input text should be aligned right.\n\n```jsx\nfunction RightAlignExample() {\n  const [textFieldValue, setTextFieldValue] = useState('1');\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <Stack>\n      <Stack.Item fill>Price</Stack.Item>\n      <TextField\n        label=\"Price\"\n        labelHidden\n        value={textFieldValue}\n        onChange={handleTextFieldChange}\n        autoComplete=\"off\"\n        align=\"right\"\n      />\n    </Stack>\n  );\n}\n```\n\n### Text field with placeholder text\n\nUse to provide a short, non-essential hint about the expected input. Placeholder text is low-contrast, so don’t rely on it for important information.\n\n```jsx\nfunction PlaceholderExample() {\n  const [textFieldValue, setTextFieldValue] = useState('');\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Shipping zone name\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      placeholder=\"Example: North America, Europe\"\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Default text field with placeholder text hint](/images-from-old-styleguide/components/TextField/android/placeholder-text@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Default text field with placeholder text hint](/images-from-old-styleguide/components/TextField/ios/placeholder-text@2x.png)\n\n<!-- /content-for -->\n\n### Text field with help text\n\nUse to show short instructional content below the text field. Help text works to help merchants understand how to fix errors that result from incorrect formatting (such as dates or passwords with specific character requirements). If more explanation is needed, link to the Shopify Help Center.\n\n```jsx\nfunction HelpTextExample() {\n  const [textFieldValue, setTextFieldValue] = useState(\n    'bernadette.lapresse@jadedpixel.com',\n  );\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Account email\"\n      type=\"email\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      helpText=\"We’ll use this address if we need to contact you about your account.\"\n      autoComplete=\"email\"\n    />\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Default text field with help text](/images-from-old-styleguide/components/TextField/android/help-text@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Default text field with help text](/images-from-old-styleguide/components/TextField/ios/help-text@2x.png)\n\n<!-- /content-for -->\n\n### Text field with prefix or suffix\n\nUse as a special form of help text that works best inline.\n\n- Use a prefix for things like currency symbols (“\\$”, “¥”, “£”).\n- Use suffix for things like units of measure (“in”, “cm”).\n\n```jsx\nfunction PrefixExample() {\n  const [textFieldValue, setTextFieldValue] = useState('2.00');\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Price\"\n      type=\"number\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      prefix=\"$\"\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Default text field with prefix and suffix](/images-from-old-styleguide/components/TextField/android/prefix-suffix@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Default text field with prefix and suffix](/images-from-old-styleguide/components/TextField/ios/prefix-suffix@2x.png)\n\n<!-- /content-for -->\n\n### Text field with vertical content\n\nUse to include custom vertical content above the input value, like selected tags.\n\n```jsx\nfunction VerticalContent() {\n  const tags = ['Rustic', 'Antique', 'Vinyl', 'Refurbished'];\n  const [textFieldValue, setTextFieldValue] = useState('');\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  const verticalContentMarkup =\n    tags.length > 0 ? (\n      <Stack spacing=\"extraTight\" alignment=\"center\">\n        {tags.map((tag) => (\n          <Tag key={tag}>{tag}</Tag>\n        ))}\n      </Stack>\n    ) : null;\n\n  return (\n    <TextField\n      label=\"Tags\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      placeholder=\"Search tags\"\n      autoComplete=\"off\"\n      verticalContent={verticalContentMarkup}\n    />\n  );\n}\n```\n\n### Text field with connected fields\n\nUse when a text field and several related fields make up a logical unit.\n\n<!-- content-for: web -->\n\nIf inputting weight as a number and a separate unit of measurement, use a text field with a [select dropdown menu](https://polaris.shopify.com/components/forms/select) (for example “kg”, “lb”) as a connected field.\n\n<!-- /content-for -->\n\n```jsx\nfunction ConnectedFieldsExample() {\n  const [textFieldValue, setTextFieldValue] = useState('10.6');\n  const [selectValue, setSelectValue] = useState('kg');\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  const handleSelectChange = useCallback((value) => setSelectValue(value), []);\n\n  return (\n    <TextField\n      label=\"Weight\"\n      type=\"number\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      autoComplete=\"off\"\n      connectedLeft={\n        <Select\n          value={selectValue}\n          label=\"Weight unit\"\n          onChange={handleSelectChange}\n          labelHidden\n          options={['kg', 'lb']}\n        />\n      }\n      connectedRight={<Button>Submit</Button>}\n    />\n  );\n}\n```\n\n<!-- content-for: android -->\n\nIf inputting weight as a number and a separate unit of measurement, use a text field with a selector (like “kg” or “lb”) as a connected field.\n\n![Text field with connected selector](/images-from-old-styleguide/components/TextField/android/connected-fields@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nIf inputting weight as a number and a separate unit of measurement, use a text field with a selector (like “kg” or “lb”) as a connected field.\n\n![Text field with connected selector](/images-from-old-styleguide/components/TextField/ios/connected-fields@2x.png)\n\n<!-- /content-for -->\n\n### Text field with icon action\n\n<!-- example-for: android, ios -->\n\nUse to let merchants take an action within the text field.\n\nFor example, tap on a barcode icon to launch the camera and scan barcode for the barcode field. This helps merchants simplify their input.\n\n<!-- content-for: android -->\n\n![Text field with icon action inside the text field](/images-from-old-styleguide/components/TextField/android/accessory@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Text field with icon action inside the text field](/images-from-old-styleguide/components/TextField/ios/accessory@2x.png)\n\n<!-- /content-for -->\n\n### Text field with validation error\n\nUse to let merchants know if their input is valid or if there’s an error. Whenever possible, validate input as soon as merchants have finished interacting with a field (but not before). If a field already has an error, validate and remove errors as merchants type so they can immediately see when an error has been fixed.\n\n```jsx\nfunction ValidationErrorExample() {\n  const [textFieldValue, setTextFieldValue] = useState('');\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Store name\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      error=\"Store name is required\"\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n<!-- content-for: android -->\n\n![Text field with error](/images-from-old-styleguide/components/TextField/android/error@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Text field with error](/images-from-old-styleguide/components/TextField/ios/error@2x.png)\n\n<!-- /content-for -->\n\n### Text field with separate validation error\n\n<!-- example-for: web -->\n\nUse to let merchants know when their text field input is invalid in the context of a group of form inputs that the text field depends on.\n\nWhen the `error` prop has a boolean value of `true`, the text field component indicates to merchants that their input is invalid without rendering an error message directly below it. It anticipates that an inline error component exists separately within the form.\n\nTo render an invalid text field and its validation error separately:\n\n- Set a unique identifier on the text field component `id` prop\n- Set a boolean on the text field component `error` prop\n- Use an [inline error component](https://polaris.shopify.com/components/forms/inline-error) to describe the invalid text field input, and set its `fieldID` prop to be the same unique indentifier as the text field component’s `id`\n\n```jsx\nfunction SeparateValidationErrorExample() {\n  const [textFieldValue, setTextFieldValue] = useState('');\n  const [selectTypeValue, setSelectTypeValue] = useState('Product type');\n  const [selectConditionValue, setSelectConditionValue] =\n    useState('is equal to');\n\n  const handleTextFieldValueChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  const handleSelectTypeChange = useCallback(\n    (value) => setSelectTypeValue(value),\n    [],\n  );\n\n  const handleSelectConditionChange = useCallback(\n    (value) => setSelectConditionValue(value),\n    [],\n  );\n\n  const textFieldID = 'ruleContent';\n  const isInvalid = isValueInvalid(textFieldValue);\n  const errorMessage = isInvalid\n    ? 'Enter 3 or more characters for product type is equal to'\n    : '';\n\n  const formGroupMarkup = (\n    <Stack wrap={false} alignment=\"leading\" spacing=\"loose\">\n      <Stack.Item fill>\n        <FormLayout>\n          <FormLayout.Group condensed>\n            <Select\n              labelHidden\n              label=\"Collection rule type\"\n              options={['Product type']}\n              value={selectTypeValue}\n              onChange={handleSelectTypeChange}\n            />\n            <Select\n              labelHidden\n              label=\"Collection rule condition\"\n              options={['is equal to']}\n              value={selectConditionValue}\n              onChange={handleSelectConditionChange}\n            />\n            <TextField\n              labelHidden\n              label=\"Collection rule content\"\n              error={isInvalid}\n              id={textFieldID}\n              value={textFieldValue}\n              onChange={handleTextFieldValueChange}\n              autoComplete=\"off\"\n            />\n          </FormLayout.Group>\n        </FormLayout>\n        <div style={{marginTop: '4px'}}>\n          <InlineError message={errorMessage} fieldID={textFieldID} />\n        </div>\n      </Stack.Item>\n      <Button icon={DeleteMinor} accessibilityLabel=\"Remove item\" />\n    </Stack>\n  );\n\n  return (\n    <Card sectioned>\n      <FormLayout>{formGroupMarkup}</FormLayout>\n    </Card>\n  );\n\n  function isValueInvalid(content) {\n    if (!content) {\n      return true;\n    }\n\n    return content.length < 3;\n  }\n}\n```\n\n### Disabled text field\n\n<!-- example-for: web -->\n\nUse to show that a textfield is not available for interaction. Most often used in forms when information is required only in a particular state. For example, the text field next to Other in a choice list when Other is not selected.\n\n```jsx\n<TextField label=\"Store name\" disabled autoComplete=\"off\" />\n```\n\n### Text field with character count\n\n<!-- example-for: web -->\n\nUse to display the current number of characters in a text field. Use in conjunction with max length to display the current remaining number of characters in the text field.\n\n```jsx\nfunction TextFieldWithCharacterCountExample() {\n  const [textFieldValue, setTextFieldValue] = useState('Jaded Pixel');\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Store name\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      maxLength={20}\n      autoComplete=\"off\"\n      showCharacterCount\n    />\n  );\n}\n```\n\n### Text field with clear button\n\n<!-- example-for: web -->\n\nUse to allow merchants to clear the content from a text field.\n\n```jsx\nfunction TextFieldWithClearButtonExample() {\n  const [textFieldValue, setTextFieldValue] = useState('Jaded Pixel');\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  const handleClearButtonClick = useCallback(() => setTextFieldValue(''), []);\n\n  return (\n    <TextField\n      label=\"Store name\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      clearButton\n      onClearButtonClick={handleClearButtonClick}\n      autoComplete=\"off\"\n    />\n  );\n}\n```\n\n### Text field with monospaced font\n\n<!-- example-for: web -->\n\nUse to apply a monospaced font to the TextField\n\n```jsx\nfunction TextFieldWithMonospacedFontExample() {\n  const [textFieldValue, setTextFieldValue] = useState('Jaded Pixel');\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Store name\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      monospaced\n    />\n  );\n}\n```\n\n### Text field with value selected on focus\n\n<!-- example-for: web -->\n\nUse to select all text inside TextField on focus.\n\n```jsx\nfunction TextFieldWithSelectTextOnFocusExample() {\n  const [textFieldValue, setTextFieldValue] = useState('Jaded Pixel');\n\n  const handleTextFieldChange = useCallback(\n    (value) => setTextFieldValue(value),\n    [],\n  );\n\n  return (\n    <TextField\n      label=\"Store name\"\n      value={textFieldValue}\n      onChange={handleTextFieldChange}\n      selectTextOnFocus\n    />\n  );\n}\n```\n\n### Text field with inline suggestion\n\n<!-- example-for: web -->\n\nUse to provide an autocomplete suggestion inline with the input value. See the combobox component's tag multi-select example for full implementation of the inline autocomplete pattern.\n\n```jsx\nfunction TextFieldWithSuggestionExample() {\n  const suggestions = [\n    'Alabama',\n    'Alaska',\n    'American Samoa',\n    'Arizona',\n    'Arkansas',\n    'California',\n    'Colorado',\n    'Connecticut',\n    'Delaware',\n    'District of Columbia',\n    'Florida',\n    'Georgia',\n    'Guam',\n    'Hawaii',\n    'Idaho',\n    'Illinois',\n    'Indiana',\n    'Iowa',\n    'Kansas',\n    'Kentucky',\n    'Louisiana',\n    'Maine',\n    'Maryland',\n    'Massachusetts',\n    'Michigan',\n    'Minnesota',\n    'Minor Outlying Islands',\n    'Mississippi',\n    'Missouri',\n    'Montana',\n    'Nebraska',\n    'Nevada',\n    'New Hampshire',\n    'New Jersey',\n    'New Mexico',\n    'New York',\n    'North Carolina',\n    'North Dakota',\n    'Northern Mariana Islands',\n    'Ohio',\n    'Oklahoma',\n    'Oregon',\n    'Pennsylvania',\n    'Puerto Rico',\n    'Rhode Island',\n    'South Carolina',\n    'South Dakota',\n    'Tennessee',\n    'Texas',\n    'U.S. Virgin Islands',\n    'Utah',\n    'Vermont',\n    'Virginia',\n    'Washington',\n    'West Virginia',\n    'Wisconsin',\n    'Wyoming',\n  ];\n\n  const [value, setValue] = useState('');\n  const [suggestion, setSuggestion] = useState('');\n\n  const handleSuggestion = useCallback((nextValue) => {\n    const nextSuggestion = suggestions.find((suggestion) =>\n      suggestion.toLowerCase().startsWith(nextValue.toLowerCase()),\n    );\n\n    if (nextSuggestion) setSuggestion(nextSuggestion);\n  }, []);\n\n  useEffect(() => {\n    if (value !== suggestion) handleSuggestion(value);\n  }, [value]);\n\n  const handleChange = useCallback((value) => {\n    setValue(value);\n    setSuggestion('');\n  }, []);\n\n  const handleKeyDown = useCallback(\n    (event) => {\n      if (event.key === 'Enter') {\n        handleChange(suggestion);\n      }\n    },\n    [suggestion, handleChange],\n  );\n\n  return (\n    <div onKeyDown={handleKeyDown}>\n      <TextField\n        type=\"text\"\n        label=\"State\"\n        value={value}\n        onChange={handleChange}\n        suggestion={suggestion}\n      />\n    </div>\n  );\n}\n```\n\n---\n\n## Related components\n\n- To lay out the elements in a responsive form, [use the form layout component](https://polaris.shopify.com/components/forms/form-layout)\n- To describe an invalid form input with a separate validation error, [use the inline error component](https://polaris.shopify.com/components/forms/inline-error)\n- It’s common to [use a select component](https://polaris.shopify.com/components/forms/select) connected to the left or right of a text field.\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n### Structure\n\nScreen readers convey information about text fields automatically through native HTML.\n\n- Use the `disabled` prop to add the HTML `disabled` attribute to the text field.\n- Use the `readOnly` prop to add the HTML `readonly` attribute to the text field.\n- If you use the `type` prop, then some assistive technologies adapt the software keyboard to the current task. This helps merchants with mobility, vision, and cognitive issues to enter information more easily.\n\nUse the `id` prop to provide a unique `id` attribute value for the text field. If you don't provide an `id`, then the component generates one automatically. All text fields need to have unique `id` values.\n\n### Labeling\n\nThe `label` prop is required to convey the purpose of the checkbox to all merchants.\n\nIf there are separate visual cues that convey the purpose of the text field to sighted merchants, then the label can be visually hidden with the `labelHidden` prop.\n\nWhen you provide help text via the `helpText` prop or an inline error message via the `error` prop, the help or error content is conveyed to screen reader users with the `aria-describedby` attribute. This attribute causes the content to be read along with the label, either immediately or after a short delay.\n\nUse the `placeholder` prop to provide additional instructions. However, don’t rely on placeholders alone since the content isn’t always conveyed to all merchants.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Use the label to provide instructions critical to using the text field\n- Use help text and placeholder text to provide additional, non-critical instructions\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nUse the placeholder to provide information that’s required to use the text field.\n\n</div></div>\n\n### Keyboard support\n\nText fields have standard keyboard support.\n\n- Merchants who rely on the keyboard expect to move focus to each text field using the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)\n- If the `type` is set to `number`, then merchants can use the up and down arrow keys to adjust the value typed into the field\n- Using the `disabled` prop will prevent the text field from receive keyboard focus or inputs\n- The `readOnly` prop allows focus on the text field but prevents input or editing\n- The `inputMode` prop can be used to bring up a relevant keyboard for merchants on mobile; it’s passed down to the input as an [`inputmode` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode)\n\n#### Automatically focusing\n\nAlthough you can use the `autoFocus` prop to automatically move focus to the text field, it’s generally best to avoid focusing on fields automatically. The `autoFocus` prop is set to `false` by default and should only be used in cases where it won’t force focus to skip other controls or content of equal or greater importance.\n\n<!-- /content-for -->\n",
  "Text style": "\n\n# Text style\n\nText style enhances text with additional visual meaning. For example, using subdued text to de-emphasize it from its surrounding text.\n\n---\n\n## Best practices\n\nText style should be:\n\n- Used when enhancing the text to help merchants understand its meaning\n- Subdued if the text is less important than its surrounding text\n- Warning if the text denotes something that needs attention, or that merchants need to take action on.\n- Strong for input fields, or for a row total in a price table\n- Paired with symbols, like an arrow or dollar sign, when using positive or negative styles\n\n---\n\n## Examples\n\n### Subdued text style\n\nUse to de-emphasize a piece of text that is less important to merchants than other nearby text. May also be used to indicate when normal content is absent, for example, “No supplier listed”. Don’t use only for aesthetic effect.\n\n```jsx\n<TextStyle variation=\"subdued\">No supplier listed</TextStyle>\n```\n\n<!-- content-for: android -->\n\n![Subdued textstyle](/images-from-old-styleguide/components/TextStyle/android/subdued@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Subdued text style](/images-from-old-styleguide/components/TextStyle/ios/subdued@2x.png)\n\n<!-- /content-for -->\n\n### Strong text style\n\nUse to mark text representing user input, or to emphasize the totals row in a price table.\n\n```jsx\n<TextStyle variation=\"strong\">Total</TextStyle>\n```\n\n<!-- content-for: android -->\n\n![Strong text style](/images-from-old-styleguide/components/TextStyle/android/strong@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Strong text style](/images-from-old-styleguide/components/TextStyle/ios/strong@2x.png)\n\n<!-- /content-for -->\n\n### Positive text style\n\nUse in combination with a symbol showing an increasing value to indicate an upward trend.\n\n```jsx\n<TextStyle variation=\"positive\">Orders increased</TextStyle>\n```\n\n<!-- content-for: android -->\n\n![Positive text style](/images-from-old-styleguide/components/TextStyle/android/positive@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Positive text style](/images-from-old-styleguide/components/TextStyle/ios/positive@2x.png)\n\n<!-- /content-for -->\n\n### Negative text style\n\nUse in combination with a symbol showing a decreasing value to indicate a downward trend.\n\n```jsx\n<TextStyle variation=\"negative\">Orders decreased</TextStyle>\n```\n\n<!-- content-for: android -->\n\n![Negative text style](/images-from-old-styleguide/components/TextStyle/android/negative@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Negative text style](/images-from-old-styleguide/components/TextStyle/ios/negative@2x.png)\n\n<!-- /content-for -->\n\n### Warning text style\n\nUse to denote something that needs attention, or that merchants need to take action on.\n\n```jsx\n<TextStyle variation=\"warning\">Scheduled maintenance</TextStyle>\n```\n\n### Code text style\n\nUse to display inline snippets of code or code-like text.\n\n```jsx\n<p>\n  New URL that visitors should be forwarded to. If you want your store’s\n  homepage, enter <TextStyle variation=\"code\"> / </TextStyle> (a forward slash).\n</p>\n```\n\n<!-- content-for: android -->\n\n![Code text style](/images-from-old-styleguide/components/TextStyle/android/code@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Code text style](/images-from-old-styleguide/components/TextStyle/ios/code@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nDon’t rely on text style alone to convey information to merchants. Ensure that text styles are used to enhance the information provided in text.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n```\n<TextStyle variation=\"positive\">Orders increased</TextStyle>\n```\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n```\n<TextStyle variation=\"positive\">Orders</TextStyle>\n```\n\n</div></div>\n\n<!-- /content-for -->\n",
  "Thumbnail": "\n\n# Thumbnail\n\nUse thumbnails as a visual anchor and identifier for an object. They should be used along with text to provide context.\n\n---\n\n## Best practices\n\nOn web, thumbnails should:\n\n- Be one of 3 sizes:\n  - Small (40 × 40 px): use when the medium size is too large for the layout, or when the thumbnail has less importance.\n  - Medium (60 × 60 px): use as the default size.\n  - Large (80 × 80 px): use when an thumbnail is a major focal point. Avoid this size in lists of like items.\n\nOn Android and iOS, thumbnails should:\n\n- Be one of 2 sizes:\n  - Default (40 × 40): use as the default size.\n  - Large (72 × 72): use when an thumbnail is a major focal point. Avoid this size in lists of like items.\n\n---\n\n## Content guidelines\n\nAny time you use an image to communicate a concept on Shopify, it’s important to use descriptive [alt text](https://polaris.shopify.com/content/alternative-text). Doing this is important for [accessibility](https://polaris.shopify.com/foundations/internationalization) because it allows screen readers to describe what’s in the image to people who may not be able to see it.\n\nFor thumbnails, we recommend using a format that describes what will show in the image:\n\n- On web, `alt=\"Photo of {product}\"`. For example, “Photo of black t-shirt with cartoon tiger”.\n- On web, an empty `alt=\"\"` attribute ignores the image in assistive technologies such as screen readers, and may be used on decorative thumbnails.\n- On iOS, `imageView.accessibilityLabel = \"Photo of {product}\"`. For example, “Photo of black t-shirt with cartoon tiger”.\n- On Android, `android:contentDescription=\"Photo of {product}\"`. For example, “Photo of black t-shirt with cartoon tiger”.\n\n---\n\n## Examples\n\n### Default thumbnail\n\nUse as the default size.\n\n```jsx\n<Thumbnail\n  source=\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\"\n  alt=\"Black choker necklace\"\n/>\n```\n\n<!-- content-for: android -->\n\n![Default thumbnail](/images-from-old-styleguide/components/Thumbnail/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Default thumbnail](/images-from-old-styleguide/components/Thumbnail/ios/default@2x.png)\n\n<!-- /content-for -->\n\n### Small thumbnail\n\n<!-- example-for: web -->\n\nUse when the default size is too large for the layout, or when the thumbnail has less importance.\n\n```jsx\n<Thumbnail\n  source=\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\"\n  size=\"small\"\n  alt=\"Black choker necklace\"\n/>\n```\n\n### Large thumbnail\n\nUse when a thumbnail is a major focal point. Avoid this size in lists of like items.\n\n```jsx\n<Thumbnail\n  source=\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\"\n  size=\"large\"\n  alt=\"Black choker necklace\"\n/>\n```\n\n### Thumbnail with component source\n\nUse to render an icon inside of thumbnail.\n\n```jsx\n<Thumbnail source={NoteMinor} size=\"large\" alt=\"Small document\" />\n```\n\n<!-- content-for: android -->\n\n![Large thumbnail](/images-from-old-styleguide/components/Thumbnail/android/large@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Large thumbnail](/images-from-old-styleguide/components/Thumbnail/ios/large@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Related components\n\n- To present a thumbnail representation of an individual or business in the interface, [use the avatar component](https://polaris.shopify.com/components/images-and-icons/avatar)\n",
  "Toast": "\n\n# Toast\n\nThe toast component is a non-disruptive message that appears at the bottom of the interface to provide quick, at-a-glance feedback on the outcome of an action.\n\n---\n\n## Required components\n\nThe toast component must be wrapped in the [frame](https://polaris.shopify.com/components/structure/frame) component.\n\n---\n\n## Best practices\n\nToast should:\n\n- Be used for short messages to confirm an action\n- Not go over 3 words\n- Rarely be used for error messages\n\nWhen to use:\n\n- For success messages\n- Only for non-critical errors that are relevant in the moment and can be explained in 3 words. For example, if there’s an internet connection issue, the toast would say, Internet disconnected.\n\nWhen not to use:\n\n- Avoid using toast for error messages. Always try to use a banner to prominently inform merchants about persistent errors.\n\n---\n\n## Content guidelines\n\n### Message\n\nToast messages should be:\n\n- Short and affirmative\n- Written in the pattern of: noun + verb\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Product updated\n- Collection added\n- Customer updated\n- Internet disconnected\n- Connection timed out\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- No internet connection\n- Can’t charge negative tax rates\n- Your online store has a maximum of 20 themes. Delete unused themes to add more.\n- Your product has been successfully updated\n- We were unable to save the customer\n- Your Order was Archived Today\n- Discount: Saved successfully\n\n</div></div>\n\n### Toast with action\n\nOnly include an action in toast if the same action is available elsewhere on the page. For example:\n\n- If merchants need to reload a section, offer the call to action [Reload] in the toast. If they miss the toast message, they can also refresh the entire page.\n- If merchants delete an image, offer the option to [Undo] the deletion. If they miss it in the toast message, they can still retrieve it from somewhere else.\n\nAction should:\n\n- Keep the action label short, preferably 1 verb.\n- Not have actions, like [Cancel], for dismissing toast. The [X] to dismiss is already included in the component.\n- Be used with a duration of at least 10,000 milliseconds for accessibility.\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Undo\n- Change\n- Edit\n- View\n- Retry\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- OK\n- Got it\n- Cancel product\n- Continue to collection\n- Dismiss\n\n</div></div>\n\n---\n\n## Examples\n\n### Basic toast\n\n<!-- example-for: web -->\n\nUse to convey general confirmation or actions that aren’t critical. For example, you might show a toast message to inform the merchant that their recent action was successful.\n\n```jsx\nfunction ToastExample() {\n  const [active, setActive] = useState(false);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const toastMarkup = active ? (\n    <Toast content=\"Message sent\" onDismiss={toggleActive} />\n  ) : null;\n\n  return (\n    <div style={{height: '250px'}}>\n      <Frame>\n        <Page title=\"Toast example\">\n          <Button onClick={toggleActive}>Show Toast</Button>\n          {toastMarkup}\n        </Page>\n      </Frame>\n    </div>\n  );\n}\n```\n\n### Multiple toast messages\n\n<!-- example-for: web -->\n\nUse multiple toast messages to inform the merchant about distinct actions.\n\n```jsx\nfunction MultipleToastExample() {\n  const [activeOne, setActiveOne] = useState(false);\n  const [activeTwo, setActiveTwo] = useState(false);\n\n  const toggleActiveOne = useCallback(\n    () => setActiveOne((activeOne) => !activeOne),\n    [],\n  );\n\n  const toggleActiveTwo = useCallback(\n    () => setActiveTwo((activeTwo) => !activeTwo),\n    [],\n  );\n\n  const toastMarkup1 = activeOne ? (\n    <Toast content=\"Message sent\" onDismiss={toggleActiveOne} />\n  ) : null;\n\n  const toastMarkup2 = activeTwo ? (\n    <Toast content=\"Image uploaded\" onDismiss={toggleActiveTwo} />\n  ) : null;\n\n  return (\n    <div style={{height: '250px'}}>\n      <Frame>\n        <Page title=\"Toast example\">\n          <ButtonGroup segmented>\n            <Button onClick={toggleActiveOne}>Show toast 1</Button>\n            <Button onClick={toggleActiveTwo}>Show toast 2</Button>\n          </ButtonGroup>\n          {toastMarkup1}\n          {toastMarkup2}\n        </Page>\n      </Frame>\n    </div>\n  );\n}\n```\n\n### Toast with custom duration\n\n<!-- example-for: web -->\n\nUse to shorten or lengthen the default duration of 5000 milliseconds.\n\n```jsx\nfunction ToastWithCustomDurationExample() {\n  const [active, setActive] = useState(false);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const toastMarkup = active ? (\n    <Toast content=\"Message sent\" onDismiss={toggleActive} duration={4500} />\n  ) : null;\n\n  return (\n    <div style={{height: '250px'}}>\n      <Frame>\n        <Page title=\"Toast example\">\n          <Button onClick={toggleActive}>Show Toast</Button>\n          {toastMarkup}\n        </Page>\n      </Frame>\n    </div>\n  );\n}\n```\n\n### Toast with action\n\n<!-- example-for: web -->\n\nUse when a merchant has the ability to act on the message. For example, to undo a change or retry an action.\n\n```jsx\nfunction ToastWithActionExample() {\n  const [active, setActive] = useState(false);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const toastMarkup = active ? (\n    <Toast\n      content=\"Image deleted\"\n      action={{\n        content: 'Undo',\n        onAction: () => {},\n      }}\n      duration={10000}\n      onDismiss={toggleActive}\n    />\n  ) : null;\n\n  return (\n    <div style={{height: '250px'}}>\n      <Frame>\n        <Page title=\"Toast example\">\n          <Button onClick={toggleActive}>Show Toast</Button>\n          {toastMarkup}\n        </Page>\n      </Frame>\n    </div>\n  );\n}\n```\n\n### Default toast\n\n<!-- example-for: android, ios -->\n\nUse default toast for informative and neutral feedback.\n\n<!-- content-for: android -->\n\n![Default toast with neutral color](/images-from-old-styleguide/components/Toast/android/default@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nOn iOS, icons are available for cases where you want to re-inforce the message.\n\n![Default toast with neutral color](/images-from-old-styleguide/components/Toast/ios/default@2x.png)\n\n<!-- /content-for -->\n\n### Success toast\n\n<!-- example-for: android, ios -->\n\nUse success toast to indicate that something was successful. For example, a product was successfully updated.\n\n<!-- content-for: android -->\n\n![Success toast](/images-from-old-styleguide/components/Toast/android/success@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nOn iOS, icons are available for cases where you want to re-inforce the message.\n\n![Success toast](/images-from-old-styleguide/components/Toast/ios/success@2x.png)\n\n<!-- /content-for -->\n\n### Error toast\n\n<!-- example-for: android, ios, web -->\n\nAlthough error toast is still available and used in the system, we discourage its use. Reserve it for errors not caused by merchants, like a connection issue. Error toast should convey what went wrong in plain language and should not go over 3 words. For all other error message types, follow the [error message guidelines](https://polaris.shopify.com/experiences/error-messages).\n\n<!-- content-for: web -->\n\n```jsx\nfunction ErrorToastExample() {\n  const [active, setActive] = useState(false);\n\n  const toggleActive = useCallback(() => setActive((active) => !active), []);\n\n  const toastMarkup = active ? (\n    <Toast content=\"Server error\" error onDismiss={toggleActive} />\n  ) : null;\n\n  return (\n    <div style={{height: '250px'}}>\n      <Frame>\n        <Page title=\"Toast example\">\n          <Button onClick={toggleActive}>Show Toast</Button>\n          {toastMarkup}\n        </Page>\n      </Frame>\n    </div>\n  );\n}\n```\n\n<!-- /content-for -->\n\n<!-- content-for: android -->\n\n![Error toast](/images-from-old-styleguide/components/Toast/android/error@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nOn iOS, icons are available for cases where you want to re-inforce the message.\n\n![Error toast](/images-from-old-styleguide/components/Toast/ios/error@2x.png)\n\n<!-- /content-for -->\n\n### With action\n\n<!-- example-for: android, ios -->\n\nUse action when merchants have the ability to act on the message. For example, to undo a change or retry an action. Keep the action label short, preferably 1 verb action.\n\n<!-- content-for: android -->\n\n![Default toast with action to undo](/images-from-old-styleguide/components/Toast/android/default-action@2x.png)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n![Default toast with action to undo](/images-from-old-styleguide/components/Toast/ios/default-action@2x.png)\n\n<!-- /content-for -->\n\n---\n\n## Related components\n\n- To present a small amount of content or a menu of actions in a non-blocking overlay, [use the popover component](https://polaris.shopify.com/components/overlays/popover)\n- To communicate a change or condition that needs the merchant’s attention within the context of a page, [use the banner component](https://polaris.shopify.com/components/feedback-indicators/banner)\n\n---\n\n## Accessibility\n\n <!-- content-for: web -->\n\nThe content of the toast component is implemented as an ARIA live region using `aria-live=\"polite\"`. When the toast appears, screen readers should announce the toast text after any other more pressing announcements.\n\nAvoid using toast for critical information that merchants need to act on immediately. Toast might be difficult for merchants with low vision or low dexterity to access because it:\n\n- Disappears automatically\n- Can’t be easily accessed with the keyboard\n- Might appear outside the proximity of the merchant’s current focus\n\n### Toast with action\n\nMake sure that merchants can also accomplish the action in the toast another way, since the toast action may be difficult to access for some merchants. If the toast action is not available somewhere else on the page, for example a retry action that reloads a section, it should have a fallback action, for example a browser refresh.\n\nToast with action should persist for at least 10,000 milliseconds to give the merchant enough time to act on it.\n\n <!-- /content-for -->\n",
  "Tooltip": "\n\n# Tooltip\n\nTooltips are floating labels that briefly explain the function of a user\ninterface element. They can be triggered when merchants hover, focus, tap, or\nclick.\n\n---\n\n## Best practices\n\nTooltips should:\n\n- Provide useful, additional information or clarification.\n- Succinctly describe or expand on the element they point to.\n- Be provided for icon-only buttons or a button with an associated keyboard\n  shortcut.\n- Not be used to communicate critical information, including errors in forms or\n  other interaction feedback.\n- Not contain any links or buttons.\n- Be used sparingly. If you’re building something that requires a lot of\n  tooltips, work on clarifying the design and the language in the experience.\n\n---\n\n## Content guidelines\n\n### Basic tooltips\n\nTooltips should:\n\n- Be written in sentence case\n- Be concise and scannable\n- Not be used to communicate error messages or important account information\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\nPost reach is the number of people who have seen your post in their News Feed.\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\nTo continue using Shopify, this amount must be paid immediately.\n\n</div></div>\n\n---\n\n## Examples\n\n### Default tooltip\n\nUse only when necessary to provide an explanation for an interface element.\n\n```jsx\n<div style={{padding: '75px 0'}}>\n  <Tooltip active content=\"This order has shipping labels.\">\n    <TextStyle variation=\"strong\">Order #1001</TextStyle>\n  </Tooltip>\n</div>\n```\n\n### Tooltip visible only with child interaction\n\nUse when the tooltip overlays interactive elements when active, for example a form input. The `dismissOnMouseOut` prop prevents the tooltip from remaining active when mouse hover or focus leaves its `children` and enters the tooltip's content.\n\n```jsx\n<div style={{width: '200px'}}>\n  <ButtonGroup segmented fullWidth>\n    <Tooltip content=\"Bold\" dismissOnMouseOut>\n      <Button>B</Button>\n    </Tooltip>\n    <Tooltip content=\"Italic\" dismissOnMouseOut>\n      <Button>I</Button>\n    </Tooltip>\n    <Tooltip content=\"Underline\" dismissOnMouseOut>\n      <Button>U</Button>\n    </Tooltip>\n    <Tooltip content=\"Strikethrough\" dismissOnMouseOut>\n      <Button>S</Button>\n    </Tooltip>\n  </ButtonGroup>\n  <TextField label=\"Product title\" autoComplete=\"off\" labelHidden multiline />\n</div>\n```\n\n---\n\n## Related components\n\n- To make helpful content more visible to merchants, use the help text portions of form components such as [text fields](https://polaris.shopify.com/components/forms/text-field), [footer help](https://polaris.shopify.com/components/titles-and-text/footer-help), or [an inline link to help](https://polaris.shopify.com/components/navigation/link)\n",
  "Top bar": "\n\n# Top bar\n\nThe top bar is a header component that allows merchants to search, access menus, and navigate by clicking on the logo. It’s always visible at the top of interfaces like Shopify or Shopify Plus. Third-party apps that use the top bar can customize the color to match their brand using the [app provider](https://polaris.shopify.com/components/structure/app-provider) component and are required to use their own logo.\n\n---\n\n## Required components\n\nThe top bar component must be passed to the [frame](https://polaris.shopify.com/components/structure/frame) component.\n\n---\n\n## Best practices\n\nThe top bar component should:\n\n- Not provide global navigation for an application\n  - Use the [navigation component](https://polaris.shopify.com/components/structure/navigation) instead\n- Include search to help merchants find resources and navigate an application\n- Include a user menu component to indicate the logged-in merchant and provide them with global actions\n- Provide a color through the [app provider](https://polaris.shopify.com/components/structure/app-provider) component to style the background\n- The global menu text should contrast with the rest of the top bar and pass the minimum contrast ratio of the WCAG 2.0 guidelines\n- Use an SVG file for the logo\n- Use a logo that passes the minimum contrast ratio of the WCAG 2.0 guidelines when compared to the top bar background color\n- Show the navigation toggle so it appears on small screen\n\n---\n\n## Content guidelines\n\n### Placeholder content\n\nThe placeholder content for the search field should:\n\n- Always say \"Search\"\n- Never include an ellipsis\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n#### Do\n\n- Search\n\n</div><div class=\"usage-list-part\">\n\n#### Don’t\n\n- search...\n\n</div></div>\n\n---\n\n<a name=\"subcomponent-menu\"></a>\n\n## Top bar menu\n\nA component that composes together an activator and a popover containing an action list to create a dropdown menu.\n\n### Menu properties\n\n| Prop             | Type                          | Description                                                                                        |\n| ---------------- | ----------------------------- | -------------------------------------------------------------------------------------------------- |\n| activatorContent | React.ReactNode               | Accepts an activator component that renders inside of a button that opens the menu                 |\n| actions          | ActionListProps['sections']   | An array of action objects that are rendered inside of a popover triggered by this menu            |\n| message          | [MessageProps](#type-message) | Accepts a message that facilitates direct, urgent communication with the merchant through the menu |\n| open             | boolean                       | A boolean property indicating whether the menu is currently open                                   |\n| onOpen()         | function                      | A callback function to handle opening the menu popover                                             |\n| onClose()        | function                      | A callback function to handle closing the menu popover                                             |\n\n<a name=\"subcomponent-user-menu\"></a>\n\n## Top bar user menu\n\nA specialized menu component that is activated by a user avatar.\n\n### Menu properties\n\n| Prop       | Type                          | Description                                                                                             |\n| ---------- | ----------------------------- | ------------------------------------------------------------------------------------------------------- |\n| actions    | {items: IconableAction[]}[]   | An array of action objects that are rendered inside of a popover triggered by this menu                 |\n| message    | [MessageProps](#type-message) | Accepts a message that facilitates direct, urgent communication with the merchant through the user menu |\n| name       | string                        | A string detailing the merchant’s full name to be displayed in the user menu                            |\n| detail     | string                        | A string allowing further details on the merchant’s name displayed in the user menu                     |\n| initials   | AvatarProps['initials']       | The merchant’s initials, rendered in place of an avatar image when not provided                         |\n| avatar     | AvatarProps['source']         | An avatar image representing the merchant                                                               |\n| open       | boolean                       | A boolean property indicating whether the user menu is currently open                                   |\n| onToggle() | function                      | A callback function to handle opening and closing the user menu                                         |\n\n<a name=\"type-message\"></a>\n\n### Top bar menu message\n\n#### Message properties\n\n| Prop        | Type                                            | Description                               |\n| ----------- | ----------------------------------------------- | ----------------------------------------- |\n| title       | string                                          | A title for the message                   |\n| description | string                                          | A description for the message             |\n| action      | {onClick(): void; content: string}              | An action to render near the message      |\n| link        | {to: string; content: string}                   | A link to view the content of the message |\n| badge       | {content: string; status: BadgeProps['status']} | A badge to render near the message        |\n\n---\n\n<a name=\"subcomponent-search-field\"></a>\n\n## Top bar search field\n\nA text field component that is tailor-made for a search use-case.\n\n### Search field properties\n\n| Prop                    | Type     | Description                                                                      |\n| ----------------------- | -------- | -------------------------------------------------------------------------------- |\n| value                   | string   | Initial value for the input                                                      |\n| placeholder             | string   | Hint text to display                                                             |\n| focused                 | boolean  | Force the focus state on the input                                               |\n| active                  | boolean  | Force a state where search is active but the text field component is not focused |\n| onChange(value: string) | function | Callback when value is changed                                                   |\n| onFocus()               | function | Callback when input is focused                                                   |\n| onBlur()                | function | Callback when focus is removed                                                   |\n\n---\n\n## Examples\n\n### Top bar with all of its elements\n\nUse to provide structure for the top of an application. Style the top bar component using the app provider component with a theme. Providing just the `background` key for the top bar component theme will result in intelligent defaults being set for complementary colors with contrasting text.\n\n```jsx\nfunction TopBarExample() {\n  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);\n  const [isSecondaryMenuOpen, setIsSecondaryMenuOpen] = useState(false);\n  const [isSearchActive, setIsSearchActive] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n\n  const toggleIsUserMenuOpen = useCallback(\n    () => setIsUserMenuOpen((isUserMenuOpen) => !isUserMenuOpen),\n    [],\n  );\n\n  const toggleIsSecondaryMenuOpen = useCallback(\n    () => setIsSecondaryMenuOpen((isSecondaryMenuOpen) => !isSecondaryMenuOpen),\n    [],\n  );\n\n  const handleSearchResultsDismiss = useCallback(() => {\n    setIsSearchActive(false);\n    setSearchValue('');\n  }, []);\n\n  const handleSearchChange = useCallback((value) => {\n    setSearchValue(value);\n    setIsSearchActive(value.length > 0);\n  }, []);\n\n  const handleNavigationToggle = useCallback(() => {\n    console.log('toggle navigation visibility');\n  }, []);\n\n  const logo = {\n    width: 124,\n    topBarSource:\n      'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-color.svg?6215648040070010999',\n    url: 'http://jadedpixel.com',\n    accessibilityLabel: 'Jaded Pixel',\n  };\n\n  const userMenuMarkup = (\n    <TopBar.UserMenu\n      actions={[\n        {\n          items: [{content: 'Back to Shopify', icon: ArrowLeftMinor}],\n        },\n        {\n          items: [{content: 'Community forums'}],\n        },\n      ]}\n      name=\"Dharma\"\n      detail=\"Jaded Pixel\"\n      initials=\"D\"\n      open={isUserMenuOpen}\n      onToggle={toggleIsUserMenuOpen}\n    />\n  );\n\n  const searchResultsMarkup = (\n    <ActionList\n      items={[{content: 'Shopify help center'}, {content: 'Community forums'}]}\n    />\n  );\n\n  const searchFieldMarkup = (\n    <TopBar.SearchField\n      onChange={handleSearchChange}\n      value={searchValue}\n      placeholder=\"Search\"\n      showFocusBorder\n    />\n  );\n\n  const secondaryMenuMarkup = (\n    <TopBar.Menu\n      activatorContent={\n        <span>\n          <Icon source={QuestionMarkMajor} />\n          <VisuallyHidden>Secondary menu</VisuallyHidden>\n        </span>\n      }\n      open={isSecondaryMenuOpen}\n      onOpen={toggleIsSecondaryMenuOpen}\n      onClose={toggleIsSecondaryMenuOpen}\n      actions={[\n        {\n          items: [{content: 'Community forums'}],\n        },\n      ]}\n    />\n  );\n\n  const topBarMarkup = (\n    <TopBar\n      showNavigationToggle\n      userMenu={userMenuMarkup}\n      secondaryMenu={secondaryMenuMarkup}\n      searchResultsVisible={isSearchActive}\n      searchField={searchFieldMarkup}\n      searchResults={searchResultsMarkup}\n      onSearchResultsDismiss={handleSearchResultsDismiss}\n      onNavigationToggle={handleNavigationToggle}\n    />\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Frame topBar={topBarMarkup} logo={logo} />\n    </div>\n  );\n}\n```\n\n### Top bar themed with colorScheme\n\nProvide specific keys and corresponding colors to the top bar theme for finer control. When giving more than just the `background`, providing all keys is necessary to prevent falling back to default colors.\n\n```jsx\nfunction TopBarExample() {\n  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);\n  const [isSearchActive, setIsSearchActive] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n  const [isDarkTheme, setIsDarkTheme] = useState(false);\n\n  const toggleIsUserMenuOpen = useCallback(\n    () => setIsUserMenuOpen((isUserMenuOpen) => !isUserMenuOpen),\n    [],\n  );\n\n  const handleThemeChange = useCallback(\n    () => setIsDarkTheme((isDarkTheme) => !isDarkTheme),\n    [],\n  );\n\n  const handleSearchResultsDismiss = useCallback(() => {\n    setIsSearchActive(false);\n    setSearchValue('');\n  }, []);\n\n  const handleSearchChange = useCallback((value) => {\n    setSearchValue(value);\n    setIsSearchActive(value.length > 0);\n  }, []);\n\n  const handleNavigationToggle = useCallback(() => {\n    console.log('toggle navigation visibility');\n  }, []);\n\n  const theme = {\n    colors: {\n      surface: '#FFFFFF',\n      onsurface: '#212B36',\n    },\n    colorScheme: isDarkTheme ? 'dark' : 'light',\n  };\n\n  const logo = {\n    width: 124,\n    topBarSource: `data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 446 92.6' fill='%23${\n      isDarkTheme ? 'fff' : '000'\n    }'%3E%3Cpath d='M112.2 51.6c-2.8-1.5-4.2-2.8-4.2-4.5 0-2.2 2-3.7 5.1-3.7 3.6 0 6.9 1.5 6.9 1.5l2.5-7.8s-2.3-1.8-9.2-1.8c-9.6 0-16.3 5.5-16.3 13.2 0 4.4 3.1 7.7 7.3 10.1 3.3 1.9 4.5 3.3 4.5 5.3 0 2.1-1.7 3.7-4.8 3.7-4.6 0-9-2.4-9-2.4L92.3 73s4 2.7 10.8 2.7c9.9 0 17-4.9 17-13.6 0-4.7-3.6-8-7.9-10.5zM151.5 35.2c-4.9 0-8.7 2.3-11.6 5.8l-.2-.1 4.2-22.1h-11L122.3 75h11l3.7-19.2c1.4-7.3 5.2-11.7 8.7-11.7 2.5 0 3.4 1.7 3.4 4.1 0 1.5-.2 3.3-.5 4.9l-4.1 22h11l4.3-22.7c.5-2.4.8-5.3.8-7.2-.1-6.3-3.3-10-9.1-10zM185.4 35.2c-13.2 0-22 12-22 25.3 0 8.5 5.3 15.4 15.1 15.4 13 0 21.8-11.6 21.8-25.3 0-7.9-4.6-15.4-14.9-15.4zM180 67.4c-3.7 0-5.3-3.2-5.3-7.2 0-6.3 3.3-16.6 9.2-16.6 3.9 0 5.2 3.3 5.2 6.6 0 6.8-3.3 17.2-9.1 17.2zM228.4 35.2c-7.4 0-11.6 6.5-11.6 6.5h-.2l.6-5.9h-9.7c-.5 4-1.4 10-2.2 14.6l-7.6 40.2h11l3-16.3h.2s2.3 1.4 6.5 1.4c12.9 0 21.4-13.2 21.4-26.6 0-7.3-3.3-13.9-11.4-13.9zm-10.5 32.3c-2.9 0-4.5-1.6-4.5-1.6l1.8-10.3c1.3-6.9 4.9-11.4 8.7-11.4 3.3 0 4.4 3.1 4.4 6.1 0 7.1-4.2 17.2-10.4 17.2zM255.5 19.4c-3.5 0-6.3 2.8-6.3 6.4 0 3.3 2.1 5.5 5.2 5.5h.2c3.4 0 6.4-2.3 6.5-6.4-.2-3.2-2.3-5.5-5.6-5.5zM240.1 75h11l7.5-38.9h-11.1zM286.5 36h-7.6l.4-1.8c.6-3.7 2.9-7.1 6.5-7.1 2 0 3.5.6 3.5.6l2.2-8.6s-1.9-1-6-1c-3.9 0-7.8 1.1-10.8 3.7-3.7 3.2-5.5 7.8-6.4 12.4L268 36h-5.1l-1.6 8.3h5.1L260.6 75h11l5.8-30.8h7.6l1.5-8.2zM313 36.1s-6.9 17.3-10 26.8h-.2c-.2-3-2.7-26.8-2.7-26.8h-11.6l6.6 35.8c.2.8.1 1.3-.2 1.8-1.3 2.5-3.4 4.9-6 6.6-2.1 1.5-4.4 2.5-6.2 3.1l3 9.3c2.2-.5 6.9-2.3 10.8-6 5-4.7 9.6-12 14.4-21.8l13.5-28.8H313zM54.3 10.8s-1 .3-2.7.8c-.3-.9-.7-2-1.3-3.2-1.9-3.6-4.7-5.6-8.1-5.6h-.7c-.1-.1-.2-.2-.3-.4C39.7.8 37.8.1 35.6.1 31.2.2 26.9 3.4 23.4 9c-2.5 3.9-4.4 8.9-4.9 12.7-5 1.6-8.5 2.6-8.6 2.7-2.5.8-2.6.9-2.9 3.3-.3 1.8-6.9 53-6.9 53l55 9.5V10.7c-.4 0-.7.1-.8.1zm-12.7 3.9c-2.9.9-6.1 1.9-9.3 2.9.9-3.4 2.6-6.8 4.7-9.1.8-.8 1.9-1.8 3.1-2.3 1.3 2.5 1.5 6.1 1.5 8.5zM35.7 3.2c1 0 1.9.2 2.6.7-1.2.6-2.3 1.5-3.4 2.6-2.8 3-4.9 7.6-5.7 12.1-2.6.8-5.2 1.6-7.6 2.4C23 13.9 28.9 3.4 35.7 3.2zm-8.5 40c.3 4.7 12.6 5.7 13.3 16.6.5 8.6-4.6 14.5-11.9 15-8.8.6-13.7-4.7-13.7-4.7l1.9-8s4.9 3.7 8.8 3.4c2.6-.2 3.5-2.2 3.4-3.7-.4-6.1-10.4-5.7-11-15.8-.5-8.4 5-17 17.2-17.8 4.7-.3 7.1.9 7.1.9l-2.8 10.5s-3.1-1.4-6.8-1.2c-5.5.5-5.6 3.9-5.5 4.8zm17.3-29.4c0-2.2-.3-5.3-1.3-7.9 3.3.6 4.9 4.4 5.6 6.6-1.3.4-2.7.8-4.3 1.3zm12.3 76.3l22.8-5.7S69.8 18 69.7 17.6c-.1-.5-.5-.7-.8-.7-.3 0-6.7-.1-6.7-.1s-3.9-3.8-5.4-5.2v78.5zM347.7 35.4c-5.7 0-10.3 2-13.6 5.8l.6-3.3c.2-1.1-.5-1.9-1.6-1.9s-2.1.9-2.3 1.9L321 88.7c-.2 1.1.5 1.9 1.6 1.9s2.1-.9 2.3-1.9l3.6-18.9c1.3 2.4 4.4 5.7 11.4 5.7 5.5 0 10-1.7 13.6-5 3.7-3.4 6.2-8.5 7.5-15.1 1.3-6.6.7-11.7-1.7-15.1-2.2-3.2-6.1-4.9-11.6-4.9zm-7 36.6c-8.3 0-11.6-5.7-9.5-16.5 2.1-10.9 7.4-16.5 15.6-16.5 9 0 12.4 5.4 10.2 16.5-2.1 11.2-7.3 16.5-16.3 16.5zm91.6-18.7c-4.9-1.8-9.6-3.5-8.7-8.1.4-2.3 2.3-6.2 9.9-6.2 4.2 0 6.9 1.2 9.2 4 .4.5.9.5 1.1.5 1 0 1.9-.8 2.1-1.8.1-.5 0-.8-.2-1.2-2.4-3.4-6.2-5.1-11.6-5.1-7.7 0-13.3 3.7-14.4 9.7-1.4 7.2 5 9.6 10.6 11.7 4.9 1.8 9.4 3.6 8.6 8-1.2 6.2-7.7 7.1-11.5 7.1-5.2 0-8.4-1.4-10.8-4.7-.3-.4-.7-.5-1.1-.5-.9 0-1.9.7-2.1 1.8-.1.5 0 .8.2 1.2 1.6 2.9 6.2 5.8 13.1 5.8 8.8 0 14.8-4 16.1-10.7 1.4-7.1-4.9-9.5-10.5-11.5zm-11.8-28h-4.1l.8-4.1c.2-1.1-.5-1.9-1.6-1.9s-2.1.9-2.3 1.9l-.8 4.1h-4.1c-1.1 0-2.1.9-2.3 1.9-.2 1.1.5 1.9 1.6 1.9h4.1l-.8 4.1c-.2 1.1.5 1.9 1.6 1.9s2.1-.9 2.3-1.9l.8-4.1h4.1c1.1 0 2.1-.9 2.3-1.9.2-1-.5-1.9-1.6-1.9zm-9 14.3c-1.1 0-2.1.9-2.3 1.9l-3.7 19.3c-2 9.8-8.1 11.2-13.7 11.2-10.2 0-10.4-5.8-9.4-11.5l4.4-22.7c.2-1.1-.5-1.9-1.6-1.9s-2.1.9-2.3 1.9l-4.4 22.7c-.9 4.6-.6 8 1 10.4 1.9 3.1 5.8 4.6 11.6 4.6s10.3-1.6 13.4-4.6c2.5-2.4 4.1-5.9 5-10.4l3.7-19c.1-1-.6-1.9-1.7-1.9zm-35.1-20.2c-1.1 0-2.1.9-2.3 1.9l-10 51.8c-.2 1.1.5 1.9 1.6 1.9s2.1-.9 2.3-1.9l10-51.8c.2-1-.5-1.9-1.6-1.9z'/%3E%3C/svg%3E`,\n    url: 'https://plus.shopify.com',\n    accessibilityLabel: 'Shopify Plus',\n  };\n\n  const userMenuMarkup = (\n    <TopBar.UserMenu\n      actions={[\n        {\n          items: [{content: 'Back to Shopify Plus', icon: ArrowLeftMinor}],\n        },\n        {\n          items: [{content: 'Community forums'}],\n        },\n      ]}\n      name=\"Scott\"\n      detail=\"Snow Devil\"\n      initials=\"S\"\n      open={isUserMenuOpen}\n      onToggle={toggleIsUserMenuOpen}\n    />\n  );\n\n  const searchResultsMarkup = (\n    <ActionList\n      items={[{content: 'Shopify help center'}, {content: 'Community forums'}]}\n    />\n  );\n\n  const searchFieldMarkup = (\n    <TopBar.SearchField\n      onChange={handleSearchChange}\n      value={searchValue}\n      placeholder=\"Search\"\n      showFocusBorder\n    />\n  );\n\n  const topBarMarkup = (\n    <TopBar\n      showNavigationToggle\n      userMenu={userMenuMarkup}\n      searchResultsVisible={isSearchActive}\n      searchField={searchFieldMarkup}\n      searchResults={searchResultsMarkup}\n      onSearchResultsDismiss={handleSearchResultsDismiss}\n      onNavigationToggle={handleNavigationToggle}\n    />\n  );\n\n  return (\n    <div style={{height: '250px'}}>\n      <Frame topBar={topBarMarkup} logo={logo}>\n        <Button onClick={handleThemeChange}>\n          Toggle between dark and light themes\n        </Button>\n      </Frame>\n    </div>\n  );\n}\n```\n\n---\n\n## Related components\n\n- To provide the structure for the top bar component, as well as the primary navigation use the [frame](https://polaris.shopify.com/components/structure/frame) component.\n- To display the primary navigation within the frame of an application, use the [navigation](https://polaris.shopify.com/components/structure/navigation) component.\n- To tell merchants their options once they have made changes to a form on the page use the [contextual save bar](https://polaris.shopify.com/components/forms/contextual-save-bar) component.\n- To provide quick, at-a-glance feedback on the outcome of an action, use the [toast](https://polaris.shopify.com/components/feedback-indicators/toast) component.\n- To indicate to merchants that a page is loading or an upload is processing use the [loading](https://polaris.shopify.com/components/feedback-indicators/loading) component.\n",
  "Video thumbnail": "\n\n# Video thumbnail\n\nVideo thumbnails are a clickable placeholder image. When clicked, it opens a video player within a modal or full screen.\n\n---\n\n## Best practices\n\nVideo thumbnails should:\n\n- Be used with a media card\n- Use an image that communicates the subject of the video\n- Include a video timestamp\n- Capture an image from the video to give a preview of the video content\n- Be cropped to a 16:9 aspect ratio\n- Be centered on the subject and avoid cropping of important details, like a person’s head\n\n---\n\n## Examples\n\n### Basic video thumbnail\n\nUse as a play button for a video player within a media card.\n\n```jsx\n<MediaCard\n  title=\"Turn your side-project into a business\"\n  primaryAction={{\n    content: 'Learn more',\n    onAction: () => {},\n  }}\n  description={`In this course, you’ll learn how the Kular family turned their mom’s recipe book into a global business.`}\n  popoverActions={[{content: 'Dismiss', onAction: () => {}}]}\n>\n  <VideoThumbnail\n    videoLength={80}\n    thumbnailUrl=\"https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850\"\n  />\n</MediaCard>\n```\n\n### Video thumbnail with progress\n\nUse to indicate the video’s play progress in relation to its duration.\n\n```jsx\n<MediaCard\n  title=\"Turn your side-project into a business\"\n  primaryAction={{\n    content: 'Learn more',\n    onAction: () => {},\n  }}\n  description={`In this course, you’ll learn how the Kular family turned their mom’s recipe book into a global business.`}\n  popoverActions={[{content: 'Dismiss', onAction: () => {}}]}\n>\n  <VideoThumbnail\n    videoLength={80}\n    videoProgress={45}\n    showVideoProgress\n    thumbnailUrl=\"https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850\"\n  />\n</MediaCard>\n```\n\n---\n\n## Required components\n\n- The video thumbnail should be wrapped in the [media card](https://polaris.shopify.com/components/structure/media-card) component.\n\n---\n\n## Related components\n\n- To present a small visual anchor for an object, [use the thumbnail component](https://polaris.shopify.com/components/images-and-icons/thumbnail)\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nImages included in video thumbnails are implemented as decorative background images so that they’re skipped by screen readers.\n\nThe play button is keyboard accessible and the `aria-label` includes a timestamp when the `videoLength` prop is set. For example, an 80 second video reads as “Play video of length 1 minute and 20 seconds”. If no `videoLength` prop is provided, the default label reads “Play video”.\n\n<!-- /content-for -->\n",
  "Visually hidden": "\n\n# Visually hidden\n\nUse when an element needs to be available to assistive technology (for example, a screen reader) but otherwise hidden.\n\n---\n\n## Best practices\n\nVisually hidden should:\n\n- Not be used if semantic markup can make content understandable to people using assistive technology\n- Be used to provide extra context when semantic markup isn’t enough\n- Be used on any content that is normally present but is being omitted\n- Make sense in context when used with a screen reader\n\n---\n\n## Examples\n\n### Visually hidden heading\n\nAlways provide a heading for a major page section such as a card. In rare cases the heading is visually redundant and the meaning is conveyed by context. Rather than omit the heading, wrap the heading in the visually hidden component.\n\n```jsx\n<Card sectioned>\n  <VisuallyHidden>\n    <Heading>Title and description</Heading>\n  </VisuallyHidden>\n  <FormLayout>\n    <TextField\n      label=\"Title\"\n      value=\"Artisanal Wooden Spoon\"\n      onChange={() => {}}\n      autoComplete=\"off\"\n    />\n    <TextField\n      label=\"Description\"\n      multiline\n      onChange={() => {}}\n      autoComplete=\"off\"\n    />\n  </FormLayout>\n</Card>\n```\n\n### Visually hidden table headers\n\nWhenever one or more table columns has no need for a visible header, hide the header content rather than omitting it. Note that due to browser quirks the visually hidden component must go inside each `<th>`.\n\n```jsx\n<table>\n  <thead>\n    <tr>\n      <th scope=\"col\">\n        <VisuallyHidden>Line item</VisuallyHidden>\n      </th>\n      <th scope=\"col\">\n        <VisuallyHidden>Value</VisuallyHidden>\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th scope=\"row\">Subtotal</th>\n      <td>$184.13</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Tax</th>\n      <td>$0.00</td>\n    </tr>\n    <tr>\n      <th scope=\"row\">Total</th>\n      <td>$184.13</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n---\n\n## Accessibility\n\n<!-- content-for: android -->\n\nSee Material Design and development documentation about accessibility for Android:\n\n- [Accessible design on Android](https://material.io/design/usability/accessibility.html)\n- [Accessible development on Android](https://developer.android.com/guide/topics/ui/accessibility/)\n\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\nSee Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:\n\n- [Accessible design on iOS](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/)\n- [Accessible development on iOS](https://developer.apple.com/accessibility/ios/)\n\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\nThe visually hidden component styles text so that it’s not visible, but it is available to assistive technologies like screen readers and other text to speech programs.\n\nThe component shouldn’t be used to hide interactive content.\n\n<!-- /content-for -->\n"
}