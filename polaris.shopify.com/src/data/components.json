{
  "AccountConnection": {
    "name": "Account connection",
    "category": "Actions",
    "keywords": [
      "AccountConnection",
      "connect",
      "account",
      "sign-up",
      "default account connection",
      "disconnection",
      "authorize",
      "third-party accounts",
      "integrate",
      "facebook",
      "social media"
    ],
    "readme": "<h1 id=\"account-connection\">Account connection</h1>\n<p>The account connection component is used so merchants can connect or disconnect\ntheir store to various accounts. For example, if merchants want to use the\nFacebook sales channel, they need to connect their Facebook\naccount to their Shopify store.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The account component should:</p>\n<ul>\n<li>Be placed at the top of the Account page for the relevant sales channel</li>\n<li>Identify the name of the platform or service merchants can connect to</li>\n<li>Show whether the account is connected or disconnected so that merchants can easily connect or disconnect an account</li>\n<li>Include a link to the relevant sales channel or platform terms and conditions,\nincluding information about any charges or fees that merchants may incur by\nusing the channel or platform</li>\n<li>Link to terms and conditions, which should open up on the sales channel\ndeveloper’s website in a new browser window</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"title\">Title</h3>\n<p>The account connection title should be the name of the platform or service that\nmerchants can connect to, followed by the word “account”. Write account connection titles in sentence case (capitalize the first word and proper nouns only).</p>\n<h4 id=\"for-example\">For example:</h4>\n<ul>\n<li>Facebook account</li>\n<li>Mailchimp account</li>\n<li>Instagram account</li>\n</ul>\n\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Facebook account</li>\n<li>Instagram account</li>\n</ul>\n<h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>Connect your Account</li>\n<li>Instagram Account</li>\n</ul>\n<h3 id=\"terms-and-conditions\">Terms and conditions</h3>\n<p>Clearly link to your terms and conditions and let merchants know about any additional costs of your service.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>By clicking Connect, you agree to accept Sample’s terms and conditions.</li>\n<li>You’ll pay a commission rate of 15% on sales made through Sample.</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<p>Learn about terms, conditions, and payment details.</p>\n</div></div>\n\n<h3 id=\"connect-button\">Connect button</h3>\n<p>Always use the verb Connect in the button of the account connection component. When merchants click or tap “Connect” it should open up your platform or service’s authorization page in a new browser window.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-2\">Do</h4>\n<p>Connect</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-2\">Don’t</h4>\n<p>Connect to app</p>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-account-connection\">Default account connection</h3>\n<p>Use to let merchants connect or disconnect their store to their third-party accounts, like Facebook.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">AccountConnectionExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [connected, setConnected] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> accountName = connected ? <span class=\"hljs-string\">&#x27;Jane Appleseed&#x27;</span> : <span class=\"hljs-string\">&#x27;&#x27;</span>;</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleAction = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">setConnected</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">connected</span>) =&gt;</span> !connected);\n  }, [connected]);</p>\n<p>  <span class=\"hljs-keyword\">const</span> buttonText = connected ? <span class=\"hljs-string\">&#x27;Disconnect&#x27;</span> : <span class=\"hljs-string\">&#x27;Connect&#x27;</span>;\n  <span class=\"hljs-keyword\">const</span> details = connected ? <span class=\"hljs-string\">&#x27;Account connected&#x27;</span> : <span class=\"hljs-string\">&#x27;No account connected&#x27;</span>;\n  <span class=\"hljs-keyword\">const</span> terms = connected ? <span class=\"hljs-literal\">null</span> : (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n      By clicking <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">strong</span>&gt;</span>Connect<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">strong</span>&gt;</span>, you agree to accept Sample App’s{&#x27; &#x27;}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">&quot;Example App&quot;</span>&gt;</span>terms and conditions<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>. You’ll pay a\n      commission rate of 15% on sales made through Sample App.\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AccountConnection</span>\n      <span class=\"hljs-attr\">accountName</span>=<span class=\"hljs-string\">{accountName}</span>\n      <span class=\"hljs-attr\">connected</span>=<span class=\"hljs-string\">{connected}</span>\n      <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Example App&quot;</span>\n      <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">content:</span> <span class=\"hljs-attr\">buttonText</span>,\n        <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleAction</span>,\n      }}\n      <span class=\"hljs-attr\">details</span>=<span class=\"hljs-string\">{details}</span>\n      <span class=\"hljs-attr\">termsOfService</span>=<span class=\"hljs-string\">{terms}</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: web -->\n\n<p>See accessibility guidance for the <a href=\"https://polaris.shopify.com/components/actions/setting-toggle\">setting toggle component</a> to turn connections on and off.</p>\n<!-- /content-for-->\n"
  },
  "ActionList": {
    "name": "Action list",
    "category": "Actions",
    "keywords": [
      "ActionList",
      "dropdown",
      "drop down",
      "popover",
      "pop over",
      "menu",
      "drop-down",
      "select",
      "options"
    ],
    "readme": "<h1 id=\"action-list\">Action list</h1>\n<p>Action lists render a list of actions or selectable options. This component is usually placed inside a <a href=\"https://polaris.shopify.com/components/overlays/popover\">popover container</a> to create a dropdown menu or to let merchants select from a list of options.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Actions lists should:</p>\n<ul>\n<li>Be used for secondary or less important information and actions since they’re hidden until merchants expose them by opening a popover</li>\n<li>Contain actions that are related to each other</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"action-lists\">Action lists</h3>\n<p>Each item in an action list should be clear and predictable. Merchants should be able to anticipate what will happen when they click on an action item.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<p>Buy shipping label</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<p>Buy</p>\n</div></div>\n\n<p>Each item in an action list should always lead with a strong verb that encourages action. To provide enough context use the {verb}+{noun} format unless the action is clear with a single verb.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Rename</li>\n<li>Edit HTML</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>File name changes</li>\n<li>HTML editing options</li>\n</ul>\n</div></div>\n\n<p>Each item in an action list should be scannable avoiding unnecessary words and articles such as the, an, or a.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-2\">Do</h4>\n<ul>\n<li>Add menu item</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-2\">Don’t</h4>\n<ul>\n<li>Add a menu item</li>\n</ul>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"action-list-in-a-popover\">Action list in a popover</h3>\n<p>Use for the least important actions so merchants aren’t distracted by secondary tasks. Can also be used for a set of actions that won’t fit in the available screen space.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ActionListInPopoverExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toggleActive = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">active</span>) =&gt;</span> !active), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleImportedAction = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Imported action&#x27;</span>),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleExportedAction = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Exported action&#x27;</span>),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> activator = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleActive}</span> <span class=\"hljs-attr\">disclosure</span>&gt;</span>\n      More actions\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">250px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Popover</span>\n        <span class=\"hljs-attr\">active</span>=<span class=\"hljs-string\">{active}</span>\n        <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{activator}</span>\n        <span class=\"hljs-attr\">autofocusTarget</span>=<span class=\"hljs-string\">&quot;first-node&quot;</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{toggleActive}</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ActionList</span>\n          <span class=\"hljs-attr\">actionRole</span>=<span class=\"hljs-string\">&quot;menuitem&quot;</span>\n          <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n            {\n              <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Import</span> <span class=\"hljs-attr\">file</span>&#x27;,\n              <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleImportedAction</span>,\n            },\n            {\n              <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Export</span> <span class=\"hljs-attr\">file</span>&#x27;,\n              <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleExportedAction</span>,\n            },\n          ]}\n        /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Popover</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"action-list-with-icons-or-image\">Action list with icons or image</h3>\n<p>Use when the items benefit from an associated action or image, such as a list of products.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ActionListWithMediaExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toggleActive = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">active</span>) =&gt;</span> !active), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> activator = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleActive}</span> <span class=\"hljs-attr\">disclosure</span>&gt;</span>\n      More actions\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">200px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Popover</span>\n        <span class=\"hljs-attr\">active</span>=<span class=\"hljs-string\">{active}</span>\n        <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{activator}</span>\n        <span class=\"hljs-attr\">autofocusTarget</span>=<span class=\"hljs-string\">&quot;first-node&quot;</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{toggleActive}</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ActionList</span>\n          <span class=\"hljs-attr\">actionRole</span>=<span class=\"hljs-string\">&quot;menuitem&quot;</span>\n          <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n            {<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Import</span> <span class=\"hljs-attr\">file</span>&#x27;, <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ImportMinor</span>},\n            {<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Export</span> <span class=\"hljs-attr\">file</span>&#x27;, <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ExportMinor</span>},\n          ]}\n        /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Popover</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"action-list-with-an-icon-and-a-suffix\">Action list with an icon and a suffix</h3>\n<p>Use when the items benefit from an associated action or image, such as a list of products.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ActionListWithSuffixExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toggleActive = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">active</span>) =&gt;</span> !active), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> activator = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleActive}</span> <span class=\"hljs-attr\">disclosure</span>&gt;</span>\n      More actions\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">200px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Popover</span>\n        <span class=\"hljs-attr\">active</span>=<span class=\"hljs-string\">{active}</span>\n        <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{activator}</span>\n        <span class=\"hljs-attr\">autofocusTarget</span>=<span class=\"hljs-string\">&quot;first-node&quot;</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{toggleActive}</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ActionList</span>\n          <span class=\"hljs-attr\">actionRole</span>=<span class=\"hljs-string\">&quot;menuitem&quot;</span>\n          <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n            {\n              <span class=\"hljs-attr\">active:</span> <span class=\"hljs-attr\">true</span>,\n              <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Import</span> <span class=\"hljs-attr\">file</span>&#x27;,\n              <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ImportMinor</span>,\n              <span class=\"hljs-attr\">suffix:</span> &lt;<span class=\"hljs-attr\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{TickSmallMinor}</span> /&gt;</span>,\n            },\n            {content: &#x27;Export file&#x27;, icon: ExportMinor},\n          ]}\n        /&gt;\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Popover</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"sectioned-action-list\">Sectioned action list</h3>\n<p>Use when the items benefit from sections to help differentiate actions.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SectionedActionListExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toggleActive = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">active</span>) =&gt;</span> !active), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> activator = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleActive}</span> <span class=\"hljs-attr\">disclosure</span>&gt;</span>\n      More actions\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">250px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Popover</span>\n        <span class=\"hljs-attr\">active</span>=<span class=\"hljs-string\">{active}</span>\n        <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{activator}</span>\n        <span class=\"hljs-attr\">autofocusTarget</span>=<span class=\"hljs-string\">&quot;first-node&quot;</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{toggleActive}</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ActionList</span>\n          <span class=\"hljs-attr\">actionRole</span>=<span class=\"hljs-string\">&quot;menuitem&quot;</span>\n          <span class=\"hljs-attr\">sections</span>=<span class=\"hljs-string\">{[</span>\n            {\n              <span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">File</span> <span class=\"hljs-attr\">options</span>&#x27;,\n              <span class=\"hljs-attr\">items:</span> [\n                {<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Import</span> <span class=\"hljs-attr\">file</span>&#x27;, <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ImportMinor</span>},\n                {<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Export</span> <span class=\"hljs-attr\">file</span>&#x27;, <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ExportMinor</span>},\n              ],\n            },\n            {\n              <span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Bulk</span> <span class=\"hljs-attr\">actions</span>&#x27;,\n              <span class=\"hljs-attr\">items:</span> [\n                {<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Edit</span>&#x27;, <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">EditMinor</span>},\n                {<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Delete</span>&#x27;, <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">DeleteMinor</span>},\n              ],\n            },\n          ]}\n        /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Popover</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"action-list-with-destructive-item\">Action list with destructive item</h3>\n<p>Use to visually indicate that an action list item is destructive.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ActionListWithDestructiveItemExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toggleActive = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">active</span>) =&gt;</span> !active), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> activator = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleActive}</span> <span class=\"hljs-attr\">disclosure</span>&gt;</span>\n      More actions\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">250px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Popover</span>\n        <span class=\"hljs-attr\">active</span>=<span class=\"hljs-string\">{active}</span>\n        <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{activator}</span>\n        <span class=\"hljs-attr\">autofocusTarget</span>=<span class=\"hljs-string\">&quot;first-node&quot;</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{toggleActive}</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ActionList</span>\n          <span class=\"hljs-attr\">actionRole</span>=<span class=\"hljs-string\">&quot;menuitem&quot;</span>\n          <span class=\"hljs-attr\">sections</span>=<span class=\"hljs-string\">{[</span>\n            {\n              <span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">File</span> <span class=\"hljs-attr\">options</span>&#x27;,\n              <span class=\"hljs-attr\">items:</span> [\n                {\n                  <span class=\"hljs-attr\">active:</span> <span class=\"hljs-attr\">true</span>,\n                  <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Import</span> <span class=\"hljs-attr\">file</span>&#x27;,\n                  <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ImportMinor</span>,\n                },\n                {<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Export</span> <span class=\"hljs-attr\">file</span>&#x27;, <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ExportMinor</span>},\n                {\n                  <span class=\"hljs-attr\">destructive:</span> <span class=\"hljs-attr\">true</span>,\n                  <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Delete</span> <span class=\"hljs-attr\">file</span>&#x27;,\n                  <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">DeleteMinor</span>,\n                },\n              ],\n            },\n          ]}\n        /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Popover</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"action-list-with-help-text\">Action list with help text</h3>\n<p>Use help text when the normal Verb noun syntax for the actions does not provide sufficient context for the merchant.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ActionListWithHelpTextExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toggleActive = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">active</span>) =&gt;</span> !active), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> activator = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleActive}</span> <span class=\"hljs-attr\">disclosure</span>&gt;</span>\n      More actions\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">250px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Popover</span>\n        <span class=\"hljs-attr\">active</span>=<span class=\"hljs-string\">{active}</span>\n        <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{activator}</span>\n        <span class=\"hljs-attr\">autofocusTarget</span>=<span class=\"hljs-string\">&quot;first-node&quot;</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{toggleActive}</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ActionList</span>\n          <span class=\"hljs-attr\">actionRole</span>=<span class=\"hljs-string\">&quot;menuitem&quot;</span>\n          <span class=\"hljs-attr\">sections</span>=<span class=\"hljs-string\">{[</span>\n            {\n              <span class=\"hljs-attr\">items:</span> [\n                {\n                  <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Blog</span> <span class=\"hljs-attr\">posts</span>&#x27;,\n                  <span class=\"hljs-attr\">helpText:</span> &#x27;<span class=\"hljs-attr\">Manage</span> <span class=\"hljs-attr\">your</span> <span class=\"hljs-attr\">blog</span> <span class=\"hljs-attr\">articles</span>&#x27;,\n                },\n                {\n                  <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Blogs</span>&#x27;,\n                  <span class=\"hljs-attr\">helpText:</span> &#x27;<span class=\"hljs-attr\">Manage</span> <span class=\"hljs-attr\">blogs</span> <span class=\"hljs-attr\">published</span> <span class=\"hljs-attr\">to</span> <span class=\"hljs-attr\">your</span> <span class=\"hljs-attr\">Online</span> <span class=\"hljs-attr\">Store</span>&#x27;,\n                },\n              ],\n            },\n          ]}\n        /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Popover</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"action-list-with-a-prefix-and-a-suffix\">Action list with a prefix and a suffix</h3>\n<p>Use help text when the normal Verb noun syntax for the actions does not provide sufficient context for the merchant.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ActionListWithPrefixSuffixExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">250px</span>&#x27;, <span class=\"hljs-attr\">maxWidth:</span> &#x27;<span class=\"hljs-attr\">350px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ActionList</span>\n        <span class=\"hljs-attr\">actionRole</span>=<span class=\"hljs-string\">&quot;menuitem&quot;</span>\n        <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n          {\n            <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Go</span> <span class=\"hljs-attr\">here</span>&#x27;,\n            <span class=\"hljs-attr\">prefix:</span> (\n              &lt;<span class=\"hljs-attr\">Thumbnail</span>\n                <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">&quot;<a href=\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\">https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg</a>&quot;</span>\n                <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;small&quot;</span>\n                <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;Black leather pet collar&quot;</span>\n              /&gt;</span>\n            ),\n            suffix: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{ChevronRightMinor}</span> /&gt;</span>,\n          },\n          {\n            content: &#x27;Or there&#x27;,\n            prefix: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Avatar</span> <span class=\"hljs-attr\">customer</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Farrah&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;small&quot;</span> /&gt;</span>,\n            suffix: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{ChevronRightMinor}</span> /&gt;</span>,\n          },\n        ]}\n      /&gt;\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To combine more than one button in a single layout, <a href=\"https://polaris.shopify.com/components/actions/button-group\">use the button group component</a></li>\n<li>To display a list of related content, <a href=\"https://polaris.shopify.com/components/lists-and-tables/list\">use the list component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>Items in an action list are organized as list items (<code>&lt;li&gt;</code>) in an unordered list (<code>&lt;ul&gt;</code>) and are conveyed as a group of related elements to assistive technology users. Each item is implemented as a <a href=\"https://polaris.shopify.com/components/actions/button\">button</a>.</p>\n<h3 id=\"keyboard-support\">Keyboard support</h3>\n<ul>\n<li>Give the action list items keyboard focus with the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)</li>\n<li>When action list items have a role of <code>menuitem</code>, navigate through the list with <kbd>down arrow</kbd> (<kbd>up arrow</kbd> to move backwards)</li>\n<li>Activate buttons with the <kbd>enter</kbd>/<kbd>return</kbd> key or the <kbd>space</kbd> key</li>\n</ul>\n<h3 id=\"high-contrast-support\">High contrast support</h3>\n<ul>\n<li>Each item is clearly discernible in high contrast mode</li>\n<li>Each item that is focused and hovered is clearly discernible in high contrast mode</li>\n</ul>\n<!-- /content-for -->\n"
  },
  "AppProvider": {
    "name": "App provider",
    "category": "Structure",
    "keywords": [
      "app",
      "provider",
      "appprovider",
      "internationalization",
      "i18n",
      "localization",
      "context",
      "translate",
      "translation",
      "application wrapper",
      "wrapper",
      "sdk"
    ],
    "omitAppProvider": true,
    "readme": "<h1 id=\"app-provider\">App provider</h1>\n<p>App provider is a required component that enables sharing global settings throughout the hierarchy of your application.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The app provider component is required to use Polaris. Without it, the components in your application will not function correctly. You must wrap the root (the top) of your application in the app provider component.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default\">Default</h3>\n<p>AppProvider works by default without any additional options passed to it.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">AppProvider</span>\n  i18n={{\n    <span class=\"hljs-title class_\">Polaris</span>: {\n      <span class=\"hljs-title class_\">ResourceList</span>: {\n        <span class=\"hljs-attr\">sortingLabel</span>: <span class=\"hljs-string\">&#x27;Sort by&#x27;</span>,\n        <span class=\"hljs-attr\">defaultItemSingular</span>: <span class=\"hljs-string\">&#x27;item&#x27;</span>,\n        <span class=\"hljs-attr\">defaultItemPlural</span>: <span class=\"hljs-string\">&#x27;items&#x27;</span>,\n        <span class=\"hljs-attr\">showing</span>: <span class=\"hljs-string\">&#x27;Showing {itemsCount} {resource}&#x27;</span>,\n        <span class=\"hljs-title class_\">Item</span>: {\n          <span class=\"hljs-attr\">viewItem</span>: <span class=\"hljs-string\">&#x27;View details for {itemName}&#x27;</span>,\n        },\n      },\n      <span class=\"hljs-title class_\">Common</span>: {\n        <span class=\"hljs-attr\">checkbox</span>: <span class=\"hljs-string\">&#x27;checkbox&#x27;</span>,\n      },\n    },\n  }}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Page</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ResourceList</span>\n        <span class=\"hljs-attr\">showHeader</span>\n        <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n          {\n            <span class=\"hljs-attr\">id:</span> <span class=\"hljs-attr\">341</span>,\n            <span class=\"hljs-attr\">url:</span> &#x27;<span class=\"hljs-attr\">customers</span>/<span class=\"hljs-attr\">341</span>&#x27;,\n            <span class=\"hljs-attr\">name:</span> &#x27;<span class=\"hljs-attr\">Mae</span> <span class=\"hljs-attr\">Jemison</span>&#x27;,\n            <span class=\"hljs-attr\">location:</span> &#x27;<span class=\"hljs-attr\">Decatur</span>, <span class=\"hljs-attr\">USA</span>&#x27;,\n          },\n          {\n            <span class=\"hljs-attr\">id:</span> <span class=\"hljs-attr\">256</span>,\n            <span class=\"hljs-attr\">url:</span> &#x27;<span class=\"hljs-attr\">customers</span>/<span class=\"hljs-attr\">256</span>&#x27;,\n            <span class=\"hljs-attr\">name:</span> &#x27;<span class=\"hljs-attr\">Ellen</span> <span class=\"hljs-attr\">Ochoa</span>&#x27;,\n            <span class=\"hljs-attr\">location:</span> &#x27;<span class=\"hljs-attr\">Los</span> <span class=\"hljs-attr\">Angeles</span>, <span class=\"hljs-attr\">USA</span>&#x27;,\n          },\n        ]}\n        <span class=\"hljs-attr\">renderItem</span>=<span class=\"hljs-string\">{(item)</span> =&gt;</span> {\n          const {id, url, name, location} = item;\n          const media = <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Avatar</span> <span class=\"hljs-attr\">customer</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;medium&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">{name}</span> /&gt;</span>;</p>\n<pre><code>      return (\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ResourceList.Item&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{id}&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{url}&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{media}&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;TextStyle&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;variation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;strong&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;{name}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;TextStyle&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;{location}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ResourceList.Item&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      );\n    }}\n  /&amp;gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Card&lt;/span&gt;&amp;gt;&lt;/span&gt;\n</code></pre>\n<p>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Page</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">AppProvider</span>&gt;\n</pre></code></p>\n<h3 id=\"with-i18n\">With i18n</h3>\n<p>With an <code>i18n</code>, <code>AppProvider</code> will provide these translations to polaris components. See <a href=\"https://polaris.shopify.com/components/structure/app-provider#using-translations\">using translations</a></p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">AppProvider</span>\n  i18n={{\n    <span class=\"hljs-title class_\">Polaris</span>: {\n      <span class=\"hljs-title class_\">Common</span>: {\n        <span class=\"hljs-attr\">checkbox</span>: <span class=\"hljs-string\">&#x27;case à cocher&#x27;</span>,\n      },\n      <span class=\"hljs-title class_\">ResourceList</span>: {\n        <span class=\"hljs-attr\">sortingLabel</span>: <span class=\"hljs-string\">&#x27;Trier par&#x27;</span>,\n        <span class=\"hljs-attr\">showing</span>: <span class=\"hljs-string\">&#x27;{itemsCount} {resource} affichés&#x27;</span>,\n        <span class=\"hljs-attr\">defaultItemPlural</span>: <span class=\"hljs-string\">&#x27;articles&#x27;</span>,\n        <span class=\"hljs-attr\">defaultItemSingular</span>: <span class=\"hljs-string\">&#x27;article&#x27;</span>,\n        <span class=\"hljs-title class_\">Item</span>: {\n          <span class=\"hljs-attr\">viewItem</span>: <span class=\"hljs-string\">&quot;Afficher les détails de l&#x27;{itemName}&quot;</span>,\n        },\n      },\n    },\n  }}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Page</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ResourceList</span>\n        <span class=\"hljs-attr\">showHeader</span>\n        <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n          {\n            <span class=\"hljs-attr\">id:</span> <span class=\"hljs-attr\">341</span>,\n            <span class=\"hljs-attr\">url:</span> &#x27;<span class=\"hljs-attr\">customers</span>/<span class=\"hljs-attr\">341</span>&#x27;,\n            <span class=\"hljs-attr\">name:</span> &#x27;<span class=\"hljs-attr\">Mae</span> <span class=\"hljs-attr\">Jemison</span>&#x27;,\n            <span class=\"hljs-attr\">location:</span> &#x27;<span class=\"hljs-attr\">Decatur</span>, <span class=\"hljs-attr\">USA</span>&#x27;,\n          },\n          {\n            <span class=\"hljs-attr\">id:</span> <span class=\"hljs-attr\">256</span>,\n            <span class=\"hljs-attr\">url:</span> &#x27;<span class=\"hljs-attr\">customers</span>/<span class=\"hljs-attr\">256</span>&#x27;,\n            <span class=\"hljs-attr\">name:</span> &#x27;<span class=\"hljs-attr\">Ellen</span> <span class=\"hljs-attr\">Ochoa</span>&#x27;,\n            <span class=\"hljs-attr\">location:</span> &#x27;<span class=\"hljs-attr\">Los</span> <span class=\"hljs-attr\">Angeles</span>, <span class=\"hljs-attr\">USA</span>&#x27;,\n          },\n        ]}\n        <span class=\"hljs-attr\">renderItem</span>=<span class=\"hljs-string\">{(item)</span> =&gt;</span> {\n          const {id, url, name, location} = item;\n          const media = <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Avatar</span> <span class=\"hljs-attr\">customer</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;medium&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">{name}</span> /&gt;</span>;</p>\n<pre><code>      return (\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ResourceList.Item&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{id}&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;url&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{url}&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{media}&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;\n            &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;TextStyle&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;variation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;strong&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;{name}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;TextStyle&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;{location}&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ResourceList.Item&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      );\n    }}\n  /&amp;gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Card&lt;/span&gt;&amp;gt;&lt;/span&gt;\n</code></pre>\n<p>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Page</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">AppProvider</span>&gt;\n</pre></code></p>\n<h3 id=\"with-linkcomponent\">With linkComponent</h3>\n<p>With a <code>linkComponent</code>, the app provider component will override the links used in other components. For example you may want to use the <code>Link</code> component provided by <code>react-router</code> throughout your application instead of the default <code>a</code> tag.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">AppProviderLinkExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">CustomLinkComponent</span> = (<span class=\"hljs-params\">{children, url, ...rest}</span>) =&gt; {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>\n        <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">{url}</span>\n        <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> console.log(&#x27;Custom link clicked&#x27;)}\n        {...rest}\n      &gt;\n        {children}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span>\n    );\n  };</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppProvider</span>\n      <span class=\"hljs-attr\">linkComponent</span>=<span class=\"hljs-string\">{CustomLinkComponent}</span>\n      <span class=\"hljs-attr\">i18n</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">Polaris:</span> {\n          <span class=\"hljs-attr\">Page:</span> {\n            <span class=\"hljs-attr\">Header:</span> {\n              <span class=\"hljs-attr\">rollupButton:</span> &#x27;<span class=\"hljs-attr\">Actions</span>&#x27;,\n            },\n          },\n        },\n      }}\n    &gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Page</span>\n        <span class=\"hljs-attr\">breadcrumbs</span>=<span class=\"hljs-string\">{[{content:</span> &#x27;<span class=\"hljs-attr\">Products</span>&#x27;, <span class=\"hljs-attr\">url:</span> &#x27;#&#x27;}]}\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Jar With Lock-Lid&quot;</span>\n        <span class=\"hljs-attr\">primaryAction</span>=<span class=\"hljs-string\">{{content:</span> &#x27;<span class=\"hljs-attr\">Save</span>&#x27;, <span class=\"hljs-attr\">disabled:</span> <span class=\"hljs-attr\">true</span>}}\n        <span class=\"hljs-attr\">secondaryActions</span>=<span class=\"hljs-string\">{[</span>\n          {<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Duplicate</span>&#x27;, <span class=\"hljs-attr\">url:</span> &#x27;#&#x27;},\n          {<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">View</span> <span class=\"hljs-attr\">on</span> <span class=\"hljs-attr\">your</span> <span class=\"hljs-attr\">store</span>&#x27;, <span class=\"hljs-attr\">url:</span> &#x27;#&#x27;},\n        ]}\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Page content<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Page</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">AppProvider</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"with-color-scheme\">With color scheme</h3>\n<p>With a <code>colorScheme</code>, the app provider component will set the root color scheme for the App (such as: light or dark).For <code>colorScheme</code> configuration, see the <a href=\"https://polaris.shopify.com/components/structure/custom-properties\">CustomProperties</a> component documentation.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">AppProviderThemeExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [isDirty, setIsDirty] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [searchFieldValue, setSearchFieldValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleSearchChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">searchFieldValue</span>) =&gt;</span> <span class=\"hljs-title function_\">setSearchFieldValue</span>(searchFieldValue),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> toggleIsDirty = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setIsDirty</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">isDirty</span>) =&gt;</span> !isDirty),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> contentStatus = isDirty ? <span class=\"hljs-string\">&#x27;Disable&#x27;</span> : <span class=\"hljs-string\">&#x27;Enable&#x27;</span>;\n  <span class=\"hljs-keyword\">const</span> textStatus = isDirty ? <span class=\"hljs-string\">&#x27;enabled&#x27;</span> : <span class=\"hljs-string\">&#x27;disabled&#x27;</span>;</p>\n<p>  <span class=\"hljs-keyword\">const</span> pageMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Page</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Account&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SettingToggle</span>\n            <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">{{</span>\n              <span class=\"hljs-attr\">content:</span> <span class=\"hljs-attr\">contentStatus</span>,\n              <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">toggleIsDirty</span>,\n            }}\n            <span class=\"hljs-attr\">enabled</span>=<span class=\"hljs-string\">{isDirty}</span>\n          &gt;</span>\n            This setting is{&#x27; &#x27;}\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextStyle</span> <span class=\"hljs-attr\">variation</span>=<span class=\"hljs-string\">&quot;strong&quot;</span>&gt;</span>{textStatus}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextStyle</span>&gt;</span>.\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">SettingToggle</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Page</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> contextualSaveBarMarkup = isDirty ? (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ContextualSaveBar</span>\n      <span class=\"hljs-attr\">message</span>=<span class=\"hljs-string\">&quot;Unsaved changes&quot;</span>\n      <span class=\"hljs-attr\">saveAction</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">toggleIsDirty</span>,\n      }}\n      <span class=\"hljs-attr\">discardAction</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">toggleIsDirty</span>,\n      }}\n    /&gt;</span></span>\n  ) : <span class=\"hljs-literal\">null</span>;</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">250px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppProvider</span>\n        <span class=\"hljs-attr\">colorScheme</span>=<span class=\"hljs-string\">&quot;dark&quot;</span>\n        <span class=\"hljs-attr\">i18n</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">Polaris:</span> {\n            <span class=\"hljs-attr\">Frame:</span> {<span class=\"hljs-attr\">skipToContent:</span> &#x27;<span class=\"hljs-attr\">Skip</span> <span class=\"hljs-attr\">to</span> <span class=\"hljs-attr\">content</span>&#x27;},\n            <span class=\"hljs-attr\">ContextualSaveBar:</span> {\n              <span class=\"hljs-attr\">save:</span> &#x27;<span class=\"hljs-attr\">Save</span>&#x27;,\n              <span class=\"hljs-attr\">discard:</span> &#x27;<span class=\"hljs-attr\">Discard</span>&#x27;,\n            },\n            <span class=\"hljs-attr\">TopBar:</span> {\n              <span class=\"hljs-attr\">SearchField:</span> {\n                <span class=\"hljs-attr\">clearButtonLabel:</span> &#x27;<span class=\"hljs-attr\">Clear</span>&#x27;,\n                <span class=\"hljs-attr\">search:</span> &#x27;<span class=\"hljs-attr\">Search</span>&#x27;,\n              },\n            },\n          },\n        }}\n      &gt;</span>\n        {contextualSaveBarMarkup}\n        {pageMarkup}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">AppProvider</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<hr>\n<h2 id=\"using-translations\">Using translations</h2>\n<p>Translations are provided in the locales folder. When using Polaris, you are able to import translations from all languages supported by the core Shopify product and consume them through the <code>i18n</code> prop.</p>\n<p>If a project has only one locale, then you can pass the JSON content from the locale file into <code>AppProvider</code>.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">AppProvider</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@shopify/polaris&#x27;</span>;\n<span class=\"hljs-comment\">// en.json is English. Replace with fr.json for French, etc</span>\n<span class=\"hljs-keyword\">import</span> translations <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@shopify/polaris/locales/en.json&#x27;</span>;</p>\n<p><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppProvider</span> <span class=\"hljs-attr\">i18n</span>=<span class=\"hljs-string\">{translations}</span>&gt;</span>{/* App content */}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">AppProvider</span>&gt;</span></span>;\n}\n</pre></code></p>\n<p>If a project supports multiple locales, then load them dynamically using <a href=\"https://github.com/Shopify/quilt/tree/master/packages/react-i18n#translation\"><code>@shopify/react-i18n</code></a>. This ensures that you load only the translations you need.</p>\n<pre><code class=\"language-jsx\">import AppProvider from &#39;@shopify/polaris&#39;;\n// en.json is English. Replace with fr.json for French, etc\nimport translations from &#39;@shopify/polaris/locales/en.json&#39;;\nimport {useI18n} from &#39;@shopify/react-i18n&#39;;\n\nfunction App() {\n  const [i18n] = useI18n({\n    id: &#39;Polaris&#39;,\n    fallback: translations,\n    translations(locale) {\n      return import(\n        /* webpackChunkName: &quot;Polaris-i18n&quot;, webpackMode: &quot;lazy-once&quot; */ `@shopify/polaris/locales/${locale}.json`\n      ).then((dictionary) =&gt; dictionary &amp;&amp; dictionary.default);\n    },\n  });\n\n  // i18n.translations is an array of translation dictionaries, where the first\n  // dictionary is the desired language, and the second is the fallback.\n  return (\n    &lt;AppProvider i18n={i18n.translations}&gt;{/* App content */}&lt;/AppProvider&gt;\n  );\n}\n</code></pre>\n<hr>\n<h2 id=\"using-linkcomponent\">Using linkComponent</h2>\n<p>By default Polaris renders <code>&lt;Link&gt;</code> elements (and action objects) as <code>&lt;a&gt;</code> tags. That works well for simple one-page demos. However for more complex multi-page applications that use a router such as <a href=\"https://reacttraining.com/react-router/web\"><code>react-router</code></a> you will want links to use the components provided by your router. If you don&#39;t then every link will be an <code>&lt;a&gt;</code> tag and thus trigger a whole page refresh instead of navigating client-side.</p>\n<p>The <code>linkComponent</code> prop allows you to customise how links behave within Polaris by allowing you to inject your router&#39;s own Link component. The following example demonstrates using react-router&#39;s <code>Link</code> component.</p>\n<pre><code class=\"language-jsx\">import {BrowserRouter, Link as ReactRouterLink} from &#39;react-router-dom&#39;;\n\nfunction App() {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;AppProvider linkComponent={Link}&gt;\n        {/* App content including your &lt;Route&gt; components */}\n      &lt;/AppProvider&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n\nconst IS_EXTERNAL_LINK_REGEX = /^(?:[a-z][a-z\\d+.-]*:|\\/\\/)/;\n\nfunction Link({children, url = &#39;&#39;, external, ref, ...rest}) {\n  // react-router only supports links to pages it can handle itself. It does not\n  // support arbirary links, so anything that is not a path-based link should\n  // use a reglar old `a` tag\n  if (external || IS_EXTERNAL_LINK_REGEX.test(url)) {\n    rest.target = &#39;_blank&#39;;\n    rest.rel = &#39;noopener noreferrer&#39;;\n    return (\n      &lt;a href={url} {...rest}&gt;\n        {children}\n      &lt;/a&gt;\n    );\n  }\n\n  return (\n    &lt;ReactRouterLink to={url} {...rest}&gt;\n      {children}\n    &lt;/ReactRouterLink&gt;\n  );\n}\n</code></pre>\n<hr>\n<h2 id=\"testing-components\">Testing components</h2>\n<p>You must include Polaris context in your tests when you use Polaris components.</p>\n<p>To make this easier for you, we’ve provided:</p>\n<ul>\n<li>a PolarisTestProvider component to provide the Polaris contexts for you</li>\n</ul>\n"
  },
  "Autocomplete": {
    "name": "Autocomplete",
    "category": "Forms",
    "keywords": [
      "autocomplete",
      "searchable",
      "typeahead",
      "combobox",
      "listbox"
    ],
    "readme": "<h1 id=\"autocomplete\">Autocomplete</h1>\n<p>The autocomplete component is an input field that provides selectable suggestions as a merchant types into it. It allows merchants to quickly search through and select from large collections of options. It&#39;s a convenience wrapper around the <code>Combobox</code> and <code>Listbox</code> components with minor UI differences.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The autocomplete component should:</p>\n<ul>\n<li>Be clearly labeled so it’s obvious to the merchant what type of options will be available</li>\n<li>Limit the number of options displayed at once</li>\n<li>Not be used within a popover</li>\n<li>Indicate a loading state to the merchant while option data is being populated</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>The input field for autocomplete should follow the <a href=\"https://polaris.shopify.com/components/forms/text-field\">content guidelines</a> for text fields.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"basic-autocomplete\">Basic autocomplete</h3>\n<p>Use to help merchants complete text input quickly from a list of options.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">AutocompleteExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> deselectedOptions = [\n    {<span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;rustic&#x27;</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Rustic&#x27;</span>},\n    {<span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;antique&#x27;</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Antique&#x27;</span>},\n    {<span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;vinyl&#x27;</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Vinyl&#x27;</span>},\n    {<span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;vintage&#x27;</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Vintage&#x27;</span>},\n    {<span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;refurbished&#x27;</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Refurbished&#x27;</span>},\n  ];\n  <span class=\"hljs-keyword\">const</span> [selectedOptions, setSelectedOptions] = <span class=\"hljs-title function_\">useState</span>([]);\n  <span class=\"hljs-keyword\">const</span> [inputValue, setInputValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> [options, setOptions] = <span class=\"hljs-title function_\">useState</span>(deselectedOptions);</p>\n<p>  <span class=\"hljs-keyword\">const</span> updateText = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> {\n      <span class=\"hljs-title function_\">setInputValue</span>(value);</p>\n<pre><code>  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (value === &lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;) {\n    &lt;span class=&quot;hljs-title function_&quot;&gt;setOptions&lt;/span&gt;(deselectedOptions);\n    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt;;\n  }\n\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; filterRegex = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;RegExp&lt;/span&gt;(value, &lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;i&amp;#x27;&lt;/span&gt;);\n  &lt;span class=&quot;hljs-keyword&quot;&gt;const&lt;/span&gt; resultOptions = deselectedOptions.&lt;span class=&quot;hljs-title function_&quot;&gt;filter&lt;/span&gt;(&lt;span class=&quot;hljs-function&quot;&gt;(&lt;span class=&quot;hljs-params&quot;&gt;option&lt;/span&gt;) =&amp;gt;&lt;/span&gt;\n    option.&lt;span class=&quot;hljs-property&quot;&gt;label&lt;/span&gt;.&lt;span class=&quot;hljs-title function_&quot;&gt;match&lt;/span&gt;(filterRegex),\n  );\n  &lt;span class=&quot;hljs-title function_&quot;&gt;setOptions&lt;/span&gt;(resultOptions);\n},\n[deselectedOptions],\n</code></pre>\n<p>  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> updateSelection = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">selected</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">const</span> selectedValue = selected.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">selectedItem</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> matchedOption = options.<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">option</span>) =&gt;</span> {\n          <span class=\"hljs-keyword\">return</span> option.<span class=\"hljs-property\">value</span>.<span class=\"hljs-title function_\">match</span>(selectedItem);\n        });\n        <span class=\"hljs-keyword\">return</span> matchedOption &amp;&amp; matchedOption.<span class=\"hljs-property\">label</span>;\n      });</p>\n<pre><code>  &lt;span class=&quot;hljs-title function_&quot;&gt;setSelectedOptions&lt;/span&gt;(selected);\n  &lt;span class=&quot;hljs-title function_&quot;&gt;setInputValue&lt;/span&gt;(selectedValue[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;]);\n},\n[options],\n</code></pre>\n<p>  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> textField = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Autocomplete.TextField</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{updateText}</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Tags&quot;</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{inputValue}</span>\n      <span class=\"hljs-attr\">prefix</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{SearchMinor}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&quot;base&quot;</span> /&gt;</span>}\n      placeholder=&quot;Search&quot;\n    /&gt;</span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">225px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Autocomplete</span>\n        <span class=\"hljs-attr\">options</span>=<span class=\"hljs-string\">{options}</span>\n        <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selectedOptions}</span>\n        <span class=\"hljs-attr\">onSelect</span>=<span class=\"hljs-string\">{updateSelection}</span>\n        <span class=\"hljs-attr\">textField</span>=<span class=\"hljs-string\">{textField}</span>\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"multiple-tags-autocomplete\">Multiple tags autocomplete</h3>\n<p>Use to help merchants select multiple options from a list curated by the text input.</p>\n<pre><code class=\"language-jsx\">function MultiAutocompleteExample() {\n  const deselectedOptions = [\n    {value: &#39;rustic&#39;, label: &#39;Rustic&#39;},\n    {value: &#39;antique&#39;, label: &#39;Antique&#39;},\n    {value: &#39;vinyl&#39;, label: &#39;Vinyl&#39;},\n    {value: &#39;vintage&#39;, label: &#39;Vintage&#39;},\n    {value: &#39;refurbished&#39;, label: &#39;Refurbished&#39;},\n  ];\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState(&#39;&#39;);\n  const [options, setOptions] = useState(deselectedOptions);\n\n  const updateText = useCallback(\n    (value) =&gt; {\n      setInputValue(value);\n\n      if (value === &#39;&#39;) {\n        setOptions(deselectedOptions);\n        return;\n      }\n\n      const filterRegex = new RegExp(value, &#39;i&#39;);\n      const resultOptions = deselectedOptions.filter((option) =&gt;\n        option.label.match(filterRegex),\n      );\n      let endIndex = resultOptions.length - 1;\n      if (resultOptions.length === 0) {\n        endIndex = 0;\n      }\n      setOptions(resultOptions);\n    },\n    [deselectedOptions],\n  );\n\n  const removeTag = useCallback(\n    (tag) =&gt; () =&gt; {\n      const options = [...selectedOptions];\n      options.splice(options.indexOf(tag), 1);\n      setSelectedOptions(options);\n    },\n    [selectedOptions],\n  );\n\n  const tagsMarkup = selectedOptions.map((option) =&gt; {\n    let tagLabel = &#39;&#39;;\n    tagLabel = option.replace(&#39;_&#39;, &#39; &#39;);\n    tagLabel = titleCase(tagLabel);\n    return (\n      &lt;Tag key={`option${option}`} onRemove={removeTag(option)}&gt;\n        {tagLabel}\n      &lt;/Tag&gt;\n    );\n  });\n\n  const textField = (\n    &lt;Autocomplete.TextField\n      onChange={updateText}\n      label=&quot;Tags&quot;\n      value={inputValue}\n      placeholder=&quot;Vintage, cotton, summer&quot;\n    /&gt;\n  );\n\n  return (\n    &lt;div style={{height: &#39;325px&#39;}}&gt;\n      &lt;TextContainer&gt;\n        &lt;Stack&gt;{tagsMarkup}&lt;/Stack&gt;\n      &lt;/TextContainer&gt;\n      &lt;br /&gt;\n      &lt;Autocomplete\n        allowMultiple\n        options={options}\n        selected={selectedOptions}\n        textField={textField}\n        onSelect={setSelectedOptions}\n        listTitle=&quot;Suggested Tags&quot;\n      /&gt;\n    &lt;/div&gt;\n  );\n\n  function titleCase(string) {\n    return string\n      .toLowerCase()\n      .split(&#39; &#39;)\n      .map((word) =&gt; word.replace(word[0], word[0].toUpperCase()))\n      .join(&#39;&#39;);\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Multiple&lt;/span&gt; sections autocomplete\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to help merchants complete text input quickly &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; a multiple sections list &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; options.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction AutocompleteExample() {\n  const deselectedOptions = useMemo(\n    () =&gt; [\n      {\n        title: &#39;Frequently used&#39;,\n        options: [\n          {value: &#39;ups&#39;, label: &#39;UPS&#39;},\n          {value: &#39;usps&#39;, label: &#39;USPS&#39;},\n        ],\n      },\n      {\n        title: &#39;All carriers&#39;,\n        options: [\n          {value: &#39;dhl&#39;, label: &#39;DHL Express&#39;},\n          {value: &#39;canada_post&#39;, label: &#39;Canada Post&#39;},\n        ],\n      },\n    ],\n    [],\n  );\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState(&#39;&#39;);\n  const [options, setOptions] = useState(deselectedOptions);\n\n  const updateText = useCallback(\n    (value) =&gt; {\n      setInputValue(value);\n\n      if (value === &#39;&#39;) {\n        setOptions(deselectedOptions);\n        return;\n      }\n\n      const filterRegex = new RegExp(value, &#39;i&#39;);\n      const resultOptions = [];\n\n      deselectedOptions.forEach((opt) =&gt; {\n        const lol = opt.options.filter((option) =&gt;\n          option.label.match(filterRegex),\n        );\n\n        resultOptions.push({\n          title: opt.title,\n          options: lol,\n        });\n      });\n\n      setOptions(resultOptions);\n    },\n    [deselectedOptions],\n  );\n\n  const updateSelection = useCallback(\n    ([selected]) =&gt; {\n      let selectedValue;\n\n      options.forEach(({options: opt}) =&gt; {\n        if (selectedValue) {\n          return;\n        }\n\n        const matchedOption = opt.find((option) =&gt;\n          option.value.match(selected),\n        );\n\n        if (matchedOption) {\n          selectedValue = matchedOption.label;\n        }\n      });\n\n      setSelectedOptions([selected]);\n      setInputValue(String(selectedValue) ? String(selectedValue) : &#39;&#39;);\n    },\n    [options],\n  );\n\n  const textField = (\n    &lt;Autocomplete.TextField\n      onChange={updateText}\n      label=&quot;Tags&quot;\n      value={inputValue}\n      prefix={&lt;Icon source={SearchMinor} color=&quot;base&quot; /&gt;}\n      placeholder=&quot;Search&quot;\n    /&gt;\n  );\n\n  return (\n    &lt;div style={{height: &#39;225px&#39;}}&gt;\n      &lt;Autocomplete\n        textField={textField}\n        selected={selectedOptions}\n        options={options}\n        onSelect={updateSelection}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Autocomplete&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; loading\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to indicate loading state to merchants &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; option data is processing.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction AutocompleteExample() {\n  const deselectedOptions = [\n    {value: &#39;rustic&#39;, label: &#39;Rustic&#39;},\n    {value: &#39;antique&#39;, label: &#39;Antique&#39;},\n    {value: &#39;vinyl&#39;, label: &#39;Vinyl&#39;},\n    {value: &#39;vintage&#39;, label: &#39;Vintage&#39;},\n    {value: &#39;refurbished&#39;, label: &#39;Refurbished&#39;},\n  ];\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState(&#39;&#39;);\n  const [options, setOptions] = useState(deselectedOptions);\n  const [loading, setLoading] = useState(false);\n\n  const updateText = useCallback(\n    (value) =&gt; {\n      setInputValue(value);\n\n      if (!loading) {\n        setLoading(true);\n      }\n\n      setTimeout(() =&gt; {\n        if (value === &#39;&#39;) {\n          setOptions(deselectedOptions);\n          setLoading(false);\n          return;\n        }\n        const filterRegex = new RegExp(value, &#39;i&#39;);\n        const resultOptions = deselectedOptions.filter((option) =&gt;\n          option.label.match(filterRegex),\n        );\n        setOptions(resultOptions);\n        setLoading(false);\n      }, 300);\n    },\n    [deselectedOptions, options, loading],\n  );\n\n  const updateSelection = useCallback(\n    (selected) =&gt; {\n      const selectedText = selected.map((selectedItem) =&gt; {\n        const matchedOption = options.find((option) =&gt; {\n          return option.value.match(selectedItem);\n        });\n        return matchedOption &amp;&amp; matchedOption.label;\n      });\n      setSelectedOptions(selected);\n      setInputValue(selectedText[0]);\n    },\n    [options],\n  );\n\n  const textField = (\n    &lt;Autocomplete.TextField\n      onChange={updateText}\n      label=&quot;Tags&quot;\n      value={inputValue}\n      prefix={&lt;Icon source={SearchMinor} color=&quot;base&quot; /&gt;}\n      placeholder=&quot;Search&quot;\n    /&gt;\n  );\n\n  return (\n    &lt;div style={{height: &#39;225px&#39;}}&gt;\n      &lt;Autocomplete\n        options={options}\n        selected={selectedOptions}\n        onSelect={updateSelection}\n        loading={loading}\n        textField={textField}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Autocomplete&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; lazy loading\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction AutoCompleteLazyLoadExample() {\n  const paginationInterval = 25;\n  const deselectedOptions = Array.from(Array(100)).map((_, index) =&gt; ({\n    value: `rustic ${index + 1}`,\n    label: `Rustic ${index + 1}`,\n  }));\n\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState(&#39;&#39;);\n  const [options, setOptions] = useState(deselectedOptions);\n  const [isLoading, setIsLoading] = useState(false);\n  const [willLoadMoreResults, setWillLoadMoreResults] = useState(true);\n  const [visibleOptionIndex, setVisibleOptionIndex] =\n    useState(paginationInterval);\n\n  const handleLoadMoreResults = useCallback(() =&gt; {\n    if (willLoadMoreResults) {\n      setIsLoading(true);\n\n      setTimeout(() =&gt; {\n        const remainingOptionCount = options.length - visibleOptionIndex;\n        const nextVisibleOptionIndex =\n          remainingOptionCount &gt;= paginationInterval\n            ? visibleOptionIndex + paginationInterval\n            : visibleOptionIndex + remainingOptionCount;\n\n        setIsLoading(false);\n        setVisibleOptionIndex(nextVisibleOptionIndex);\n\n        if (remainingOptionCount &lt;= paginationInterval) {\n          setWillLoadMoreResults(false);\n        }\n      }, 1000);\n    }\n  }, [willLoadMoreResults, visibleOptionIndex, options.length]);\n\n  const removeTag = useCallback(\n    (tag) =&gt; () =&gt; {\n      const options = [...selectedOptions];\n      options.splice(options.indexOf(tag), 1);\n      setSelectedOptions(options);\n    },\n    [selectedOptions],\n  );\n\n  const updateText = useCallback(\n    (value) =&gt; {\n      setInputValue(value);\n\n      if (value === &#39;&#39;) {\n        setOptions(deselectedOptions);\n        return;\n      }\n\n      const filterRegex = new RegExp(value, &#39;i&#39;);\n      const resultOptions = deselectedOptions.filter((option) =&gt;\n        option.label.match(filterRegex),\n      );\n\n      let endIndex = resultOptions.length - 1;\n      if (resultOptions.length === 0) {\n        endIndex = 0;\n      }\n      setOptions(resultOptions);\n      setInputValue;\n    },\n    [deselectedOptions, options],\n  );\n\n  const textField = (\n    &lt;Autocomplete.TextField\n      onChange={updateText}\n      label=&quot;Tags&quot;\n      value={inputValue}\n      placeholder=&quot;Vintage, cotton, summer&quot;\n    /&gt;\n  );\n\n  const hasSelectedOptions = selectedOptions.length &gt; 0;\n\n  const tagsMarkup = hasSelectedOptions\n    ? selectedOptions.map((option) =&gt; {\n        let tagLabel = &#39;&#39;;\n        tagLabel = option.replace(&#39;_&#39;, &#39; &#39;);\n        tagLabel = titleCase(tagLabel);\n        return (\n          &lt;Tag key={`option${option}`} onRemove={removeTag(option)}&gt;\n            {tagLabel}\n          &lt;/Tag&gt;\n        );\n      })\n    : null;\n  const optionList = options.slice(0, visibleOptionIndex);\n  const selectedTagMarkup = hasSelectedOptions ? (\n    &lt;Stack spacing=&quot;extraTight&quot;&gt;{tagsMarkup}&lt;/Stack&gt;\n  ) : null;\n\n  return (\n    &lt;Stack vertical&gt;\n      {selectedTagMarkup}\n      &lt;Autocomplete\n        allowMultiple\n        options={optionList}\n        selected={selectedOptions}\n        textField={textField}\n        onSelect={setSelectedOptions}\n        listTitle=&quot;Suggested Tags&quot;\n        loading={isLoading}\n        onLoadMoreResults={handleLoadMoreResults}\n        willLoadMoreResults={willLoadMoreResults}\n      /&gt;\n    &lt;/Stack&gt;\n  );\n\n  function titleCase(string) {\n    return string\n      .toLowerCase()\n      .split(&#39; &#39;)\n      .map((word) =&gt; {\n        return word.replace(word[0], word[0].toUpperCase());\n      })\n      .join(&#39; &#39;);\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Autocomplete&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; empty state\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to indicate there are no search results.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction AutocompleteExample() {\n  const deselectedOptions = [\n    {value: &#39;rustic&#39;, label: &#39;Rustic&#39;},\n    {value: &#39;antique&#39;, label: &#39;Antique&#39;},\n    {value: &#39;vinyl&#39;, label: &#39;Vinyl&#39;},\n    {value: &#39;vintage&#39;, label: &#39;Vintage&#39;},\n    {value: &#39;refurbished&#39;, label: &#39;Refurbished&#39;},\n  ];\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState(&#39;&#39;);\n  const [options, setOptions] = useState(deselectedOptions);\n  const [loading, setLoading] = useState(false);\n\n  const updateText = useCallback(\n    (value) =&gt; {\n      setInputValue(value);\n\n      if (!loading) {\n        setLoading(true);\n      }\n\n      setTimeout(() =&gt; {\n        if (value === &#39;&#39;) {\n          setOptions(deselectedOptions);\n          setLoading(false);\n          return;\n        }\n        const filterRegex = new RegExp(value, &#39;i&#39;);\n        const resultOptions = deselectedOptions.filter((option) =&gt;\n          option.label.match(filterRegex),\n        );\n        setOptions(resultOptions);\n        setLoading(false);\n      }, 300);\n    },\n    [deselectedOptions, loading, options],\n  );\n\n  const updateSelection = useCallback(\n    (selected) =&gt; {\n      const selectedText = selected.map((selectedItem) =&gt; {\n        const matchedOption = options.find((option) =&gt; {\n          return option.value.match(selectedItem);\n        });\n        return matchedOption &amp;&amp; matchedOption.label;\n      });\n      setSelectedOptions(selected);\n      setInputValue(selectedText[0]);\n    },\n    [options],\n  );\n\n  const textField = (\n    &lt;Autocomplete.TextField\n      onChange={updateText}\n      label=&quot;Tags&quot;\n      value={inputValue}\n      prefix={&lt;Icon source={SearchMinor} color=&quot;base&quot; /&gt;}\n      placeholder=&quot;Search&quot;\n    /&gt;\n  );\n\n  const emptyState = (\n    &lt;React.Fragment&gt;\n      &lt;Icon source={SearchMinor} /&gt;\n      &lt;div style={{textAlign: &#39;center&#39;}}&gt;\n        &lt;TextContainer&gt;Could not find any results&lt;/TextContainer&gt;\n      &lt;/div&gt;\n    &lt;/React.Fragment&gt;\n  );\n\n  return (\n    &lt;div style={{height: &#39;225px&#39;}}&gt;\n      &lt;Autocomplete\n        options={options}\n        selected={selectedOptions}\n        onSelect={updateSelection}\n        emptyState={emptyState}\n        loading={loading}\n        textField={textField}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Autocomplete&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; action\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to indicate there are no search results.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction AutocompleteActionBeforeExample() {\n  const deselectedOptions = [\n    {value: &#39;rustic&#39;, label: &#39;Rustic&#39;},\n    {value: &#39;antique&#39;, label: &#39;Antique&#39;},\n    {value: &#39;vinyl&#39;, label: &#39;Vinyl&#39;},\n    {value: &#39;vintage&#39;, label: &#39;Vintage&#39;},\n    {value: &#39;refurbished&#39;, label: &#39;Refurbished&#39;},\n  ];\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState(&#39;&#39;);\n  const [options, setOptions] = useState(deselectedOptions);\n  const [loading, setLoading] = useState(false);\n\n  const updateText = useCallback(\n    (value) =&gt; {\n      setInputValue(value);\n\n      if (!loading) {\n        setLoading(true);\n      }\n\n      setTimeout(() =&gt; {\n        if (value === &#39;&#39;) {\n          setOptions(deselectedOptions);\n          setLoading(false);\n          return;\n        }\n        const filterRegex = new RegExp(value, &#39;i&#39;);\n        const resultOptions = options.filter((option) =&gt;\n          option.label.match(filterRegex),\n        );\n        setOptions(resultOptions);\n        setLoading(false);\n      }, 300);\n    },\n    [deselectedOptions, loading, options],\n  );\n\n  const updateSelection = useCallback(\n    (selected) =&gt; {\n      const selectedText = selected.map((selectedItem) =&gt; {\n        const matchedOption = options.find((option) =&gt; {\n          return option.value.match(selectedItem);\n        });\n        return matchedOption &amp;&amp; matchedOption.label;\n      });\n      setSelectedOptions(selected);\n      setInputValue(selectedText[0]);\n    },\n    [options],\n  );\n\n  const textField = (\n    &lt;Autocomplete.TextField\n      onChange={updateText}\n      label=&quot;Tags&quot;\n      value={inputValue}\n      prefix={&lt;Icon source={SearchMinor} color=&quot;inkLighter&quot; /&gt;}\n      placeholder=&quot;Search&quot;\n    /&gt;\n  );\n\n  return (\n    &lt;div style={{height: &#39;225px&#39;}}&gt;\n      &lt;Autocomplete\n        actionBefore={{\n          accessibilityLabel: &#39;Action label&#39;,\n          badge: {\n            status: &#39;new&#39;,\n            content: &#39;New!&#39;,\n          },\n          content: &#39;Action with long name&#39;,\n          ellipsis: true,\n          helpText: &#39;Help text&#39;,\n          icon: CirclePlusMinor,\n        }}\n        options={options}\n        selected={selectedOptions}\n        onSelect={updateSelection}\n        listTitle=&quot;Suggested tags&quot;\n        loading={loading}\n        textField={textField}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Autocomplete&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; wrapping action\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to indicate there are no search results.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction AutocompleteActionBeforeExample() {\n  const deselectedOptions = [\n    {value: &#39;rustic&#39;, label: &#39;Rustic&#39;},\n    {value: &#39;antique&#39;, label: &#39;Antique&#39;},\n    {value: &#39;vinyl&#39;, label: &#39;Vinyl&#39;},\n    {value: &#39;vintage&#39;, label: &#39;Vintage&#39;},\n    {value: &#39;refurbished&#39;, label: &#39;Refurbished&#39;},\n  ];\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState(&#39;&#39;);\n  const [options, setOptions] = useState(deselectedOptions);\n  const [loading, setLoading] = useState(false);\n\n  const updateText = useCallback(\n    (value) =&gt; {\n      setInputValue(value);\n\n      if (!loading) {\n        setLoading(true);\n      }\n\n      setTimeout(() =&gt; {\n        if (value === &#39;&#39;) {\n          setOptions(deselectedOptions);\n          setLoading(false);\n          return;\n        }\n        const filterRegex = new RegExp(value, &#39;i&#39;);\n        const resultOptions = options.filter((option) =&gt;\n          option.label.match(filterRegex),\n        );\n        setOptions(resultOptions);\n        setLoading(false);\n      }, 300);\n    },\n    [deselectedOptions, loading, options],\n  );\n\n  const updateSelection = useCallback(\n    (selected) =&gt; {\n      const selectedText = selected.map((selectedItem) =&gt; {\n        const matchedOption = options.find((option) =&gt; {\n          return option.value.match(selectedItem);\n        });\n        return matchedOption &amp;&amp; matchedOption.label;\n      });\n      setSelectedOptions(selected);\n      setInputValue(selectedText[0]);\n    },\n    [options],\n  );\n\n  const textField = (\n    &lt;Autocomplete.TextField\n      onChange={updateText}\n      label=&quot;Tags&quot;\n      value={inputValue}\n      prefix={&lt;Icon source={SearchMinor} color=&quot;inkLighter&quot; /&gt;}\n      placeholder=&quot;Search&quot;\n    /&gt;\n  );\n\n  return (\n    &lt;div style={{height: &#39;225px&#39;}}&gt;\n      &lt;Autocomplete\n        actionBefore={{\n          accessibilityLabel: &#39;Action label&#39;,\n          badge: {\n            status: &#39;new&#39;,\n            content: &#39;New!&#39;,\n          },\n          content:\n            &#39;Action with long name that will need to wrap on small display in order to have a nice display&#39;,\n          ellipsis: true,\n          helpText: &#39;Help text&#39;,\n          icon: CirclePlusMinor,\n          wrapOverflow: true,\n        }}\n        options={options}\n        selected={selectedOptions}\n        onSelect={updateSelection}\n        listTitle=&quot;Suggested tags&quot;\n        loading={loading}\n        textField={textField}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Autocomplete&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; destructive action\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to indicate there are no search results.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction AutocompleteActionBeforeExample() {\n  const deselectedOptions = [\n    {value: &#39;rustic&#39;, label: &#39;Rustic&#39;},\n    {value: &#39;antique&#39;, label: &#39;Antique&#39;},\n    {value: &#39;vinyl&#39;, label: &#39;Vinyl&#39;},\n    {value: &#39;vintage&#39;, label: &#39;Vintage&#39;},\n    {value: &#39;refurbished&#39;, label: &#39;Refurbished&#39;},\n  ];\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState(&#39;&#39;);\n  const [options, setOptions] = useState(deselectedOptions);\n  const [loading, setLoading] = useState(false);\n\n  const updateText = useCallback(\n    (value) =&gt; {\n      setInputValue(value);\n\n      if (!loading) {\n        setLoading(true);\n      }\n\n      setTimeout(() =&gt; {\n        if (value === &#39;&#39;) {\n          setOptions(deselectedOptions);\n          setLoading(false);\n          return;\n        }\n        const filterRegex = new RegExp(value, &#39;i&#39;);\n        const resultOptions = options.filter((option) =&gt;\n          option.label.match(filterRegex),\n        );\n        setOptions(resultOptions);\n        setLoading(false);\n      }, 300);\n    },\n    [deselectedOptions, loading, options],\n  );\n\n  const updateSelection = useCallback(\n    (selected) =&gt; {\n      const selectedText = selected.map((selectedItem) =&gt; {\n        const matchedOption = options.find((option) =&gt; {\n          return option.value.match(selectedItem);\n        });\n        return matchedOption &amp;&amp; matchedOption.label;\n      });\n      setSelectedOptions(selected);\n      setInputValue(selectedText[0]);\n    },\n    [options],\n  );\n\n  const textField = (\n    &lt;Autocomplete.TextField\n      onChange={updateText}\n      label=&quot;Tags&quot;\n      value={inputValue}\n      prefix={&lt;Icon source={SearchMinor} color=&quot;inkLighter&quot; /&gt;}\n      placeholder=&quot;Search&quot;\n    /&gt;\n  );\n\n  return (\n    &lt;div style={{height: &#39;225px&#39;}}&gt;\n      &lt;Autocomplete\n        actionBefore={{\n          accessibilityLabel: &#39;Destructive action label&#39;,\n          content: &#39;Destructive action&#39;,\n          destructive: true,\n          icon: DeleteMinor,\n        }}\n        options={options}\n        selected={selectedOptions}\n        onSelect={updateSelection}\n        listTitle=&quot;Suggested tags&quot;\n        loading={loading}\n        textField={textField}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>For an input field without suggested options, <a href=\"https://polaris.shopify.com/components/forms/text-field\">use the text field component</a></li>\n<li>For a list of selectable options not linked to an input field, <a href=\"https://polaris.shopify.com/components/lists-and-tables/option-list\">use the option list component</a></li>\n<li>For a text field that triggers a popover, <a href=\"https://polaris.shopify.com/components/forms/combobox\">use the combo box component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<h3 id=\"structure\">Structure</h3>\n<p>The autocomplete component is based on the <a href=\"https://www.w3.org/TR/wai-aria-practices-1.1/#combobox\">ARIA 1.2 combobox pattern</a> and the <a href=\"https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\">Aria 1.2 Listbox pattern</a>.</p>\n<p>The autocomplete list displays below the text field or other control by default so it is easy for merchants to discover and use. However, you can change the position with the <code>preferredPosition</code> prop.</p>\n<p>Autocomplete features can be challenging for merchants with visual, motor, and cognitive disabilities. Even when they’re built using best practices, these features can be difficult to use with some assistive technologies. Merchants should always be able to search, enter data, or perform other activities without relying on the autocomplete.</p>\n<!-- usageblock -->\n\n<h4 id=\"do\">Do</h4>\n<p>Use autocomplete as progressive enhancement to make the interface easier to use for most merchants.</p>\n<h4 id=\"dont\">Don’t</h4>\n<p>Require that merchants make a selection from the autocomplete to complete a task.</p>\n<!-- end -->\n\n<h3 id=\"keyboard-support\">Keyboard support</h3>\n<ul>\n<li>Give the autocomplete text input keyboard focus with the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)</li>\n<li>Access the list of options with the up and down arrow keys</li>\n<li>Select an option that has focus with the <kbd>enter</kbd>/<kbd>return</kbd> key</li>\n</ul>\n<!-- /content-for -->\n"
  },
  "Avatar": {
    "name": "Avatar",
    "category": "Images and icons",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "photo",
      "profile",
      "picture",
      "thumbnail",
      "default face",
      "face picture",
      "customer avatar",
      "customer face",
      "customer picture",
      "business face",
      "business picture",
      "customer avatar",
      "business avatar",
      "customer thumbnail",
      "business thumbnail",
      "ios",
      "android"
    ],
    "readme": "<h1 id=\"avatar\">Avatar</h1>\n<p>Avatars are used to show a thumbnail representation of an individual or\nbusiness in the interface.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Avatars should be one of 4 sizes:</p>\n<ul>\n<li>Extra small (24 x 24 px): use in tightly condensed layouts</li>\n<li>Small (32 × 32 px): use when the medium size is too big for the layout, or when the avatar has less importance</li>\n<li>Medium (40 × 40 px): use as the default size</li>\n<li>Large (60 × 60 px): use when an avatar is a focal point, such as on a single customer card</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>Any time you use an image to communicate a concept on Shopify, it’s important to use descriptive <a href=\"https://polaris.shopify.com/content/alternative-text\">alt text</a>. Doing this is important for <a href=\"https://polaris.shopify.com/foundations/accessibility\">accessibility</a> because it allows screen readers to describe what’s in the image to people who may not be able to see it.</p>\n<p>For avatars, we recommend using a format that describes what will show in the\nimage:</p>\n<ul>\n<li><code>alt=&quot;Person’s name&quot;</code> if the avatar represents a person</li>\n<li><code>alt=&quot;Business’s name&quot;</code> if the avatar represents a business</li>\n<li><code>alt=&quot;&quot;</code> if the name of the person/business appears next to the avatar as text</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-avatar\">Default avatar</h3>\n<p>Use to present an avatar for a merchant, customer, or business.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Avatar</span> customer name=<span class=\"hljs-string\">&quot;Farrah&quot;</span> /&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Avatar/android/default@2x.png\" alt=\"Default avatar\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Avatar/ios/default@2x.png\" alt=\"Default avatar\"></p>\n<!-- /content-for -->\n\n<h3 id=\"extra-small-avatar\">Extra small avatar</h3>\n<p>Use to present an avatar in a condensed layout, such as a data table cell or an action list item.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ExtraSmallAvatarExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);\n  <span class=\"hljs-keyword\">const</span> toggleActive = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">active</span>) =&gt;</span> !active), []);\n  <span class=\"hljs-keyword\">const</span> activator = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleActive}</span> <span class=\"hljs-attr\">disclosure</span>&gt;</span>\n      Manage staff\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">250px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Popover</span> <span class=\"hljs-attr\">active</span>=<span class=\"hljs-string\">{active}</span> <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{activator}</span> <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{toggleActive}</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ActionList</span>\n          <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n            {\n              <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Chet</span> <span class=\"hljs-attr\">Baker</span>&#x27;,\n              <span class=\"hljs-attr\">prefix:</span> &lt;<span class=\"hljs-attr\">Avatar</span> <span class=\"hljs-attr\">customer</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;extraSmall&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Chet Baker&quot;</span> /&gt;</span>,\n            },\n            {\n              content: &#x27;Farrah Fawcett&#x27;,\n              prefix: (\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Avatar</span> <span class=\"hljs-attr\">customer</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;extraSmall&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Farrah Fawcett&quot;</span> /&gt;</span>\n              ),\n            },\n          ]}\n        /&gt;\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Popover</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To show a thumbnail for an object rather than a person or business, <a href=\"https://polaris.shopify.com/components/images-and-icons/thumbnail\">use the thumbnail component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<h3 id=\"structure\">Structure</h3>\n<p>The avatar component uses a generated scalable vector graphics (SVG) file, which can cause challenges for merchants that use assistive technologies. To create a standard experience, the <code>&lt;img&gt;</code> is hidden from assistive technologies by using an empty <code>alt</code> attribute, and replaced with a <code>&lt;span&gt;</code> that has <code>role=”img”</code>.</p>\n<h3 id=\"labeling\">Labeling</h3>\n<p>The avatar component represents content, and should have a text equivalent for merchants using assistive technologies. By default, the value of the <code>name</code> prop is used for the alternative text. If different text would be more accurate, use the <code>accessibilityLabel</code> prop to replace the value provided by <code>name</code>.</p>\n<!-- /content-for -->\n"
  },
  "Badge": {
    "name": "Badge",
    "category": "Images and icons",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "pills",
      "status indicators",
      "color-coded indicators",
      "informational badge",
      "success badge",
      "attention badge",
      "warning badge",
      "critical badge",
      "object status",
      "status",
      "alert",
      "ios",
      "android"
    ],
    "readme": "<h1 id=\"badge\">Badge</h1>\n<p>Badges are used to inform merchants of the status of an object or of an action that’s been taken.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Badges benefit merchants by:</p>\n<ul>\n<li>Using established color patterns so that merchants can quickly identify their status or importance level</li>\n<li>Being clearly labeled with short, scannable text</li>\n<li>Being positioned to clearly identify the object they’re informing or labelling</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"badge-label\">Badge label</h3>\n<p>Badge labels should:</p>\n<ul>\n<li>Use a single word to describe the status of an object.</li>\n<li>Only use two words if you need to describe a complex state. For example, “Partially refunded” and “Partially fulfilled”.</li>\n<li>Always describe the status in the past tense. For example, refunded not refund.</li>\n</ul>\n<p>The available badges for financial status are:</p>\n<ul>\n<li>Authorized</li>\n<li>Pending</li>\n<li>Paid</li>\n<li>Unpaid</li>\n<li>Pending</li>\n<li>Voided</li>\n<li>Partially paid</li>\n<li>Partially refunded</li>\n<li>Refunded</li>\n</ul>\n<p>The available badges for fulfillment status are:</p>\n<ul>\n<li>Fulfilled</li>\n<li>Complete</li>\n<li>Partial</li>\n<li>Unfulfilled</li>\n<li>Restocked</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<p>Don’t use alternatives to existing badge options. Only create a new badge option if there aren’t any existing options to communicate the status you need.</p>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-badge\">Default badge</h3>\n<p>Use to give a non-critical status update on a piece of information or action.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Badge</span>&gt;<span class=\"hljs-title class_\">Fulfilled</span>&lt;/<span class=\"hljs-title class_\">Badge</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Badge/android/default@2x.png\" alt=\"Default badge with gray background\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Badge/ios/default@2x.png\" alt=\"Default badge with gray background\"></p>\n<!-- /content-for -->\n\n<h3 id=\"small-badge\">Small badge</h3>\n<p>Use in layouts with minimal space, like inside of an <code>IndexTable</code> cell.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Badge</span> size=<span class=\"hljs-string\">&quot;small&quot;</span>&gt;<span class=\"hljs-title class_\">Fulfilled</span>&lt;/<span class=\"hljs-title class_\">Badge</span>&gt;\n</pre></code></p>\n<h3 id=\"informational-badge\">Informational badge</h3>\n<p>Use to call out an object or action as having an important attribute. For example, marking an option as “Recommended” or marking a theme as “Published”.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Badge</span> status=<span class=\"hljs-string\">&quot;info&quot;</span>&gt;<span class=\"hljs-title class_\">Published</span>&lt;/<span class=\"hljs-title class_\">Badge</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Badge/android/informational@2x.png\" alt=\"Informational badge with blue background\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Badge/ios/informational@2x.png\" alt=\"Informational badge with blue background\"></p>\n<!-- /content-for -->\n\n<h3 id=\"success-badge\">Success badge</h3>\n<p>Use to indicate a successful, completed, or desirable state when it’s important to provide positive reinforcement to merchants. For example, when merchants successfully dispute a chargeback, a success badge shows that says “Funds recovered”.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Badge</span> status=<span class=\"hljs-string\">&quot;success&quot;</span>&gt;<span class=\"hljs-title class_\">Funds</span> recovered&lt;/<span class=\"hljs-title class_\">Badge</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Badge/android/success@2x.png\" alt=\"Success badge with green background\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Badge/ios/success@2x.png\" alt=\"Success badge with green background\"></p>\n<!-- /content-for -->\n\n<h3 id=\"attention-badge\">Attention badge</h3>\n<p>Use when something requires merchants’ attention but the issue isn’t critical. For example, this badge would show next to an order that needs to be reviewed by merchants.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Badge</span> status=<span class=\"hljs-string\">&quot;attention&quot;</span>&gt;<span class=\"hljs-title class_\">Inactive</span>&lt;/<span class=\"hljs-title class_\">Badge</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Badge/android/attention@2x.png\" alt=\"Attention badge with yellow background\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Badge/ios/attention@2x.png\" alt=\"Attention badge with yellow background\"></p>\n<!-- /content-for -->\n\n<h3 id=\"warning-badge\">Warning badge</h3>\n<p>Use for critical and time-sensitive issues that require merchants’ attention and potential action. Warning events are often reversible.</p>\n<p>Keep in mind that seeing this badge can feel stressful for merchants so it should only be used when absolutely necessary.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Badge</span> status=<span class=\"hljs-string\">&quot;warning&quot;</span>&gt;<span class=\"hljs-title class_\">Expired</span>&lt;/<span class=\"hljs-title class_\">Badge</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Badge/android/warning@2x.png\" alt=\"Warning badge with orange background\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Badge/ios/warning@2x.png\" alt=\"Warning badge with orange background\"></p>\n<!-- /content-for -->\n\n<h3 id=\"critical-badge\">Critical badge</h3>\n<p>Use for critical and irreversible issues that require merchants’ attention and potential action.</p>\n<p>Keep in mind that seeing this badge can feel stressful for merchants so it should only be used when absolutely necessary.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Badge</span> status=<span class=\"hljs-string\">&quot;critical&quot;</span>&gt;<span class=\"hljs-title class_\">Action</span> required&lt;/<span class=\"hljs-title class_\">Badge</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Badge/android/critical@2x.png\" alt=\"Critical badge with red background\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Badge/ios/critical@2x.png\" alt=\"Critical badge with red background\"></p>\n<!-- /content-for -->\n\n<h3 id=\"incomplete-badge\">Incomplete badge</h3>\n<p>Use to indicate when a given task has not yet been completed. For example, when merchants haven’t fulfilled an order.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Badge</span> progress=<span class=\"hljs-string\">&quot;incomplete&quot;</span> status=<span class=\"hljs-string\">&quot;warning&quot;</span>&gt;\n  <span class=\"hljs-title class_\">Unfulfilled</span>\n&lt;/<span class=\"hljs-title class_\">Badge</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Badge/android/incomplete@2x.png\" alt=\"Incomplete badge. Default badge with incomplete status\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Badge/ios/incomplete@2x.png\" alt=\"Incomplete badge. Default badge with incomplete status\"></p>\n<!-- /content-for -->\n\n<h3 id=\"partially-complete-badge\">Partially complete badge</h3>\n<p>Use to indicate when a given task has been partially completed. For example, when merchants have partially fulfilled an order.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Badge</span> progress=<span class=\"hljs-string\">&quot;partiallyComplete&quot;</span> status=<span class=\"hljs-string\">&quot;attention&quot;</span>&gt;\n  <span class=\"hljs-title class_\">Partially</span> fulfilled\n&lt;/<span class=\"hljs-title class_\">Badge</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Badge/android/partially-complete@2x.png\" alt=\"Partially complete badge. Default badge with partially complete status\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Badge/ios/partially-complete@2x.png\" alt=\"Partially complete badge. Default badge with partially complete status\"></p>\n<!-- /content-for -->\n\n<h3 id=\"complete-badge\">Complete badge</h3>\n<p>Use to indicate when a given task has been completed. For example, when merchants have fulfilled an order.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Badge</span> progress=<span class=\"hljs-string\">&quot;complete&quot;</span>&gt;<span class=\"hljs-title class_\">Fulfilled</span>&lt;/<span class=\"hljs-title class_\">Badge</span>&gt;\n</pre></code></p>\n<h3 id=\"badge-with-statusandprogresslabeloverride\">Badge with statusAndProgressLabelOverride</h3>\n<p>Use when the status and progress accessibilityLabels are not appropriate to a given context.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Badge</span>\n  status=<span class=\"hljs-string\">&quot;success&quot;</span>\n  progress=<span class=\"hljs-string\">&quot;complete&quot;</span>\n  statusAndProgressLabelOverride=<span class=\"hljs-string\">&quot;Status: Published. Your online store is visible.&quot;</span>\n&gt;\n  <span class=\"hljs-title class_\">Published</span>\n&lt;/<span class=\"hljs-title class_\">Badge</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Badge/android/complete@2x.png\" alt=\"Complete badge. Default badge with complete status\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Badge/ios/complete@2x.png\" alt=\"Complete badge. Default badge with complete status\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To represent an interactive list of categories provided by merchants, <a href=\"https://polaris.shopify.com/components/forms/tag\">use tags</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>Badges that convey information with icons or color include text provided by the <a href=\"https://polaris.shopify.com/components/titles-and-text/visually-hidden#navigation\">visually hidden component</a>. This text is read out by assistive technologies like screen readers so that merchants with vision issues can access the meaning of the badge in context.</p>\n<!-- /content-for -->\n"
  },
  "Banner": {
    "name": "Banner",
    "category": "Feedback indicators",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "inform",
      "update",
      "changes",
      "conditions",
      "dismissible banners",
      "banner with footer call-to-action",
      "banner with footer button",
      "banner with button",
      "informational banners",
      "success banners",
      "warning banners",
      "critical banners",
      "banner width",
      "banner headings",
      "banner content",
      "banner buttons",
      "banner links",
      "banner body content",
      "banner text",
      "banner body text",
      "full-width alert"
    ],
    "readme": "<h1 id=\"banner\">Banner</h1>\n<p>Informs merchants about important changes or persistent conditions. Use this component if you need to communicate to merchants in a prominent way. Banners are placed at the top of the page or section they apply to, and below the page or section header.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Banners should:</p>\n<ul>\n<li>Be used thoughtfully and sparingly for only the most important information.</li>\n<li>Not be used to call attention to what a merchant needs to do in the UI instead of making the action clear in the UI itself.</li>\n<li>Not be the primary entry point to information or actions merchants need on a regular basis.</li>\n<li>Be dismissible unless they contain critical information or an important step merchants need to take.</li>\n<li>Use the default icon for <code>success</code>, <code>info</code>, <code>warning</code> and <code>critical</code> statuses. If the icon is changed, use only <a href=\"https://polaris.shopify.com/design/icons#using-icons-in-your-designs\">major, duotone icons</a>.</li>\n</ul>\n<h3 id=\"placement\">Placement</h3>\n<p>Banners should be placed in the appropriate context:</p>\n<ul>\n<li>Banners relevant to an entire page should be placed at the top of that page, below the page header. They should occupy the full width of the content area.</li>\n<li>Banners related to a section of a page (like a card, popover, or modal) should be placed inside that section, below any section heading. These banners have less spacing and a pared-back design to fit within a content context.</li>\n<li>Banners related to an element more specific that a section should be placed immediately above or below that element.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>Banners should:</p>\n<ul>\n<li>Focus on a single theme, piece of information, or required action to avoid\noverwhelming merchants.</li>\n<li>Be concise and scannable—merchants shouldn’t need to spend a lot of time\nfiguring out what they need to know and do.</li>\n<li>Be limited to a few important calls to action with no more than one primary\naction.</li>\n<li>Not be used for marketing information or upsell—<a href=\"https://polaris.shopify.com/components/structure/callout-card\">use callout cards</a> instead.</li>\n</ul>\n<p>To learn about writing helpful and accessible error message text, see the guidelines for <a href=\"https://polaris.shopify.com/experiences/error-messages\">error messages</a>.</p>\n<h3 id=\"title\">Title</h3>\n<p>Banner titles should follow the content guidelines for <a href=\"https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings\">headings and subheadings</a>.</p>\n<h3 id=\"body-content\">Body content</h3>\n<p>Body content should:</p>\n<ul>\n<li>Be concise: keep content to 1 to 2 sentences where possible</li>\n<li>Clarify the benefit of the main task</li>\n<li>Be written in sentence case and use appropriate punctuation</li>\n<li>Avoid repeating the heading</li>\n<li>Explain how to resolve the issue, particularly for warning and critical\nbanners</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<p>Your online store has a maximum of 20 themes. Delete unused themes to add more.</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<p>You have reached your theme limit. Your online store has reached its maximum\nof 20 themes. To add more themes, delete themes you’re no longer using.</p>\n</div></div>\n\n<h3 id=\"button-and-links\">Button and links</h3>\n<p>Buttons and links should be:</p>\n<ul>\n<li>Clear and predictable: merchants should be able to anticipate what will\nhappen when they click a button. Never deceive merchants by mislabeling a\nbutton.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<p>Buy shipping label</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<p>Buy</p>\n</div></div>\n\n<ul>\n<li>Action-led: buttons should always lead with a strong verb that encourages\naction. To provide enough context to merchants use the {verb}+{noun} format on\nbuttons except in the case of common actions like Save, Close, Cancel, or OK.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-2\">Do</h4>\n<p>Activate Apple Pay</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-2\">Don’t</h4>\n<p>Try Apple Pay</p>\n</div></div>\n\n<ul>\n<li>Scannable: avoid unnecessary words and articles such as the, an, or a.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-3\">Do</h4>\n<p>Add menu item</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-3\">Don’t</h4>\n<p>Add a menu item</p>\n</div></div>\n\n<p>Link text should:</p>\n<ul>\n<li>Set the expectation of where merchants will be taken</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-4\">Do</h4>\n<p>Order #001</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-4\">Don’t</h4>\n<p>Order</p>\n</div></div>\n\n<ul>\n<li>Use consistent content to label navigation. For example, if a navigational\nlink leads to a page called Orders, label the link Orders.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-5\">Do</h4>\n<p>Payments</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-5\">Don’t</h4>\n<p>Finance section</p>\n</div></div>\n\n<h3 id=\"secondary-body-content\">Secondary body content</h3>\n<p>Body content should be:</p>\n<ul>\n<li>Actionable: start sentences with imperative verbs when telling merchants\nwhat actions are available to them (especially something new). Don’t use\npermissive language like “you can”.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-6\">Do</h4>\n<p>Get performance data for all your sales channels.</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-6\">Don’t</h4>\n<p>Now you can get performance data for all your sales channels.</p>\n</div></div>\n\n<ul>\n<li>Structured for merchant success: always put the most critical information\nfirst.</li>\n<li>Clear: use the verb “need” to help merchants understand when they’re required\nto do something.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-7\">Do</h4>\n<p>To buy a shipping label, you need to enter the total weight of your shipment,\nincluding packaging.</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-7\">Don’t</h4>\n<p>To buy a shipping label, you must enter the total weight of your shipment,\nincluding packaging.</p>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-banners\">Default banners</h3>\n<ul>\n<li>Use to convey general information or actions that aren’t critical. For example, you might show a banner that asks for merchant feedback.</li>\n<li>Default banners contain lower priority information and should always be dismissible.</li>\n</ul>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Banner</span> title=<span class=\"hljs-string\">&quot;Order archived&quot;</span> onDismiss={<span class=\"hljs-function\">() =&gt;</span> {}}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>This order was archived on March 7, 2017 at 3:12pm EDT.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Banner</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Banner/android/default@2x.png\" alt=\"Default banner for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Banner/ios/default@2x.png\" alt=\"Default banner for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"dismissible-banner\">Dismissible banner</h3>\n<!-- example-for: web -->\n\n<p>Make all banners dismissible, unless they contain critical information or an important action that merchants are required to take.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Banner</span> onDismiss={<span class=\"hljs-function\">() =&gt;</span> {}}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n    Use your finance report to get detailed information about your business.{&#x27; &#x27;}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>Let us know what you think<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Banner</span>&gt;\n</pre></code></p>\n<h3 id=\"banner-with-footer-call-to-action\">Banner with footer call-to-action</h3>\n<p>Use when you want merchants to take an action after reading the banner.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Banner</span>\n  title=<span class=\"hljs-string\">&quot;Some of your product variants are missing weights&quot;</span>\n  status=<span class=\"hljs-string\">&quot;warning&quot;</span>\n  action={{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Edit variant weights&#x27;</span>, <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>}}\n  secondaryAction={{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Learn more&#x27;</span>, <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>}}\n  onDismiss={<span class=\"hljs-function\">() =&gt;</span> {}}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n    Add weights to show accurate rates at checkout and when buying shipping\n    labels in Shopify.\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Banner</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Banner/android/footer-action@2x.png\" alt=\"Banner with footer call-to-action for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Banner/ios/footer-action@2x.png\" alt=\"Banner with footer call-to-action for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"informational-banners\">Informational banners</h3>\n<p>Use to update merchants about a change or give them advice.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Banner</span>\n  title=<span class=\"hljs-string\">&quot;USPS has updated their rates&quot;</span>\n  action={{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Update rates&#x27;</span>, <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>}}\n  secondaryAction={{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Learn more&#x27;</span>}}\n  status=<span class=\"hljs-string\">&quot;info&quot;</span>\n  onDismiss={<span class=\"hljs-function\">() =&gt;</span> {}}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Make sure you know how these changes affect your store.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Banner</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Banner/android/informational@2x.png\" alt=\"Informational banner for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Banner/ios/informational@2x.png\" alt=\"Informational banner for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"success-banner\">Success banner</h3>\n<ul>\n<li>Default to using toasts for success messages, unless the feedback is delayed, persistent, or has a call to action</li>\n<li>Include next steps if applicable</li>\n</ul>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Banner</span>\n  title=<span class=\"hljs-string\">&quot;Your shipping label is ready to print.&quot;</span>\n  status=<span class=\"hljs-string\">&quot;success&quot;</span>\n  action={{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Print label&#x27;</span>}}\n  onDismiss={<span class=\"hljs-function\">() =&gt;</span> {}}\n/&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Banner/android/success@2x.png\" alt=\"Success banner for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Banner/ios/success@2x.png\" alt=\"Success banner for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"warning-banners\">Warning banners</h3>\n<ul>\n<li>Use to display information that needs attention or that merchants need to take action on</li>\n<li>Seeing these banners can be stressful for merchants so be cautious about using them</li>\n</ul>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Banner</span>\n  title=<span class=\"hljs-string\">&quot;Before you can purchase a shipping label, this change needs to be made:&quot;</span>\n  action={{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Edit address&#x27;</span>}}\n  status=<span class=\"hljs-string\">&quot;warning&quot;</span>\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>\n      The name of the city you’re shipping to has characters that aren’t\n      allowed. City name can only include spaces and hyphens.\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Banner</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Banner/android/warning@2x.png\" alt=\"Warning banner for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Banner/ios/warning@2x.png\" alt=\"Warning banner for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"critical-banners\">Critical banners</h3>\n<ul>\n<li>Use to communicate problems that have to be resolved immediately for merchants to complete a task</li>\n<li>For example, you will show this banner for orders with high fraud risk</li>\n<li>Seeing these banners can be stressful for merchants so be cautious about using them</li>\n</ul>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Banner</span>\n  title=<span class=\"hljs-string\">&quot;High risk of fraud detected&quot;</span>\n  action={{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Review risk analysis&#x27;</span>}}\n  status=<span class=\"hljs-string\">&quot;critical&quot;</span>\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n    Before fulfilling this order or capturing payment, please{&#x27; &#x27;}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>review the Risk Analysis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span> and determine if this order is\n    fraudulent.\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Banner</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Banner/android/critical@2x.png\" alt=\"Critical banner for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Banner/ios/critical@2x.png\" alt=\"Critical banner for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"banner-in-a-modal\">Banner in a modal</h3>\n<!-- example-for: web -->\n\n<p>Banners inside of modals render with less spacing and a pared-back design to fit within a content context.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">BannerInModalExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(!active), [active]);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">500px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleChange}</span>&gt;</span>Open<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal</span>\n        <span class=\"hljs-attr\">open</span>=<span class=\"hljs-string\">{active}</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{handleChange}</span>\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Reach more shoppers with Instagram product tags&quot;</span>\n        <span class=\"hljs-attr\">primaryAction</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Add</span> <span class=\"hljs-attr\">Instagram</span>&#x27;,\n          <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleChange</span>,\n        }}\n        <span class=\"hljs-attr\">secondaryActions</span>=<span class=\"hljs-string\">{[</span>\n          {\n            <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Learn</span> <span class=\"hljs-attr\">more</span>&#x27;,\n            <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleChange</span>,\n          },\n        ]}\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Banner</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">{{content:</span> &#x27;<span class=\"hljs-attr\">Connect</span> <span class=\"hljs-attr\">account</span>&#x27;}} <span class=\"hljs-attr\">status</span>=<span class=\"hljs-string\">&quot;warning&quot;</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n                Connect your instagram account to your shop before proceeding.\n              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Banner</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n              Use Instagram posts to share your products with millions of\n              people. Let shoppers buy from your store without leaving\n              Instagram.\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"banner-with-focus\">Banner with focus</h3>\n<!-- example-for: web -->\n\n<p>Banner can programmatically receive focus. Use this functionality to draw the merchant’s attention to the banner.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">BannerWithFocusExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> banner = <span class=\"hljs-title function_\">useRef</span>();</p>\n<p>  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> banner.<span class=\"hljs-property\">current</span>.<span class=\"hljs-title function_\">focus</span>(), []);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Banner</span>\n      <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;High risk of fraud detected&quot;</span>\n      <span class=\"hljs-attr\">onDismiss</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {}}\n      status=&quot;critical&quot;\n      ref={banner}\n    &gt;\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n        Before fulfilling this order or capturing payment, please review the\n        fraud analysis and determine if this order is fraudulent\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Banner</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"banner-in-a-card\">Banner in a card</h3>\n<!-- example-for: web -->\n\n<p>Banners inside of cards render with less spacing and a pared-back design to fit within a content context.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> title=<span class=\"hljs-string\">&quot;Online store dashboard&quot;</span> sectioned&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Banner</span> <span class=\"hljs-attr\">onDismiss</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {}}&gt;\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n        Use your finance report to get detailed information about your business.{&#x27; &#x27;}\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>Let us know what you think<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Banner</span>&gt;</span></p>\n<pre><code>&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;View a summary of your online store’s performance.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n</code></pre>\n<p>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextContainer</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To inform merchants about a new feature or opportunity, <a href=\"https://polaris.shopify.com/components/structure/callout-card\">use callout cards</a></li>\n<li>To group similar concepts together in the interface, <a href=\"https://polaris.shopify.com/components/structure/card\">use a card</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>Banners provide context and assist workflows for merchants with disabilities.</p>\n<ul>\n<li>Critical and warning banners have a <code>role=”alert”</code> and are announced by assistive technologies when they appear.</li>\n<li>All other banners have a <code>role=”status”</code> and are read after any critical announcements.</li>\n<li>All banners have an <code>aria-live</code> attribute and are announced by assistive technologies when their content is updated. These announcements can be disabled by using the prop <code>stopAnnouncements</code>.</li>\n<li>Banners use <code>aria-describedby</code> to describe their purpose to assistive technologies when they’re announced or receive focus. If a banner has a <code>title</code>, then the title content is used for the <code>aria-describedby</code>. If the banner doesn’t have a <code>title</code>, then all of the banner content is used for the <code>aria-describedby</code>.</li>\n<li>Banner containers have a <code>tabindex=”0”</code> and display a visible keyboard focus indicator. Because of this, merchants can discover banners while tabbing through forms or other interactions, and developers can programmatically move focus to banners.</li>\n<li>Banners use a combination of <a href=\"https://polaris.shopify.com/design/icons\">icons</a> and <a href=\"https://polaris.shopify.com/design/colors\">colors</a> to show their meaning and level of importance to merchants.</li>\n</ul>\n<h3 id=\"error-notifications-in-forms\">Error notifications in forms</h3>\n<h4 id=\"critical-banners-1\">Critical banners</h4>\n<p>When merchants submit long or complex forms with errors, use a critical banner to summarize what went wrong. Place the banner at the top of the form and move focus to the banner when the form is submitted. This allows all merchants to move through the form in a logical order to correct the issues.</p>\n<h4 id=\"inline-errors\">Inline errors</h4>\n<p>Always include <a href=\"https://polaris.shopify.com/components/forms/inline-error\">inline error</a> messages for specific form fields so that merchants know what to do in context as they correct their mistakes.</p>\n<p>To learn about creating helpful and accessible error message text, see the guidelines for <a href=\"https://polaris.shopify.com/experiences/error-messages\">error messages</a>.</p>\n<!-- usageblock -->\n\n<h4 id=\"do-8\">Do</h4>\n<ul>\n<li>Put banners close in context to the problem they’re referring to</li>\n<li>Give banners with a lot of information a clear title that summarizes their content</li>\n<li>Move focus to banners if they’re relevant to the merchant’s current workflow and need to be addressed immediately</li>\n</ul>\n<h4 id=\"dont-8\">Don’t</h4>\n<ul>\n<li>Move focus to banners if they appear on page load, or outside the merchant’s current workflow</li>\n<li>Use warning or critical (<code>role=”alert”</code>) banners to convey information that the merchant doesn’t need to address immediately</li>\n</ul>\n,\n\n<!-- /content-for -->\n"
  },
  "Button": {
    "name": "Button",
    "category": "Actions",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "CTA",
      "call to action",
      "call-to-action",
      "primary",
      "action",
      "basic button",
      "outline",
      "plain",
      "destructive",
      "slim",
      "large",
      "full-width",
      "disabled state",
      "disabled",
      "button",
      "link",
      "click",
      "submit",
      "ios",
      "android"
    ],
    "readme": "<h1 id=\"button\">Button</h1>\n<p>Buttons are used primarily for actions, such as “Add”, “Close”, “Cancel”, or “Save”. Plain buttons, which look similar to links, are used for less important or less commonly used actions, such as “view shipping settings”.</p>\n<p>For navigational actions that appear within or directly following a sentence, use the <a href=\"https://polaris.shopify.com/components/navigation/link\">link component</a>.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Buttons should:</p>\n<ul>\n<li>Be clearly and accurately labeled.</li>\n<li>Lead with a strong, actionable verb.</li>\n<li>Use established button colors appropriately. For example, only use a red\nbutton for an action that’s difficult or impossible to undo.</li>\n<li>Prioritize the most important actions. Too many calls to action can cause\nconfusion and make merchants unsure of what to do next.</li>\n<li>Be positioned in consistent locations in the interface.</li>\n</ul>\n<h3 id=\"buttons-versus-links\">Buttons versus links</h3>\n<p>Buttons are used primarily for actions, such as “Add”, “Close”, “Cancel”, or “Save”. Plain buttons, which look similar to links, are used for less important or less commonly used actions, such as “view shipping settings”.</p>\n<p>Links are used primarily for navigation, and usually appear within or directly following a sentence.</p>\n<p>The HTML that renders for the <code>Button</code> and <code>Link</code> components carries meaning. Using these components intentionally and consistently results in:</p>\n<ul>\n<li>a more inclusive experience for assistive technology users</li>\n<li>a more cohesive visual experience for sighted users</li>\n<li>products that are easier to maintain at scale</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>Buttons should follow the content guidelines for <a href=\"https://polaris.shopify.com/content/actionable-language#section-buttons\">buttons</a>.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"basic-button\">Basic button</h3>\n<p>Used most in the interface. Only use another style if a button requires more or less visual weight.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Button</span>&gt;<span class=\"hljs-title class_\">Add</span> product&lt;/<span class=\"hljs-title class_\">Button</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Button/android/basic@2x.png\" alt=\"Basic button for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Button/ios/basic@2x.png\" alt=\"Basic button for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"outline-button\">Outline button</h3>\n<!-- example-for: web -->\n\n<p>Use against shaded or colorful backgrounds. An outline button will maintain the appropriate visual weight and won’t clash with the background color.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Button</span> outline&gt;<span class=\"hljs-title class_\">Add</span> product&lt;/<span class=\"hljs-title class_\">Button</span>&gt;\n</pre></code></p>\n<h3 id=\"outline-monochrome-button\">Outline monochrome button</h3>\n<!-- example-for: web -->\n\n<p>Use against shaded or colorful backgrounds where matching the current text colors is more appropriate than the current outline theme.</p>\n<p><code><pre>\n&lt;div style={{<span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;#bf0711&#x27;</span>}}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">monochrome</span> <span class=\"hljs-attr\">outline</span>&gt;</span>\n    Retry\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n&lt;/div&gt;\n</pre></code></p>\n<h3 id=\"plain-button\">Plain button</h3>\n<p>Use for less important or less commonly used actions since they’re less prominent. For example, plain buttons are used as actions in cards.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Button</span> plain&gt;<span class=\"hljs-title class_\">View</span> shipping settings&lt;/<span class=\"hljs-title class_\">Button</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Button/android/plain@2x.png\" alt=\"Plain button for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Button/ios/plain@2x.png\" alt=\"Plain button for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"plain-monochrome-button\">Plain monochrome button</h3>\n<!-- example-for: web -->\n\n<p>Use for less important or less commonly used actions where matching the current text color is desired. For example in the InlineError component.</p>\n<p><code><pre>\n&lt;div&gt;\n  <span class=\"hljs-title class_\">Could</span> not retrieve data.{<span class=\"hljs-string\">&#x27; &#x27;</span>}\n  &lt;<span class=\"hljs-title class_\">Button</span> plain monochrome&gt;\n    <span class=\"hljs-title class_\">Try</span> again\n  &lt;/<span class=\"hljs-title class_\">Button</span>&gt;\n&lt;/div&gt;\n</pre></code></p>\n<h3 id=\"plain-destructive-button\">Plain destructive button</h3>\n<!-- example-for: online-store-ui -->\n\n<p>Use for actions that will delete merchant data or be otherwise difficult to recover from. Since they’re less prominent, use for less important or less commonly used destructive actions. For example, plain buttons are used as actions in cards.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Button</span> plain destructive&gt;\n  <span class=\"hljs-title class_\">Remove</span>\n&lt;/<span class=\"hljs-title class_\">Button</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Button/android/plain-destructive@2x.png\" alt=\"Destructive plain button for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Button/ios/plain-destructive@2x.png\" alt=\"Destructive plain button for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"primary-button\">Primary button</h3>\n<p>Use to highlight the most important actions in any experience. Don’t use more than one primary button in a section or screen to avoid overwhelming merchants.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Button</span> primary&gt;<span class=\"hljs-title class_\">Save</span> theme&lt;/<span class=\"hljs-title class_\">Button</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Button/android/primary@2x.png\" alt=\"Primary button for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Button/ios/primary@2x.png\" alt=\"Primary button for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"destructive-button\">Destructive button</h3>\n<p>Use when the action will delete merchant data or be otherwise difficult to recover from. Destructive buttons should trigger a confirmation dialog before the action is completed. Be thoughtful about using destructive buttons because they can feel stressful for merchants.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Button</span> destructive&gt;<span class=\"hljs-title class_\">Delete</span> theme&lt;/<span class=\"hljs-title class_\">Button</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Button/android/basic-destructive@2x.png\" alt=\"Destructive basic button for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Button/ios/basic-destructive@2x.png\" alt=\"Destructive basic button for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"slim-button\">Slim button</h3>\n<!-- example-for: web -->\n\n<p>Use when a table or list has a set of actions on each item to avoid making items taller than they need to be. Don’t use slim buttons for primary actions.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Button</span> size=<span class=\"hljs-string\">&quot;slim&quot;</span>&gt;<span class=\"hljs-title class_\">Save</span> variant&lt;/<span class=\"hljs-title class_\">Button</span>&gt;\n</pre></code></p>\n<h3 id=\"large-button\">Large button</h3>\n<!-- example-for: web -->\n\n<p>Use for the main call to action in empty states or for calls to action shown with large illustrations.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Button</span> size=<span class=\"hljs-string\">&quot;large&quot;</span>&gt;<span class=\"hljs-title class_\">Create</span> store&lt;/<span class=\"hljs-title class_\">Button</span>&gt;\n</pre></code></p>\n<h3 id=\"full-width-button\">Full-width button</h3>\n<!-- example-for: web -->\n\n<p>Use for buttons placed in a narrow column (especially when stacking multiple buttons) or for creating a set of buttons of equal width. Full-width buttons should rarely exceed 320 px wide.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Button</span> fullWidth&gt;<span class=\"hljs-title class_\">Add</span> customer&lt;/<span class=\"hljs-title class_\">Button</span>&gt;\n</pre></code></p>\n<h3 id=\"text-aligned-button\">Text-aligned button</h3>\n<!-- example-for: web -->\n\n<p>Use for plain or monochrome buttons that could have a long length and should be aligned when they potentially overflow onto the next line.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Button</span> plain textAlign=<span class=\"hljs-string\">&quot;left&quot;</span>&gt;\n  <span class=\"hljs-title class_\">This</span> is a really long string <span class=\"hljs-keyword\">of</span> text that overflows onto the next line we need\n  to put <span class=\"hljs-keyword\">in</span> a lot <span class=\"hljs-keyword\">of</span> words now you can see the alignment. <span class=\"hljs-title class_\">It</span> is very long but a\n  customer could potentially name something <span class=\"hljs-variable language_\">this</span> long.\n&lt;/<span class=\"hljs-title class_\">Button</span>&gt;\n</pre></code></p>\n<h3 id=\"pressed-button\">Pressed button</h3>\n<!-- example-for: web -->\n\n<p>Buttons are sometimes used as a toggle for other parts of the user interface.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">PressedButton</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [isFirstButtonActive, setIsFirstButtonActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleFirstButtonClick = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (isFirstButtonActive) <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-title function_\">setIsFirstButtonActive</span>(<span class=\"hljs-literal\">true</span>);\n  }, [isFirstButtonActive]);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleSecondButtonClick = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (!isFirstButtonActive) <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-title function_\">setIsFirstButtonActive</span>(<span class=\"hljs-literal\">false</span>);\n  }, [isFirstButtonActive]);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ButtonGroup</span> <span class=\"hljs-attr\">segmented</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">pressed</span>=<span class=\"hljs-string\">{isFirstButtonActive}</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleFirstButtonClick}</span>&gt;</span>\n        First button\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">pressed</span>=<span class=\"hljs-string\">{!isFirstButtonActive}</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleSecondButtonClick}</span>&gt;</span>\n        Second button\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ButtonGroup</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"plain-disclosure-button\">Plain disclosure button</h3>\n<!-- example-for: web -->\n\n<p>Use to indicate that more content can be disclosed on click, like text in a collapsible.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">DisclosureButtion</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [expanded, setExpanded] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>\n      <span class=\"hljs-attr\">plain</span>\n      <span class=\"hljs-attr\">disclosure</span>=<span class=\"hljs-string\">{expanded</span> ? &#x27;<span class=\"hljs-attr\">up</span>&#x27; <span class=\"hljs-attr\">:</span> &#x27;<span class=\"hljs-attr\">down</span>&#x27;}\n      <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {\n        setExpanded(!expanded);\n      }}\n    &gt;\n      {expanded ? &#x27;Show less&#x27; : &#x27;Show more&#x27;}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"right-aligned-disclosure\">Right-aligned disclosure</h3>\n<!-- example-for: web -->\n\n<p>When working with <code>fullWidth + textAlign=&quot;left&quot;</code>, the <code>disclosure</code> will align itself to the far right.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RightAlignedDisclosureButton</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [expanded, setExpanded] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{width:</span> &#x27;<span class=\"hljs-attr\">200px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>\n        <span class=\"hljs-attr\">fullWidth</span>\n        <span class=\"hljs-attr\">textAlign</span>=<span class=\"hljs-string\">&quot;left&quot;</span>\n        <span class=\"hljs-attr\">disclosure</span>=<span class=\"hljs-string\">{expanded</span> ? &#x27;<span class=\"hljs-attr\">up</span>&#x27; <span class=\"hljs-attr\">:</span> &#x27;<span class=\"hljs-attr\">down</span>&#x27;}\n        <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setExpanded(!expanded)}\n      &gt;\n        {expanded ? &#x27;Show less&#x27; : &#x27;Show more&#x27;}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"select-disclosure-button\">Select disclosure button</h3>\n<!-- example-for: web -->\n\n<p>Use to indicate that multiple options are available from this control, similar to a <code>&lt;select /&gt;</code> HTML element.</p>\n<p><code><pre>\n&lt;div style={{<span class=\"hljs-attr\">height</span>: <span class=\"hljs-string\">&#x27;100px&#x27;</span>}}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">disclosure</span>=<span class=\"hljs-string\">&quot;select&quot;</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> console.log(&#x27;Open Popover&#x27;)}&gt;\n    Select options\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n&lt;/div&gt;\n</pre></code></p>\n<h3 id=\"split-button\">Split button</h3>\n<!-- example-for: web -->\n\n<p>Use when there is only one primary action but other related actions can be taken.</p>\n<p><code><pre>\n&lt;div style={{<span class=\"hljs-attr\">height</span>: <span class=\"hljs-string\">&#x27;100px&#x27;</span>}}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>\n    <span class=\"hljs-attr\">primary</span>\n    <span class=\"hljs-attr\">connectedDisclosure</span>=<span class=\"hljs-string\">{{</span>\n      <span class=\"hljs-attr\">accessibilityLabel:</span> &#x27;<span class=\"hljs-attr\">Other</span> <span class=\"hljs-attr\">save</span> <span class=\"hljs-attr\">actions</span>&#x27;,\n      <span class=\"hljs-attr\">actions:</span> [{<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Save</span> <span class=\"hljs-attr\">as</span> <span class=\"hljs-attr\">draft</span>&#x27;}],\n    }}\n  &gt;</span>\n    Save\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n&lt;/div&gt;\n</pre></code></p>\n<h3 id=\"disabled-state\">Disabled state</h3>\n<p>Use for actions that aren’t currently available. The surrounding interface should make it clear why the button is disabled and what needs to be done to enable it.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">ButtonGroup</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">disabled</span>&gt;</span>Buy shipping label<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">primary</span> <span class=\"hljs-attr\">disabled</span>&gt;</span>\n    Buy shipping label\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">destructive</span> <span class=\"hljs-attr\">disabled</span>&gt;</span>\n    Buy shipping label\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">outline</span> <span class=\"hljs-attr\">disabled</span>&gt;</span>\n    Buy shipping label\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{color:</span> &#x27;#<span class=\"hljs-attr\">bf0711</span>&#x27;}}&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">outline</span> <span class=\"hljs-attr\">monochrome</span> <span class=\"hljs-attr\">disabled</span>&gt;</span>\n      Buy shipping label\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">plain</span> <span class=\"hljs-attr\">disabled</span>&gt;</span>\n    Buy shipping label\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">plain</span> <span class=\"hljs-attr\">destructive</span> <span class=\"hljs-attr\">disabled</span>&gt;</span>\n    Buy shipping label\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">ButtonGroup</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Button/android/disabled@2x.png\" alt=\"Disabled primary button for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Button/ios/disabled@2x.png\" alt=\"Disabled primary button for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"loading-state\">Loading state</h3>\n<!-- example-for: web -->\n\n<p>Use when a button has been pressed and the associated action is in progress.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Button</span> loading&gt;<span class=\"hljs-title class_\">Save</span> product&lt;/<span class=\"hljs-title class_\">Button</span>&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To combine or lay out multiple buttons, <a href=\"https://polaris.shopify.com/components/actions/button-group\">use the button group component</a></li>\n<li>For navigational actions that appear within or directly following a sentence, use the <a href=\"https://polaris.shopify.com/components/navigation/link\">link component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>Buttons can have different states that are visually and programmatically conveyed to merchants.</p>\n<ul>\n<li>Use the <code>ariaControls</code> prop to add an <code>aria-controls</code> attribute to the button. Use the attribute to point to the unique <code>id</code> of the content that the button manages.</li>\n<li>If a button expands or collapses adjacent content, then use the <code>ariaExpanded</code> prop to add the <code>aria-expanded</code> attribute to the button. Set the value to convey the current expanded (<code>true</code>) or collapsed (<code>false</code>) state of the content.</li>\n<li>Use the <code>disabled</code> prop to set the <code>disabled</code> state of the button. This prevents merchants from being able to interact with the button, and conveys its inactive state to assistive technologies.</li>\n<li>Use the <code>pressed</code> prop to add an <code>aria-pressed</code> attribute to the button.</li>\n</ul>\n<h4 id=\"navigation\">Navigation</h4>\n<p>Merchants generally expect buttons to submit data or take action, and for links to navigate. If navigation is required for the button component, use the <code>url</code> prop. The control will output an anchor styled as a button, instead of a button in HTML, to help convey this difference.</p>\n<p>For more information on making accessible links, see the <a href=\"https://polaris.shopify.com/components/navigation/link\">link component</a>.</p>\n<h3 id=\"labeling\">Labeling</h3>\n<p>The <code>accessibilityLabel</code> prop adds an <code>aria-label</code> attribute to the button, which can be accessed by assistive technologies like screen readers. Typically, this label text replaces the visible text on the button for merchants who use assistive technology.</p>\n<p>Use <code>accessibilityLabel</code> for a button if:</p>\n<ul>\n<li>The button’s visible text doesn’t adequately convey the purpose of the button to non-visual merchants</li>\n<li>The button has no text and relies on an icon alone to convey its purpose</li>\n</ul>\n<p>To help support merchants who use speech activation software as well as sighted screen reader users, make sure that the <code>aria-label</code> text includes any button text that’s visible. Mismatches between visible and programmatic labeling can cause confusion, and might prevent voice recognition commands from working.</p>\n<p>When possible, give the button visible text that clearly conveys its purpose without the use of <code>accessibilityLabel</code>. When no additional content is needed, duplicating the button text with <code>accessibilityLabel</code> isn’t necessary.</p>\n<!-- usageblock -->\n\n<h4 id=\"do\">Do</h4>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Button</span>&gt;<span class=\"hljs-title class_\">Edit</span> shipping address&lt;/<span class=\"hljs-title class_\">Button</span>&gt;\n</pre></code></p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Heading</span>&gt;<span class=\"hljs-title class_\">Shipping</span> address&lt;/<span class=\"hljs-title class_\">Heading</span>&gt;\n<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">accessibilityLabel</span>=<span class=\"hljs-string\">&quot;Edit shipping address&quot;</span>&gt;</span>Edit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n</pre></code></p>\n<h4 id=\"dont\">Don’t</h4>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Button</span> accessibilityLabel=<span class=\"hljs-string\">&quot;Change your shipping address&quot;</span>&gt;<span class=\"hljs-title class_\">Edit</span>&lt;/<span class=\"hljs-title class_\">Button</span>&gt;\n</pre></code></p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Button</span> accessibilityLabel=<span class=\"hljs-string\">&quot;Edit&quot;</span>&gt;<span class=\"hljs-title class_\">Edit</span>&lt;/<span class=\"hljs-title class_\">Button</span>&gt;\n</pre></code></p>\n<!-- end -->\n\n<h4 id=\"external-links\">External links</h4>\n<p>When you use the button component to create a link to an external resource:</p>\n<ul>\n<li>Use the <code>external</code> prop to make the link open in a new tab (or window, depending on the merchant’s browser settings)</li>\n<li>Use the <code>icon</code> prop to add the <code>external</code> icon to the button</li>\n<li>Use the <code>accessibilityLabel</code> prop to include the warning about opening a new tab in the button text for non-visual screen reader users</li>\n</ul>\n<p>For more information on making accessible links, see the <a href=\"https://polaris.shopify.com/components/navigation/link\">link component</a>.</p>\n<!-- usageblock -->\n\n<h4 id=\"do-1\">Do</h4>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Button</span>\n  accessibilityLabel=<span class=\"hljs-string\">&quot;Terms and conditions (opens a new window)&quot;</span>\n  icon={<span class=\"hljs-title class_\">ExternalMinor</span>}\n  url=<span class=\"hljs-string\">&quot;<a href=\"http://example.com\">http://example.com</a>&quot;</span>\n  external\n&gt;\n  <span class=\"hljs-title class_\">Terms</span> and conditions\n&lt;/<span class=\"hljs-title class_\">Button</span>&gt;\n</pre></code></p>\n<h4 id=\"dont-1\">Don’t</h4>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Button</span> url=<span class=\"hljs-string\">&quot;<a href=\"http://example.com\">http://example.com</a>&quot;</span> external&gt;<span class=\"hljs-title class_\">Terms</span> and conditions&lt;/<span class=\"hljs-title class_\">Button</span>&gt;\n<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">&quot;<a href=\"http://example.com\">http://example.com</a>&quot;</span> <span class=\"hljs-attr\">external</span>&gt;</span>\n  Terms and conditions\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n</pre></code></p>\n<!-- end -->\n\n<h3 id=\"keyboard-support\">Keyboard support</h3>\n<p>Buttons use browser defaults for keyboard interactions.</p>\n<ul>\n<li>Give buttons keyboard focus with the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)</li>\n<li>Activate buttons with the <kbd>enter</kbd>/<kbd>return</kbd> key or the <kbd>space</kbd> key</li>\n</ul>\n<h4 id=\"custom-key-events\">Custom key events</h4>\n<p>Use the <code>onKeyDown</code>, <code>onKeyPress</code>, and <code>onKeyUp</code> props to create custom events for buttons. With these props, you can use buttons to create complex, custom interactions like drag-and-drop interfaces.</p>\n<p>Since these props introduce non-standard features to buttons, make sure to include accessible instructions so that merchants can understand how to use these features.</p>\n<!-- /content-for -->\n"
  },
  "ButtonGroup": {
    "name": "Button group",
    "category": "Actions",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "ButtonGroup",
      "choices",
      "decision",
      "call-to-action",
      "CTA",
      "segmented buttons",
      "divided buttons",
      "grouped actions",
      "multiple horizontal buttons",
      "multiple buttons",
      "set of buttons",
      "set of actions",
      "horizontal arrangement of buttons",
      "stacked",
      "segmented control",
      "ios",
      "android"
    ],
    "readme": "<h1 id=\"button-group\">Button group</h1>\n<p>Button group displays multiple related actions stacked or in a horizontal row to help with arrangement and spacing.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Button groups should:</p>\n<ul>\n<li>Only use buttons that follow the\n<a href=\"https://polaris.shopify.com/components/actions/button#best-practices\">best practices outlined in the button component</a></li>\n<li>Group together calls to action that have a relationship</li>\n<li>Be used with consideration that too many calls to action can cause merchants\nto be unsure of what to do next</li>\n<li>Be thoughtful about how multiple buttons will look and work on small screens</li>\n<li>Only be used in groups of up to six buttons if the buttons contain an icon\nwith no text</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>Button groups should follow the <a href=\"https://polaris.shopify.com/content/actionable-language#section-buttons\">content guidelines</a> for buttons.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-button-group\">Default button group</h3>\n<p>Use when you have multiple buttons to space them out evenly.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">ButtonGroup</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>&gt;</span>Cancel<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">primary</span>&gt;</span>Save<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">ButtonGroup</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/ButtonGroup/android/default@2x.png\" alt=\"Alt text\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/ButtonGroup/ios/default@2x.png\" alt=\"Alt text\"></p>\n<!-- /content-for -->\n\n<h3 id=\"button-group-with-segmented-buttons\">Button group with segmented buttons</h3>\n<p>Use to emphasize several buttons as a thematically-related set among other controls.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">ButtonGroup</span> segmented&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>&gt;</span>Bold<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>&gt;</span>Italic<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>&gt;</span>Underline<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">ButtonGroup</span>&gt;\n</pre></code></p>\n<h3 id=\"outline-button-group-with-segmented-buttons\">Outline button group with segmented buttons</h3>\n<p>Use to emphasize several buttons as a thematically-related set among other controls.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">ButtonGroup</span> segmented&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">outline</span>&gt;</span>Bold<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">outline</span>&gt;</span>Italic<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">outline</span>&gt;</span>Underline<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">ButtonGroup</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/ButtonGroup/android/segmented-button@2x.png\" alt=\"Alt text\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/ButtonGroup/ios/segmented-button@2x.png\" alt=\"Alt text\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To learn how to use individual buttons, <a href=\"https://polaris.shopify.com/components/actions/button\">use the button component</a></li>\n<li>To embed an action or navigation into a line of text, <a href=\"https://polaris.shopify.com/components/navigation/link\">use the link component</a></li>\n</ul>\n"
  },
  "CalloutCard": {
    "name": "Callout card",
    "category": "Structure",
    "keywords": [
      "CalloutCard",
      "actionable",
      "updates",
      "new features",
      "call out card",
      "sales channel card",
      "feature card",
      "callout card heading",
      "callout card body content",
      "callout card text",
      "callout card cta",
      "callout card call to action",
      "callout card button",
      "callout card with secondary cta",
      "callout card with secondary button",
      "dismissible callout card",
      "card with illustration",
      "card with image",
      "illustration card"
    ],
    "readme": "<h1 id=\"callout-card\">Callout card</h1>\n<p>Callout cards are used to encourage merchants to take an action related to a\nnew feature or opportunity. They are most commonly displayed in the\nsales channels section of Shopify.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Callout cards should:</p>\n<ul>\n<li>Clearly articulate the benefit of the feature and what it does</li>\n<li>Provide merchants with a clear call to action</li>\n<li>Be targeted to merchants who will most benefit from the feature</li>\n<li>Be dismissable so merchants can get rid of cards about features they’re not\ninterested in</li>\n<li>Use an illustration that helps to communicate the subject or merchant benefit</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"title\">Title</h3>\n<p>Callout card titles should follow the content guidelines for <a href=\"https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings\">headings and subheadings</a>.</p>\n<h3 id=\"body-content\">Body content</h3>\n<p>Body content should be:</p>\n<ul>\n<li>Actionable: start sentences with imperative verbs when telling merchants\nwhat actions are available to them (especially something new). Don’t use\npermissive language like “you can”.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<p>Get performance data for all your sales channels.</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<p>Now you can get performance data for all your sales channels.</p>\n</div></div>\n\n<ul>\n<li>Structured for merchant success: always put the most critical information\nfirst</li>\n<li>Clear: use the verb “need” to help merchants understand when they’re required\nto do something</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<p>To buy a shipping label, you need to enter the total weight of your shipment,\nincluding packaging.</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<p>To buy a shipping label, you must enter the total weight of your shipment,\nincluding packaging.</p>\n</div></div>\n\n<h3 id=\"call-to-action\">Call to action</h3>\n<p>Buttons should be:</p>\n<p>Clear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive merchants by mislabeling a button.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-2\">Do</h4>\n<p>Buy shipping label</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-2\">Don’t</h4>\n<p>Buy</p>\n</div></div>\n\n<ul>\n<li>Action-led: buttons should always lead with a strong verb that encourages\naction. To provide enough context to merchants use the {verb}+{noun} format on\nbuttons except in the case of common actions like Save, Close, Cancel, or OK.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-3\">Do</h4>\n<p>View shipping settings</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-3\">Don’t</h4>\n<p>View your settings</p>\n</div></div>\n\n<ul>\n<li>Scannable: avoid unnecessary words and articles such as the, an, or a.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-4\">Do</h4>\n<p>Add menu item</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-4\">Don’t</h4>\n<p>Add a menu item</p>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-callout-card\">Default callout card</h3>\n<p>Use to let merchants know about a feature or opportunity where there is a clear, single action they need to take to move to the next step.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">CalloutCard</span>\n  title=<span class=\"hljs-string\">&quot;Customize the style of your checkout&quot;</span>\n  illustration=<span class=\"hljs-string\">&quot;<a href=\"https://cdn.shopify.com/s/assets/admin/checkout/settings-customizecart-705f57c725ac05be5a34ec20c05b94298cb8afd10aac7bd9c7ad02030f48cfa0.svg\">https://cdn.shopify.com/s/assets/admin/checkout/settings-customizecart-705f57c725ac05be5a34ec20c05b94298cb8afd10aac7bd9c7ad02030f48cfa0.svg</a>&quot;</span>\n  primaryAction={{\n    <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Customize checkout&#x27;</span>,\n    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;<a href=\"https://www.shopify.com&amp;#x27\">https://www.shopify.com&amp;#x27</a>;</span>,\n  }}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Upload your store’s logo, change colors and fonts, and more.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">CalloutCard</span>&gt;\n</pre></code></p>\n<h3 id=\"callout-card-with-secondary-action\">Callout card with secondary action</h3>\n<p>Use to let merchants know about a feature or opportunity where there are two distinct actions they can take on the information.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">CalloutCard</span>\n  title=<span class=\"hljs-string\">&quot;Customize the style of your checkout&quot;</span>\n  illustration=<span class=\"hljs-string\">&quot;<a href=\"https://cdn.shopify.com/s/assets/admin/checkout/settings-customizecart-705f57c725ac05be5a34ec20c05b94298cb8afd10aac7bd9c7ad02030f48cfa0.svg\">https://cdn.shopify.com/s/assets/admin/checkout/settings-customizecart-705f57c725ac05be5a34ec20c05b94298cb8afd10aac7bd9c7ad02030f48cfa0.svg</a>&quot;</span>\n  primaryAction={{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Customize checkout&#x27;</span>}}\n  secondaryAction={{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Learn more about customizing checkout&#x27;</span>}}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Upload your store’s logo, change colors and fonts, and more.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">CalloutCard</span>&gt;\n</pre></code></p>\n<h3 id=\"dismissable-callout-card\">Dismissable callout card</h3>\n<p>Make all callout cards dismissible so merchants can get rid of cards about features they’re not interested in.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">CalloutCard</span>\n  title=<span class=\"hljs-string\">&quot;Customize the style of your checkout&quot;</span>\n  illustration=<span class=\"hljs-string\">&quot;<a href=\"https://cdn.shopify.com/s/assets/admin/checkout/settings-customizecart-705f57c725ac05be5a34ec20c05b94298cb8afd10aac7bd9c7ad02030f48cfa0.svg\">https://cdn.shopify.com/s/assets/admin/checkout/settings-customizecart-705f57c725ac05be5a34ec20c05b94298cb8afd10aac7bd9c7ad02030f48cfa0.svg</a>&quot;</span>\n  primaryAction={{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Customize checkout&#x27;</span>}}\n  onDismiss={<span class=\"hljs-function\">() =&gt;</span> {}}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Upload your store’s logo, change colors and fonts, and more.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">CalloutCard</span>&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To group similar concepts and tasks together, <a href=\"https://polaris.shopify.com/components/structure/card\">use the card component</a></li>\n<li>To create page-level layout, <a href=\"https://polaris.shopify.com/components/structure/layout\">use the layout component</a></li>\n<li>To explain a feature that merchants haven’t tried yet, <a href=\"https://polaris.shopify.com/components/structure/empty-state\">use the empty state component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>The required <code>title</code> prop gives the callout card a level 2 heading (<code>&lt;h2&gt;</code>). This helps with readability and provides structure to screen reader users.</p>\n<p>Illustrations included in callout cards are implemented as decorative images with empty <code>alt</code> attributes (<code>alt=&quot;&quot;</code> ) so that they’re skipped by screen readers.</p>\n<p>Use <a href=\"https://polaris.shopify.com/content/actionable-language#navigation\">actionable language</a> to ensure that the purpose of the callout card is clear to all merchants, including those with issues related to reading and language.</p>\n<!-- /content-for -->\n"
  },
  "Caption": {
    "name": "Caption",
    "category": "Titles and text",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "labels",
      "text",
      "microcopy",
      "typographic",
      "graph",
      "timestamp",
      "smaller text",
      "smallest text",
      "smaller than reading size text",
      "time text",
      "compact text",
      "small text",
      "android",
      "ios"
    ],
    "readme": "<h1 id=\"caption\">Caption</h1>\n<p>Caption text size is smaller than the recommended size for general reading. On web, it should be used only in a graph or as a timestamp for a list item. On Android and iOS, it can also be used as help text or as other kinds of secondary text for list items.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<ul>\n<li>Use for secondary labels in graphs and charts</li>\n<li>May be used for timestamps in lists of content</li>\n<li>Don’t use this component for other cases</li>\n<li>Don’t use this component for text longer than a few words</li>\n<li>Don’t use this component for aesthetic effect or to break from the standard text size</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"captions\">Captions</h3>\n<p>Captions are primarily used in <a href=\"https://polaris.shopify.com/design/data-visualizations\">data visualizations</a>. Stick to a few words and don’t use this component for complete sentences or longer content.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Use caption for labelling data visualizations\n<img src=\"/images-from-old-styleguide/typography/display-styles/do-use-caption-for-labeling-data-visualizations@2x.png\" alt=\"Diagram of using captions to label graphs and other data content\"></li>\n<li>Received April 21, 2017</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>Order #1001 was received on April 21, 2017</li>\n<li>This is your recent activity</li>\n</ul>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-caption\">Default caption</h3>\n<p>Use to provide details in situations where content is compact and space is tight.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">List</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>\n    Order #1001 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Caption</span>&gt;</span>Received April 21, 2017<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Caption</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>\n    Order #1002 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Caption</span>&gt;</span>Received April 22, 2017<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Caption</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">List</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Caption/android/default@2x.png\" alt=\"Default caption\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Caption/ios/default@2x.png\" alt=\"Default caption\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>Follow best practices for <a href=\"https://polaris.shopify.com/design/data-visualizations\">data visualizations</a> to ensure that the purpose of captions is clear to all merchants, including those with issues related to seeing or understanding data and complex information.</p>\n<!-- /content-for -->\n"
  },
  "Card": {
    "name": "Card",
    "category": "Structure",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "layout",
      "container",
      "box",
      "grid",
      "panel",
      "card with call to action in the footer",
      "card with call to action in the heading",
      "card with call to action in a section",
      "card with button in the footer",
      "card with button in the heading",
      "card with multiple sections",
      "card with subsections",
      "sectioned card",
      "card with a subdued section",
      "subdued card for secondary content",
      "callout",
      "call out"
    ],
    "readme": "<h1 id=\"card\">Card</h1>\n<p>Cards are used to group similar concepts and tasks together to make Shopify\neasier for merchants to scan, read, and get things done.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Cards should:</p>\n<ul>\n<li>Use headings that set clear expectations about the card’s purpose</li>\n<li>Prioritize information so the content merchants most need to know comes\nfirst</li>\n<li>Stick to single user flows or break more complicated flows into multiple\nsections</li>\n<li>Avoid too many call-to-action buttons or links and only one primary call to\naction per card</li>\n<li>Use calls to action on the bottom of the card for next steps and use the\nspace in the upper right corner of the card for persistent, optional actions\n(such as an Edit link)</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"title\">Title</h3>\n<p>Card titles should follow the content guidelines for <a href=\"https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings\">headings and subheadings</a>.</p>\n<h3 id=\"body-content\">Body content</h3>\n<p>Body content should be:</p>\n<ul>\n<li>Actionable: start sentences with imperative verbs when telling merchants what\nactions are available to them (especially something new). Don’t use permissive\nlanguage like “you can”.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<p>Get performance for all your sales channels.</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<p>Now you can get performance data for all your sales channels.</p>\n</div></div>\n\n<ul>\n<li>Structured for merchant success: always put the most critical information\nfirst.</li>\n<li>Clear: use the verb “need” to help merchants understand when they’re required\nto do something.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<p>To buy a shipping label, you need to enter the total weight of your shipment,\nincluding packaging.</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<p>To buy a shipping label, you must enter the total weight of your shipment,\nincluding packaging.</p>\n</div></div>\n\n<h3 id=\"call-to-action-button\">Call-to-action button</h3>\n<p>Buttons should be:</p>\n<ul>\n<li>Clear and predictable: merchants should be able to anticipate what will happen\nwhen they click a button. Never deceive merchants by mislabeling a button.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-2\">Do</h4>\n<ul>\n<li>Create order</li>\n<li>Buy shipping label</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-2\">Don’t</h4>\n<ul>\n<li>New order</li>\n<li>Buy</li>\n</ul>\n</div></div>\n\n<p>Action-led: buttons should always lead with a strong verb that encourages\naction. To provide enough context to merchants use the {verb}+{noun} format on\nbuttons except in the case of common actions like Save, Close, Cancel, or OK.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-3\">Do</h4>\n<ul>\n<li>Activate Apple Pay</li>\n<li>View shipping settings</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-3\">Don’t</h4>\n<ul>\n<li>Try Apple Pay</li>\n<li>View your settings</li>\n</ul>\n</div></div>\n\n<p>Scannable: Avoid unnecessary words and articles such as the, an, or a.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-4\">Do</h4>\n<p>Add menu item</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-4\">Don’t</h4>\n<p>Add a menu item</p>\n</div></div>\n\n<h3 id=\"section-titles\">Section titles</h3>\n<p>Section titles should be:</p>\n<ul>\n<li>Informative: they should label the type of content grouped in the body\ncontent below</li>\n<li>Like headings: follow the same content guidelines as when you’re writing\nheadings</li>\n</ul>\n<h3 id=\"action-links\">Action links</h3>\n<p>Links should be:</p>\n<ul>\n<li>Used for secondary or persistent actions: links should be used to represent\nlower priority actions than buttons, or persistent actions that merchants may\ntake at any time (such as a persistent Edit link).</li>\n<li>Clearly labeled: merchants should not need to guess where they’ll end up if\nthey click on an action link. Never use “click here” as a link because it\ndoesn’t set expectations about what’s next.</li>\n<li>Similar to buttons: Follow the same content guidelines as when you’re writing\ntext for buttons.</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-card\">Default card</h3>\n<p>Use when you have a simple message to communicate to merchants that doesn’t require any secondary steps.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> title=<span class=\"hljs-string\">&quot;Online store dashboard&quot;</span> sectioned&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>View a summary of your online store’s performance.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Card/android/default@2x.png\" alt=\"Default card with a title and a short body\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Card/ios/default@2x.png\" alt=\"Default card with a title and a short body\"></p>\n<!-- /content-for -->\n\n<h3 id=\"card-with-header-actions\">Card with header actions</h3>\n<!-- content-for: web -->\n\n<p>Use for less important card actions, or actions merchants may do before reviewing the contents of the card. For example, merchants may want to add items to a card containing a long list, or enter a customer’s new address.</p>\n<!-- /content-for -->\n\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> sectioned title=<span class=\"hljs-string\">&quot;Variants&quot;</span> actions={[{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Add variant&#x27;</span>}]}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n    Add variants if this product comes in multiple versions, like different\n    sizes or colors.\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<!-- content-for: ios, android -->\n\n<p>Use for less important card actions, or actions merchants may do before reviewing the contents of the card.</p>\n<ul>\n<li>Use an icon for the action, if possible</li>\n<li>Include no more than 2 actions</li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Card/android/header-actions@2x.png\" alt=\"Card with a title (Conditions), a short body and a header action to add a condition\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Card/ios/header-actions@2x.png\" alt=\"Card with a title (Conditions), a short body and a header action to add a condition\"></p>\n<!-- /content-for -->\n\n<h3 id=\"card-with-footer-actions\">Card with footer actions</h3>\n<!-- content-for: web -->\n\n<p>Use footer actions for a card’s most important actions, or actions merchants should do after reviewing the contents of the card. For example, merchants should review the contents of a shipment before an important action like adding tracking information. Footer actions can be left or right aligned with the <code>footerActionAlignment</code> prop.</p>\n<!-- /content-for -->\n\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span>\n  title=<span class=\"hljs-string\">&quot;Shipment 1234&quot;</span>\n  secondaryFooterActions={[{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Edit shipment&#x27;</span>}]}\n  primaryFooterAction={{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Add tracking number&#x27;</span>}}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Items&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>1 × Oasis Glass, 4-Pack<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>1 × Anubis Cup, 2-Pack<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<!-- content-for: android, ios -->\n\n<p>Use footer actions for a card’s most important actions, or actions merchants should do after reviewing the contents of the card.</p>\n<ul>\n<li>Use buttons with labels</li>\n<li>If you have more than 2 actions, consider using an overflow menu on the card</li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Card/android/footer-actions@2x.png\" alt=\"Card featuring footer actions: add variant, edit options\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Card/ios/footer-actions@2x.png\" alt=\"Card featuring footer actions: add variant, edit options\"></p>\n<!-- /content-for -->\n\n<h3 id=\"card-with-multiple-footer-actions\">Card with multiple footer actions</h3>\n<!-- example-for: web -->\n\n<p>When multiple secondary footer actions are provided, they will render in an action list popover activated by a disclosure button. The disclosure button text can be customized with the <code>secondaryFooterActionsDisclosureText</code> prop.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span>\n  title=<span class=\"hljs-string\">&quot;Shipment 1234&quot;</span>\n  secondaryFooterActions={[\n    {<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Cancel shipment&#x27;</span>, <span class=\"hljs-attr\">destructive</span>: <span class=\"hljs-literal\">true</span>},\n    {<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Add another shipment&#x27;</span>, <span class=\"hljs-attr\">disabled</span>: <span class=\"hljs-literal\">true</span>},\n  ]}\n  primaryFooterAction={{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Add tracking number&#x27;</span>}}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Items&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>1 × Oasis Glass, 4-Pack<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>1 × Anubis Cup, 2-Pack<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<h3 id=\"card-with-custom-footer-actions\">Card with custom footer actions</h3>\n<!-- example-for: web -->\n\n<p>Use to present actionable content that is optional or not the primary purpose of the page.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> title=<span class=\"hljs-string\">&quot;Secure your account with 2-step authentication&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack</span> <span class=\"hljs-attr\">spacing</span>=<span class=\"hljs-string\">&quot;loose&quot;</span> <span class=\"hljs-attr\">vertical</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n        Two-step authentication adds an extra layer of security when logging in\n        to your account. A special code will be required each time you log in,\n        ensuring only you can access your account.\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack</span> <span class=\"hljs-attr\">distribution</span>=<span class=\"hljs-string\">&quot;trailing&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ButtonGroup</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>&gt;</span>Enable two-step authentication<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">plain</span>&gt;</span>Learn more<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ButtonGroup</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<h3 id=\"card-with-destructive-footer-action\">Card with destructive footer action</h3>\n<!-- example-for: web -->\n\n<p>Use when a card action will delete merchant data or be otherwise difficult to recover from.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span>\n  title=<span class=\"hljs-string\">&quot;Shipment 1234&quot;</span>\n  secondaryFooterActions={[{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Cancel shipment&#x27;</span>, <span class=\"hljs-attr\">destructive</span>: <span class=\"hljs-literal\">true</span>}]}\n  primaryFooterAction={{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Add tracking number&#x27;</span>}}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Items&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>1 × Oasis Glass, 4-Pack<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>1 × Anubis Cup, 2-Pack<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<h3 id=\"card-with-multiple-sections\">Card with multiple sections</h3>\n<p>Use when you have two related but distinct pieces of information to communicate to merchants. Multiple sections can help break up complicated concepts to make them easier to scan and understand.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> title=<span class=\"hljs-string\">&quot;Online store dashboard&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>View a summary of your online store’s performance.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span></span></p>\n<p>  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n      View a summary of your online store’s performance, including sales,\n      visitors, top products, and referrals.\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Card/android/multiple-sections@2x.png\" alt=\"Shipping costs card with multiple sections: domestic, international\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Card/ios/multiple-sections@2x.png\" alt=\"Shipping costs card with multiple sections: domestic, international\"></p>\n<!-- /content-for -->\n\n<h3 id=\"card-with-multiple-titled-sections\">Card with multiple titled sections</h3>\n<!-- example-for: web -->\n\n<p>Use when you have two related but distinct pieces of information to communicate to merchants that are complex enough to require a title to introduce them.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> title=<span class=\"hljs-string\">&quot;Online store dashboard&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Reports&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>View a summary of your online store’s performance.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span></span></p>\n<p>  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Summary&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n      View a summary of your online store’s performance, including sales,\n      visitors, top products, and referrals.\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<h3 id=\"card-section-with-action\">Card section with action</h3>\n<!-- example-for: web -->\n\n<p>Use when your card section has actions that apply only to that section.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> title=<span class=\"hljs-string\">&quot;Customer&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>John Smith<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Contact Information&quot;</span> <span class=\"hljs-attr\">actions</span>=<span class=\"hljs-string\">{[{content:</span> &#x27;<span class=\"hljs-attr\">Edit</span>&#x27;}]}&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><a href=\"mailto:&#x6a;&#x6f;&#104;&#110;&#x2e;&#x73;&#x6d;&#x69;&#x74;&#104;&#64;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#101;&#x2e;&#x63;&#x6f;&#x6d;\">&#x6a;&#x6f;&#104;&#110;&#x2e;&#x73;&#x6d;&#x69;&#x74;&#104;&#64;&#101;&#x78;&#x61;&#x6d;&#112;&#108;&#101;&#x2e;&#x63;&#x6f;&#x6d;</a><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<h3 id=\"card-with-subsection\">Card with subsection</h3>\n<!-- example-for: web -->\n\n<p>Use when your card sections need further categorization.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> title=<span class=\"hljs-string\">&quot;Customer&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>John Smith<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Addresses&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Subsection</span>&gt;</span>\n      123 First St\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n      Somewhere\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n      The Universe\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Subsection</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Subsection</span>&gt;</span>\n      123 Second St\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n      Somewhere\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n      The Universe\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Subsection</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Subsection</span>&gt;</span>\n      A single subsection without a sibling has no visual appearance\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Subsection</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<h3 id=\"card-section-with-destructive-action\">Card section with destructive action</h3>\n<!-- content-for: web -->\n\n<p>Use when a card action applies only to one section and will delete merchant data or be otherwise difficult to recover from.</p>\n<!-- /content-for -->\n\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> title=<span class=\"hljs-string\">&quot;Customer&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>John Smith<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span>\n    <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Contact Information&quot;</span>\n    <span class=\"hljs-attr\">actions</span>=<span class=\"hljs-string\">{[{content:</span> &#x27;<span class=\"hljs-attr\">Delete</span>&#x27;, <span class=\"hljs-attr\">destructive:</span> <span class=\"hljs-attr\">true</span>}, {<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Edit</span>&#x27;}]}\n  &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><a href=\"mailto:&#x6a;&#x6f;&#x68;&#x6e;&#46;&#x73;&#x6d;&#105;&#116;&#104;&#64;&#x65;&#120;&#x61;&#x6d;&#112;&#x6c;&#101;&#x2e;&#x63;&#111;&#109;\">&#x6a;&#x6f;&#x68;&#x6e;&#46;&#x73;&#x6d;&#105;&#116;&#104;&#64;&#x65;&#120;&#x61;&#x6d;&#112;&#x6c;&#101;&#x2e;&#x63;&#111;&#109;</a><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Card/android/multiple-titled-sections@2x.png\" alt=\"Customer card with multiple titled sections: note, shipping address\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Card/ios/multiple-titled-sections@2x.png\" alt=\"Customer card with multiple titled sections: note, shipping address\"></p>\n<!-- /content-for -->\n\n<h3 id=\"card-with-a-subdued-section\">Card with a subdued section</h3>\n<!-- example-for: web -->\n\n<p>Use to indicate when one of the sections in your card contains inactive or disabled content.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> title=<span class=\"hljs-string\">&quot;Staff accounts&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>Felix Crafford<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>Ezequiel Manno<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span></span></p>\n<p>  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span> <span class=\"hljs-attr\">subdued</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Deactivated staff accounts&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>Felix Crafford<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>Ezequiel Manno<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<h3 id=\"subdued-card-for-secondary-content\">Subdued card for secondary content</h3>\n<!-- example-for: web -->\n\n<p>Use for content that you want to deprioritize. Subdued cards don’t stand out as much as cards with white backgrounds so don’t use them for information or actions that are critical to merchants.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> title=<span class=\"hljs-string\">&quot;Deactivated staff accounts&quot;</span> sectioned subdued&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>Felix Crafford<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>Ezequiel Manno<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<h3 id=\"card-with-separate-header\">Card with separate header</h3>\n<!-- example-for: web -->\n\n<p>Use to be able to use custom React elements as header content.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Header</span>\n    <span class=\"hljs-attr\">actions</span>=<span class=\"hljs-string\">{[</span>\n      {\n        <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Preview</span>&#x27;,\n      },\n    ]}\n    <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Staff accounts&quot;</span>\n  &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Popover</span>\n      <span class=\"hljs-attr\">active</span>\n      <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{</span>\n        &lt;<span class=\"hljs-attr\">Button</span> <span class=\"hljs-attr\">disclosure</span> <span class=\"hljs-attr\">plain</span>&gt;</span>\n          Add account\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n      }\n      onClose={() =&gt; {}}\n    &gt;\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ActionList</span> <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[{content:</span> &#x27;<span class=\"hljs-attr\">Member</span>&#x27;}, {<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Admin</span>&#x27;}]} /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Popover</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Header</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>Felix Crafford<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>Ezequiel Manno<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<h3 id=\"card-section-with-custom-react-node-title\">Card section with custom React Node title</h3>\n<!-- example-for: web -->\n\n<p>Use to render custom content such as icons, links, or buttons in a card section’s header.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> title=<span class=\"hljs-string\">&quot;Products&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span>\n    <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">{</span>\n      &lt;<span class=\"hljs-attr\">Stack</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{ProductsMajor}</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Subheading</span>&gt;</span>New Products<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Subheading</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack</span>&gt;</span>\n    }\n  &gt;\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>Socks<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>Super Shoes<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<h3 id=\"card-with-all-of-its-elements\">Card with all of its elements</h3>\n<!-- example-for: web -->\n\n<p>Use as a broad example that includes most props available to card.</p>\n<pre><code class=\"language-jsx\">&lt;Card\n  secondaryFooterActions={[{content: &#39;Dismiss&#39;}]}\n  primaryFooterAction={{content: &#39;Export Report&#39;}}\n&gt;\n  &lt;Card.Header\n    actions={[\n      {\n        content: &#39;Total Sales&#39;,\n      },\n    ]}\n    title=&quot;Sales&quot;\n  &gt;\n    &lt;Popover\n      active={false}\n      activator={\n        &lt;Button disclosure plain&gt;\n          View Sales\n        &lt;/Button&gt;\n      }\n      onClose={() =&gt; {}}\n    &gt;\n      &lt;ActionList items={[{content: &#39;Gross Sales&#39;}, {content: &#39;Net Sales&#39;}]} /&gt;\n    &lt;/Popover&gt;\n  &lt;/Card.Header&gt;\n  &lt;Card.Section&gt;\n    &lt;TextContainer&gt;\n      You can use sales reports to see information about your customers’ orders\n      based on criteria such as sales over time, by channel, or by staff.\n    &lt;/TextContainer&gt;\n  &lt;/Card.Section&gt;\n  &lt;Card.Section title=&quot;Total Sales Breakdown&quot;&gt;\n    &lt;ResourceList\n      resourceName={{singular: &#39;sale&#39;, plural: &#39;sales&#39;}}\n      items={[\n        {\n          sales: &#39;Orders&#39;,\n          amount: &#39;USD$0.00&#39;,\n          url: &#39;reports/orders&#39;,\n        },\n        {\n          sales: &#39;Returns&#39;,\n          amount: &#39;-USD$250.00&#39;,\n          url: &#39;reports/returns&#39;,\n        },\n      ]}\n      renderItem={(item) =&gt; {\n        const {sales, amount, url} = item;\n        return (\n          &lt;ResourceList.Item\n            url={url}\n            accessibilityLabel={`View Sales for ${sales}`}\n          &gt;\n            &lt;Stack&gt;\n              &lt;Stack.Item fill&gt;{sales}&lt;/Stack.Item&gt;\n              &lt;Stack.Item&gt;{amount}&lt;/Stack.Item&gt;\n            &lt;/Stack&gt;\n          &lt;/ResourceList.Item&gt;\n        );\n      }}\n    /&gt;\n  &lt;/Card.Section&gt;\n  &lt;Card.Section title=&quot;Deactivated reports&quot; subdued&gt;\n    &lt;List&gt;\n      &lt;List.Item&gt;Payouts&lt;/List.Item&gt;\n      &lt;List.Item&gt;Total Sales By Channel&lt;/List.Item&gt;\n    &lt;/List&gt;\n  &lt;/Card.Section&gt;\n  &lt;Card.Section title=&quot;Note&quot;&gt;\n    &lt;TextContainer&gt;\n      The sales reports are available only if your store is on the Shopify plan\n      or higher.\n    &lt;/TextContainer&gt;\n  &lt;/Card.Section&gt;\n&lt;/Card&gt;\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; flushed sections\n\n&amp;lt;!-- example-&lt;span class=&quot;hljs-attr&quot;&gt;for&lt;/span&gt;: web --&amp;gt;\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; when you need further control over the spacing &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; your card sections.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\n&lt;Card&gt;\n  &lt;Card.Section flush&gt;\n    &lt;Image\n      source=&quot;https://polaris.shopify.com/bundles/bc7087219578918d62ac40bf4b4f99ce.png&quot;\n      alt=&quot;turtle illustration centered with body text and a button&quot;\n    /&gt;\n  &lt;/Card.Section&gt;\n  &lt;Card.Section subdued&gt;\n    &lt;TextContainer&gt;\n      You can use sales reports to see information about your customers’ orders\n      based on criteria such as sales over time, by channel, or by staff.\n    &lt;/TextContainer&gt;\n  &lt;/Card.Section&gt;\n&lt;/Card&gt;\n</code></pre>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To create page-level layout, <a href=\"https://polaris.shopify.com/components/structure/layout\">use the layout component</a></li>\n<li>To highlight a Shopify feature, <a href=\"https://polaris.shopify.com/components/structure/callout-card\">use the callout card component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>The required <code>title</code> prop gives the card a level 2 heading (<code>&lt;h2&gt;</code>). This helps with readability and provides structure to screen reader users.</p>\n<p>If you use the <code>subdued</code> prop on a card or section, make sure that the card or section <code>title</code> conveys the reason for using <code>subdued</code>. This ensures that merchants with low vision, including those who use screen readers, can identify that the content is inactive or less important.</p>\n<!-- usageblock -->\n\n<h4 id=\"do-5\">Do</h4>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> title=<span class=\"hljs-string\">&quot;Deactivated staff accounts&quot;</span> sectioned subdued&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>Felix Crafford<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>Ezequiel Manno<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<h4 id=\"dont-5\">Don’t</h4>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> title=<span class=\"hljs-string\">&quot;Staff accounts&quot;</span> sectioned subdued&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>Felix Crafford<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>Ezequiel Manno<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n,\n\n<!-- /content-for -->\n"
  },
  "Checkbox": {
    "name": "Checkbox",
    "category": "Forms",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "accept",
      "decline",
      "terms",
      "input",
      "multiple choice lists",
      "terms and services",
      "checkboxes",
      "check boxes",
      "multiple selections",
      "form selections",
      "multi-choice lists"
    ],
    "readme": "<h1 id=\"checkbox\">Checkbox</h1>\n<p>Checkboxes are most commonly used to give merchants a way to make a range of selections (zero, one, or multiple). They may also be used as a way to have merchants indicate they agree to specific terms and services.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Checkboxes should:</p>\n<ul>\n<li>Work independently from each other: selecting one checkbox shouldn’t change\nthe selection status of another checkbox in the list. The exception is when a\ncheckbox is used to make a bulk selection of multiple items.</li>\n<li>Be framed positively: for example, <code>Turn on notifications</code> instead of\n<code>Turn off notifications</code></li>\n<li>Always have a label when being used to toggling a setting on or off</li>\n<li>Be listed according to a logical order, whether it’s alphabetical, numerical,\ntime-based, or some other clear system.</li>\n<li>Link to more information or include a subtitle as required to provide more\nexplanation. Don’t rely on tooltips to explain a checkbox.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"lists-with-checkboxes\">Lists with checkboxes</h3>\n<p>Lists that use checkboxes should:</p>\n<ul>\n<li>Start with a capital letter</li>\n</ul>\n<!-- usageblock -->\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Option 1</li>\n<li>Option 2</li>\n<li>Option 3</li>\n</ul>\n<h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>option 1</li>\n<li>option 2</li>\n<li>option 3</li>\n</ul>\n<!-- end -->\n\n<ul>\n<li>Not use commas or semicolons at the end of each line</li>\n</ul>\n<!-- usageblock -->\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Red</li>\n<li>Yellow</li>\n<li>Blue</li>\n</ul>\n<h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>Red;</li>\n<li>Yellow;</li>\n<li>Blue.</li>\n</ul>\n<!-- end -->\n\n<ul>\n<li>In the rare case where the checkbox is asking merchants to agree to terms\nor service, use the first person</li>\n</ul>\n<!-- usageblock -->\n\n<h4 id=\"do-2\">Do</h4>\n<p>I agree to the Terms of Service.</p>\n<h4 id=\"dont-2\">Don’t</h4>\n<p>You agree to the Terms of Service</p>\n<!-- end -->\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-checkboxes\">Default checkboxes</h3>\n<p>Use in forms to toggle the state of something on or off. Default checkboxes can appear in two states: selected and disabled, or unselected.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">CheckboxExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [checked, setChecked] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> handleChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">newChecked</span>) =&gt;</span> <span class=\"hljs-title function_\">setChecked</span>(newChecked), []);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Checkbox</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Basic checkbox&quot;</span>\n      <span class=\"hljs-attr\">checked</span>=<span class=\"hljs-string\">{checked}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChange}</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Checkbox/android/default@2x.png\" alt=\"Default checkbox on Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Checkbox/ios/default@2x.png\" alt=\"Default checkbox on iOS\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To present a list of options where merchants can only make a single choice, <a href=\"https://polaris.shopify.com/components/forms/radio-button\">use the radio button component</a></li>\n<li>To display a list of related content, <a href=\"https://polaris.shopify.com/components/forms/choice-list\">use the choice list component</a></li>\n<li>To create an ungrouped list, <a href=\"https://polaris.shopify.com/components/lists-and-tables/list\">use the content list component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>Screen readers convey the state of the checkbox automatically.</p>\n<ul>\n<li>Use the <code>disabled</code> prop to apply the HTML <code>disabled</code> attribute to the checkbox <code>&lt;input&gt;</code>. This prevents merchants from being able to interact with the checkbox, and conveys its inactive state to assistive technologies.</li>\n<li>Use the <code>id</code> prop to provide a unique <code>id</code> attribute value for the checkbox. If an <code>id</code> isn’t provided, then the component generates one. All checkboxes must have unique <code>id</code> values to work correctly with assistive technologies.</li>\n<li>Setting <code>checked=&quot;indeterminate&quot;</code> conveys the state of the checkbox using <code>aria-checked=&quot;mixed&quot;</code>.</li>\n<li>Setting the <code>ariaControls</code> prop conveys the ID of the element whose contents or presence are controlled by the checkbox to screen reader users with the <code>aria-controls</code> attribute.</li>\n</ul>\n<h3 id=\"labeling\">Labeling</h3>\n<ul>\n<li>The required <code>label</code> prop conveys the purpose of the checkbox to all merchants</li>\n<li>Use the <code>labelHidden</code> prop to visually hide the label but make it available to assistive technologies</li>\n<li>When you provide help text via the <code>helpText</code> prop or an inline error message via the <code>error</code> prop, the help or error content is conveyed to screen reader users with the <code>aria-describedby</code> attribute</li>\n</ul>\n<h3 id=\"keyboard-support\">Keyboard support</h3>\n<ul>\n<li>Move focus to each checkbox using the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)</li>\n<li>To interact with the checkbox when it has keyboard focus, press the <kbd>space</kbd> key</li>\n</ul>\n<!-- /content-for -->\n"
  },
  "ChoiceList": {
    "name": "Choice list",
    "category": "Forms",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "ChoiceList",
      "form",
      "input",
      "choices",
      "select",
      "group of radio buttons",
      "radio button group",
      "group of checkboxes",
      "group of check boxes",
      "list of choices",
      "list of radio buttons",
      "list of checkboxes",
      "list of check boxes",
      "multi-choice list",
      "single-choice list"
    ],
    "readme": "<h1 id=\"choice-list\">Choice list</h1>\n<p>A choice list lets you create a list of grouped radio buttons or checkboxes.\nUse this component if you need to group together a related list of interactive\nchoices.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Choice lists should:</p>\n<ul>\n<li>Include a title that tells merchants what to do or explains the available options</li>\n<li>Label options clearly based on what the option will do</li>\n<li>Avoid mutually exclusive options when allowing multiple selection</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"list-titles\">List titles</h3>\n<p>List titles should:</p>\n<ul>\n<li>Help merchants understand how the items in the list are grouped together, or\nshould explain what kind of choice merchants are making</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<p>Pick a shipping method</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<p>Pick one</p>\n</div></div>\n\n<ul>\n<li>Be concise and scannable:<ul>\n<li>Use simple, clear language that can be read at a glance</li>\n<li>Keep list titles to a single sentence</li>\n<li>It the title introduces the list, it should end with a colon</li>\n<li>Should be written in sentence case</li>\n</ul>\n</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<p>Shipping options</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<p>Shipping Options</p>\n</div></div>\n\n<ul>\n<li>Not use colons</li>\n</ul>\n<!-- usageblock -->\n\n<h4 id=\"do-2\">Do</h4>\n<p>If the customer abandons their checkout, send them an email reminder to complete their order</p>\n<p>\n  <label><input type=\"radio\" name=\"foo\"> Never</label><br />\n  <label><input type=\"radio\" name=\"foo\"> 6 hours later</label><br />\n  <label><input type=\"radio\" name=\"foo\"> 24 hours later</label>\n</p>\n\n<h4 id=\"dont-2\">Don’t</h4>\n<p>If the customer abandons their checkout, send them an email reminder to complete their order:</p>\n<p>\n  <label><input type=\"radio\" name=\"bar\"> Never</label><br />\n  <label><input type=\"radio\" name=\"bar\"> 6 hours later</label><br />\n  <label><input type=\"radio\" name=\"bar\"> 24 hours later</label>\n</p>\n,\n\n<h3 id=\"list-choices\">List choices</h3>\n<p>Every item in a choice list should:</p>\n<ul>\n<li>Start with a capital letter</li>\n</ul>\n<!-- usageblock -->\n\n<h4 id=\"do-3\">Do</h4>\n<ul>\n<li>Option 1</li>\n<li>Option 2</li>\n<li>Option 3</li>\n</ul>\n<h4 id=\"dont-3\">Don’t</h4>\n<ul>\n<li>option 1</li>\n<li>option 2</li>\n<li>option 3</li>\n</ul>\n,\n\n<ul>\n<li>Not use commas or semicolons at the end of each line</li>\n</ul>\n<!-- usageblock -->\n\n<h4 id=\"do-4\">Do</h4>\n<ul>\n<li>Red</li>\n<li>Yellow</li>\n<li>Blue</li>\n</ul>\n<h4 id=\"dont-4\">Don’t</h4>\n<ul>\n<li>Red;</li>\n<li>Yellow;</li>\n<li>Blue.</li>\n</ul>\n,\n\n<ul>\n<li>Be written in sentence case (the first word capitalized, the rest lowercase)</li>\n</ul>\n<!-- usageblock -->\n\n<h4 id=\"do-5\">Do</h4>\n<ul>\n<li>Item one</li>\n<li>Item two</li>\n<li>Item three</li>\n</ul>\n<h4 id=\"dont-5\">Don’t</h4>\n<ul>\n<li>Item One</li>\n<li>Item Two</li>\n<li>Item Three</li>\n</ul>\n,\n\n<h3 id=\"helper-text-and-descriptions\">Helper text and descriptions</h3>\n<p>If your list contains helper text, only the description below the list item should contain punctuation.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"single-choice-list\">Single choice list</h3>\n<p>Allows merchants to select one option from a list.</p>\n<ul>\n<li>Make sure all options are an either/or choice.</li>\n</ul>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SingleChoiceListExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>([<span class=\"hljs-string\">&#x27;hidden&#x27;</span>]);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelected</span>(value), []);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ChoiceList</span>\n      <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Company name&quot;</span>\n      <span class=\"hljs-attr\">choices</span>=<span class=\"hljs-string\">{[</span>\n        {<span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Hidden</span>&#x27;, <span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">hidden</span>&#x27;},\n        {<span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Optional</span>&#x27;, <span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">optional</span>&#x27;},\n        {<span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Required</span>&#x27;, <span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">required</span>&#x27;},\n      ]}\n      <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selected}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChange}</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/ChoiceList/android/single-choice@2x.png\" alt=\"Single choice list for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/ChoiceList/ios/single-choice@2x.png\" alt=\"Single choice list for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"single-choice-list-with-error\">Single choice list with error</h3>\n<p>Allows for accessible error handling by connecting the error message to the field with the error.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ChoiceListWithErrorExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;hidden&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelected</span>(value), []);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ChoiceList</span>\n      <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Company name&quot;</span>\n      <span class=\"hljs-attr\">choices</span>=<span class=\"hljs-string\">{[</span>\n        {<span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Hidden</span>&#x27;, <span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">hidden</span>&#x27;, <span class=\"hljs-attr\">describedByError:</span> <span class=\"hljs-attr\">true</span>},\n        {<span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Optional</span>&#x27;, <span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">optional</span>&#x27;},\n        {<span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Required</span>&#x27;, <span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">required</span>&#x27;},\n      ]}\n      <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selected}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChange}</span>\n      <span class=\"hljs-attr\">error</span>=<span class=\"hljs-string\">&quot;Company name cannot be hidden at this time&quot;</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/ChoiceList/android/single-choice-error@2x.png\" alt=\"Single choice list with error for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/ChoiceList/ios/single-choice-error@2x.png\" alt=\"Single choice list with error for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"multi-choice-list\">Multi-choice list</h3>\n<p>Allows merchants to select multiple options from a list.</p>\n<ul>\n<li>Avoid options that are an either/or choice.</li>\n</ul>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MultiChoiceListExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>([<span class=\"hljs-string\">&#x27;hidden&#x27;</span>]);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelected</span>(value), []);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ChoiceList</span>\n      <span class=\"hljs-attr\">allowMultiple</span>\n      <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;While the customer is checking out&quot;</span>\n      <span class=\"hljs-attr\">choices</span>=<span class=\"hljs-string\">{[</span>\n        {\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Use</span> <span class=\"hljs-attr\">the</span> <span class=\"hljs-attr\">shipping</span> <span class=\"hljs-attr\">address</span> <span class=\"hljs-attr\">as</span> <span class=\"hljs-attr\">the</span> <span class=\"hljs-attr\">billing</span> <span class=\"hljs-attr\">address</span> <span class=\"hljs-attr\">by</span> <span class=\"hljs-attr\">default</span>&#x27;,\n          <span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">shipping</span>&#x27;,\n          <span class=\"hljs-attr\">helpText:</span>\n            &#x27;<span class=\"hljs-attr\">Reduces</span> <span class=\"hljs-attr\">the</span> <span class=\"hljs-attr\">number</span> <span class=\"hljs-attr\">of</span> <span class=\"hljs-attr\">fields</span> <span class=\"hljs-attr\">required</span> <span class=\"hljs-attr\">to</span> <span class=\"hljs-attr\">check</span> <span class=\"hljs-attr\">out.</span> <span class=\"hljs-attr\">The</span> <span class=\"hljs-attr\">billing</span> <span class=\"hljs-attr\">address</span> <span class=\"hljs-attr\">can</span> <span class=\"hljs-attr\">still</span> <span class=\"hljs-attr\">be</span> <span class=\"hljs-attr\">edited.</span>&#x27;,\n        },\n        {\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Require</span> <span class=\"hljs-attr\">a</span> <span class=\"hljs-attr\">confirmation</span> <span class=\"hljs-attr\">step</span>&#x27;,\n          <span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">confirmation</span>&#x27;,\n          <span class=\"hljs-attr\">helpText:</span>\n            &#x27;<span class=\"hljs-attr\">Customers</span> <span class=\"hljs-attr\">must</span> <span class=\"hljs-attr\">review</span> <span class=\"hljs-attr\">their</span> <span class=\"hljs-attr\">order</span> <span class=\"hljs-attr\">details</span> <span class=\"hljs-attr\">before</span> <span class=\"hljs-attr\">purchasing.</span>&#x27;,\n        },\n      ]}\n      <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selected}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChange}</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/ChoiceList/android/multi-choice@2x.png\" alt=\"Multi choice list for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/ChoiceList/ios/multi-choice@2x.png\" alt=\"Multi choice list for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"single-choice-or-multi-choice-list-with-children-content-always-rendered\">Single-choice or multi-choice list with children content (always rendered)</h3>\n<!-- example-for: web -->\n\n<p>Use when you need merchants to view and/or interact with additional content under a choice. The content will always be rendered. Works for both single-choice and multi-choice list.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SingleOrMultiChoiceListWithChildrenContextExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>([<span class=\"hljs-string\">&#x27;none&#x27;</span>]);\n  <span class=\"hljs-keyword\">const</span> [textFieldValue, setTextFieldValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleChoiceListChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelected</span>(value), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTextFieldChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setTextFieldValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> renderChildren = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n        <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Minimum Quantity&quot;</span>\n        <span class=\"hljs-attr\">labelHidden</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleTextFieldChange}</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{textFieldValue}</span>\n        <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n      /&gt;</span></span>\n    ),\n    [handleTextFieldChange, textFieldValue],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ChoiceList</span>\n      <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Discount minimum requirements&quot;</span>\n      <span class=\"hljs-attr\">choices</span>=<span class=\"hljs-string\">{[</span>\n        {<span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">None</span>&#x27;, <span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">none</span>&#x27;},\n        {<span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Minimum</span> <span class=\"hljs-attr\">purchase</span>&#x27;, <span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">minimum_purchase</span>&#x27;},\n        {\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Minimum</span> <span class=\"hljs-attr\">quantity</span>&#x27;,\n          <span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">minimum_quantity</span>&#x27;,\n          <span class=\"hljs-attr\">renderChildren</span>,\n        },\n      ]}\n      <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selected}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChoiceListChange}</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"single-choice-or-multi-choice-list-with-children-content-only-rendered-when-choice-is-selected\">Single-choice or multi-choice list with children content (only rendered when choice is selected)</h3>\n<!-- example-for: web -->\n\n<p>Use when you need merchants to view and/or interact with additional content under a choice. The content is only rendered when the choice is selected. Works for both single-choice and multi-choice list.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SingleOrMultuChoiceListWithChildrenContextWhenSelectedExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>([<span class=\"hljs-string\">&#x27;none&#x27;</span>]);\n  <span class=\"hljs-keyword\">const</span> [textFieldValue, setTextFieldValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleChoiceListChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelected</span>(value), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTextFieldChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setTextFieldValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> renderChildren = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">isSelected</span>) =&gt;</span>\n      isSelected &amp;&amp; (\n        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n          <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Minimum Quantity&quot;</span>\n          <span class=\"hljs-attr\">labelHidden</span>\n          <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleTextFieldChange}</span>\n          <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{textFieldValue}</span>\n          <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n        /&gt;</span></span>\n      ),\n    [handleTextFieldChange, textFieldValue],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">150px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ChoiceList</span>\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Discount minimum requirements&quot;</span>\n        <span class=\"hljs-attr\">choices</span>=<span class=\"hljs-string\">{[</span>\n          {<span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">None</span>&#x27;, <span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">none</span>&#x27;},\n          {<span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Minimum</span> <span class=\"hljs-attr\">purchase</span>&#x27;, <span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">minimum_purchase</span>&#x27;},\n          {\n            <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Minimum</span> <span class=\"hljs-attr\">quantity</span>&#x27;,\n            <span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">minimum_quantity</span>&#x27;,\n            <span class=\"hljs-attr\">renderChildren</span>,\n          },\n        ]}\n        <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selected}</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChoiceListChange}</span>\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To present a long list of radio buttons or when space is constrained, <a href=\"https://polaris.shopify.com/components/forms/select\">use the select component</a></li>\n<li>To build a group of radio buttons or checkboxes with a custom layout, use the <a href=\"https://polaris.shopify.com/components/forms/radio-button\">radio button component</a> or <a href=\"https://polaris.shopify.com/components/forms/checkbox\">checkbox component</a></li>\n<li>To display a simple, non-interactive list of related content, <a href=\"https://polaris.shopify.com/components/lists-and-tables/list\">use the list component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>The choice list component uses the accessibility features of the <a href=\"https://polaris.shopify.com/components/forms/checkbox\">checkbox</a> and <a href=\"https://polaris.shopify.com/components/forms/radio-button\">radio button</a> components.</p>\n<!-- /content-for -->\n"
  },
  "Collapsible": {
    "name": "Collapsible",
    "category": "Behavior",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "hide",
      "show",
      "low priority",
      "less important",
      "disclosure",
      "accordion",
      "accordian",
      "expand content",
      "toggle",
      "toggleable",
      "reveal",
      "show more",
      "show all button",
      "show hide",
      "expanding view",
      "collapse",
      "ios",
      "android"
    ],
    "readme": "<h1 id=\"collapsible\">Collapsible</h1>\n<p>The collapsible component is used to put long sections of information under a block that merchants can expand or collapse.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The collapsible component should:</p>\n<ul>\n<li>Be used for information that is lower priority or that merchants don’t need\nto see all the time</li>\n<li>Not be used to hide error messages or other critical information that requires\nan immediate action</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>Collapsible containers are cards with expandable and collapsible functionality, and should follow the content guidelines for <a href=\"https://polaris.shopify.com/components/structure/card#section-content-guidelines\">cards</a>.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-collapsible-component\">Default collapsible component</h3>\n<p>Use for a basic “show more” interaction when you need to display more content.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">CollapsibleExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [open, setOpen] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleToggle = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setOpen</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">open</span>) =&gt;</span> !open), []);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">200px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack</span> <span class=\"hljs-attr\">vertical</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>\n            <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleToggle}</span>\n            <span class=\"hljs-attr\">ariaExpanded</span>=<span class=\"hljs-string\">{open}</span>\n            <span class=\"hljs-attr\">ariaControls</span>=<span class=\"hljs-string\">&quot;basic-collapsible&quot;</span>\n          &gt;</span>\n            Toggle\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Collapsible</span>\n            <span class=\"hljs-attr\">open</span>=<span class=\"hljs-string\">{open}</span>\n            <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;basic-collapsible&quot;</span>\n            <span class=\"hljs-attr\">transition</span>=<span class=\"hljs-string\">{{duration:</span> &#x27;<span class=\"hljs-attr\">500ms</span>&#x27;, <span class=\"hljs-attr\">timingFunction:</span> &#x27;<span class=\"hljs-attr\">ease-in-out</span>&#x27;}}\n            <span class=\"hljs-attr\">expandOnPrint</span>\n          &gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n                Your mailing list lets you contact customers or visitors who\n                have shown an interest in your store. Reach out to them with\n                exclusive offers or updates about your products.\n              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">&quot;#&quot;</span>&gt;</span>Test link<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Collapsible</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Collapsible/android/default@2x.png\" alt=\"Collapsible on Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Collapsible/ios/default@2x.png\" alt=\"Collapsible on iOS\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To control a collapsible component, use the <a href=\"https://polaris.shopify.com/components/actions/button\">button</a> component</li>\n<li>To put long sections of information in a container that allows for scrolling, <a href=\"https://polaris.shopify.com/components/behavior/scrollable\">use the scrollable component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>Use the collapsible component in conjunction with a <a href=\"https://polaris.shopify.com/components/actions/button\">button</a>. Place the collapsible content immediately after the button that controls it, so merchants with vision or attention issues can easily discover what content is being affected.</p>\n<ul>\n<li>Use the required <code>id</code> prop of the collapsible component to give the content a unique <code>id</code> value</li>\n<li>Use the <code>ariaExpanded</code> prop on the button component to add an <code>aria-expanded</code> attribute, which conveys the expanded or collapsed state to screen reader users</li>\n<li>Use the <code>ariaControls</code> prop on the button component, and set its value to the <code>id</code> value of the collapsible component</li>\n</ul>\n<!-- /content-for -->\n"
  },
  "ColorPicker": {
    "name": "Color picker",
    "category": "Forms",
    "keywords": [
      "ColorPicker",
      "HuePicker",
      "AlphaPicker",
      "Slidable",
      "Choose color",
      "Select color",
      "Pick color",
      "color selector with transparent value",
      "colorpicker with transparent value",
      "alpha value picker",
      "alpha value selector"
    ],
    "readme": "<h1 id=\"color-picker\">Color picker</h1>\n<p>The color picker is used to let merchants select a color visually. For\nexample, merchants use the color picker to customize the accent color of the\nemail templates for their shop.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<ul>\n<li>Use the alpha slider if you want to allow merchants to be able to select a\ntransparent color</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-color-picker\">Default color picker</h3>\n<p>Use when merchants need to select a color to make the selection a visual\ntask rather than a technical one.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ColorPickerExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [color, setColor] = <span class=\"hljs-title function_\">useState</span>({\n    <span class=\"hljs-attr\">hue</span>: <span class=\"hljs-number\">120</span>,\n    <span class=\"hljs-attr\">brightness</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">saturation</span>: <span class=\"hljs-number\">1</span>,\n  });</p>\n<p>  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ColorPicker</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{setColor}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">{color}</span> /&gt;</span></span>;\n}\n</pre></code></p>\n<h3 id=\"colorpicker-with-transparent-value\">Colorpicker with transparent value</h3>\n<p>Use when attached to a visual builder to allow the designated object to have a\ntransparent background that allows underlying objects to show through.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ColorPickerWithTransparentValueExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [color, setColor] = <span class=\"hljs-title function_\">useState</span>({\n    <span class=\"hljs-attr\">hue</span>: <span class=\"hljs-number\">300</span>,\n    <span class=\"hljs-attr\">brightness</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">saturation</span>: <span class=\"hljs-number\">0.7</span>,\n    <span class=\"hljs-attr\">alpha</span>: <span class=\"hljs-number\">0.7</span>,\n  });</p>\n<p>  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ColorPicker</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{setColor}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">{color}</span> <span class=\"hljs-attr\">allowAlpha</span> /&gt;</span></span>;\n}\n</pre></code></p>\n<h3 id=\"colorpicker-with-transparent-value-full-width\">Colorpicker with transparent value full width</h3>\n<p>Use when attached to a visual builder to allow the designated object to have a\ntransparent background that allows underlying objects to show through.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ColorPickerWithTransparentValueExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [color, setColor] = <span class=\"hljs-title function_\">useState</span>({\n    <span class=\"hljs-attr\">hue</span>: <span class=\"hljs-number\">300</span>,\n    <span class=\"hljs-attr\">brightness</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">saturation</span>: <span class=\"hljs-number\">0.7</span>,\n    <span class=\"hljs-attr\">alpha</span>: <span class=\"hljs-number\">0.7</span>,\n  });</p>\n<p>  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ColorPicker</span> <span class=\"hljs-attr\">fullWidth</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{setColor}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">{color}</span> <span class=\"hljs-attr\">allowAlpha</span> /&gt;</span></span>;\n}\n</pre></code></p>\n"
  },
  "Combobox": {
    "name": "Combobox",
    "category": "Forms",
    "keywords": [
      "autocomplete",
      "searchable",
      "typeahead",
      "combobox",
      "combo box",
      "listbox",
      "list box"
    ],
    "readme": "<h1 id=\"combobox\">Combobox</h1>\n<p>Combobox uses an enhanced text field that allows merchants to filter through a list of options to pick one or more values. The list of options is displayed when a merchant focuses on the field.</p>\n<hr>\n<h2 id=\"anatomy\">Anatomy</h2>\n<p><img src=\"/images-from-old-styleguide/components/Combobox/combobox-anatomy.png\" alt=\"A diagram of the Combobox component showing the smaller primitive components it is composed of.\"></p>\n<p>A combobox is made up of the following:</p>\n<ol>\n<li><strong>Text field</strong>: The field people click in to activate the popover and filter through the options they can choose from. Once selected, the option will be shown in the text input.</li>\n<li><strong>Popover</strong>: Renders to contain the Listbox.</li>\n<li><strong>Listbox</strong>: Contains the list of all selectable items.</li>\n<li><strong>Listbox</strong> options: The individual options that merchants can select. For context on ways the Listbox can be composed with various content, check out the <a href=\"https://polaris.shopify.com/components/forms/listbox\">listbox documentation</a>.</li>\n</ol>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The <code>Combobox</code> component should:</p>\n<ul>\n<li>Be clearly labeled so the merchant knows what type of options will be available</li>\n<li>Not be used within a popover</li>\n<li>Indicate a loading state to the merchant while option data is being populated</li>\n<li>Order items in an intentional way so it’s easy for the merchant to find a specific value</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>The input field for <code>Combobox</code> should follow the <a href=\"https://polaris.shopify.com/components/forms/text-field\">content guidelines</a> for text fields.</p>\n<hr>\n<h2 id=\"sorting-and-filtering\">Sorting and filtering</h2>\n<h3 id=\"sorting\">Sorting</h3>\n<p>Item order should be intentional. Order them so it’s easy for the merchant to find a specific value. Some ways you can do this:</p>\n<ul>\n<li>Sort options in alphabetical order</li>\n<li>Display options based on how frequently the merchant selects an option</li>\n</ul>\n<p>If multiple options can be selected, move selected items to the top of the list. If this doesn’t work for your context, you can override this behavior.</p>\n<h3 id=\"filtering\">Filtering</h3>\n<ul>\n<li>By default, menu items are filtered based on whether or not they match the value of the textfield.</li>\n<li>Filters are <strong>not</strong> case-sensitive by default.</li>\n<li>You can apply custom filtering logic if the default behavior doesn’t make sense for your use case.</li>\n</ul>\n<hr>\n<h2 id=\"patterns\">Patterns</h2>\n<h3 id=\"tags-autocomplete\">Tags autocomplete</h3>\n<p>The tag multiselect allows merchants to select, create, and browse from a long list of options.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"single-select-autocomplete\">Single select autocomplete</h3>\n<p>Allows merchants to select from a predefined list of options. It’s typically used when there are a large number of options to choose from.</p>\n<pre><code class=\"language-jsx\">function ComboboxExample() {\n  const deselectedOptions = useMemo(\n    () =&gt; [\n      {value: &#39;rustic&#39;, label: &#39;Rustic&#39;},\n      {value: &#39;antique&#39;, label: &#39;Antique&#39;},\n      {value: &#39;vinyl&#39;, label: &#39;Vinyl&#39;},\n      {value: &#39;vintage&#39;, label: &#39;Vintage&#39;},\n      {value: &#39;refurbished&#39;, label: &#39;Refurbished&#39;},\n    ],\n    [],\n  );\n\n  const [selectedOption, setSelectedOption] = useState();\n  const [inputValue, setInputValue] = useState(&#39;&#39;);\n  const [options, setOptions] = useState(deselectedOptions);\n\n  const updateText = useCallback(\n    (value) =&gt; {\n      setInputValue(value);\n\n      if (value === &#39;&#39;) {\n        setOptions(deselectedOptions);\n        return;\n      }\n\n      const filterRegex = new RegExp(value, &#39;i&#39;);\n      const resultOptions = deselectedOptions.filter((option) =&gt;\n        option.label.match(filterRegex),\n      );\n      setOptions(resultOptions);\n    },\n    [deselectedOptions],\n  );\n\n  const updateSelection = useCallback(\n    (selected) =&gt; {\n      const matchedOption = options.find((option) =&gt; {\n        return option.value.match(selected);\n      });\n\n      setSelectedOption(selected);\n      setInputValue((matchedOption &amp;&amp; matchedOption.label) || &#39;&#39;);\n    },\n    [options],\n  );\n\n  const optionsMarkup =\n    options.length &gt; 0\n      ? options.map((option) =&gt; {\n          const {label, value} = option;\n\n          return (\n            &lt;Listbox.Option\n              key={`${value}`}\n              value={value}\n              selected={selectedOption === value}\n              accessibilityLabel={label}\n            &gt;\n              {label}\n            &lt;/Listbox.Option&gt;\n          );\n        })\n      : null;\n\n  return (\n    &lt;div style={{height: &#39;225px&#39;}}&gt;\n      &lt;Combobox\n        activator={\n          &lt;Combobox.TextField\n            prefix={&lt;Icon source={SearchMinor} color=&quot;inkLighter&quot; /&gt;}\n            onChange={updateText}\n            label=&quot;Search customers&quot;\n            labelHidden\n            value={inputValue}\n            placeholder=&quot;Search customers&quot;\n          /&gt;\n        }\n      &gt;\n        {options.length &gt; 0 ? (\n          &lt;Listbox onSelect={updateSelection}&gt;{optionsMarkup}&lt;/Listbox&gt;\n        ) : null}\n      &lt;/Combobox&gt;\n    &lt;/div&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Multi&lt;/span&gt;-select autocomplete\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Allows&lt;/span&gt; the merchant to select multiple options &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; a pre-defined list &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; options.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction MultiComboboxExample() {\n  const deselectedOptions = useMemo(\n    () =&gt; [\n      {value: &#39;rustic&#39;, label: &#39;Rustic&#39;},\n      {value: &#39;antique&#39;, label: &#39;Antique&#39;},\n      {value: &#39;vinyl&#39;, label: &#39;Vinyl&#39;},\n      {value: &#39;vintage&#39;, label: &#39;Vintage&#39;},\n      {value: &#39;refurbished&#39;, label: &#39;Refurbished&#39;},\n    ],\n    [],\n  );\n\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const [inputValue, setInputValue] = useState(&#39;&#39;);\n  const [options, setOptions] = useState(deselectedOptions);\n\n  const updateText = useCallback(\n    (value) =&gt; {\n      setInputValue(value);\n\n      if (value === &#39;&#39;) {\n        setOptions(deselectedOptions);\n        return;\n      }\n\n      const filterRegex = new RegExp(value, &#39;i&#39;);\n      const resultOptions = deselectedOptions.filter((option) =&gt;\n        option.label.match(filterRegex),\n      );\n      setOptions(resultOptions);\n    },\n    [deselectedOptions],\n  );\n\n  const updateSelection = useCallback(\n    (selected) =&gt; {\n      if (selectedOptions.includes(selected)) {\n        setSelectedOptions(\n          selectedOptions.filter((option) =&gt; option !== selected),\n        );\n      } else {\n        setSelectedOptions([...selectedOptions, selected]);\n      }\n\n      const matchedOption = options.find((option) =&gt; {\n        return option.value.match(selected);\n      });\n      setInputValue((matchedOption &amp;&amp; matchedOption.label) || &#39;&#39;);\n    },\n    [options, selectedOptions],\n  );\n\n  const removeTag = useCallback(\n    (tag) =&gt; () =&gt; {\n      const options = [...selectedOptions];\n      options.splice(options.indexOf(tag), 1);\n      setSelectedOptions(options);\n    },\n    [selectedOptions],\n  );\n\n  const tagsMarkup = selectedOptions.map((option) =&gt; {\n    let tagLabel = &#39;&#39;;\n    tagLabel = option.replace(&#39;_&#39;, &#39; &#39;);\n    tagLabel = titleCase(tagLabel);\n    return (\n      &lt;Tag key={`option${option}`} onRemove={removeTag(option)}&gt;\n        {tagLabel}\n      &lt;/Tag&gt;\n    );\n  });\n\n  const optionsMarkup =\n    options.length &gt; 0\n      ? options.map((option) =&gt; {\n          const {label, value} = option;\n\n          return (\n            &lt;Listbox.Option\n              key={`${value}`}\n              value={value}\n              selected={selectedOptions.includes(value)}\n              accessibilityLabel={label}\n            &gt;\n              {label}\n            &lt;/Listbox.Option&gt;\n          );\n        })\n      : null;\n\n  return (\n    &lt;div style={{height: &#39;225px&#39;}}&gt;\n      &lt;Combobox\n        allowMultiple\n        activator={\n          &lt;Combobox.TextField\n            prefix={&lt;Icon source={SearchMinor} color=&quot;inkLighter&quot; /&gt;}\n            onChange={updateText}\n            label=&quot;Search customers&quot;\n            labelHidden\n            value={inputValue}\n            placeholder=&quot;Search customers&quot;\n          /&gt;\n        }\n      &gt;\n        {optionsMarkup ? (\n          &lt;Listbox onSelect={updateSelection}&gt;{optionsMarkup}&lt;/Listbox&gt;\n        ) : null}\n      &lt;/Combobox&gt;\n      &lt;TextContainer&gt;\n        &lt;Stack&gt;{tagsMarkup}&lt;/Stack&gt;\n      &lt;/TextContainer&gt;\n    &lt;/div&gt;\n  );\n\n  function titleCase(string) {\n    return string\n      .toLowerCase()\n      .split(&#39; &#39;)\n      .map((word) =&gt; word.replace(word[0], word[0].toUpperCase()))\n      .join(&#39;&#39;);\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Autocomplete&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; loading\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to indicate loading state to merchants &lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; option data is processing.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction LoadingAutocompleteExample() {\n  const deselectedOptions = useMemo(\n    () =&gt; [\n      {value: &#39;rustic&#39;, label: &#39;Rustic&#39;},\n      {value: &#39;antique&#39;, label: &#39;Antique&#39;},\n      {value: &#39;vinyl&#39;, label: &#39;Vinyl&#39;},\n      {value: &#39;vintage&#39;, label: &#39;Vintage&#39;},\n      {value: &#39;refurbished&#39;, label: &#39;Refurbished&#39;},\n    ],\n    [],\n  );\n\n  const [selectedOption, setSelectedOption] = useState();\n  const [inputValue, setInputValue] = useState(&#39;&#39;);\n  const [options, setOptions] = useState(deselectedOptions);\n  const [loading, setLoading] = useState(false);\n\n  const updateText = useCallback(\n    (value) =&gt; {\n      setInputValue(value);\n\n      if (!loading) {\n        setLoading(true);\n      }\n\n      setTimeout(() =&gt; {\n        if (value === &#39;&#39;) {\n          setOptions(deselectedOptions);\n          setLoading(false);\n          return;\n        }\n        const filterRegex = new RegExp(value, &#39;i&#39;);\n        const resultOptions = options.filter((option) =&gt;\n          option.label.match(filterRegex),\n        );\n        setOptions(resultOptions);\n        setLoading(false);\n      }, 300);\n    },\n    [deselectedOptions, loading, options],\n  );\n\n  const updateSelection = useCallback(\n    (selected) =&gt; {\n      const matchedOption = options.find((option) =&gt; {\n        return option.value.match(selected);\n      });\n\n      setSelectedOption(selected);\n      setInputValue((matchedOption &amp;&amp; matchedOption.label) || &#39;&#39;);\n    },\n    [options],\n  );\n\n  const optionsMarkup =\n    options.length &gt; 0\n      ? options.map((option) =&gt; {\n          const {label, value} = option;\n\n          return (\n            &lt;Listbox.Option\n              key={`${value}`}\n              value={value}\n              selected={selectedOption === value}\n              accessibilityLabel={label}\n            &gt;\n              {label}\n            &lt;/Listbox.Option&gt;\n          );\n        })\n      : null;\n\n  const loadingMarkup = loading ? &lt;Listbox.Loading /&gt; : null;\n\n  const listboxMarkup =\n    optionsMarkup || loadingMarkup ? (\n      &lt;Listbox onSelect={updateSelection}&gt;\n        {optionsMarkup &amp;&amp; !loading ? optionsMarkup : null}\n        {loadingMarkup}\n      &lt;/Listbox&gt;\n    ) : null;\n\n  return (\n    &lt;Combobox\n      activator={\n        &lt;Combobox.TextField\n          prefix={&lt;Icon source={SearchMinor} color=&quot;inkLighter&quot; /&gt;}\n          onChange={updateText}\n          label=&quot;Search customers&quot;\n          labelHidden\n          value={inputValue}\n          placeholder=&quot;Search customers&quot;\n        /&gt;\n      }\n    &gt;\n      {listboxMarkup}\n    &lt;/Combobox&gt;\n  );\n}\n</code></pre>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>For an input field without suggested options, <a href=\"https://polaris.shopify.com/components/forms/text-field\">use the text field component</a></li>\n<li>For a list of selectable options not linked to an input field, <a href=\"https://polaris.shopify.com/components/lists-and-tables/listbox\">use the list box component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<h3 id=\"structure\">Structure</h3>\n<p>The <code>Combobox</code> component is based on the <a href=\"https://www.w3.org/TR/wai-aria-practices-1.1/#combobox\">ARIA 1.2 combobox pattern</a>. It is a combination of a single-line <code>TextField</code> and a <code>Popover</code>. The current implementation expects a <a href=\"https://polaris.shopify.com/components/lists-and-tables/listbox\"><code>Listbox</code></a> component to be used.</p>\n<p>The <code>Combobox</code> popover displays below the text field or other control by default so it is easy for merchants to discover and use. However, you can change the position with the <code>preferredPosition</code> prop.</p>\n<p><code>Combobox</code> features can be challenging for merchants with visual, motor, and cognitive disabilities. Even when they’re built using best practices, these features can be difficult to use with some assistive technologies. Merchants should always be able to search, enter data, or perform other activities without relying on the combobox.</p>\n<!-- usageblock -->\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Use combobox as progressive enhancement to make the interface easier to use for most merchants.</li>\n</ul>\n<h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>Require that merchants make a selection from the combobox to complete a task.</li>\n</ul>\n<!-- end -->\n\n<h3 id=\"keyboard-support\">Keyboard support</h3>\n<ul>\n<li>Give the combobox&#39;s text input keyboard focus with the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)</li>\n</ul>\n<!-- /content-for -->\n"
  },
  "ContextualSaveBar": {
    "name": "Contextual save bar",
    "category": "Forms",
    "keywords": [
      "form",
      "forms",
      "action",
      "actions",
      "save",
      "cancel",
      "logo"
    ],
    "readme": "<h1 id=\"contextual-save-bar\">Contextual Save Bar</h1>\n<p>The contextual save bar tells merchants their options once they have made changes to a form on the page. This component is also shown while creating a new object like a product or customer. Merchants can use this component to save or discard their work.</p>\n<hr>\n<h2 id=\"required-components\">Required components</h2>\n<p>The contextual save bar component must be wrapped in the <a href=\"https://polaris.shopify.com/components/structure/frame\">frame</a> component.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The contextual save bar component should:</p>\n<ul>\n<li>Become visible when a form on the page has unsaved changes</li>\n<li>Be used to save or discard in-progress changes</li>\n<li>Provide brief and helpful context on the nature of in-progress changes</li>\n<li>Save all changes on the page. Avoid scenarios where multiple forms on a single page can be edited at the same time. If specific sections of a page need to be independently editable, use an Edit button to launch a <a href=\"https://polaris.shopify.com/components/overlays/modal\">modal dialog</a> for each section where changes can be made and saved.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>Messages in the contextual save bar component should be informative, clear, and concise. They should follow the {adjective}+{noun} pattern. Don’t use full sentences.</p>\n<p>The standard message content is</p>\n<ul>\n<li>“Unsaved changes” when editing existing content</li>\n<li>“Unsaved {resource name}” when creating a new object</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Unsaved changes</li>\n<li>Unsaved product</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>You have unsaved changes</li>\n<li>Red and white striped shirt not yet saved</li>\n</ul>\n</div></div>\n\n<p>Actions in the contextual save bar component should consist of a strong verb that encourages action. They should not include a noun.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Save</li>\n<li>Discard</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>Save changes</li>\n<li>Discard changes</li>\n</ul>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-contextual-save-bar\">Default contextual save bar</h3>\n<p>Use the save action to provide an opportunity to save changes. Use the discard action to allow merchants the option to discard their changes. Use the message to provide helpful context on the nature of those changes.</p>\n<p><code><pre>\n&lt;div style={{<span class=\"hljs-attr\">height</span>: <span class=\"hljs-string\">&#x27;250px&#x27;</span>}}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Frame</span>\n    <span class=\"hljs-attr\">logo</span>=<span class=\"hljs-string\">{{</span>\n      <span class=\"hljs-attr\">width:</span> <span class=\"hljs-attr\">124</span>,\n      <span class=\"hljs-attr\">contextualSaveBarSource:</span>\n        &#x27;<span class=\"hljs-attr\">https:</span>//<span class=\"hljs-attr\">cdn.shopify.com</span>/<span class=\"hljs-attr\">s</span>/<span class=\"hljs-attr\">files</span>/<span class=\"hljs-attr\">1</span>/<span class=\"hljs-attr\">0446</span>/<span class=\"hljs-attr\">6937</span>/<span class=\"hljs-attr\">files</span>/<span class=\"hljs-attr\">jaded-pixel-logo-gray.svg</span>?<span class=\"hljs-attr\">6215648040070010999</span>&#x27;,\n    }}\n  &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ContextualSaveBar</span>\n      <span class=\"hljs-attr\">message</span>=<span class=\"hljs-string\">&quot;Unsaved changes&quot;</span>\n      <span class=\"hljs-attr\">saveAction</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">onAction:</span> () =&gt;</span> console.log(&#x27;add form submit logic&#x27;),\n        loading: false,\n        disabled: false,\n      }}\n      discardAction={{\n        onAction: () =&gt; console.log(&#x27;add clear form logic&#x27;),\n      }}\n    /&gt;\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Frame</span>&gt;</span></span>\n&lt;/div&gt;\n</pre></code></p>\n<h3 id=\"contextual-save-bar-during-creation\">Contextual save bar during creation</h3>\n<p>Use the save action to provide an opportunity to save a newly-created resource. Use the discard action to allow merchants the option to discard a new resource. Use the message to provide helpful context on the nature of the new resource.</p>\n<p><code><pre>\n&lt;div style={{<span class=\"hljs-attr\">height</span>: <span class=\"hljs-string\">&#x27;250px&#x27;</span>}}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Frame</span>\n    <span class=\"hljs-attr\">logo</span>=<span class=\"hljs-string\">{{</span>\n      <span class=\"hljs-attr\">width:</span> <span class=\"hljs-attr\">124</span>,\n      <span class=\"hljs-attr\">contextualSaveBarSource:</span>\n        &#x27;<span class=\"hljs-attr\">https:</span>//<span class=\"hljs-attr\">cdn.shopify.com</span>/<span class=\"hljs-attr\">s</span>/<span class=\"hljs-attr\">files</span>/<span class=\"hljs-attr\">1</span>/<span class=\"hljs-attr\">0446</span>/<span class=\"hljs-attr\">6937</span>/<span class=\"hljs-attr\">files</span>/<span class=\"hljs-attr\">jaded-pixel-logo-gray.svg</span>?<span class=\"hljs-attr\">6215648040070010999</span>&#x27;,\n    }}\n  &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ContextualSaveBar</span>\n      <span class=\"hljs-attr\">message</span>=<span class=\"hljs-string\">&quot;Unsaved product&quot;</span>\n      <span class=\"hljs-attr\">saveAction</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">onAction:</span> () =&gt;</span> console.log(&#x27;add form submit logic&#x27;),\n        loading: false,\n        disabled: false,\n      }}\n      discardAction={{\n        onAction: () =&gt; console.log(&#x27;add clear form logic&#x27;),\n      }}\n    /&gt;\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Frame</span>&gt;</span></span>\n&lt;/div&gt;\n</pre></code></p>\n<h3 id=\"contextual-save-bar-with-flush-contents\">Contextual save bar with flush contents</h3>\n<p>Use the alignContentFlush flag when you want to omit the logo from the contextual save bar and\nrepurpose that space to extend the message contents fully to the left side of the container.</p>\n<p><code><pre>\n&lt;div style={{<span class=\"hljs-attr\">height</span>: <span class=\"hljs-string\">&#x27;250px&#x27;</span>}}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Frame</span>\n    <span class=\"hljs-attr\">logo</span>=<span class=\"hljs-string\">{{</span>\n      <span class=\"hljs-attr\">width:</span> <span class=\"hljs-attr\">124</span>,\n      <span class=\"hljs-attr\">contextualSaveBarSource:</span>\n        &#x27;<span class=\"hljs-attr\">https:</span>//<span class=\"hljs-attr\">cdn.shopify.com</span>/<span class=\"hljs-attr\">s</span>/<span class=\"hljs-attr\">files</span>/<span class=\"hljs-attr\">1</span>/<span class=\"hljs-attr\">0446</span>/<span class=\"hljs-attr\">6937</span>/<span class=\"hljs-attr\">files</span>/<span class=\"hljs-attr\">jaded-pixel-logo-gray.svg</span>?<span class=\"hljs-attr\">6215648040070010999</span>&#x27;,\n    }}\n  &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ContextualSaveBar</span>\n      <span class=\"hljs-attr\">alignContentFlush</span>\n      <span class=\"hljs-attr\">message</span>=<span class=\"hljs-string\">&quot;Unsaved changes&quot;</span>\n      <span class=\"hljs-attr\">saveAction</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">onAction:</span> () =&gt;</span> console.log(&#x27;add form submit logic&#x27;),\n      }}\n      discardAction={{\n        onAction: () =&gt; console.log(&#x27;add clear form logic&#x27;),\n      }}\n    /&gt;\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Frame</span>&gt;</span></span>\n&lt;/div&gt;\n</pre></code></p>\n<h3 id=\"contextual-save-bar-full-width\">Contextual save bar full width</h3>\n<p>Use the fullWidth flag when you want to remove the default max-width set on the contextual save bar.</p>\n<p><code><pre>\n&lt;div style={{<span class=\"hljs-attr\">height</span>: <span class=\"hljs-string\">&#x27;250px&#x27;</span>}}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Frame</span>\n    <span class=\"hljs-attr\">logo</span>=<span class=\"hljs-string\">{{</span>\n      <span class=\"hljs-attr\">width:</span> <span class=\"hljs-attr\">124</span>,\n      <span class=\"hljs-attr\">contextualSaveBarSource:</span>\n        &#x27;<span class=\"hljs-attr\">https:</span>//<span class=\"hljs-attr\">cdn.shopify.com</span>/<span class=\"hljs-attr\">s</span>/<span class=\"hljs-attr\">files</span>/<span class=\"hljs-attr\">1</span>/<span class=\"hljs-attr\">0446</span>/<span class=\"hljs-attr\">6937</span>/<span class=\"hljs-attr\">files</span>/<span class=\"hljs-attr\">jaded-pixel-logo-gray.svg</span>?<span class=\"hljs-attr\">6215648040070010999</span>&#x27;,\n    }}\n  &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ContextualSaveBar</span>\n      <span class=\"hljs-attr\">fullWidth</span>\n      <span class=\"hljs-attr\">message</span>=<span class=\"hljs-string\">&quot;Unsaved changes&quot;</span>\n      <span class=\"hljs-attr\">saveAction</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">onAction:</span> () =&gt;</span> console.log(&#x27;add form submit logic&#x27;),\n        loading: false,\n        disabled: false,\n      }}\n      discardAction={{\n        onAction: () =&gt; console.log(&#x27;add clear form logic&#x27;),\n      }}\n    /&gt;\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Frame</span>&gt;</span></span>\n&lt;/div&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To wrap your entire application, <a href=\"https://polaris.shopify.com/components/structure/frame\">use the frame component</a></li>\n<li>To build the outer wrapper of a page, including page title and associated actions, <a href=\"https://polaris.shopify.com/components/structure/page\">use the page component</a></li>\n<li>To wrap form elements and handle the submission of a form, <a href=\"https://polaris.shopify.com/components/forms/form\">use the form component</a></li>\n</ul>\n"
  },
  "CustomProperties": {
    "name": "CustomProperties",
    "category": "Structure",
    "keywords": [
      "theme",
      "custom properties",
      "color scheme",
      "light mode",
      "dark mode"
    ],
    "omitAppProvider": true,
    "readme": "<h1 id=\"custom-properties\">Custom Properties</h1>\n<p>Use the custom properties component to share global theme settings throughout the hierarchy of your application. Custom properties is included by default as a child of the <a href=\"https://polaris.shopify.com/components/structure/app-provider\">app provider component</a> but can be used independently to apply a base color scheme to its children.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"custom-properties-rendered-by-the-app-provider\">Custom properties rendered by the app provider</h3>\n<p>The app provider component renders a CustomProperties component with the default color scheme.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">AppProvider</span> i18n={{}}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>\n    <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Shipment 1234&quot;</span>\n    <span class=\"hljs-attr\">secondaryFooterActions</span>=<span class=\"hljs-string\">{[{content:</span> &#x27;<span class=\"hljs-attr\">Edit</span> <span class=\"hljs-attr\">shipment</span>&#x27;}]}\n    <span class=\"hljs-attr\">primaryFooterAction</span>=<span class=\"hljs-string\">{{content:</span> &#x27;<span class=\"hljs-attr\">Add</span> <span class=\"hljs-attr\">tracking</span> <span class=\"hljs-attr\">number</span>&#x27;}}\n  &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Items&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>1 × Oasis Glass, 4-Pack<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>1 × Anubis Cup, 2-Pack<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">AppProvider</span>&gt;\n</pre></code></p>\n<h3 id=\"custom-properties-with-a-color-scheme-rendered-by-the-app-provider\">Custom properties with a color scheme rendered by the app provider</h3>\n<p>A color scheme can be passed to the app provider to determine what color scheme is globally applied to the application.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">AppProvider</span> i18n={{}} colorScheme=<span class=\"hljs-string\">&quot;dark&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>\n    <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Shipment 1234&quot;</span>\n    <span class=\"hljs-attr\">secondaryFooterActions</span>=<span class=\"hljs-string\">{[{content:</span> &#x27;<span class=\"hljs-attr\">Edit</span> <span class=\"hljs-attr\">shipment</span>&#x27;}]}\n    <span class=\"hljs-attr\">primaryFooterAction</span>=<span class=\"hljs-string\">{{content:</span> &#x27;<span class=\"hljs-attr\">Add</span> <span class=\"hljs-attr\">tracking</span> <span class=\"hljs-attr\">number</span>&#x27;}}\n  &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Items&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>1 × Oasis Glass, 4-Pack<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>1 × Anubis Cup, 2-Pack<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">AppProvider</span>&gt;\n</pre></code></p>\n<h3 id=\"custom-properties-with-a-different-color-scheme-nested-within-an-app-provider\">Custom properties with a different color scheme nested within an app provider</h3>\n<p>Custom properties can be nested within the custom properties rendered by the app provider in order to override the color scheme at a local level.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">AppProvider</span> i18n={{}}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>\n      <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Shipment 1234&quot;</span>\n      <span class=\"hljs-attr\">secondaryFooterActions</span>=<span class=\"hljs-string\">{[{content:</span> &#x27;<span class=\"hljs-attr\">Edit</span> <span class=\"hljs-attr\">shipment</span>&#x27;}]}\n      <span class=\"hljs-attr\">primaryFooterAction</span>=<span class=\"hljs-string\">{{content:</span> &#x27;<span class=\"hljs-attr\">Add</span> <span class=\"hljs-attr\">tracking</span> <span class=\"hljs-attr\">number</span>&#x27;}}\n    &gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Items&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>1 × Oasis Glass, 4-Pack<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>1 × Anubis Cup, 2-Pack<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CustomProperties</span> <span class=\"hljs-attr\">colorScheme</span>=<span class=\"hljs-string\">&quot;dark&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Shipment 1234&quot;</span>\n        <span class=\"hljs-attr\">secondaryFooterActions</span>=<span class=\"hljs-string\">{[{content:</span> &#x27;<span class=\"hljs-attr\">Edit</span> <span class=\"hljs-attr\">shipment</span>&#x27;}]}\n        <span class=\"hljs-attr\">primaryFooterAction</span>=<span class=\"hljs-string\">{{content:</span> &#x27;<span class=\"hljs-attr\">Add</span> <span class=\"hljs-attr\">tracking</span> <span class=\"hljs-attr\">number</span>&#x27;}}\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Items&quot;</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>1 × Oasis Glass, 4-Pack<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>1 × Anubis Cup, 2-Pack<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CustomProperties</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextContainer</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">AppProvider</span>&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"consuming-custom-properties-colors-in-a-component\">Consuming custom properties colors in a component</h2>\n<p>The CustomProperties component uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/--*\">CSS custom properties</a> to share color values with components. For a full list of available CSS custom properties, see the <a href=\"https://github.com/Shopify/polaris-react/blob/main/documentation/Color%20system.md\">Polaris tokens docs</a>.</p>\n<p><code><pre>scss\n.<span class=\"hljs-property\">Card</span> {\n  background-<span class=\"hljs-attr\">color</span>: <span class=\"hljs-title function_\">var</span>(--p-surface);\n  box-<span class=\"hljs-attr\">shadow</span>: <span class=\"hljs-title function_\">var</span>(--p-shadow-card);\n  border-<span class=\"hljs-attr\">radius</span>: <span class=\"hljs-title function_\">var</span>(--p-border-radius-<span class=\"hljs-number\">2</span>);\n}\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To share global settings throughout the hierarchy of your application, <a href=\"https://polaris.shopify.com/components/structure/app-provider\">use the app provider component</a></li>\n</ul>\n"
  },
  "DataTable": {
    "name": "Data table",
    "category": "Lists and tables",
    "keywords": [
      "DataTable",
      "data",
      "table",
      "tabular",
      "index"
    ],
    "readme": "<h1 id=\"data-table\">Data table</h1>\n<p>Data tables are used to organize and display all information from a data set. While a data visualization represents part of data set, a data table lets merchants view details from the entire set. This helps merchants compare and analyze the data.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-data-table\">Default data table</h3>\n<p>Use to present small amounts of data for merchants to view statically.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">DataTableExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> rows = [\n    [<span class=\"hljs-string\">&#x27;Emerald Silk Gown&#x27;</span>, <span class=\"hljs-string\">&#x27;$875.00&#x27;</span>, <span class=\"hljs-number\">124689</span>, <span class=\"hljs-number\">140</span>, <span class=\"hljs-string\">&#x27;$122,500.00&#x27;</span>],\n    [<span class=\"hljs-string\">&#x27;Mauve Cashmere Scarf&#x27;</span>, <span class=\"hljs-string\">&#x27;$230.00&#x27;</span>, <span class=\"hljs-number\">124533</span>, <span class=\"hljs-number\">83</span>, <span class=\"hljs-string\">&#x27;$19,090.00&#x27;</span>],\n    [\n      <span class=\"hljs-string\">&#x27;Navy Merino Wool Blazer with khaki chinos and yellow belt&#x27;</span>,\n      <span class=\"hljs-string\">&#x27;$445.00&#x27;</span>,\n      <span class=\"hljs-number\">124518</span>,\n      <span class=\"hljs-number\">32</span>,\n      <span class=\"hljs-string\">&#x27;$14,240.00&#x27;</span>,\n    ],\n  ];</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Page</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Sales by product&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DataTable</span>\n          <span class=\"hljs-attr\">columnContentTypes</span>=<span class=\"hljs-string\">{[</span>\n            &#x27;<span class=\"hljs-attr\">text</span>&#x27;,\n            &#x27;<span class=\"hljs-attr\">numeric</span>&#x27;,\n            &#x27;<span class=\"hljs-attr\">numeric</span>&#x27;,\n            &#x27;<span class=\"hljs-attr\">numeric</span>&#x27;,\n            &#x27;<span class=\"hljs-attr\">numeric</span>&#x27;,\n          ]}\n          <span class=\"hljs-attr\">headings</span>=<span class=\"hljs-string\">{[</span>\n            &#x27;<span class=\"hljs-attr\">Product</span>&#x27;,\n            &#x27;<span class=\"hljs-attr\">Price</span>&#x27;,\n            &#x27;<span class=\"hljs-attr\">SKU</span> <span class=\"hljs-attr\">Number</span>&#x27;,\n            &#x27;<span class=\"hljs-attr\">Net</span> <span class=\"hljs-attr\">quantity</span>&#x27;,\n            &#x27;<span class=\"hljs-attr\">Net</span> <span class=\"hljs-attr\">sales</span>&#x27;,\n          ]}\n          <span class=\"hljs-attr\">rows</span>=<span class=\"hljs-string\">{rows}</span>\n          <span class=\"hljs-attr\">totals</span>=<span class=\"hljs-string\">{[</span>&#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, <span class=\"hljs-attr\">255</span>, &#x27;$<span class=\"hljs-attr\">155</span>,<span class=\"hljs-attr\">830.00</span>&#x27;]}\n        /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Page</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"sortable-data-table\">Sortable data table</h3>\n<p>Use when clarity of the table’s content is needed. For example, to note the number of rows currently shown in a data table with pagination.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SortableDataTableExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [sortedRows, setSortedRows] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> initiallySortedRows = [\n    [<span class=\"hljs-string\">&#x27;Emerald Silk Gown&#x27;</span>, <span class=\"hljs-string\">&#x27;$875.00&#x27;</span>, <span class=\"hljs-number\">124689</span>, <span class=\"hljs-number\">140</span>, <span class=\"hljs-string\">&#x27;$122,500.00&#x27;</span>],\n    [<span class=\"hljs-string\">&#x27;Mauve Cashmere Scarf&#x27;</span>, <span class=\"hljs-string\">&#x27;$230.00&#x27;</span>, <span class=\"hljs-number\">124533</span>, <span class=\"hljs-number\">83</span>, <span class=\"hljs-string\">&#x27;$19,090.00&#x27;</span>],\n    [\n      <span class=\"hljs-string\">&#x27;Navy Merino Wool Blazer with khaki chinos and yellow belt&#x27;</span>,\n      <span class=\"hljs-string\">&#x27;$445.00&#x27;</span>,\n      <span class=\"hljs-number\">124518</span>,\n      <span class=\"hljs-number\">32</span>,\n      <span class=\"hljs-string\">&#x27;$14,240.00&#x27;</span>,\n    ],\n  ];\n  <span class=\"hljs-keyword\">const</span> rows = sortedRows ? sortedRows : initiallySortedRows;</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleSort = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">index, direction</span>) =&gt;</span> <span class=\"hljs-title function_\">setSortedRows</span>(<span class=\"hljs-title function_\">sortCurrency</span>(rows, index, direction)),\n    [rows],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Page</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Sales by product&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DataTable</span>\n          <span class=\"hljs-attr\">columnContentTypes</span>=<span class=\"hljs-string\">{[</span>\n            &#x27;<span class=\"hljs-attr\">text</span>&#x27;,\n            &#x27;<span class=\"hljs-attr\">numeric</span>&#x27;,\n            &#x27;<span class=\"hljs-attr\">numeric</span>&#x27;,\n            &#x27;<span class=\"hljs-attr\">numeric</span>&#x27;,\n            &#x27;<span class=\"hljs-attr\">numeric</span>&#x27;,\n          ]}\n          <span class=\"hljs-attr\">headings</span>=<span class=\"hljs-string\">{[</span>\n            &#x27;<span class=\"hljs-attr\">Product</span>&#x27;,\n            &#x27;<span class=\"hljs-attr\">Price</span>&#x27;,\n            &#x27;<span class=\"hljs-attr\">SKU</span> <span class=\"hljs-attr\">Number</span>&#x27;,\n            &#x27;<span class=\"hljs-attr\">Net</span> <span class=\"hljs-attr\">quantity</span>&#x27;,\n            &#x27;<span class=\"hljs-attr\">Net</span> <span class=\"hljs-attr\">sales</span>&#x27;,\n          ]}\n          <span class=\"hljs-attr\">rows</span>=<span class=\"hljs-string\">{rows}</span>\n          <span class=\"hljs-attr\">totals</span>=<span class=\"hljs-string\">{[</span>&#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, <span class=\"hljs-attr\">255</span>, &#x27;$<span class=\"hljs-attr\">155</span>,<span class=\"hljs-attr\">830.00</span>&#x27;]}\n          <span class=\"hljs-attr\">sortable</span>=<span class=\"hljs-string\">{[false,</span> <span class=\"hljs-attr\">true</span>, <span class=\"hljs-attr\">false</span>, <span class=\"hljs-attr\">false</span>, <span class=\"hljs-attr\">true</span>]}\n          <span class=\"hljs-attr\">defaultSortDirection</span>=<span class=\"hljs-string\">&quot;descending&quot;</span>\n          <span class=\"hljs-attr\">initialSortColumnIndex</span>=<span class=\"hljs-string\">{4}</span>\n          <span class=\"hljs-attr\">onSort</span>=<span class=\"hljs-string\">{handleSort}</span>\n        /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Page</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sortCurrency</span>(<span class=\"hljs-params\">rows, index, direction</span>) {\n    <span class=\"hljs-keyword\">return</span> [...rows].<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">rowA, rowB</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">const</span> amountA = <span class=\"hljs-built_in\">parseFloat</span>(rowA[index].<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">1</span>));\n      <span class=\"hljs-keyword\">const</span> amountB = <span class=\"hljs-built_in\">parseFloat</span>(rowB[index].<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">1</span>));</p>\n<pre><code>  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; direction === &lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;descending&amp;#x27;&lt;/span&gt; ? amountB - amountA : amountA - amountB;\n});\n</code></pre>\n<p>  }\n}\n</pre></code></p>\n<h3 id=\"data-table-with-footer\">Data table with footer</h3>\n<p>Use when clarity of the table’s content is needed. For example, to note the number of rows currently shown in a data table with pagination.</p>\n<pre><code class=\"language-jsx\">function DataTableFooterExample() {\n  const rows = [\n    [&#39;Emerald Silk Gown&#39;, &#39;$875.00&#39;, 124689, 140, &#39;$122,500.00&#39;],\n    [&#39;Mauve Cashmere Scarf&#39;, &#39;$230.00&#39;, 124533, 83, &#39;$19,090.00&#39;],\n    [\n      &#39;Navy Merino Wool Blazer with khaki chinos and yellow belt&#39;,\n      &#39;$445.00&#39;,\n      124518,\n      32,\n      &#39;$14,240.00&#39;,\n    ],\n  ];\n\n  return (\n    &lt;Page title=&quot;Sales by product&quot;&gt;\n      &lt;Card&gt;\n        &lt;DataTable\n          columnContentTypes={[\n            &#39;text&#39;,\n            &#39;numeric&#39;,\n            &#39;numeric&#39;,\n            &#39;numeric&#39;,\n            &#39;numeric&#39;,\n          ]}\n          headings={[\n            &#39;Product&#39;,\n            &#39;Price&#39;,\n            &#39;SKU Number&#39;,\n            &#39;Net quantity&#39;,\n            &#39;Net sales&#39;,\n          ]}\n          rows={rows}\n          totals={[&#39;&#39;, &#39;&#39;, &#39;&#39;, 255, &#39;$155,830.00&#39;]}\n          footerContent={`Showing ${rows.length} of ${rows.length} results`}\n        /&gt;\n      &lt;/Card&gt;\n    &lt;/Page&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Data&lt;/span&gt; table &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; custom totals heading\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to provide a custom heading &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; the totals row.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction DataTableExample() {\n  const rows = [\n    [&#39;Emerald Silk Gown&#39;, &#39;$875.00&#39;, 124689, 140, &#39;$122,500.00&#39;],\n    [&#39;Mauve Cashmere Scarf&#39;, &#39;$230.00&#39;, 124533, 83, &#39;$19,090.00&#39;],\n    [\n      &#39;Navy Merino Wool Blazer with khaki chinos and yellow belt&#39;,\n      &#39;$445.00&#39;,\n      124518,\n      32,\n      &#39;$14,240.00&#39;,\n    ],\n  ];\n\n  return (\n    &lt;Page title=&quot;Sales by product&quot;&gt;\n      &lt;Card&gt;\n        &lt;DataTable\n          showTotalsInFooter\n          columnContentTypes={[\n            &#39;text&#39;,\n            &#39;numeric&#39;,\n            &#39;numeric&#39;,\n            &#39;numeric&#39;,\n            &#39;numeric&#39;,\n          ]}\n          headings={[\n            &#39;Product&#39;,\n            &#39;Price&#39;,\n            &#39;SKU Number&#39;,\n            &#39;Net quantity&#39;,\n            &#39;Net sales&#39;,\n          ]}\n          rows={rows}\n          totals={[&#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;$155,830.00&#39;]}\n          totalsName={{\n            singular: &#39;Total net sales&#39;,\n            plural: &#39;Total net sales&#39;,\n          }}\n        /&gt;\n      &lt;/Card&gt;\n    &lt;/Page&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Data&lt;/span&gt; table &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; totals &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; footer\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to reposition the totals row &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a more appropriate location based on the data stored &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; the\ntable &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; merchants to better understand its meaning.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction DataTableExample() {\n  const rows = [\n    [&#39;Emerald Silk Gown&#39;, &#39;$875.00&#39;, 124689, 140, &#39;$122,500.00&#39;],\n    [&#39;Mauve Cashmere Scarf&#39;, &#39;$230.00&#39;, 124533, 83, &#39;$19,090.00&#39;],\n    [\n      &#39;Navy Merino Wool Blazer with khaki chinos and yellow belt&#39;,\n      &#39;$445.00&#39;,\n      124518,\n      32,\n      &#39;$14,240.00&#39;,\n    ],\n  ];\n\n  return (\n    &lt;Page title=&quot;Sales by product&quot;&gt;\n      &lt;Card&gt;\n        &lt;DataTable\n          columnContentTypes={[\n            &#39;text&#39;,\n            &#39;numeric&#39;,\n            &#39;numeric&#39;,\n            &#39;numeric&#39;,\n            &#39;numeric&#39;,\n          ]}\n          headings={[\n            &#39;Product&#39;,\n            &#39;Price&#39;,\n            &#39;SKU Number&#39;,\n            &#39;Net quantity&#39;,\n            &#39;Net sales&#39;,\n          ]}\n          rows={rows}\n          totals={[&#39;&#39;, &#39;&#39;, &#39;&#39;, 255, &#39;$155,830.00&#39;]}\n          showTotalsInFooter\n        /&gt;\n      &lt;/Card&gt;\n    &lt;/Page&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Data&lt;/span&gt; table &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; row heading links\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to help merchants find relevant, finer grained data sets.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction DataTableLinkExample() {\n  const rows = [\n    [\n      &lt;Link\n        removeUnderline\n        url=&quot;https://www.example.com&quot;\n        key=&quot;emerald-silk-gown&quot;\n      &gt;\n        Emerald Silk Gown\n      &lt;/Link&gt;,\n      &#39;$875.00&#39;,\n      124689,\n      140,\n      &#39;$122,500.00&#39;,\n    ],\n    [\n      &lt;Link\n        removeUnderline\n        url=&quot;https://www.example.com&quot;\n        key=&quot;mauve-cashmere-scarf&quot;\n      &gt;\n        Mauve Cashmere Scarf\n      &lt;/Link&gt;,\n      &#39;$230.00&#39;,\n      124533,\n      83,\n      &#39;$19,090.00&#39;,\n    ],\n    [\n      &lt;Link\n        removeUnderline\n        url=&quot;https://www.example.com&quot;\n        key=&quot;navy-merino-wool&quot;\n      &gt;\n        Navy Merino Wool Blazer with khaki chinos and yellow belt\n      &lt;/Link&gt;,\n      &#39;$445.00&#39;,\n      124518,\n      32,\n      &#39;$14,240.00&#39;,\n    ],\n  ];\n\n  return (\n    &lt;Page title=&quot;Sales by product&quot;&gt;\n      &lt;Card&gt;\n        &lt;DataTable\n          columnContentTypes={[\n            &#39;text&#39;,\n            &#39;numeric&#39;,\n            &#39;numeric&#39;,\n            &#39;numeric&#39;,\n            &#39;numeric&#39;,\n          ]}\n          headings={[&#39;Product&#39;, &#39;Price&#39;, &#39;SKU Number&#39;, &#39;Quantity&#39;, &#39;Net sales&#39;]}\n          rows={rows}\n          totals={[&#39;&#39;, &#39;&#39;, &#39;&#39;, 255, &#39;$155,830.00&#39;]}\n        /&gt;\n      &lt;/Card&gt;\n    &lt;/Page&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Data&lt;/span&gt; table &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; all &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; its elements\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; a broad example that includes most props available to data table.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction FullDataTableExample() {\n  const [sortedRows, setSortedRows] = useState(null);\n\n  const initiallySortedRows = [\n    [\n      &lt;Link\n        removeUnderline\n        url=&quot;https://www.example.com&quot;\n        key=&quot;emerald-silk-gown&quot;\n      &gt;\n        Emerald Silk Gown\n      &lt;/Link&gt;,\n      &#39;$875.00&#39;,\n      124689,\n      140,\n      &#39;$121,500.00&#39;,\n    ],\n    [\n      &lt;Link\n        removeUnderline\n        url=&quot;https://www.example.com&quot;\n        key=&quot;mauve-cashmere-scarf&quot;\n      &gt;\n        Mauve Cashmere Scarf\n      &lt;/Link&gt;,\n      &#39;$230.00&#39;,\n      124533,\n      83,\n      &#39;$19,090.00&#39;,\n    ],\n    [\n      &lt;Link\n        removeUnderline\n        url=&quot;https://www.example.com&quot;\n        key=&quot;navy-merino-wool&quot;\n      &gt;\n        Navy Merino Wool Blazer with khaki chinos and yellow belt\n      &lt;/Link&gt;,\n      &#39;$445.00&#39;,\n      124518,\n      32,\n      &#39;$14,240.00&#39;,\n    ],\n  ];\n\n  const rows = sortedRows ? sortedRows : initiallySortedRows;\n  const handleSort = useCallback(\n    (index, direction) =&gt; setSortedRows(sortCurrency(rows, index, direction)),\n    [rows],\n  );\n\n  return (\n    &lt;Page title=&quot;Sales by product&quot;&gt;\n      &lt;Card&gt;\n        &lt;DataTable\n          columnContentTypes={[\n            &#39;text&#39;,\n            &#39;numeric&#39;,\n            &#39;numeric&#39;,\n            &#39;numeric&#39;,\n            &#39;numeric&#39;,\n          ]}\n          headings={[\n            &#39;Product&#39;,\n            &#39;Price&#39;,\n            &#39;SKU Number&#39;,\n            &#39;Net quantity&#39;,\n            &#39;Net sales&#39;,\n          ]}\n          rows={rows}\n          totals={[&#39;&#39;, &#39;&#39;, &#39;&#39;, 255, &#39;$155,830.00&#39;]}\n          sortable={[false, true, false, false, true]}\n          defaultSortDirection=&quot;descending&quot;\n          initialSortColumnIndex={4}\n          onSort={handleSort}\n          footerContent={`Showing ${rows.length} of ${rows.length} results`}\n        /&gt;\n      &lt;/Card&gt;\n    &lt;/Page&gt;\n  );\n\n  function sortCurrency(rows, index, direction) {\n    return [...rows].sort((rowA, rowB) =&gt; {\n      const amountA = parseFloat(rowA[index].substring(1));\n      const amountB = parseFloat(rowB[index].substring(1));\n\n      return direction === &#39;descending&#39; ? amountB - amountA : amountA - amountB;\n    });\n  }\n}\n</code></pre>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Data tables should:</p>\n<ul>\n<li>Show values across multiple categories and measures.</li>\n<li>Allow for filtering and ordering when comparison is not a priority.</li>\n<li>Help merchants visualize and scan many values from an entire data set.</li>\n<li>Help merchants find other values in the data hierarchy through use of links.</li>\n<li>Minimize clutter by only including values that supports the data’s purpose.</li>\n<li>Include a summary row to surface the column totals.</li>\n<li>Not include calculations within the summary row.</li>\n<li>Wrap instead of truncate content. This is because if row titles start with the same word, they’ll all appear the same when truncated.</li>\n<li>Not to be used for an actionable list of items that link to details pages. For this functionality, use the [resource list] component.</li>\n</ul>\n<h3 id=\"alignment\">Alignment</h3>\n<p>Column content types are built into the component props so the following alignment rules are followed:</p>\n<ul>\n<li>Numerical = Right aligned</li>\n<li>Textual data = Left aligned</li>\n<li>Align headers with their related data</li>\n<li>Don’t center align</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>Headers should:</p>\n<ul>\n<li>Be informative and descriptive</li>\n<li>Concise and scannable</li>\n<li>Include units of measurement symbols so they aren’t repeated throughout the columns</li>\n<li>Use sentence case (first word capitalized, rest lowercase)</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<p>Temperature °C</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<p>Temperature</p>\n</div></div>\n\n<p>Column content should:</p>\n<ul>\n<li>Be concise and scannable</li>\n<li>Not include units of measurement symbols (put those symbols in the headers)</li>\n<li>Use sentence case (first word capitalized, rest lowercase)</li>\n</ul>\n<h3 id=\"decimals\">Decimals</h3>\n<p>Keep decimals consistent. For example, don’t use 3 decimals in one row and 2 in others.</p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To create an actionable list of related items that link to details pages, such as a list of customers, use the <a href=\"https://polaris.shopify.com/components/lists-and-tables/resource-list\">resource list component</a>.</li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<h3 id=\"structure\">Structure</h3>\n<p>Native HTML tables provide a large amount of structural information to screen reader users. Merchants who rely on screen readers can navigate tables and identify relationships between data cells (<code>&lt;td&gt;</code>) and headers (<code>&lt;th&gt;</code>) using keys specific to their screen reader.</p>\n<p>Sortable tables use the <code>aria-sort</code> attribute to convey which columns are sortable (and in what direction). They also use <code>aria-label</code> on sorting buttons to convey what activating the button will do.</p>\n<!-- usageblock -->\n\n<h4 id=\"do-1\">Do</h4>\n<p>Use tables for tabular data.</p>\n<h4 id=\"dont-1\">Don’t</h4>\n<p>Use tables for layout. For a table-like layout that doesn’t use table HTML elements, use the <a href=\"https://polaris.shopify.com/components/lists-and-tables/resource-list\">resource list component</a>.</p>\n,\n\n<h3 id=\"keyboard-support\">Keyboard support</h3>\n<p>Sorting controls for the data table component are implemented with native HTML buttons.</p>\n<ul>\n<li>Give buttons keyboard focus with the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)</li>\n<li>Activate buttons with the <kbd>enter</kbd>/<kbd>return</kbd> and <kbd>space</kbd> keys</li>\n</ul>\n<!-- /content-for -->\n"
  },
  "DatePicker": {
    "name": "Date picker",
    "category": "Forms",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "DatePicker",
      "month",
      "day",
      "year",
      "weekday",
      "choose date",
      "pick date",
      "pick time",
      "date picker",
      "calendar",
      "date selector",
      "date range picker",
      "date range selector"
    ],
    "readme": "<h1 id=\"date-picker\">Date picker</h1>\n<p>Date pickers let merchants choose dates from a visual calendar that’s\nconsistently applied wherever dates need to be selected across Shopify.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Date pickers should:</p>\n<ul>\n<li>Use smart defaults and highlight common selections</li>\n<li>Close after a single date is selected unless a range with a start and end date is required</li>\n<li>Set the start date on first click or tap and the end date on second click or tap if a range\nis required</li>\n<li>Not be used to enter a date that is many years in the future or the past</li>\n<li>Follow <a href=\"https://polaris.shopify.com/content/grammar-and-mechanics#section-dates-numbers-and-addresses\">date format guidelines</a></li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-date-picker\">Default date picker</h3>\n<p>Use when merchants need to select a single day close to today (today is the default starting position for the date picker).</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">DatePickerExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [{month, year}, setDate] = <span class=\"hljs-title function_\">useState</span>({<span class=\"hljs-attr\">month</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">year</span>: <span class=\"hljs-number\">2018</span>});\n  <span class=\"hljs-keyword\">const</span> [selectedDates, setSelectedDates] = <span class=\"hljs-title function_\">useState</span>({\n    <span class=\"hljs-attr\">start</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-string\">&#x27;Wed Feb 07 2018 00:00:00 GMT-0500 (EST)&#x27;</span>),\n    <span class=\"hljs-attr\">end</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-string\">&#x27;Wed Feb 07 2018 00:00:00 GMT-0500 (EST)&#x27;</span>),\n  });</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleMonthChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">month, year</span>) =&gt;</span> <span class=\"hljs-title function_\">setDate</span>({month, year}),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DatePicker</span>\n      <span class=\"hljs-attr\">month</span>=<span class=\"hljs-string\">{month}</span>\n      <span class=\"hljs-attr\">year</span>=<span class=\"hljs-string\">{year}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{setSelectedDates}</span>\n      <span class=\"hljs-attr\">onMonthChange</span>=<span class=\"hljs-string\">{handleMonthChange}</span>\n      <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selectedDates}</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/DatePicker/android/default@2x.png\" alt=\"Date picker on Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/DatePicker/ios/default@2x.png\" alt=\"Date picker on iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"ranged-date-picker\">Ranged date picker</h3>\n<p>Use when merchants need to select a range of days close to today (today is the default starting position for the date picker).</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">DatePickerExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [{month, year}, setDate] = <span class=\"hljs-title function_\">useState</span>({<span class=\"hljs-attr\">month</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">year</span>: <span class=\"hljs-number\">2018</span>});\n  <span class=\"hljs-keyword\">const</span> [selectedDates, setSelectedDates] = <span class=\"hljs-title function_\">useState</span>({\n    <span class=\"hljs-attr\">start</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-string\">&#x27;Wed Feb 07 2018 00:00:00 GMT-0500 (EST)&#x27;</span>),\n    <span class=\"hljs-attr\">end</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-string\">&#x27;Sat Feb 10 2018 00:00:00 GMT-0500 (EST)&#x27;</span>),\n  });</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleMonthChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">month, year</span>) =&gt;</span> <span class=\"hljs-title function_\">setDate</span>({month, year}),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DatePicker</span>\n      <span class=\"hljs-attr\">month</span>=<span class=\"hljs-string\">{month}</span>\n      <span class=\"hljs-attr\">year</span>=<span class=\"hljs-string\">{year}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{setSelectedDates}</span>\n      <span class=\"hljs-attr\">onMonthChange</span>=<span class=\"hljs-string\">{handleMonthChange}</span>\n      <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selectedDates}</span>\n      <span class=\"hljs-attr\">allowRange</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"multi-month-ranged-date-picker\">Multi-month ranged date picker</h3>\n<p>Use multi-month mode to show two months at a time.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">DatePickerExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [{month, year}, setDate] = <span class=\"hljs-title function_\">useState</span>({<span class=\"hljs-attr\">month</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">year</span>: <span class=\"hljs-number\">2018</span>});\n  <span class=\"hljs-keyword\">const</span> [selectedDates, setSelectedDates] = <span class=\"hljs-title function_\">useState</span>({\n    <span class=\"hljs-attr\">start</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-string\">&#x27;Wed Feb 07 2018 00:00:00 GMT-0500 (EST)&#x27;</span>),\n    <span class=\"hljs-attr\">end</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-string\">&#x27;Mon Mar 12 2018 00:00:00 GMT-0500 (EST)&#x27;</span>),\n  });</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleMonthChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">month, year</span>) =&gt;</span> <span class=\"hljs-title function_\">setDate</span>({month, year}),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DatePicker</span>\n      <span class=\"hljs-attr\">month</span>=<span class=\"hljs-string\">{month}</span>\n      <span class=\"hljs-attr\">year</span>=<span class=\"hljs-string\">{year}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{setSelectedDates}</span>\n      <span class=\"hljs-attr\">onMonthChange</span>=<span class=\"hljs-string\">{handleMonthChange}</span>\n      <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selectedDates}</span>\n      <span class=\"hljs-attr\">multiMonth</span>\n      <span class=\"hljs-attr\">allowRange</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"date-picker-with-disabled-dates\">Date picker with disabled dates</h3>\n<p>Date ranges may be disabed if you do not want them to be selectable</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">DatePickerExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [{month, year}, setDate] = <span class=\"hljs-title function_\">useState</span>({<span class=\"hljs-attr\">month</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">year</span>: <span class=\"hljs-number\">2018</span>});\n  <span class=\"hljs-keyword\">const</span> [selectedDates, setSelectedDates] = <span class=\"hljs-title function_\">useState</span>({\n    <span class=\"hljs-attr\">start</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-string\">&#x27;Wed Feb 07 2018 00:00:00 GMT-0500 (EST)&#x27;</span>),\n    <span class=\"hljs-attr\">end</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-string\">&#x27;Sat Feb 10 2018 00:00:00 GMT-0500 (EST)&#x27;</span>),\n  });</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleMonthChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">month, year</span>) =&gt;</span> <span class=\"hljs-title function_\">setDate</span>({month, year}),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DatePicker</span>\n      <span class=\"hljs-attr\">month</span>=<span class=\"hljs-string\">{month}</span>\n      <span class=\"hljs-attr\">year</span>=<span class=\"hljs-string\">{year}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{setSelectedDates}</span>\n      <span class=\"hljs-attr\">onMonthChange</span>=<span class=\"hljs-string\">{handleMonthChange}</span>\n      <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selectedDates}</span>\n      <span class=\"hljs-attr\">disableDatesBefore</span>=<span class=\"hljs-string\">{new</span> <span class=\"hljs-attr\">Date</span>(&#x27;<span class=\"hljs-attr\">Sat</span> <span class=\"hljs-attr\">Feb</span> <span class=\"hljs-attr\">03</span> <span class=\"hljs-attr\">2018</span> <span class=\"hljs-attr\">00:00:00</span> <span class=\"hljs-attr\">GMT-0500</span> (<span class=\"hljs-attr\">EST</span>)&#x27;)}\n      <span class=\"hljs-attr\">disableDatesAfter</span>=<span class=\"hljs-string\">{new</span> <span class=\"hljs-attr\">Date</span>(&#x27;<span class=\"hljs-attr\">Sun</span> <span class=\"hljs-attr\">Feb</span> <span class=\"hljs-attr\">18</span> <span class=\"hljs-attr\">2018</span> <span class=\"hljs-attr\">00:00:00</span> <span class=\"hljs-attr\">GMT-0500</span> (<span class=\"hljs-attr\">EST</span>)&#x27;)}\n      <span class=\"hljs-attr\">allowRange</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>Some users might find interacting with date pickers to be challenging. When you use the date picker component, always give users the option to enter the date using a text field component as well.</p>\n<p>If you use the date picker within a <a href=\"/components/overlays/popover\">popover component</a>, then use a button to trigger the popover instead of displaying the popover when the text input gets focus. This gives users more control over their experience.</p>\n<h3 id=\"keyboard-support\">Keyboard support</h3>\n<ul>\n<li>Press the <kbd>tab</kbd> key to move forward and <kbd>shift</kbd> + <kbd>tab</kbd> to move backward through the previous button, next button, and the calendar</li>\n<li>When focus is in the calendar, move keyboard focus between the dates using the arrow keys</li>\n<li>To select a date that has focus, press the <kbd>enter</kbd>/<kbd>return</kbd> key</li>\n</ul>\n<!-- /content-for -->\n"
  },
  "DescriptionList": {
    "name": "Description list",
    "category": "Lists and tables",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "DescriptionList",
      "glossary",
      "description",
      "list terms",
      "list and define terms",
      "item lists",
      "text lists",
      "list of terms",
      "term explaination",
      "android",
      "ios"
    ],
    "readme": "<h1 id=\"description-list\">Description list</h1>\n<p>Description lists are a way to organize and explain related information.\nThey’re particularly useful when you need to list and define terms such as in a\nglossary.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Description lists should:</p>\n<ul>\n<li>Contain terms and associated explanations, or descriptions for each term.</li>\n<li>Provide information that isn’t action-oriented.</li>\n<li>Not be an excuse for using unnecessarily complicated or jargon-filled\nlanguage. Generally, if merchants need a description list to understand the\nlanguage in Shopify, we should look for opportunities to simplify the language.</li>\n<li>Not be used to upsell merchants on a feature or service.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"terms\">Terms</h3>\n<p>Terms should be:</p>\n<ul>\n<li>Written in sentence case (the first word capitalized, the rest lowercase)</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Discount code</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>Discount Code</li>\n</ul>\n</div></div>\n\n<h3 id=\"term-description\">Term description</h3>\n<p>Terms descriptions should be:</p>\n<ul>\n<li>Directly related to the term they’re describing</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Discount code: A series of numbers and/or letters that an online shopper may enter at checkout\nto get a discount or special offer.</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>Discount code: Having a sale on your store is a great way to sell products quickly.</li>\n</ul>\n</div></div>\n\n<ul>\n<li>Written to describe the merchant benefit or utility</li>\n<li>No more than one or two short sentences in length</li>\n<li>Written in sentence case with all appropriate punctuation, including ending\neach sentence with a period</li>\n<li>Conversational by using articles (the, a, an)</li>\n<li>Written using plain language</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-2\">Do</h4>\n<ul>\n<li>Abandoned checkout: The details of a checkout that was started but not completed, including the\nproducts added and the customer’s details.</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-2\">Don’t</h4>\n<ul>\n<li>Abandoned checkout: Details of products added to checkout but not purchased</li>\n</ul>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-description-list\">Default description list</h3>\n<p>Use when you need to present merchants with a list of items or terms alongside descriptions and explanations.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">DescriptionList</span>\n  items={[\n    {\n      <span class=\"hljs-attr\">term</span>: <span class=\"hljs-string\">&#x27;Logistics&#x27;</span>,\n      <span class=\"hljs-attr\">description</span>:\n        <span class=\"hljs-string\">&#x27;The management of products or other resources as they travel between a point of origin and a destination.&#x27;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">term</span>: <span class=\"hljs-string\">&#x27;Sole proprietorship&#x27;</span>,\n      <span class=\"hljs-attr\">description</span>:\n        <span class=\"hljs-string\">&#x27;A business structure where a single individual both owns and runs the company.&#x27;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">term</span>: <span class=\"hljs-string\">&#x27;Discount code&#x27;</span>,\n      <span class=\"hljs-attr\">description</span>:\n        <span class=\"hljs-string\">&#x27;A series of numbers and/or letters that an online shopper may enter at checkout to get a discount or special offer.&#x27;</span>,\n    },\n  ]}\n/&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/DescriptionList/android/default@2x.png\" alt=\"Description list for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/DescriptionList/ios/default@2x.png\" alt=\"Description list for iOS\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To create a list of actions or navigation, <a href=\"https://polaris.shopify.com/components/actions/action-list\">use the action list component</a>.</li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>The description list component produces a description list wrapper (<code>&lt;dl&gt;</code>), terms (<code>&lt;dt&gt;</code>), and definitions (<code>&lt;dd&gt;</code>) to convey the relationships between the list items to assistive technology users.</p>\n<!-- /content-for -->\n"
  },
  "DisplayText": {
    "name": "Display text",
    "category": "Titles and text",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "DisplayText",
      "announcement text",
      "greeting text",
      "marketing text",
      "title text",
      "biggest text",
      "bigger text",
      "big text",
      "large text",
      "larger text",
      "largest text",
      "strong text",
      "bold text",
      "bold statements",
      "extra large display text",
      "medium and large display text",
      "small display text",
      "visual story telling",
      "visual storytelling",
      "visual statements",
      "android",
      "ios"
    ],
    "readme": "<h1 id=\"display-text\">Display text</h1>\n<p>Display styles make a bold visual statement. Use them to create impact when the\nmain goal is visual storytelling. For example, use display text to convince or\nreassure merchants such as in marketing content or to capture attention during onboarding.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<ul>\n<li>Use when the primary goal of the page is communication rather than\ninteraction.</li>\n<li>Use larger display text sizes when a page is focused around a single message.\nIn these cases it may be paired with an illustration.</li>\n<li>Use smaller display text to pair with larger text, or alone as part of more\ncomplex data displays such as dashboards.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"display-text-1\">Display text</h3>\n<p>Display text should be:</p>\n<ul>\n<li>Benefits-driven and focused on information that is most important to\nmerchants</li>\n<li>Concise and scannable:<ul>\n<li>Use simple, clear language that can be read at a glance</li>\n<li>Keep display text content to a short sentence that’s just a few words in\nlength</li>\n<li>Avoid using punctuation such as periods, commas, or semicolons</li>\n<li>Avoid using exclamation marks—display text already makes enough of a\nstatement without an exclamation mark</li>\n<li>Write in sentence case</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"extra-large\">Extra large</h3>\n<p>Use this size sparingly and never multiple times on the same page.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">DisplayText</span> size=<span class=\"hljs-string\">&quot;extraLarge&quot;</span>&gt;<span class=\"hljs-title class_\">Good</span> evening, <span class=\"hljs-title class_\">Dominic</span>.&lt;/<span class=\"hljs-title class_\">DisplayText</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/DisplayText/android/extra-large@2x.png\" alt=\"Extra large display text\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/DisplayText/ios/extra-large@2x.png\" alt=\"Extra large display text\"></p>\n<!-- /content-for -->\n\n<h3 id=\"large\">Large</h3>\n<!-- example-for: web -->\n\n<p>Use for display text that’s more important than the medium size, but less important than extra large.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">DisplayText</span> size=<span class=\"hljs-string\">&quot;large&quot;</span>&gt;<span class=\"hljs-title class_\">Good</span> evening, <span class=\"hljs-title class_\">Dominic</span>.&lt;/<span class=\"hljs-title class_\">DisplayText</span>&gt;\n</pre></code></p>\n<h3 id=\"medium\">Medium</h3>\n<p>Use for display text that’s more important than the small size, but less important than large.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">DisplayText</span> size=<span class=\"hljs-string\">&quot;medium&quot;</span>&gt;<span class=\"hljs-title class_\">Good</span> evening, <span class=\"hljs-title class_\">Dominic</span>.&lt;/<span class=\"hljs-title class_\">DisplayText</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/DisplayText/android/medium-large@2x.png\" alt=\"Medium and large display text\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/DisplayText/ios/medium-large@2x.png\" alt=\"Medium and large display text\"></p>\n<!-- /content-for -->\n\n<h3 id=\"small\">Small</h3>\n<!-- example-for: web -->\n\n<p>Use for text that would otherwise use body text, but that needs to scale with other display text.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">DisplayText</span> size=<span class=\"hljs-string\">&quot;small&quot;</span>&gt;<span class=\"hljs-title class_\">Good</span> evening, <span class=\"hljs-title class_\">Dominic</span>.&lt;/<span class=\"hljs-title class_\">DisplayText</span>&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>Although display text creates an interesting visual experience, it doesn’t replace the semantic structure provided by HTML headings.</p>\n<p>By default, the display text component outputs text in an HTML paragraph (<code>&lt;p&gt;</code>). If a heading tag is needed for display text, use the <code>element</code> prop to set the heading level.</p>\n<!-- usageblock -->\n\n<h4 id=\"do\">Do</h4>\n<p>Use display text to create visual interest along with a meaningful heading structure.</p>\n<h4 id=\"dont\">Don’t</h4>\n<p>Use display text in place of standard headings. Use the <a href=\"https://polaris.shopify.com/components/titles-and-text/heading\">heading component</a> and <a href=\"https://polaris.shopify.com/components/titles-and-text/subheading\">subheading component</a> to provide structure.</p>\n<!-- end -->\n\n<!-- /content-for -->\n"
  },
  "DropZone": {
    "name": "Drop zone",
    "category": "Actions",
    "keywords": [
      "upload",
      "image upload",
      "file upload",
      "drag",
      "drop",
      "area",
      "drop area",
      "file dialog",
      "upload placeholder",
      "drop placeholder"
    ],
    "readme": "<h1 id=\"drop-zone\">Drop zone</h1>\n<p>The drop zone component lets users upload files by dragging and dropping the files into an area on a page, or activating a button.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<h3 id=\"drop-zone-1\">Drop zone</h3>\n<p>Drop zones should:</p>\n<ul>\n<li>Inform merchants when the file(s) can’t be uploaded:<ul>\n<li>When possible, use validation errors on drag to detect and explain things like file size limits or file types accepted.</li>\n<li>Use the <a href=\"https://polaris.shopify.com/components/feedback-indicators/banner\">banner component</a> with a critical status to communicate errors that happen on the server.</li>\n</ul>\n</li>\n<li>Provide feedback once the file(s) have been dropped and uploading begins.</li>\n<li>For convenience, allow files to be dropped anywhere on the page by enabling <code>dropOnPage</code>.</li>\n<li>Provide a file upload button to allow merchants to select files for upload in a traditional way. Do this by using the <code>DropZone.FileUpload</code> subcomponent.</li>\n</ul>\n<h3 id=\"validation-errors\">Validation errors</h3>\n<p>The drop zone component validates file type by default. File types you wish to accept can be defined by editing the <code>accept</code> property. This component also accepts custom validations using the <code>customValidator</code> property. When validation fails, the component sets itself to error mode.</p>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"client-side-validation-error-messages\">Client-side validation error messages</h3>\n<p>Client-side validation errors give instant feedback.</p>\n<p>Validation error messages should be:</p>\n<ul>\n<li>Explicit: help merchants understand why their file can’t be uploaded and what they should change to successfully upload their file</li>\n<li>In sentence case: capitalize only the first word in the message</li>\n<li>Concise: use simple, clear language that can be read at a glance. For example:</li>\n</ul>\n<p><code>File size must be less than 20MB</code></p>\n<p><code>File type must be .gif, .jpg, .png or .svg</code></p>\n<h3 id=\"server-side-upload-error-messages\">Server-side upload error messages</h3>\n<p>Server-side upload errors give feedback after file submission.</p>\n<p>Upload error messages should:</p>\n<ul>\n<li>Be displayed as a <a href=\"https://polaris.shopify.com/components/feedback-indicators/banner\">banner</a> with a critical status</li>\n<li>Show the name of the file(s) that were not uploaded successfully</li>\n<li>Describe why the file(s) couldn’t be uploaded and what merchants should change to upload their file successfully, as seen below</li>\n</ul>\n<p><code><pre>\n<span class=\"hljs-title class_\">The</span> following images couldn’t be <span class=\"hljs-attr\">uploaded</span>:</p>\n<ul>\n<li>“keep-it-real.<span class=\"hljs-property\">png</span>” is too large. <span class=\"hljs-title class_\">Try</span> a file size less than 20MB.</li>\n<li>“realer-than-real.<span class=\"hljs-property\">zip</span>” is not supported. <span class=\"hljs-title class_\">File</span> type must be .<span class=\"hljs-property\">gif</span>, .<span class=\"hljs-property\">jpg</span>, .<span class=\"hljs-property\">png</span> or .<span class=\"hljs-property\">svg</span>.</li>\n<li>“so-so-real.<span class=\"hljs-property\">png</span>” was interrupted due to weak network connection, <a href=\"#\">retry upload</a>\n</pre></code></li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"drop-zone-with-file-upload\">Drop zone with file upload</h3>\n<p>Use to allow merchants to upload files. They can drag and drop files into the dashed area, or upload traditionally by clicking the “Add file” button or anywhere inside the dashed area.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">DropZoneExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [files, setFiles] = <span class=\"hljs-title function_\">useState</span>([]);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleDropZoneDrop = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">_dropFiles, acceptedFiles, _rejectedFiles</span>) =&gt;</span>\n      <span class=\"hljs-title function_\">setFiles</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">files</span>) =&gt;</span> [...files, ...acceptedFiles]),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> validImageTypes = [<span class=\"hljs-string\">&#x27;image/gif&#x27;</span>, <span class=\"hljs-string\">&#x27;image/jpeg&#x27;</span>, <span class=\"hljs-string\">&#x27;image/png&#x27;</span>];</p>\n<p>  <span class=\"hljs-keyword\">const</span> fileUpload = !files.<span class=\"hljs-property\">length</span> &amp;&amp; <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DropZone.FileUpload</span> /&gt;</span></span>;\n  <span class=\"hljs-keyword\">const</span> uploadedFiles = files.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span> &amp;&amp; (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{padding:</span> &#x27;<span class=\"hljs-attr\">0</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack</span> <span class=\"hljs-attr\">vertical</span>&gt;</span>\n        {files.map((file, index) =&gt; (\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack</span> <span class=\"hljs-attr\">alignment</span>=<span class=\"hljs-string\">&quot;center&quot;</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Thumbnail</span>\n              <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;small&quot;</span>\n              <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">{file.name}</span>\n              <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{</span>\n                <span class=\"hljs-attr\">validImageTypes.includes</span>(<span class=\"hljs-attr\">file.type</span>)\n                  ? <span class=\"hljs-attr\">window.URL.createObjectURL</span>(<span class=\"hljs-attr\">file</span>)\n                  <span class=\"hljs-attr\">:</span> <span class=\"hljs-attr\">NoteMinor</span>\n              }\n            /&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n              {file.name} <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Caption</span>&gt;</span>{file.size} bytes<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Caption</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack</span>&gt;</span>\n        ))}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DropZone</span> <span class=\"hljs-attr\">onDrop</span>=<span class=\"hljs-string\">{handleDropZoneDrop}</span>&gt;</span>\n      {uploadedFiles}\n      {fileUpload}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DropZone</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"drop-zone-with-a-label\">Drop zone with a label</h3>\n<p>Use to pair with a label for better accessibility.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">DropZone</span> label=<span class=\"hljs-string\">&quot;Theme files&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DropZone.FileUpload</span> /&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">DropZone</span>&gt;\n</pre></code></p>\n<h3 id=\"drop-zone-with-image-file-upload\">Drop zone with image file upload</h3>\n<p>Use for cases that accept image file formats.</p>\n<pre><code class=\"language-jsx\">function DropZoneWithImageFileUpload() {\n  const [files, setFiles] = useState([]);\n  const [rejectedFiles, setRejectedFiles] = useState([]);\n  const hasError = rejectedFiles.length &gt; 0;\n\n  const handleDrop = useCallback(\n    (_droppedFiles, acceptedFiles, rejectedFiles) =&gt; {\n      setFiles((files) =&gt; [...files, ...acceptedFiles]);\n      setRejectedFiles(rejectedFiles);\n    },\n    [],\n  );\n\n  const fileUpload = !files.length &amp;&amp; &lt;DropZone.FileUpload /&gt;;\n  const uploadedFiles = files.length &gt; 0 &amp;&amp; (\n    &lt;Stack vertical&gt;\n      {files.map((file, index) =&gt; (\n        &lt;Stack alignment=&quot;center&quot; key={index}&gt;\n          &lt;Thumbnail\n            size=&quot;small&quot;\n            alt={file.name}\n            source={window.URL.createObjectURL(file)}\n          /&gt;\n          &lt;div&gt;\n            {file.name} &lt;Caption&gt;{file.size} bytes&lt;/Caption&gt;\n          &lt;/div&gt;\n        &lt;/Stack&gt;\n      ))}\n    &lt;/Stack&gt;\n  );\n\n  const errorMessage = hasError &amp;&amp; (\n    &lt;Banner\n      title=&quot;The following images couldn’t be uploaded:&quot;\n      status=&quot;critical&quot;\n    &gt;\n      &lt;List type=&quot;bullet&quot;&gt;\n        {rejectedFiles.map((file, index) =&gt; (\n          &lt;List.Item key={index}&gt;\n            {`&quot;${file.name}&quot; is not supported. File type must be .gif, .jpg, .png or .svg.`}\n          &lt;/List.Item&gt;\n        ))}\n      &lt;/List&gt;\n    &lt;/Banner&gt;\n  );\n\n  return (\n    &lt;Stack vertical&gt;\n      {errorMessage}\n      &lt;DropZone accept=&quot;image/*&quot; type=&quot;image&quot; onDrop={handleDrop}&gt;\n        {uploadedFiles}\n        {fileUpload}\n      &lt;/DropZone&gt;\n    &lt;/Stack&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Drop&lt;/span&gt; zone &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; single file upload\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to accept only one file.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction DropZoneExample() {\n  const [file, setFile] = useState();\n\n  const handleDropZoneDrop = useCallback(\n    (_dropFiles, acceptedFiles, _rejectedFiles) =&gt;\n      setFile((file) =&gt; acceptedFiles[0]),\n    [],\n  );\n\n  const validImageTypes = [&#39;image/gif&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39;];\n\n  const fileUpload = !file &amp;&amp; &lt;DropZone.FileUpload /&gt;;\n  const uploadedFile = file &amp;&amp; (\n    &lt;Stack&gt;\n      &lt;Thumbnail\n        size=&quot;small&quot;\n        alt={file.name}\n        source={\n          validImageTypes.includes(file.type)\n            ? window.URL.createObjectURL(file)\n            : NoteMinor\n        }\n      /&gt;\n      &lt;div&gt;\n        {file.name} &lt;Caption&gt;{file.size} bytes&lt;/Caption&gt;\n      &lt;/div&gt;\n    &lt;/Stack&gt;\n  );\n\n  return (\n    &lt;DropZone allowMultiple={false} onDrop={handleDropZoneDrop}&gt;\n      {uploadedFile}\n      {fileUpload}\n    &lt;/DropZone&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Drop&lt;/span&gt; zone &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; drop on page\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to accept files &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; upload when dropped anywhere on the page.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction DropZoneWithDropOnPageExample() {\n  const [files, setFiles] = useState([]);\n\n  const handleDropZoneDrop = useCallback(\n    (dropFiles, _acceptedFiles, _rejectedFiles) =&gt;\n      setFiles((files) =&gt; [...files, ...dropFiles]),\n    [],\n  );\n\n  const validImageTypes = [&#39;image/gif&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39;];\n\n  const uploadedFiles = files.length &gt; 0 &amp;&amp; (\n    &lt;Stack vertical&gt;\n      {files.map((file, index) =&gt; (\n        &lt;Stack alignment=&quot;center&quot; key={index}&gt;\n          &lt;Thumbnail\n            size=&quot;small&quot;\n            alt={file.name}\n            source={\n              validImageTypes.includes(file.type)\n                ? window.URL.createObjectURL(file)\n                : NoteMinor\n            }\n          /&gt;\n          &lt;div&gt;\n            {file.name} &lt;Caption&gt;{file.size} bytes&lt;/Caption&gt;\n          &lt;/div&gt;\n        &lt;/Stack&gt;\n      ))}\n    &lt;/Stack&gt;\n  );\n\n  const uploadMessage = !uploadedFiles &amp;&amp; &lt;DropZone.FileUpload /&gt;;\n\n  return (\n    &lt;Page\n      breadcrumbs={[{content: &#39;Products&#39;}]}\n      title=&quot;Jar With Lock-Lid&quot;\n      primaryAction={{content: &#39;Save&#39;, disabled: true}}\n      secondaryActions={[\n        {content: &#39;Duplicate&#39;},\n        {content: &#39;View on your store&#39;},\n      ]}\n      pagination={{\n        hasPrevious: true,\n        hasNext: true,\n      }}\n    &gt;\n      &lt;DropZone dropOnPage onDrop={handleDropZoneDrop}&gt;\n        {uploadedFiles}\n        {uploadMessage}\n      &lt;/DropZone&gt;\n    &lt;/Page&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Drop&lt;/span&gt; zone accepts only &lt;span class=&quot;hljs-variable constant_&quot;&gt;SVG&lt;/span&gt; files\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to accept only &lt;span class=&quot;hljs-variable constant_&quot;&gt;SVG&lt;/span&gt; files.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction DropZoneAcceptingSVGFilesExample() {\n  const [files, setFiles] = useState([]);\n  const [rejectedFiles, setRejectedFiles] = useState([]);\n  const hasError = rejectedFiles.length &gt; 0;\n\n  const handleDropZoneDrop = useCallback(\n    (_dropFiles, acceptedFiles, rejectedFiles) =&gt; {\n      setFiles((files) =&gt; [...files, ...acceptedFiles]);\n      setRejectedFiles(rejectedFiles);\n    },\n    [],\n  );\n\n  const uploadedFiles = files.length &gt; 0 &amp;&amp; (\n    &lt;Stack vertical&gt;\n      {files.map((file, index) =&gt; (\n        &lt;Stack alignment=&quot;center&quot; key={index}&gt;\n          &lt;Thumbnail\n            size=&quot;small&quot;\n            alt={file.name}\n            source={window.URL.createObjectURL(file)}\n          /&gt;\n          &lt;div&gt;\n            {file.name} &lt;Caption&gt;{file.size} bytes&lt;/Caption&gt;\n          &lt;/div&gt;\n        &lt;/Stack&gt;\n      ))}\n    &lt;/Stack&gt;\n  );\n\n  const errorMessage = hasError &amp;&amp; (\n    &lt;Banner\n      title=&quot;The following images couldn’t be uploaded:&quot;\n      status=&quot;critical&quot;\n    &gt;\n      &lt;List type=&quot;bullet&quot;&gt;\n        {rejectedFiles.map((file, index) =&gt; (\n          &lt;List.Item key={index}&gt;\n            {`&quot;${file.name}&quot; is not supported. File type must be .svg.`}\n          &lt;/List.Item&gt;\n        ))}\n      &lt;/List&gt;\n    &lt;/Banner&gt;\n  );\n\n  return (\n    &lt;Stack vertical&gt;\n      {errorMessage}\n      &lt;DropZone\n        accept=&quot;image/svg+xml&quot;\n        type=&quot;image&quot;\n        errorOverlayText=&quot;File type must be .svg&quot;\n        onDrop={handleDropZoneDrop}\n      &gt;\n        {uploadedFiles}\n      &lt;/DropZone&gt;\n    &lt;/Stack&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Nested&lt;/span&gt; drop zone\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to allow merchants to upload files &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a wider area than the visible drop zone.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction NestedDropZoneExample() {\n  const [files, setFiles] = useState([]);\n\n  const handleDrop = useCallback((dropFiles) =&gt; {\n    setFiles((files) =&gt; [...files, dropFiles]);\n  }, []);\n\n  const handleDropZoneClick = useCallback(() =&gt; {}, []);\n\n  const validImageTypes = [&#39;image/gif&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39;];\n\n  const fileUpload = !files.length &amp;&amp; &lt;DropZone.FileUpload /&gt;;\n  const uploadedFiles = files.length &gt; 0 &amp;&amp; (\n    &lt;Stack vertical&gt;\n      {files.map((file, index) =&gt; (\n        &lt;Stack alignment=&quot;center&quot; key={index}&gt;\n          &lt;Thumbnail\n            size=&quot;small&quot;\n            alt={file.name}\n            source={\n              validImageTypes.includes(file.type)\n                ? window.URL.createObjectURL(file)\n                : NoteMinor\n            }\n          /&gt;\n          &lt;div&gt;\n            {file.name} &lt;Caption&gt;{file.size} bytes&lt;/Caption&gt;\n          &lt;/div&gt;\n        &lt;/Stack&gt;\n      ))}\n    &lt;/Stack&gt;\n  );\n\n  return (\n    &lt;DropZone outline={false} onDrop={handleDrop}&gt;\n      &lt;Card sectioned&gt;\n        &lt;DropZone onClick={handleDropZoneClick}&gt;\n          {uploadedFiles}\n          {fileUpload}\n        &lt;/DropZone&gt;\n      &lt;/Card&gt;\n    &lt;/DropZone&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Medium&lt;/span&gt;-sized drop zone\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; cases &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; limited space. &lt;span class=&quot;hljs-title class_&quot;&gt;To&lt;/span&gt; improve usability, nest medium-sized drop zone &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a larger drop zone &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; no outline. &lt;span class=&quot;hljs-title class_&quot;&gt;See&lt;/span&gt; the nested dropzone example.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\n&lt;div style={{width: 114, height: 114}}&gt;\n  &lt;DropZone&gt;\n    &lt;DropZone.FileUpload /&gt;\n  &lt;/DropZone&gt;\n&lt;/div&gt;\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Small&lt;/span&gt;-sized drop zone\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; cases &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; tight space constraints, such &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; variant thumbnails on the &lt;span class=&quot;hljs-title class_&quot;&gt;Product&lt;/span&gt; details page. &lt;span class=&quot;hljs-title class_&quot;&gt;To&lt;/span&gt; improve usability, nest small-sized drop zone &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a larger drop zone &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; no outline. &lt;span class=&quot;hljs-title class_&quot;&gt;See&lt;/span&gt; the nested dropzone example.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\n&lt;div style={{width: 50, height: 50}}&gt;\n  &lt;DropZone&gt;\n    &lt;DropZone.FileUpload /&gt;\n  &lt;/DropZone&gt;\n&lt;/div&gt;\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Drop&lt;/span&gt; zone &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; custom &lt;span class=&quot;hljs-title class_&quot;&gt;FileUpload&lt;/span&gt; text\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; cases where you want the child contents &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; the dropzone to determine its height.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction DropZoneExample() {\n  const [files, setFiles] = useState([]);\n\n  const handleDropZoneDrop = useCallback(\n    (_dropFiles, acceptedFiles, _rejectedFiles) =&gt;\n      setFiles((files) =&gt; [...files, ...acceptedFiles]),\n    [],\n  );\n\n  const validImageTypes = [&#39;image/gif&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39;];\n\n  const fileUpload = !files.length &amp;&amp; (\n    &lt;DropZone.FileUpload actionHint=&quot;Accepts .gif, .jpg, and .png&quot; /&gt;\n  );\n\n  const uploadedFiles = files.length &gt; 0 &amp;&amp; (\n    &lt;Stack vertical&gt;\n      {files.map((file, index) =&gt; (\n        &lt;Stack alignment=&quot;center&quot; key={index}&gt;\n          &lt;Thumbnail\n            size=&quot;small&quot;\n            alt={file.name}\n            source={\n              validImageTypes.includes(file.type)\n                ? window.URL.createObjectURL(file)\n                : NoteMinor\n            }\n          /&gt;\n          &lt;div&gt;\n            {file.name} &lt;Caption&gt;{file.size} bytes&lt;/Caption&gt;\n          &lt;/div&gt;\n        &lt;/Stack&gt;\n      ))}\n    &lt;/Stack&gt;\n  );\n\n  return (\n    &lt;DropZone onDrop={handleDropZoneDrop} variableHeight&gt;\n      {uploadedFiles}\n      {fileUpload}\n    &lt;/DropZone&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Drop&lt;/span&gt; zone &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; custom file dialog trigger\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to trigger the file dialog &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; an action somewhere &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; on the page.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction DropZoneWithCustomFileDialogExample() {\n  const [files, setFiles] = useState([]);\n  const [openFileDialog, setOpenFileDialog] = useState(false);\n\n  const handleDropZoneDrop = useCallback(\n    (dropFiles, _acceptedFiles, _rejectedFiles) =&gt;\n      setFiles((files) =&gt; [...files, ...dropFiles]),\n    [],\n  );\n  const toggleOpenFileDialog = useCallback(\n    () =&gt; setOpenFileDialog((openFileDialog) =&gt; !openFileDialog),\n    [],\n  );\n\n  const validImageTypes = [&#39;image/gif&#39;, &#39;image/jpeg&#39;, &#39;image/png&#39;];\n\n  const uploadedFiles = files.length &gt; 0 &amp;&amp; (\n    &lt;Stack vertical&gt;\n      {files.map((file, index) =&gt; (\n        &lt;Stack alignment=&quot;center&quot; key={index}&gt;\n          &lt;Thumbnail\n            size=&quot;small&quot;\n            alt={file.name}\n            source={\n              validImageTypes.indexOf(file.type) &gt; -1\n                ? window.URL.createObjectURL(file)\n                : NoteMinor\n            }\n          /&gt;\n          &lt;div&gt;\n            {file.name} &lt;Caption&gt;{file.size} bytes&lt;/Caption&gt;\n          &lt;/div&gt;\n        &lt;/Stack&gt;\n      ))}\n    &lt;/Stack&gt;\n  );\n\n  return (\n    &lt;Card\n      sectioned\n      title=&quot;Product Images&quot;\n      actions={[\n        {\n          content: &#39;Upload Image&#39;,\n          onAction: toggleOpenFileDialog,\n        },\n      ]}\n    &gt;\n      &lt;DropZone\n        openFileDialog={openFileDialog}\n        onDrop={handleDropZoneDrop}\n        onFileDialogClose={toggleOpenFileDialog}\n      &gt;\n        {uploadedFiles}\n      &lt;/DropZone&gt;\n    &lt;/Card&gt;\n  );\n}\n</code></pre>\n<hr>\n<h2 id=\"drop-zone-file-upload\">Drop zone file upload</h2>\n<p>Use file upload with the drop zone component to let merchants select files for upload in a traditional way.</p>\n<h3 id=\"file-upload-properties\">File upload properties</h3>\n<table>\n<thead>\n<tr>\n<th>Prop</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>actionTitle</td>\n<td>string</td>\n<td>String that appears in file upload</td>\n<td>&#39;Add file&#39;</td>\n</tr>\n<tr>\n<td>actionHint</td>\n<td>string</td>\n<td>String that appears in file upload</td>\n<td>&#39;or drop files to upload&#39;</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To provide context to upload errors when they occur, use the <a href=\"https://polaris.shopify.com/components/feedback-indicators/banner\">banner component</a></li>\n<li>To provide feedback during file upload, use the <a href=\"https://polaris.shopify.com/components/feedback-indicators/spinner\">spinner component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>The drop zone component builds on the native HTML <code>&lt;input type=&quot;upload&quot;&gt;</code> element. It includes a visual<code>&lt;button&gt;</code> as well as a drag and drop area that can receive keyboard focus.</p>\n<h3 id=\"keyboard-support\">Keyboard support</h3>\n<p>To upload a file with the keyboard, merchants can interact with the drag-and-drop region.</p>\n<ul>\n<li>To give the input keyboard focus, use the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)</li>\n<li>To activate the input, use the <kbd>enter</kbd>/<kbd>return</kbd> or <kbd>space</kbd> keys</li>\n</ul>\n<!-- /content-for -->\n"
  },
  "EmptyState": {
    "name": "Empty state",
    "category": "Structure",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "EmptyState",
      "lander",
      "welcome",
      "explain features",
      "describe features",
      "educate about features",
      "merchant education",
      "educational opportunity",
      "educational opportunities",
      "illustration on pages",
      "empty layouts",
      "empty states",
      "starting pages",
      "starting layouts",
      "educating",
      "teaching",
      "landing pages",
      "landing layouts"
    ],
    "readme": "<h1 id=\"empty-state\">Empty state</h1>\n<p>Empty states are used when a list, table, or chart has no items or data to show. This is an opportunity to provide explanation or guidance to help merchants progress. The empty state component is intended for use when a full page in the admin is empty, and not for individual elements or areas in the interface.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Empty states should:</p>\n<ul>\n<li>Orient merchants by clearly explaining the benefit and utility of a product\nor feature</li>\n<li>Simplify a complicated experience by focusing on a few key features and\nbenefits</li>\n<li>Use simple and clear language that empowers merchants to move their business\nforward</li>\n<li>Be encouraging and never make merchants feel unsuccessful or guilty because\nthey haven’t used a product or feature</li>\n<li>Explain the steps merchants need to take to activate a product or feature</li>\n<li>Use illustrations thoughtfully as outlined in our <a href=\"https://polaris.shopify.com/design/illustrations\">illustration guidelines</a></li>\n<li>Use only one primary call-to-action button</li>\n<li>Provide extra spacing at the bottom of an empty state that is within content\n(card, modal, or navigation) to match the image that was passed into the component\nwith a white space above it of 40px</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"title\">Title</h3>\n<p>Empty state titles should:</p>\n<ul>\n<li>Be action-oriented: encourage merchants to take the step required to activate the product or feature</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Create orders and send invoices</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>Orders and invoices</li>\n</ul>\n</div></div>\n\n<ul>\n<li>Follow the content guidelines for <a href=\"https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings\">headings and subheadings</a></li>\n</ul>\n<h3 id=\"subtitle\">Subtitle</h3>\n<p>Empty state subtitles act like body content. They should:</p>\n<ul>\n<li>Describe or explain what’s in the empty state title or item title</li>\n<li>Be conversational: include articles such as the, a, and an</li>\n</ul>\n<h3 id=\"primary-action\">Primary action</h3>\n<p>Buttons are used for the most important actions you want merchants to take.\nThey should be:</p>\n<ul>\n<li>Clear and predictable: merchants should be able to anticipate what will\nhappen when they click a button. Never deceive merchants by using misleading\ntitles.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Create order</li>\n<li>Buy shipping label</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>New order</li>\n<li>Buy</li>\n</ul>\n</div></div>\n\n<ul>\n<li>Action-led: buttons should always lead with a strong verb that encourages\naction. To provide enough context to merchants use the {verb}+{noun} format on\nbuttons except in the case of common actions like Save, Close, Cancel, or OK.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-2\">Do</h4>\n<ul>\n<li>Activate Apple Pay</li>\n<li>View shipping settings</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-2\">Don’t</h4>\n<ul>\n<li>Try Apple Pay</li>\n<li>View your settings</li>\n</ul>\n</div></div>\n\n<ul>\n<li>Scannable: avoid unnecessary words and articles such as the, an, or a.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-3\">Do</h4>\n<ul>\n<li>Add menu item</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-3\">Don’t</h4>\n<ul>\n<li>Add a menu item</li>\n</ul>\n</div></div>\n\n<h3 id=\"secondary-action\">Secondary action</h3>\n<p>Secondary actions are used for less important actions such as “Learn more” or\n“Close” buttons. They should follow all the other content rules outlined for\nprimary buttons.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-empty-state\">Default empty state</h3>\n<p>Use to explain a single feature before merchants have used it.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> sectioned&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">EmptyState</span>\n    <span class=\"hljs-attr\">heading</span>=<span class=\"hljs-string\">&quot;Manage your inventory transfers&quot;</span>\n    <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">{{content:</span> &#x27;<span class=\"hljs-attr\">Add</span> <span class=\"hljs-attr\">transfer</span>&#x27;}}\n    <span class=\"hljs-attr\">secondaryAction</span>=<span class=\"hljs-string\">{{content:</span> &#x27;<span class=\"hljs-attr\">Learn</span> <span class=\"hljs-attr\">more</span>&#x27;, <span class=\"hljs-attr\">url:</span> &#x27;<span class=\"hljs-attr\">https:</span>//<span class=\"hljs-attr\">help.shopify.com</span>&#x27;}}\n    <span class=\"hljs-attr\">image</span>=<span class=\"hljs-string\">&quot;<a href=\"https://cdn.shopify.com/s/files/1/0262/4071/2726/files/emptystate-files.png\">https://cdn.shopify.com/s/files/1/0262/4071/2726/files/emptystate-files.png</a>&quot;</span>\n  &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Track and receive your incoming inventory from suppliers.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">EmptyState</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/EmptyState/android/default@2x.png\" alt=\"Default empty state\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/EmptyState/ios/default@2x.png\" alt=\"Default empty state\"></p>\n<!-- /content-for -->\n\n<h3 id=\"empty-state-with-subdued-footer-context\">Empty state with subdued footer context</h3>\n<!-- example-for: web -->\n\n<p>Use to provide additional but non-critical context for a new product or feature. Can also be used to include a subdued call to action for secondary or tertiary actions.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> sectioned&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">EmptyState</span>\n    <span class=\"hljs-attr\">heading</span>=<span class=\"hljs-string\">&quot;Manage your inventory transfers&quot;</span>\n    <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">{{content:</span> &#x27;<span class=\"hljs-attr\">Add</span> <span class=\"hljs-attr\">transfer</span>&#x27;}}\n    <span class=\"hljs-attr\">secondaryAction</span>=<span class=\"hljs-string\">{{content:</span> &#x27;<span class=\"hljs-attr\">Learn</span> <span class=\"hljs-attr\">more</span>&#x27;, <span class=\"hljs-attr\">url:</span> &#x27;<span class=\"hljs-attr\">https:</span>//<span class=\"hljs-attr\">help.shopify.com</span>&#x27;}}\n    <span class=\"hljs-attr\">footerContent</span>=<span class=\"hljs-string\">{</span>\n      &lt;<span class=\"hljs-attr\">p</span>&gt;</span>\n        If you don’t want to add a transfer, you can import your inventory from{&#x27; &#x27;}\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">monochrome</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">&quot;/settings&quot;</span>&gt;</span>\n          settings\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\n        .\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    }\n    image=&quot;<a href=\"https://cdn.shopify.com/s/files/1/0262/4071/2726/files/emptystate-files.png\">https://cdn.shopify.com/s/files/1/0262/4071/2726/files/emptystate-files.png</a>&quot;\n  &gt;\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Track and receive your incoming inventory from suppliers.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">EmptyState</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<h3 id=\"empty-state-with-full-width-layout\">Empty state with full width layout</h3>\n<!-- example-for: web -->\n\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> sectioned&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">EmptyState</span>\n    <span class=\"hljs-attr\">heading</span>=<span class=\"hljs-string\">&quot;Upload a file to get started&quot;</span>\n    <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">{{content:</span> &#x27;<span class=\"hljs-attr\">Upload</span> <span class=\"hljs-attr\">files</span>&#x27;}}\n    <span class=\"hljs-attr\">image</span>=<span class=\"hljs-string\">&quot;<a href=\"https://cdn.shopify.com/s/files/1/0262/4071/2726/files/emptystate-files.png\">https://cdn.shopify.com/s/files/1/0262/4071/2726/files/emptystate-files.png</a>&quot;</span>\n    <span class=\"hljs-attr\">fullWidth</span>\n  &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n      You can use the Files section to upload images, videos, and other\n      documents. This example shows the content with a centered layout and full\n      width.\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">EmptyState</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To learn more about illustrations for empty states, <a href=\"https://polaris.shopify.com/design/illustrations\">read the illustration guidelines</a></li>\n<li>To create page-level layout, <a href=\"https://polaris.shopify.com/components/structure/layout\">use the layout component</a></li>\n<li>To highlight a Shopify feature, <a href=\"https://polaris.shopify.com/components/structure/callout-card\">use the callout card component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>Empty state illustrations are implemented as decorative images, so they use an empty <code>alt</code> attribute and are skipped by technologies like screen readers.</p>\n<!-- /content-for -->\n"
  },
  "ExceptionList": {
    "name": "Exception list",
    "category": "Lists and tables",
    "keywords": [
      "exception list",
      "exceptions",
      "list",
      "list exceptions"
    ],
    "readme": "<div class=\"usage-list\"><div class=\"usage-list-part\"><h1 id=\"exception-list\">Exception list</h1>\n<p>Use exception lists to help merchants notice important, standout information that adds extra context to a task. Exception lists often consist of a title and description. Each item in the list either has a bullet or icon at the front.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The exception list component should:</p>\n<ul>\n<li>Be attached to another component</li>\n<li>Inform merchants about extra context that will help them make better decisions</li>\n<li>Only surface noteworthy, actionable content, like a high risk order or out of stock item</li>\n<li>Used sparingly, so that it has more impact and doesn’t add clutter</li>\n<li>Only use an icon if it adds clarity to the content or helps merchants visualize the meaning</li>\n</ul>\n<!-- improvement -->\n\n<h3 id=\"opportunity-for-improvement\">Opportunity for improvement</h3>\n<p>Exception lists aren’t clickable. If you have an idea that could make this component better, please <a href=\"https://github.com/shopify/polaris-react/issues\">open an issue</a>.</p>\n</div></div>\n\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>Exception lists should:</p>\n<ul>\n<li>Highlight an exceptional state that helps merchants make a decision</li>\n<li>Use the appropriate <a href=\"https://polaris.shopify.com/design/colors\">color</a> to suit the tone of the message</li>\n<li>Have a description (a title is optional)</li>\n<li>Be concise</li>\n</ul>\n<p>For error states, exception lists should:</p>\n<ul>\n<li>Either tell merchants how to solve the problem or be attached to an item that lets merchants fix the problem</li>\n</ul>\n<p>If placed next to an item in a <a href=\"https://polaris.shopify.com/components/lists-and-tables/resource-list\">resource list</a>, exceptions lists should:</p>\n<ul>\n<li>Make the entire list item clickable because the exception list itself isn’t clickable</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li><img src=\"/images-from-old-styleguide/exception-list/do-exception-list@2x.png\" alt=\"Exception list being used inside a resource list item\"></li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li><img src=\"/images-from-old-styleguide/exception-list/dont-exception-list@2x.png\" alt=\"Exception list being used in place of a banner\"></li>\n</ul>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"exception-list-with-icon\">Exception list with icon</h3>\n<p>Use icons to add clarity or assist in visualizing the meaning</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">ExceptionList</span>\n  items={[\n    {\n      <span class=\"hljs-attr\">icon</span>: <span class=\"hljs-title class_\">NoteMinor</span>,\n      <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&#x27;This customer is awesome. Make sure to treat them right!&#x27;</span>,\n    },\n  ]}\n/&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<!-- remove comment and adjust link when component is built -->\n\n<!-- * To display an error in a card or section, use the [contextual banner]() component -->\n\n<ul>\n<li>To display an error at the top of a page, or to indicate multiple errors in a form, use the <a href=\"https://polaris.shopify.com/components/feedback-indicators/banner\">banner</a> component</li>\n<li>Exceptions lists are often used in the <a href=\"https://polaris.shopify.com/components/lists-and-tables/resource-list\">resource list</a> component to display conditional content</li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>Items in an exception list are organized as list items (<code>&lt;li&gt;</code>) in an unordered list wrapper (<code>&lt;ul&gt;</code>), so they’re conveyed as a group of related elements to assistive technology users.</p>\n<p>Icons displayed with exception list items are meant to visually reinforce the adjacent information, not to convey information on their own. They are skipped by screen readers using <code>aria-hidden=&quot;true&quot;</code>.</p>\n<!-- /content-for -->\n"
  },
  "Filters": {
    "name": "Filters",
    "category": "Lists and tables",
    "keywords": [
      "filters",
      "filtering",
      "filter control",
      "resource list",
      "index",
      "list filter",
      "table"
    ],
    "readme": "<h1 id=\"filters\">Filters</h1>\n<p>Filters is a composite component that filters the items of a list or table.</p>\n<p>Merchants use filters to:</p>\n<ul>\n<li>view different subsets of items in a list or table</li>\n<li>filter by typing into a text field</li>\n<li>filter by selecting filters or promoted filters</li>\n</ul>\n<p>The way that merchants interact with filters depends on the components that you decide to incorporate. In its simplest form, filters includes a text field and a set of filters, which can be displayed in different ways. For example, you could show promoted filters and a More button that opens a <a href=\"https://polaris.shopify.com/components/overlays/sheet\">sheet</a> containing more filters. What the filters are and how they’re exposed to merchants is flexible.</p>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<p>The filters component relies on the accessibility features of multiple other components:</p>\n<ul>\n<li><a href=\"https://polaris.shopify.com/components/forms/text-field\">Text field</a></li>\n<li><a href=\"https://polaris.shopify.com/components/actions/button\">Button</a></li>\n<li><a href=\"https://polaris.shopify.com/components/overlays/popover\">Popover</a></li>\n<li><a href=\"https://polaris.shopify.com/components/overlays/sheet\">Sheet</a></li>\n<li><a href=\"https://polaris.shopify.com/components/behavior/collapsible\">Collapsible</a></li>\n</ul>\n<h3 id=\"maintain-accessibility-with-custom-features\">Maintain accessibility with custom features</h3>\n<p>Since custom HTML can be passed to the component for additional actions, ensure that the filtering system you build is accessible as a whole.</p>\n<p>All merchants must:</p>\n<ul>\n<li>be able to identify and understand labels for all controls</li>\n<li>be notified of state changes</li>\n<li>be able to complete all actions with the keyboard</li>\n</ul>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The filters component should:</p>\n<ul>\n<li>help reduce merchant effort by promoting the filtering categories that are most commonly used</li>\n<li>include no more than 2 or 3 promoted filters</li>\n<li>consider small screen sizes when designing the interface for each filter and the total number filters to include</li>\n<li>use children only for content that’s related or relevant to filtering</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"text-field\">Text field</h3>\n<p>The text field should be clearly labeled so it’s obvious to merchants what they should enter into the field.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Filter orders</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>Enter text here</li>\n</ul>\n</div></div>\n\n<h3 id=\"filter-badges\">Filter badges</h3>\n<p>Use the name of the filter if the purpose of the name is clear on its own. For example, when you see a filter badge that reads <strong>Fulfilled</strong>, it’s intuitive that it falls under the Fulfillment status category.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Fulfilled, Unfulfilled</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>Fulfillment: Fulfilled, Unfulfilled</li>\n</ul>\n</div></div>\n\n<p>If the filter name is ambiguous on its own, add a descriptive word related to the status. For example, <strong>Low</strong> doesn’t make sense out of context. Add the word “risk” so that merchants know it’s from the Risk category.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-2\">Do</h4>\n<ul>\n<li>High risk, Low risk</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-2\">Don’t</h4>\n<ul>\n<li>High, Low</li>\n</ul>\n</div></div>\n\n<p>Group tags from the same category together.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-3\">Do</h4>\n<ul>\n<li>(Unfulfilled, Fulfilled)</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-3\">Don’t</h4>\n<ul>\n<li>(Unfulfilled) (fulfilled)</li>\n</ul>\n</div></div>\n\n<p>If all tag pills selected: truncate in the middle</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-4\">Do</h4>\n<ul>\n<li>Paid, par… unpaid</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-4\">Don’t</h4>\n<ul>\n<li>All payment status filters selected, Paid, unpa…</li>\n</ul>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"filtering-with-a-resource-list\">Filtering with a resource list</h3>\n<pre><code class=\"language-jsx\">function ResourceListFiltersExample() {\n  const [accountStatus, setAccountStatus] = useState(null);\n  const [moneySpent, setMoneySpent] = useState(null);\n  const [taggedWith, setTaggedWith] = useState(null);\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleAccountStatusChange = useCallback(\n    (value) =&gt; setAccountStatus(value),\n    [],\n  );\n  const handleMoneySpentChange = useCallback(\n    (value) =&gt; setMoneySpent(value),\n    [],\n  );\n  const handleTaggedWithChange = useCallback(\n    (value) =&gt; setTaggedWith(value),\n    [],\n  );\n  const handleFiltersQueryChange = useCallback(\n    (value) =&gt; setQueryValue(value),\n    [],\n  );\n  const handleAccountStatusRemove = useCallback(\n    () =&gt; setAccountStatus(null),\n    [],\n  );\n  const handleMoneySpentRemove = useCallback(() =&gt; setMoneySpent(null), []);\n  const handleTaggedWithRemove = useCallback(() =&gt; setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() =&gt; setQueryValue(null), []);\n  const handleFiltersClearAll = useCallback(() =&gt; {\n    handleAccountStatusRemove();\n    handleMoneySpentRemove();\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [\n    handleAccountStatusRemove,\n    handleMoneySpentRemove,\n    handleQueryValueRemove,\n    handleTaggedWithRemove,\n  ]);\n\n  const filters = [\n    {\n      key: &#39;accountStatus&#39;,\n      label: &#39;Account status&#39;,\n      filter: (\n        &lt;ChoiceList\n          title=&quot;Account status&quot;\n          titleHidden\n          choices={[\n            {label: &#39;Enabled&#39;, value: &#39;enabled&#39;},\n            {label: &#39;Not invited&#39;, value: &#39;not invited&#39;},\n            {label: &#39;Invited&#39;, value: &#39;invited&#39;},\n            {label: &#39;Declined&#39;, value: &#39;declined&#39;},\n          ]}\n          selected={accountStatus || []}\n          onChange={handleAccountStatusChange}\n          allowMultiple\n        /&gt;\n      ),\n      shortcut: true,\n    },\n    {\n      key: &#39;taggedWith&#39;,\n      label: &#39;Tagged with&#39;,\n      filter: (\n        &lt;TextField\n          label=&quot;Tagged with&quot;\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=&quot;off&quot;\n          labelHidden\n        /&gt;\n      ),\n      shortcut: true,\n    },\n    {\n      key: &#39;moneySpent&#39;,\n      label: &#39;Money spent&#39;,\n      filter: (\n        &lt;RangeSlider\n          label=&quot;Money spent is between&quot;\n          labelHidden\n          value={moneySpent || [0, 500]}\n          prefix=&quot;$&quot;\n          output\n          min={0}\n          max={2000}\n          step={1}\n          onChange={handleMoneySpentChange}\n        /&gt;\n      ),\n    },\n  ];\n\n  const appliedFilters = [];\n  if (!isEmpty(accountStatus)) {\n    const key = &#39;accountStatus&#39;;\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, accountStatus),\n      onRemove: handleAccountStatusRemove,\n    });\n  }\n  if (!isEmpty(moneySpent)) {\n    const key = &#39;moneySpent&#39;;\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, moneySpent),\n      onRemove: handleMoneySpentRemove,\n    });\n  }\n  if (!isEmpty(taggedWith)) {\n    const key = &#39;taggedWith&#39;;\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, taggedWith),\n      onRemove: handleTaggedWithRemove,\n    });\n  }\n\n  return (\n    &lt;div style={{height: &#39;568px&#39;}}&gt;\n      &lt;Card&gt;\n        &lt;ResourceList\n          resourceName={{singular: &#39;customer&#39;, plural: &#39;customers&#39;}}\n          filterControl={\n            &lt;Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleFiltersQueryChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleFiltersClearAll}\n            /&gt;\n          }\n          items={[\n            {\n              id: 341,\n              url: &#39;customers/341&#39;,\n              name: &#39;Mae Jemison&#39;,\n              location: &#39;Decatur, USA&#39;,\n            },\n            {\n              id: 256,\n              url: &#39;customers/256&#39;,\n              name: &#39;Ellen Ochoa&#39;,\n              location: &#39;Los Angeles, USA&#39;,\n            },\n          ]}\n          renderItem={(item) =&gt; {\n            const {id, url, name, location} = item;\n            const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n\n            return (\n              &lt;ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              &gt;\n                &lt;h3&gt;\n                  &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n                &lt;/h3&gt;\n                &lt;div&gt;{location}&lt;/div&gt;\n              &lt;/ResourceList.Item&gt;\n            );\n          }}\n        /&gt;\n      &lt;/Card&gt;\n    &lt;/div&gt;\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case &#39;moneySpent&#39;:\n        return `Money spent is between $${value[0]} and $${value[1]}`;\n      case &#39;taggedWith&#39;:\n        return `Tagged with ${value}`;\n      case &#39;accountStatus&#39;:\n        return value.map((val) =&gt; `Customer ${val}`).join(&#39;, &#39;);\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === &#39;&#39; || value == null;\n    }\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Filtering&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; a data table\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction DataTableFiltersExample() {\n  const [availability, setAvailability] = useState(null);\n  const [productType, setProductType] = useState(null);\n  const [taggedWith, setTaggedWith] = useState(null);\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleAvailabilityChange = useCallback(\n    (value) =&gt; setAvailability(value),\n    [],\n  );\n  const handleProductTypeChange = useCallback(\n    (value) =&gt; setProductType(value),\n    [],\n  );\n  const handleTaggedWithChange = useCallback(\n    (value) =&gt; setTaggedWith(value),\n    [],\n  );\n  const handleFiltersQueryChange = useCallback(\n    (value) =&gt; setQueryValue(value),\n    [],\n  );\n  const handleAvailabilityRemove = useCallback(() =&gt; setAvailability(null), []);\n  const handleProductTypeRemove = useCallback(() =&gt; setProductType(null), []);\n  const handleTaggedWithRemove = useCallback(() =&gt; setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() =&gt; setQueryValue(null), []);\n  const handleFiltersClearAll = useCallback(() =&gt; {\n    handleAvailabilityRemove();\n    handleProductTypeRemove();\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [\n    handleAvailabilityRemove,\n    handleQueryValueRemove,\n    handleProductTypeRemove,\n    handleTaggedWithRemove,\n  ]);\n\n  const filters = [\n    {\n      key: &#39;availability&#39;,\n      label: &#39;Availability&#39;,\n      filter: (\n        &lt;ChoiceList\n          title=&quot;Availability&quot;\n          titleHidden\n          choices={[\n            {label: &#39;Online Store&#39;, value: &#39;Online Store&#39;},\n            {label: &#39;Point of Sale&#39;, value: &#39;Point of Sale&#39;},\n            {label: &#39;Buy Button&#39;, value: &#39;Buy Button&#39;},\n          ]}\n          selected={availability || []}\n          onChange={handleAvailabilityChange}\n          allowMultiple\n        /&gt;\n      ),\n      shortcut: true,\n    },\n    {\n      key: &#39;productType&#39;,\n      label: &#39;Product type&#39;,\n      filter: (\n        &lt;ChoiceList\n          title=&quot;Product type&quot;\n          titleHidden\n          choices={[\n            {label: &#39;T-Shirt&#39;, value: &#39;T-Shirt&#39;},\n            {label: &#39;Accessory&#39;, value: &#39;Accessory&#39;},\n            {label: &#39;Gift card&#39;, value: &#39;Gift card&#39;},\n          ]}\n          selected={productType || []}\n          onChange={handleProductTypeChange}\n          allowMultiple\n        /&gt;\n      ),\n    },\n    {\n      key: &#39;taggedWith&#39;,\n      label: &#39;Tagged with&#39;,\n      filter: (\n        &lt;TextField\n          label=&quot;Tagged with&quot;\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=&quot;off&quot;\n          labelHidden\n        /&gt;\n      ),\n    },\n  ];\n\n  const appliedFilters = [];\n  if (!isEmpty(availability)) {\n    const key = &#39;availability&#39;;\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, availability),\n      onRemove: handleAvailabilityRemove,\n    });\n  }\n  if (!isEmpty(productType)) {\n    const key = &#39;productType&#39;;\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, productType),\n      onRemove: handleProductTypeRemove,\n    });\n  }\n  if (!isEmpty(taggedWith)) {\n    const key = &#39;taggedWith&#39;;\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, taggedWith),\n      onRemove: handleTaggedWithRemove,\n    });\n  }\n\n  return (\n    &lt;div style={{height: &#39;568px&#39;}}&gt;\n      &lt;Card&gt;\n        &lt;Card.Section&gt;\n          &lt;Filters\n            queryValue={queryValue}\n            filters={filters}\n            appliedFilters={appliedFilters}\n            onQueryChange={handleFiltersQueryChange}\n            onQueryClear={handleQueryValueRemove}\n            onClearAll={handleFiltersClearAll}\n          /&gt;\n        &lt;/Card.Section&gt;\n        &lt;DataTable\n          columnContentTypes={[\n            &#39;text&#39;,\n            &#39;numeric&#39;,\n            &#39;numeric&#39;,\n            &#39;numeric&#39;,\n            &#39;numeric&#39;,\n          ]}\n          headings={[\n            &#39;Product&#39;,\n            &#39;Price&#39;,\n            &#39;SKU Number&#39;,\n            &#39;Net quantity&#39;,\n            &#39;Net sales&#39;,\n          ]}\n          rows={[\n            [&#39;Emerald Silk Gown&#39;, &#39;$875.00&#39;, 124689, 140, &#39;$122,500.00&#39;],\n            [&#39;Mauve Cashmere Scarf&#39;, &#39;$230.00&#39;, 124533, 83, &#39;$19,090.00&#39;],\n            [\n              &#39;Navy Merino Wool Blazer with khaki chinos and yellow belt&#39;,\n              &#39;$445.00&#39;,\n              124518,\n              32,\n              &#39;$14,240.00&#39;,\n            ],\n          ]}\n          totals={[&#39;&#39;, &#39;&#39;, &#39;&#39;, 255, &#39;$155,830.00&#39;]}\n        /&gt;\n      &lt;/Card&gt;\n    &lt;/div&gt;\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case &#39;taggedWith&#39;:\n        return `Tagged with ${value}`;\n      case &#39;availability&#39;:\n        return value.map((val) =&gt; `Available on ${val}`).join(&#39;, &#39;);\n      case &#39;productType&#39;:\n        return value.join(&#39;, &#39;);\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === &#39;&#39; || value == null;\n    }\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Filters&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; children content\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction FiltersExample() {\n  const [taggedWith, setTaggedWith] = useState(null);\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleTaggedWithChange = useCallback(\n    (value) =&gt; setTaggedWith(value),\n    [],\n  );\n  const handleQueryValueChange = useCallback(\n    (value) =&gt; setQueryValue(value),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() =&gt; setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() =&gt; setQueryValue(null), []);\n\n  const handleClearAll = useCallback(() =&gt; {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n\n  const filters = [\n    {\n      key: &#39;taggedWith&#39;,\n      label: &#39;Tagged with&#39;,\n      filter: (\n        &lt;TextField\n          label=&quot;Tagged with&quot;\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=&quot;off&quot;\n          labelHidden\n        /&gt;\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: &#39;taggedWith&#39;,\n          label: disambiguateLabel(&#39;taggedWith&#39;, taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  return (\n    &lt;div style={{height: &#39;568px&#39;}}&gt;\n      &lt;Card&gt;\n        &lt;ResourceList\n          resourceName={{singular: &#39;customer&#39;, plural: &#39;customers&#39;}}\n          filterControl={\n            &lt;Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleQueryValueChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleClearAll}\n            &gt;\n              &lt;div style={{paddingLeft: &#39;8px&#39;}}&gt;\n                &lt;Button onClick={() =&gt; console.log(&#39;New filter saved&#39;)}&gt;\n                  Save\n                &lt;/Button&gt;\n              &lt;/div&gt;\n            &lt;/Filters&gt;\n          }\n          items={[\n            {\n              id: 341,\n              url: &#39;customers/341&#39;,\n              name: &#39;Mae Jemison&#39;,\n              location: &#39;Decatur, USA&#39;,\n            },\n            {\n              id: 256,\n              url: &#39;customers/256&#39;,\n              name: &#39;Ellen Ochoa&#39;,\n              location: &#39;Los Angeles, USA&#39;,\n            },\n          ]}\n          renderItem={(item) =&gt; {\n            const {id, url, name, location} = item;\n            const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n\n            return (\n              &lt;ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              &gt;\n                &lt;h3&gt;\n                  &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n                &lt;/h3&gt;\n                &lt;div&gt;{location}&lt;/div&gt;\n              &lt;/ResourceList.Item&gt;\n            );\n          }}\n        /&gt;\n      &lt;/Card&gt;\n    &lt;/div&gt;\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case &#39;taggedWith&#39;:\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === &#39;&#39; || value == null;\n    }\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;All&lt;/span&gt; filters disabled\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction DisableAllFiltersExample() {\n  const [taggedWith, setTaggedWith] = useState(null);\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleTaggedWithChange = useCallback(\n    (value) =&gt; setTaggedWith(value),\n    [],\n  );\n  const handleQueryValueChange = useCallback(\n    (value) =&gt; setQueryValue(value),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() =&gt; setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() =&gt; setQueryValue(null), []);\n\n  const handleClearAll = useCallback(() =&gt; {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n\n  const filters = [\n    {\n      key: &#39;taggedWith&#39;,\n      label: &#39;Tagged with&#39;,\n      filter: (\n        &lt;TextField\n          label=&quot;Tagged with&quot;\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=&quot;off&quot;\n          labelHidden\n        /&gt;\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: &#39;taggedWith&#39;,\n          label: disambiguateLabel(&#39;taggedWith&#39;, taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  return (\n    &lt;div style={{height: &#39;568px&#39;}}&gt;\n      &lt;Card&gt;\n        &lt;ResourceList\n          resourceName={{singular: &#39;customer&#39;, plural: &#39;customers&#39;}}\n          filterControl={\n            &lt;Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleQueryValueChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleClearAll}\n              disabled\n            &gt;\n              &lt;div style={{paddingLeft: &#39;8px&#39;}}&gt;\n                &lt;Button\n                  disabled\n                  onClick={() =&gt; console.log(&#39;New filter saved&#39;)}\n                &gt;\n                  Save\n                &lt;/Button&gt;\n              &lt;/div&gt;\n            &lt;/Filters&gt;\n          }\n          items={[\n            {\n              id: 341,\n              url: &#39;customers/341&#39;,\n              name: &#39;Mae Jemison&#39;,\n              location: &#39;Decatur, USA&#39;,\n            },\n            {\n              id: 256,\n              url: &#39;customers/256&#39;,\n              name: &#39;Ellen Ochoa&#39;,\n              location: &#39;Los Angeles, USA&#39;,\n            },\n          ]}\n          renderItem={(item) =&gt; {\n            const {id, url, name, location} = item;\n            const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n\n            return (\n              &lt;ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              &gt;\n                &lt;h3&gt;\n                  &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n                &lt;/h3&gt;\n                &lt;div&gt;{location}&lt;/div&gt;\n              &lt;/ResourceList.Item&gt;\n            );\n          }}\n        /&gt;\n      &lt;/Card&gt;\n    &lt;/div&gt;\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case &#39;taggedWith&#39;:\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === &#39;&#39; || value == null;\n    }\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Some&lt;/span&gt; filters disabled\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction DisableSomeFiltersExample() {\n  const [taggedWith, setTaggedWith] = useState(null);\n  const [vendor, setVendor] = useState(null);\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleTaggedWithChange = useCallback(\n    (value) =&gt; setTaggedWith(value),\n    [],\n  );\n  const handleQueryValueChange = useCallback(\n    (value) =&gt; setQueryValue(value),\n    [],\n  );\n  const handleVendorChange = useCallback((value) =&gt; setVendor(value), []);\n\n  const handleTaggedWithRemove = useCallback(() =&gt; setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() =&gt; setQueryValue(null), []);\n  const handleVendorRemove = useCallback(() =&gt; setVendor(null), []);\n\n  const handleClearAll = useCallback(() =&gt; {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n    handleVendorRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove, handleVendorRemove]);\n\n  const filters = [\n    {\n      key: &#39;taggedWith&#39;,\n      label: &#39;Tagged with&#39;,\n      filter: (\n        &lt;TextField\n          label=&quot;Tagged with&quot;\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=&quot;off&quot;\n          labelHidden\n        /&gt;\n      ),\n      shortcut: true,\n    },\n    {\n      key: &#39;vendor&#39;,\n      label: &#39;Vendor&#39;,\n      filter: (\n        &lt;TextField\n          label=&quot;Vendor&quot;\n          value={vendor}\n          onChange={handleVendorChange}\n          autoComplete=&quot;off&quot;\n          labelHidden\n        /&gt;\n      ),\n      shortcut: true,\n      disabled: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: &#39;taggedWith&#39;,\n          label: disambiguateLabel(&#39;taggedWith&#39;, taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  return (\n    &lt;div style={{height: &#39;568px&#39;}}&gt;\n      &lt;Card&gt;\n        &lt;ResourceList\n          resourceName={{singular: &#39;customer&#39;, plural: &#39;customers&#39;}}\n          filterControl={\n            &lt;Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleQueryValueChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleClearAll}\n            &gt;\n              &lt;div style={{paddingLeft: &#39;8px&#39;}}&gt;\n                &lt;Button\n                  disabled\n                  onClick={() =&gt; console.log(&#39;New filter saved&#39;)}\n                &gt;\n                  Save\n                &lt;/Button&gt;\n              &lt;/div&gt;\n            &lt;/Filters&gt;\n          }\n          items={[\n            {\n              id: 341,\n              url: &#39;customers/341&#39;,\n              name: &#39;Mae Jemison&#39;,\n              location: &#39;Decatur, USA&#39;,\n            },\n            {\n              id: 256,\n              url: &#39;customers/256&#39;,\n              name: &#39;Ellen Ochoa&#39;,\n              location: &#39;Los Angeles, USA&#39;,\n            },\n          ]}\n          renderItem={(item) =&gt; {\n            const {id, url, name, location} = item;\n            const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n\n            return (\n              &lt;ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              &gt;\n                &lt;h3&gt;\n                  &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n                &lt;/h3&gt;\n                &lt;div&gt;{location}&lt;/div&gt;\n              &lt;/ResourceList.Item&gt;\n            );\n          }}\n        /&gt;\n      &lt;/Card&gt;\n    &lt;/div&gt;\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case &#39;taggedWith&#39;:\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === &#39;&#39; || value == null;\n    }\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Filters&lt;/span&gt; without clear button\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction Playground() {\n  const [taggedWith, setTaggedWith] = useState(null);\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleTaggedWithChange = useCallback(\n    (value) =&gt; setTaggedWith(value),\n    [],\n  );\n  const handleQueryValueChange = useCallback(\n    (value) =&gt; setQueryValue(value),\n    [],\n  );\n\n  const handleTaggedWithRemove = useCallback(() =&gt; setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() =&gt; setQueryValue(null), []);\n\n  const handleClearAll = useCallback(() =&gt; {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n\n  const filters = [\n    {\n      key: &#39;taggedWith&#39;,\n      label: &#39;Tagged with&#39;,\n      filter: (\n        &lt;TextField\n          label=&quot;Tagged with&quot;\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=&quot;off&quot;\n          labelHidden\n        /&gt;\n      ),\n      shortcut: true,\n      hideClearButton: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: &#39;taggedWith&#39;,\n          label: disambiguateLabel(&#39;taggedWith&#39;, taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  return (\n    &lt;div style={{height: &#39;568px&#39;}}&gt;\n      &lt;Card&gt;\n        &lt;ResourceList\n          resourceName={{singular: &#39;customer&#39;, plural: &#39;customers&#39;}}\n          filterControl={\n            &lt;Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleQueryValueChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleClearAll}\n            &gt;\n              &lt;div style={{paddingLeft: &#39;8px&#39;}}&gt;\n                &lt;Button\n                  disabled\n                  onClick={() =&gt; console.log(&#39;New filter saved&#39;)}\n                &gt;\n                  Save\n                &lt;/Button&gt;\n              &lt;/div&gt;\n            &lt;/Filters&gt;\n          }\n          items={[\n            {\n              id: 341,\n              url: &#39;customers/341&#39;,\n              name: &#39;Mae Jemison&#39;,\n              location: &#39;Decatur, USA&#39;,\n            },\n            {\n              id: 256,\n              url: &#39;customers/256&#39;,\n              name: &#39;Ellen Ochoa&#39;,\n              location: &#39;Los Angeles, USA&#39;,\n            },\n          ]}\n          renderItem={(item) =&gt; {\n            const {id, url, name, location} = item;\n            const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n\n            return (\n              &lt;ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              &gt;\n                &lt;h3&gt;\n                  &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n                &lt;/h3&gt;\n                &lt;div&gt;{location}&lt;/div&gt;\n              &lt;/ResourceList.Item&gt;\n            );\n          }}\n        /&gt;\n      &lt;/Card&gt;\n    &lt;/div&gt;\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case &#39;taggedWith&#39;:\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === &#39;&#39; || value == null;\n    }\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Filters&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; help text\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction ResourceListFiltersExample() {\n  const [accountStatus, setAccountStatus] = useState(null);\n  const [moneySpent, setMoneySpent] = useState(null);\n  const [taggedWith, setTaggedWith] = useState(null);\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleAccountStatusChange = useCallback(\n    (value) =&gt; setAccountStatus(value),\n    [],\n  );\n  const handleMoneySpentChange = useCallback(\n    (value) =&gt; setMoneySpent(value),\n    [],\n  );\n  const handleTaggedWithChange = useCallback(\n    (value) =&gt; setTaggedWith(value),\n    [],\n  );\n  const handleFiltersQueryChange = useCallback(\n    (value) =&gt; setQueryValue(value),\n    [],\n  );\n  const handleAccountStatusRemove = useCallback(\n    () =&gt; setAccountStatus(null),\n    [],\n  );\n  const handleMoneySpentRemove = useCallback(() =&gt; setMoneySpent(null), []);\n  const handleTaggedWithRemove = useCallback(() =&gt; setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() =&gt; setQueryValue(null), []);\n  const handleFiltersClearAll = useCallback(() =&gt; {\n    handleAccountStatusRemove();\n    handleMoneySpentRemove();\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [\n    handleAccountStatusRemove,\n    handleMoneySpentRemove,\n    handleQueryValueRemove,\n    handleTaggedWithRemove,\n  ]);\n\n  const filters = [\n    {\n      key: &#39;accountStatus&#39;,\n      label: &#39;Account status&#39;,\n      filter: (\n        &lt;ChoiceList\n          title=&quot;Account status&quot;\n          titleHidden\n          choices={[\n            {label: &#39;Enabled&#39;, value: &#39;enabled&#39;},\n            {label: &#39;Not invited&#39;, value: &#39;not invited&#39;},\n            {label: &#39;Invited&#39;, value: &#39;invited&#39;},\n            {label: &#39;Declined&#39;, value: &#39;declined&#39;},\n          ]}\n          selected={accountStatus || []}\n          onChange={handleAccountStatusChange}\n          allowMultiple\n        /&gt;\n      ),\n      shortcut: true,\n    },\n    {\n      key: &#39;taggedWith&#39;,\n      label: &#39;Tagged with&#39;,\n      filter: (\n        &lt;TextField\n          label=&quot;Tagged with&quot;\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=&quot;off&quot;\n          labelHidden\n        /&gt;\n      ),\n      shortcut: true,\n    },\n    {\n      key: &#39;moneySpent&#39;,\n      label: &#39;Money spent&#39;,\n      filter: (\n        &lt;RangeSlider\n          label=&quot;Money spent is between&quot;\n          labelHidden\n          value={moneySpent || [0, 500]}\n          prefix=&quot;$&quot;\n          output\n          min={0}\n          max={2000}\n          step={1}\n          onChange={handleMoneySpentChange}\n        /&gt;\n      ),\n    },\n  ];\n\n  const appliedFilters = [];\n  if (!isEmpty(accountStatus)) {\n    const key = &#39;accountStatus&#39;;\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, accountStatus),\n      onRemove: handleAccountStatusRemove,\n    });\n  }\n  if (!isEmpty(moneySpent)) {\n    const key = &#39;moneySpent&#39;;\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, moneySpent),\n      onRemove: handleMoneySpentRemove,\n    });\n  }\n  if (!isEmpty(taggedWith)) {\n    const key = &#39;taggedWith&#39;;\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, taggedWith),\n      onRemove: handleTaggedWithRemove,\n    });\n  }\n\n  return (\n    &lt;div style={{height: &#39;568px&#39;}}&gt;\n      &lt;Card&gt;\n        &lt;ResourceList\n          resourceName={{singular: &#39;customer&#39;, plural: &#39;customers&#39;}}\n          filterControl={\n            &lt;Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleFiltersQueryChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleFiltersClearAll}\n              helpText=&quot;To reactivate filtering, remove your current filters.&quot;\n              disabled\n            /&gt;\n          }\n          items={[\n            {\n              id: 341,\n              url: &#39;customers/341&#39;,\n              name: &#39;Mae Jemison&#39;,\n              location: &#39;Decatur, USA&#39;,\n            },\n            {\n              id: 256,\n              url: &#39;customers/256&#39;,\n              name: &#39;Ellen Ochoa&#39;,\n              location: &#39;Los Angeles, USA&#39;,\n            },\n          ]}\n          renderItem={(item) =&gt; {\n            const {id, url, name, location} = item;\n            const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n\n            return (\n              &lt;ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              &gt;\n                &lt;h3&gt;\n                  &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n                &lt;/h3&gt;\n                &lt;div&gt;{location}&lt;/div&gt;\n              &lt;/ResourceList.Item&gt;\n            );\n          }}\n        /&gt;\n      &lt;/Card&gt;\n    &lt;/div&gt;\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case &#39;moneySpent&#39;:\n        return `Money spent is between $${value[0]} and $${value[1]}`;\n      case &#39;taggedWith&#39;:\n        return `Tagged with ${value}`;\n      case &#39;accountStatus&#39;:\n        return value.map((val) =&gt; `Customer ${val}`).join(&#39;, &#39;);\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === &#39;&#39; || value == null;\n    }\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Filters&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; query field hidden\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction ResourceListFiltersExample() {\n  const [accountStatus, setAccountStatus] = useState(null);\n  const [moneySpent, setMoneySpent] = useState(null);\n  const [taggedWith, setTaggedWith] = useState(null);\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleAccountStatusChange = useCallback(\n    (value) =&gt; setAccountStatus(value),\n    [],\n  );\n  const handleMoneySpentChange = useCallback(\n    (value) =&gt; setMoneySpent(value),\n    [],\n  );\n  const handleTaggedWithChange = useCallback(\n    (value) =&gt; setTaggedWith(value),\n    [],\n  );\n  const handleFiltersQueryChange = useCallback(\n    (value) =&gt; setQueryValue(value),\n    [],\n  );\n  const handleAccountStatusRemove = useCallback(\n    () =&gt; setAccountStatus(null),\n    [],\n  );\n  const handleMoneySpentRemove = useCallback(() =&gt; setMoneySpent(null), []);\n  const handleTaggedWithRemove = useCallback(() =&gt; setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() =&gt; setQueryValue(null), []);\n  const handleFiltersClearAll = useCallback(() =&gt; {\n    handleAccountStatusRemove();\n    handleMoneySpentRemove();\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [\n    handleAccountStatusRemove,\n    handleMoneySpentRemove,\n    handleQueryValueRemove,\n    handleTaggedWithRemove,\n  ]);\n\n  const filters = [\n    {\n      key: &#39;accountStatus&#39;,\n      label: &#39;Account status&#39;,\n      filter: (\n        &lt;ChoiceList\n          title=&quot;Account status&quot;\n          titleHidden\n          choices={[\n            {label: &#39;Enabled&#39;, value: &#39;enabled&#39;},\n            {label: &#39;Not invited&#39;, value: &#39;not invited&#39;},\n            {label: &#39;Invited&#39;, value: &#39;invited&#39;},\n            {label: &#39;Declined&#39;, value: &#39;declined&#39;},\n          ]}\n          selected={accountStatus || []}\n          onChange={handleAccountStatusChange}\n          allowMultiple\n        /&gt;\n      ),\n      shortcut: true,\n    },\n    {\n      key: &#39;taggedWith&#39;,\n      label: &#39;Tagged with&#39;,\n      filter: (\n        &lt;TextField\n          label=&quot;Tagged with&quot;\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=&quot;off&quot;\n          labelHidden\n        /&gt;\n      ),\n      shortcut: true,\n    },\n    {\n      key: &#39;moneySpent&#39;,\n      label: &#39;Money spent&#39;,\n      filter: (\n        &lt;RangeSlider\n          label=&quot;Money spent is between&quot;\n          labelHidden\n          value={moneySpent || [0, 500]}\n          prefix=&quot;$&quot;\n          output\n          min={0}\n          max={2000}\n          step={1}\n          onChange={handleMoneySpentChange}\n        /&gt;\n      ),\n    },\n  ];\n\n  const appliedFilters = [];\n  if (!isEmpty(accountStatus)) {\n    const key = &#39;accountStatus&#39;;\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, accountStatus),\n      onRemove: handleAccountStatusRemove,\n    });\n  }\n  if (!isEmpty(moneySpent)) {\n    const key = &#39;moneySpent&#39;;\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, moneySpent),\n      onRemove: handleMoneySpentRemove,\n    });\n  }\n  if (!isEmpty(taggedWith)) {\n    const key = &#39;taggedWith&#39;;\n    appliedFilters.push({\n      key,\n      label: disambiguateLabel(key, taggedWith),\n      onRemove: handleTaggedWithRemove,\n    });\n  }\n\n  return (\n    &lt;div style={{height: &#39;568px&#39;}}&gt;\n      &lt;Card&gt;\n        &lt;ResourceList\n          resourceName={{singular: &#39;customer&#39;, plural: &#39;customers&#39;}}\n          filterControl={\n            &lt;Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={handleFiltersQueryChange}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleFiltersClearAll}\n              hideQueryField\n            /&gt;\n          }\n          items={[\n            {\n              id: 341,\n              url: &#39;customers/341&#39;,\n              name: &#39;Mae Jemison&#39;,\n              location: &#39;Decatur, USA&#39;,\n            },\n            {\n              id: 256,\n              url: &#39;customers/256&#39;,\n              name: &#39;Ellen Ochoa&#39;,\n              location: &#39;Los Angeles, USA&#39;,\n            },\n          ]}\n          renderItem={(item) =&gt; {\n            const {id, url, name, location} = item;\n            const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n\n            return (\n              &lt;ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              &gt;\n                &lt;h3&gt;\n                  &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n                &lt;/h3&gt;\n                &lt;div&gt;{location}&lt;/div&gt;\n              &lt;/ResourceList.Item&gt;\n            );\n          }}\n        /&gt;\n      &lt;/Card&gt;\n    &lt;/div&gt;\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case &#39;moneySpent&#39;:\n        return `Money spent is between $${value[0]} and $${value[1]}`;\n      case &#39;taggedWith&#39;:\n        return `Tagged with ${value}`;\n      case &#39;accountStatus&#39;:\n        return value.map((val) =&gt; `Customer ${val}`).join(&#39;, &#39;);\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === &#39;&#39; || value == null;\n    }\n  }\n}\n</code></pre>\n"
  },
  "FooterHelp": {
    "name": "Footer help",
    "category": "Navigation",
    "keywords": [
      "FooterHelp",
      "learn more about",
      "help documentation links",
      "links to help documentation",
      "link to help documentation",
      "footer help boxes",
      "educate about features",
      "merchant education",
      "educational opportunity",
      "educating",
      "teaching"
    ],
    "readme": "<h1 id=\"footer-help\">Footer help</h1>\n<p>Footer help is used to refer merchants to more information related to the product or feature they’re using.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Footer help should:</p>\n<ul>\n<li>Be positioned at the bottom of the interface</li>\n<li>Provide links to help that’s related to the experience on the screen</li>\n<li>Not be used to promote features or provide explanations for how something works</li>\n<li>Never link to information designed to upsell to merchants</li>\n<li>In rare cases, link to blog posts when there isn’t any help documentation to help merchants with the most logical next step in the workflow</li>\n</ul>\n<p>If you’re a Shopify app developer, footer help could also:</p>\n<ul>\n<li>Provide links to contact information or a support ticketing system</li>\n</ul>\n<p>It’s recommended to link your footer help component to <a href=\"https://polaris.shopify.com/content/help-documentation\">help documentation</a>. Linking directly to your contact information might result in receiving a higher number of emails or calls.</p>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"footer-help-1\">Footer help</h3>\n<p>By default, footer help should link to information in the Shopify Help Center and should follow this content pattern:</p>\n<ul>\n<li>Learn more about {X}</li>\n</ul>\n<p>Links should be:</p>\n<p>Clearly labeled: Merchants shouldn’t need to guess where they’ll end up if they click on an action link. Never use “click here” as a link because it doesn’t set expectations about what’s next.</p>\n<p>For Shopify app developers linking to contact information, footer help should follow this content pattern:</p>\n<ul>\n<li>Option 1: {Contact us} about [X]</li>\n<li>Option 2: Reach out to us at {contact info}</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Learn more about [shipping zones]</li>\n<li>[Contact us] about email marketing</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>Go to [docs] to learn about zones.</li>\n<li>Find out about [themes].</li>\n</ul>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"footer-help-box\">Footer help box</h3>\n<p>Use to direct merchants to more information related to the product or feature they’re working on.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">FooterHelp</span>&gt;\n  <span class=\"hljs-title class_\">Learn</span> more about{<span class=\"hljs-string\">&#x27; &#x27;</span>}\n  &lt;<span class=\"hljs-title class_\">Link</span> url=<span class=\"hljs-string\">&quot;<a href=\"https://help.shopify.com/manual/orders/fulfill-orders\">https://help.shopify.com/manual/orders/fulfill-orders</a>&quot;</span>&gt;\n    fulfilling orders\n  &lt;/<span class=\"hljs-title class_\">Link</span>&gt;\n&lt;/<span class=\"hljs-title class_\">FooterHelp</span>&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components-and-documentation\">Related components and documentation</h2>\n<ul>\n<li>To learn how to embed a link in a piece of text, <a href=\"https://polaris.shopify.com/components/link\">use the link component</a></li>\n<li>To learn how to write documentation for an app or theme, <a href=\"https://polaris.shopify.com/content/help-documentation\">use the the guide on how to write product documentation</a></li>\n<li>To learn how to provide support for an app, <a href=\"https://help.shopify.com/en/api/app-store/being-successful-in-the-app-store/supporting-your-app\">use the guide on supporting your app</a></li>\n</ul>\n"
  },
  "Form": {
    "name": "Form",
    "category": "Forms",
    "keywords": [
      "form",
      "forms",
      "input",
      "checkbox",
      "check box",
      "textfield",
      "text field",
      "post",
      "get"
    ],
    "readme": "<h1 id=\"form\">Form</h1>\n<p>A wrapper component that handles the submission of forms.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The form component should be used to:</p>\n<ul>\n<li>Wrap around all form input elements</li>\n<li>Emulate the native HTML <code>form</code> element behavior with a custom <code>onSubmit</code> callback</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"custom-onsubmit\">Custom onSubmit</h3>\n<p>Use onSubmit as a callback for when your form is submitted.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">FormOnSubmitExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [newsletter, setNewsletter] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [email, setEmail] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleSubmit = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">_event</span>) =&gt;</span> {\n    <span class=\"hljs-title function_\">setEmail</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n    <span class=\"hljs-title function_\">setNewsletter</span>(<span class=\"hljs-literal\">false</span>);\n  }, []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleNewsLetterChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setNewsletter</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleEmailChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setEmail</span>(value), []);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{handleSubmit}</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormLayout</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Checkbox</span>\n          <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Sign up for the Polaris newsletter&quot;</span>\n          <span class=\"hljs-attr\">checked</span>=<span class=\"hljs-string\">{newsletter}</span>\n          <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleNewsLetterChange}</span>\n        /&gt;</span></p>\n<pre><code>    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;TextField&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{email}&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;onChange&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{handleEmailChange}&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;label&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;Email&amp;quot;&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;autoComplete&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;helpText&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{&lt;/span&gt;\n        &amp;lt;&lt;span class=&quot;hljs-attr&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n          We’ll use this email address to inform you on future changes to\n          Polaris.\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      }\n    /&amp;gt;\n\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;submit&lt;/span&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;FormLayout&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n</code></pre>\n<p>  );\n}\n</pre></code></p>\n<h3 id=\"form-without-native-validation\">Form without native validation</h3>\n<p>Use in forms to toggle native form validation.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">FormWithoutNativeValidationExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [url, setUrl] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleSubmit = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">_event</span>) =&gt;</span> <span class=\"hljs-title function_\">setUrl</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleUrlChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setUrl</span>(value), []);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Form</span> <span class=\"hljs-attr\">noValidate</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{handleSubmit}</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormLayout</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n          <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{url}</span>\n          <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleUrlChange}</span>\n          <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;App URL&quot;</span>\n          <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;url&quot;</span>\n          <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n        /&gt;</span></p>\n<pre><code>    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;submit&lt;/span&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Button&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;FormLayout&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n</code></pre>\n<p>  );\n}\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To arrange fields within a form using standard spacing, <a href=\"https://polaris.shopify.com/components/forms/form-layout\">use the form layout component</a></li>\n<li>To see all of the components that make up a form, <a href=\"https://polaris.shopify.com/components/forms/checkbox#navigation\">visit the form section</a> of the component library</li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>The form component wraps content in an HTML <code>&lt;form&gt;</code> element. This helps to support assistive technologies that use different interaction and browse modes.</p>\n<p>Forms can have only one submit button and it must be at the end of the form. By default, buttons added to the form are given a <code>type</code> attribute set to <code>button</code> to avoid conflicts. To make a button the submit button instead (<code>type=&quot;submit&quot;</code>), set the <code>submit</code> prop on the button.</p>\n<h3 id=\"keyboard-support\">Keyboard support</h3>\n<p>By default, the <code>implicitSubmit</code> prop is set to <code>true</code>. This allows merchants to submit the form with the <kbd>enter</kbd>/<kbd>return</kbd> key when focus is in any text field inside the form. This provides a shortcut for keyboard users. If this behavior doesn’t fit the form, then set the prop to <code>false</code>.</p>\n<!-- /content-for -->\n"
  },
  "FormLayout": {
    "name": "Form layout",
    "category": "Forms",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "FormLayout",
      "Group",
      "responsive",
      "no grid",
      "stack fields",
      "vertical",
      "vertically",
      "arrange fields",
      "form spacing",
      "field layouts",
      "form field layouts",
      "field stacking",
      "stack fields",
      "vertical form stacking",
      "stack form fields vertically",
      "form layout group",
      "field group",
      "multiple fields in a row",
      "condensed field groups",
      "short inputs",
      "short input fields",
      "short text fields",
      "layout forms",
      "layout input fields",
      "android",
      "ios"
    ],
    "readme": "<h1 id=\"form-layout\">Form layout</h1>\n<p>Use form layout to arrange fields within a form using standard spacing. By default it stacks fields vertically but also supports horizontal groups of fields.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Forms should:</p>\n<ul>\n<li>Be considerate of merchants’ time and privacy by only asking for information that’s required</li>\n<li>Group related tasks under section titles to provide more context and make the interface easier to scan</li>\n<li>Follow a logical, predictable order—for example, always ask for first name first, and last name second on forms</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"form-section-title\">Form section title</h3>\n<p>Form section titles should follow the content guidelines for <a href=\"https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings\">headings and subheadings</a>.</p>\n<h3 id=\"field-label\">Field label</h3>\n<p>A label is a short description of a field. Labels are not help text, and they shouldn’t be used to provide instruction, but they should be meaningful and clearly indicate what is expected. Labels should be:</p>\n<ul>\n<li>Placed above or beside the form field</li>\n<li>Short and succinct (1–3 words)</li>\n<li>Written in sentence case (the first word capitalized, the rest lowercase)</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Email address</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>What is your email address?</li>\n</ul>\n</div></div>\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Phone number</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>My phone number is:</li>\n</ul>\n</div></div>\n\n<h3 id=\"help-text\">Help text</h3>\n<p>Help text provides extra guidance to people filling out a form field. This text is easy for people to ignore, so merchants should not need to depend on it to fill out a form. As with all forms, help text should be succinct and easy to read.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-form-layout\">Default form layout</h3>\n<p>Use to stack form fields vertically, which makes them easier to scan and complete.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">FormLayout</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Store name&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {}} autoComplete=&quot;off&quot; /&gt;</span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n    <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span>\n    <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Account email&quot;</span>\n    <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {}}\n    autoComplete=&quot;email&quot;\n  /&gt;</span>\n&lt;/<span class=\"hljs-title class_\">FormLayout</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/FormLayout/android/default@2x.png\" alt=\"Default form layout for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/FormLayout/ios/default@2x.png\" alt=\"Default form layout for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"field-group\">Field group</h3>\n<p>Use field groups to arrange multiple fields in a row.</p>\n<p>Works best for familiar layouts such as a row of city, state, and zip code fields. Use caution when arranging unrelated fields next to each other as this makes fields easier to miss.</p>\n<p>Field groups will wrap automatically on smaller screens.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">FormLayout</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormLayout.Group</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n      <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;number&quot;</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Minimum order&quot;</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {}}\n      autoComplete=&quot;off&quot;\n    /&gt;\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n      <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;number&quot;</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Maximum order&quot;</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {}}\n      autoComplete=&quot;off&quot;\n    /&gt;\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormLayout.Group</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">FormLayout</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/FormLayout/android/field-group@2x.png\" alt=\"Form layout with field group for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/FormLayout/ios/field-group@2x.png\" alt=\"Form layout with field group for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"condensed-field-group\">Condensed field group</h3>\n<!-- example-for: web -->\n\n<p>For very short inputs, the width of the inputs may be reduced in order to fit more fields in the row.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">FormLayout</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormLayout.Group</span> <span class=\"hljs-attr\">condensed</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Length&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {}} autoComplete=&quot;off&quot; /&gt;\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Width&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {}} autoComplete=&quot;off&quot; /&gt;\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Height&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {}} autoComplete=&quot;off&quot; /&gt;\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Unit&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {}} autoComplete=&quot;off&quot; /&gt;\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormLayout.Group</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">FormLayout</span>&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To arrange the largest sections of a page, <a href=\"https://polaris.shopify.com/components/structure/layout\">use the layout component</a></li>\n</ul>\n"
  },
  "Frame": {
    "name": "Frame",
    "category": "Structure",
    "keywords": [
      "navigation",
      "nav",
      "links",
      "primary navigation",
      "main navigation",
      "global",
      "frame",
      "sidebar",
      "side bar",
      "loading",
      "top bar",
      "menu",
      "toast"
    ],
    "fullSizeExamples": true,
    "omitAppProvider": true,
    "readme": "<h1 id=\"frame\">Frame</h1>\n<p>The frame component, while not visible in the user interface itself, provides the structure for an application. It wraps the main elements and houses the primary <a href=\"https://polaris.shopify.com/components/navigation/navigation\">navigation</a>, <a href=\"https://polaris.shopify.com/components/structure/top-bar\">top bar</a>, <a href=\"https://polaris.shopify.com/components/feedback-indicators/toast\">toast</a>, and <a href=\"https://polaris.shopify.com/components/forms/contextual-save-bar\">contextual save bar</a> components.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>For the best experience when creating an application frame, use the following components:</p>\n<ul>\n<li><a href=\"https://polaris.shopify.com/components/structure/top-bar\">Top bar</a></li>\n<li><a href=\"https://polaris.shopify.com/components/navigation/navigation\">Navigation</a></li>\n<li><a href=\"https://polaris.shopify.com/components/forms/contextual-save-bar\">Contextual save bar</a></li>\n<li><a href=\"https://polaris.shopify.com/components/feedback-indicators/toast\">Toast</a></li>\n<li><a href=\"https://polaris.shopify.com/components/feedback-indicators/loading\">Loading</a></li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"frame-in-an-application\">Frame in an application</h3>\n<p>Use to present the frame structure and all of its elements.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">FrameExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> defaultState = <span class=\"hljs-title function_\">useRef</span>({\n    <span class=\"hljs-attr\">emailFieldValue</span>: <span class=\"hljs-string\">&#x27;<a href=\"mailto:&#100;&#104;&#x61;&#x72;&#109;&#x61;&#x40;&#x6a;&#x61;&#x64;&#x65;&#x64;&#x70;&#105;&#x78;&#x65;&#x6c;&#46;&#x63;&#111;&#x6d;\">&#100;&#104;&#x61;&#x72;&#109;&#x61;&#x40;&#x6a;&#x61;&#x64;&#x65;&#x64;&#x70;&#105;&#x78;&#x65;&#x6c;&#46;&#x63;&#111;&#x6d;</a>&#x27;</span>,\n    <span class=\"hljs-attr\">nameFieldValue</span>: <span class=\"hljs-string\">&#x27;Jaded Pixel&#x27;</span>,\n  });\n  <span class=\"hljs-keyword\">const</span> skipToContentRef = <span class=\"hljs-title function_\">useRef</span>(<span class=\"hljs-literal\">null</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> [toastActive, setToastActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [isLoading, setIsLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [isDirty, setIsDirty] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [searchActive, setSearchActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [searchValue, setSearchValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> [userMenuActive, setUserMenuActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [mobileNavigationActive, setMobileNavigationActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [modalActive, setModalActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [nameFieldValue, setNameFieldValue] = <span class=\"hljs-title function_\">useState</span>(\n    defaultState.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">nameFieldValue</span>,\n  );\n  <span class=\"hljs-keyword\">const</span> [emailFieldValue, setEmailFieldValue] = <span class=\"hljs-title function_\">useState</span>(\n    defaultState.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">emailFieldValue</span>,\n  );\n  <span class=\"hljs-keyword\">const</span> [storeName, setStoreName] = <span class=\"hljs-title function_\">useState</span>(\n    defaultState.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">nameFieldValue</span>,\n  );\n  <span class=\"hljs-keyword\">const</span> [supportSubject, setSupportSubject] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> [supportMessage, setSupportMessage] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleSubjectChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setSupportSubject</span>(value),\n    [],\n  );\n  <span class=\"hljs-keyword\">const</span> handleMessageChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setSupportMessage</span>(value),\n    [],\n  );\n  <span class=\"hljs-keyword\">const</span> handleDiscard = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">setEmailFieldValue</span>(defaultState.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">emailFieldValue</span>);\n    <span class=\"hljs-title function_\">setNameFieldValue</span>(defaultState.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">nameFieldValue</span>);\n    <span class=\"hljs-title function_\">setIsDirty</span>(<span class=\"hljs-literal\">false</span>);\n  }, []);\n  <span class=\"hljs-keyword\">const</span> handleSave = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    defaultState.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">nameFieldValue</span> = nameFieldValue;\n    defaultState.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">emailFieldValue</span> = emailFieldValue;</p>\n<pre><code>&lt;span class=&quot;hljs-title function_&quot;&gt;setIsDirty&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;setToastActive&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;setStoreName&lt;/span&gt;(defaultState.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;nameFieldValue&lt;/span&gt;);\n</code></pre>\n<p>  }, [emailFieldValue, nameFieldValue]);\n  <span class=\"hljs-keyword\">const</span> handleNameFieldChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> {\n    <span class=\"hljs-title function_\">setNameFieldValue</span>(value);\n    value &amp;&amp; <span class=\"hljs-title function_\">setIsDirty</span>(<span class=\"hljs-literal\">true</span>);\n  }, []);\n  <span class=\"hljs-keyword\">const</span> handleEmailFieldChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> {\n    <span class=\"hljs-title function_\">setEmailFieldValue</span>(value);\n    value &amp;&amp; <span class=\"hljs-title function_\">setIsDirty</span>(<span class=\"hljs-literal\">true</span>);\n  }, []);\n  <span class=\"hljs-keyword\">const</span> handleSearchResultsDismiss = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">setSearchActive</span>(<span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-title function_\">setSearchValue</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n  }, []);\n  <span class=\"hljs-keyword\">const</span> handleSearchFieldChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> {\n    <span class=\"hljs-title function_\">setSearchValue</span>(value);\n    <span class=\"hljs-title function_\">setSearchActive</span>(value.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>);\n  }, []);\n  <span class=\"hljs-keyword\">const</span> toggleToastActive = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setToastActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">toastActive</span>) =&gt;</span> !toastActive),\n    [],\n  );\n  <span class=\"hljs-keyword\">const</span> toggleUserMenuActive = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setUserMenuActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">userMenuActive</span>) =&gt;</span> !userMenuActive),\n    [],\n  );\n  <span class=\"hljs-keyword\">const</span> toggleMobileNavigationActive = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span>\n      <span class=\"hljs-title function_\">setMobileNavigationActive</span>(\n        <span class=\"hljs-function\">(<span class=\"hljs-params\">mobileNavigationActive</span>) =&gt;</span> !mobileNavigationActive,\n      ),\n    [],\n  );\n  <span class=\"hljs-keyword\">const</span> toggleIsLoading = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setIsLoading</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">isLoading</span>) =&gt;</span> !isLoading),\n    [],\n  );\n  <span class=\"hljs-keyword\">const</span> toggleModalActive = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setModalActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">modalActive</span>) =&gt;</span> !modalActive),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> toastMarkup = toastActive ? (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Toast</span> <span class=\"hljs-attr\">onDismiss</span>=<span class=\"hljs-string\">{toggleToastActive}</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;Changes saved&quot;</span> /&gt;</span></span>\n  ) : <span class=\"hljs-literal\">null</span>;</p>\n<p>  <span class=\"hljs-keyword\">const</span> userMenuActions = [\n    {\n      <span class=\"hljs-attr\">items</span>: [{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Community forums&#x27;</span>}],\n    },\n  ];</p>\n<p>  <span class=\"hljs-keyword\">const</span> contextualSaveBarMarkup = isDirty ? (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ContextualSaveBar</span>\n      <span class=\"hljs-attr\">message</span>=<span class=\"hljs-string\">&quot;Unsaved changes&quot;</span>\n      <span class=\"hljs-attr\">saveAction</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleSave</span>,\n      }}\n      <span class=\"hljs-attr\">discardAction</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleDiscard</span>,\n      }}\n    /&gt;</span></span>\n  ) : <span class=\"hljs-literal\">null</span>;</p>\n<p>  <span class=\"hljs-keyword\">const</span> userMenuMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TopBar.UserMenu</span>\n      <span class=\"hljs-attr\">actions</span>=<span class=\"hljs-string\">{userMenuActions}</span>\n      <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Dharma&quot;</span>\n      <span class=\"hljs-attr\">detail</span>=<span class=\"hljs-string\">{storeName}</span>\n      <span class=\"hljs-attr\">initials</span>=<span class=\"hljs-string\">&quot;D&quot;</span>\n      <span class=\"hljs-attr\">open</span>=<span class=\"hljs-string\">{userMenuActive}</span>\n      <span class=\"hljs-attr\">onToggle</span>=<span class=\"hljs-string\">{toggleUserMenuActive}</span>\n    /&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> searchResultsMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ActionList</span>\n      <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[{content:</span> &#x27;<span class=\"hljs-attr\">Shopify</span> <span class=\"hljs-attr\">help</span> <span class=\"hljs-attr\">center</span>&#x27;}, {<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Community</span> <span class=\"hljs-attr\">forums</span>&#x27;}]}\n    /&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> searchFieldMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TopBar.SearchField</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleSearchFieldChange}</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{searchValue}</span>\n      <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Search&quot;</span>\n    /&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> topBarMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TopBar</span>\n      <span class=\"hljs-attr\">showNavigationToggle</span>\n      <span class=\"hljs-attr\">userMenu</span>=<span class=\"hljs-string\">{userMenuMarkup}</span>\n      <span class=\"hljs-attr\">searchResultsVisible</span>=<span class=\"hljs-string\">{searchActive}</span>\n      <span class=\"hljs-attr\">searchField</span>=<span class=\"hljs-string\">{searchFieldMarkup}</span>\n      <span class=\"hljs-attr\">searchResults</span>=<span class=\"hljs-string\">{searchResultsMarkup}</span>\n      <span class=\"hljs-attr\">onSearchResultsDismiss</span>=<span class=\"hljs-string\">{handleSearchResultsDismiss}</span>\n      <span class=\"hljs-attr\">onNavigationToggle</span>=<span class=\"hljs-string\">{toggleMobileNavigationActive}</span>\n    /&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> navigationMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation.Section</span>\n        <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n          {\n            <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Back</span> <span class=\"hljs-attr\">to</span> <span class=\"hljs-attr\">Shopify</span>&#x27;,\n            <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ArrowLeftMinor</span>,\n          },\n        ]}\n      /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation.Section</span>\n        <span class=\"hljs-attr\">separator</span>\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Jaded Pixel App&quot;</span>\n        <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n          {\n            <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Dashboard</span>&#x27;,\n            <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">HomeMajor</span>,\n            <span class=\"hljs-attr\">onClick:</span> <span class=\"hljs-attr\">toggleIsLoading</span>,\n          },\n          {\n            <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Jaded</span> <span class=\"hljs-attr\">Pixel</span> <span class=\"hljs-attr\">Orders</span>&#x27;,\n            <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">OrdersMajor</span>,\n            <span class=\"hljs-attr\">onClick:</span> <span class=\"hljs-attr\">toggleIsLoading</span>,\n          },\n        ]}\n        <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ConversationMinor</span>,\n          <span class=\"hljs-attr\">accessibilityLabel:</span> &#x27;<span class=\"hljs-attr\">Contact</span> <span class=\"hljs-attr\">support</span>&#x27;,\n          <span class=\"hljs-attr\">onClick:</span> <span class=\"hljs-attr\">toggleModalActive</span>,\n        }}\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Navigation</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> loadingMarkup = isLoading ? <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Loading</span> /&gt;</span></span> : <span class=\"hljs-literal\">null</span>;</p>\n<p>  <span class=\"hljs-keyword\">const</span> skipToContentTarget = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;SkipToContentTarget&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{skipToContentRef}</span> <span class=\"hljs-attr\">tabIndex</span>=<span class=\"hljs-string\">{-1}</span> /&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> actualPageMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Page</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Account&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout</span>&gt;</span>\n        {skipToContentTarget}\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout.AnnotatedSection</span>\n          <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Account details&quot;</span>\n          <span class=\"hljs-attr\">description</span>=<span class=\"hljs-string\">&quot;Jaded Pixel will use this as your account information.&quot;</span>\n        &gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormLayout</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n                <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Full name&quot;</span>\n                <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{nameFieldValue}</span>\n                <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleNameFieldChange}</span>\n                <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;name&quot;</span>\n              /&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n                <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span>\n                <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Email&quot;</span>\n                <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{emailFieldValue}</span>\n                <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleEmailFieldChange}</span>\n                <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;email&quot;</span>\n              /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormLayout</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout.AnnotatedSection</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Page</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> loadingPageMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonPage</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonDisplayText</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;small&quot;</span> /&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonBodyText</span> <span class=\"hljs-attr\">lines</span>=<span class=\"hljs-string\">{9}</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">SkeletonPage</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> pageMarkup = isLoading ? loadingPageMarkup : actualPageMarkup;</p>\n<p>  <span class=\"hljs-keyword\">const</span> modalMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal</span>\n      <span class=\"hljs-attr\">open</span>=<span class=\"hljs-string\">{modalActive}</span>\n      <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{toggleModalActive}</span>\n      <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Contact support&quot;</span>\n      <span class=\"hljs-attr\">primaryAction</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Send</span>&#x27;,\n        <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">toggleModalActive</span>,\n      }}\n    &gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormLayout</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n            <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Subject&quot;</span>\n            <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{supportSubject}</span>\n            <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleSubjectChange}</span>\n            <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n          /&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n            <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Message&quot;</span>\n            <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{supportMessage}</span>\n            <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleMessageChange}</span>\n            <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n            <span class=\"hljs-attr\">multiline</span>\n          /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormLayout</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> logo = {\n    <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">124</span>,\n    <span class=\"hljs-attr\">topBarSource</span>:\n      <span class=\"hljs-string\">&#x27;<a href=\"https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-color.svg?6215648040070010999&amp;#x27\">https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-color.svg?6215648040070010999&amp;#x27</a>;</span>,\n    <span class=\"hljs-attr\">contextualSaveBarSource</span>:\n      <span class=\"hljs-string\">&#x27;<a href=\"https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-gray.svg?6215648040070010999&amp;#x27\">https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-gray.svg?6215648040070010999&amp;#x27</a>;</span>,\n    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;<a href=\"http://jadedpixel.com&amp;#x27\">http://jadedpixel.com&amp;#x27</a>;</span>,\n    <span class=\"hljs-attr\">accessibilityLabel</span>: <span class=\"hljs-string\">&#x27;Jaded Pixel&#x27;</span>,\n  };</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">500px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppProvider</span>\n        <span class=\"hljs-attr\">i18n</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">Polaris:</span> {\n            <span class=\"hljs-attr\">Avatar:</span> {\n              <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Avatar</span>&#x27;,\n              <span class=\"hljs-attr\">labelWithInitials:</span> &#x27;<span class=\"hljs-attr\">Avatar</span> <span class=\"hljs-attr\">with</span> <span class=\"hljs-attr\">initials</span> {<span class=\"hljs-attr\">initials</span>}&#x27;,\n            },\n            <span class=\"hljs-attr\">ContextualSaveBar:</span> {\n              <span class=\"hljs-attr\">save:</span> &#x27;<span class=\"hljs-attr\">Save</span>&#x27;,\n              <span class=\"hljs-attr\">discard:</span> &#x27;<span class=\"hljs-attr\">Discard</span>&#x27;,\n            },\n            <span class=\"hljs-attr\">TextField:</span> {\n              <span class=\"hljs-attr\">characterCount:</span> &#x27;{<span class=\"hljs-attr\">count</span>} <span class=\"hljs-attr\">characters</span>&#x27;,\n            },\n            <span class=\"hljs-attr\">TopBar:</span> {\n              <span class=\"hljs-attr\">toggleMenuLabel:</span> &#x27;<span class=\"hljs-attr\">Toggle</span> <span class=\"hljs-attr\">menu</span>&#x27;,</p>\n<pre><code>          &lt;span class=&quot;hljs-attr&quot;&gt;SearchField:&lt;/span&gt; {\n            &lt;span class=&quot;hljs-attr&quot;&gt;clearButtonLabel:&lt;/span&gt; &amp;#x27;&lt;span class=&quot;hljs-attr&quot;&gt;Clear&lt;/span&gt;&amp;#x27;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;search:&lt;/span&gt; &amp;#x27;&lt;span class=&quot;hljs-attr&quot;&gt;Search&lt;/span&gt;&amp;#x27;,\n          },\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;Modal:&lt;/span&gt; {\n          &lt;span class=&quot;hljs-attr&quot;&gt;iFrameTitle:&lt;/span&gt; &amp;#x27;&lt;span class=&quot;hljs-attr&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;markup&lt;/span&gt;&amp;#x27;,\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;Frame:&lt;/span&gt; {\n          &lt;span class=&quot;hljs-attr&quot;&gt;skipToContent:&lt;/span&gt; &amp;#x27;&lt;span class=&quot;hljs-attr&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;&amp;#x27;,\n          &lt;span class=&quot;hljs-attr&quot;&gt;navigationLabel:&lt;/span&gt; &amp;#x27;&lt;span class=&quot;hljs-attr&quot;&gt;Navigation&lt;/span&gt;&amp;#x27;,\n          &lt;span class=&quot;hljs-attr&quot;&gt;Navigation:&lt;/span&gt; {\n            &lt;span class=&quot;hljs-attr&quot;&gt;closeMobileNavigationLabel:&lt;/span&gt; &amp;#x27;&lt;span class=&quot;hljs-attr&quot;&gt;Close&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;navigation&lt;/span&gt;&amp;#x27;,\n          },\n        },\n      },\n    }}\n  &amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Frame&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;logo&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{logo}&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;topBar&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{topBarMarkup}&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;navigation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{navigationMarkup}&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;showMobileNavigation&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{mobileNavigationActive}&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;onNavigationDismiss&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{toggleMobileNavigationActive}&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;skipToContentTarget&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{skipToContentRef.current}&lt;/span&gt;\n    &amp;gt;&lt;/span&gt;\n      {contextualSaveBarMarkup}\n      {loadingMarkup}\n      {pageMarkup}\n      {toastMarkup}\n      {modalMarkup}\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Frame&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;AppProvider&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n</code></pre>\n<p>  );\n}\n</pre></code></p>\n<h3 id=\"frame-with-an-offset\">Frame with an offset</h3>\n<p>Use to present the frame structure and all of its elements with an offset provided to the theme.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">FrameExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> defaultState = <span class=\"hljs-title function_\">useRef</span>({\n    <span class=\"hljs-attr\">emailFieldValue</span>: <span class=\"hljs-string\">&#x27;<a href=\"mailto:&#100;&#104;&#x61;&#114;&#109;&#x61;&#x40;&#106;&#97;&#100;&#x65;&#x64;&#x70;&#x69;&#120;&#101;&#x6c;&#46;&#99;&#x6f;&#109;\">&#100;&#104;&#x61;&#114;&#109;&#x61;&#x40;&#106;&#97;&#100;&#x65;&#x64;&#x70;&#x69;&#120;&#101;&#x6c;&#46;&#99;&#x6f;&#109;</a>&#x27;</span>,\n    <span class=\"hljs-attr\">nameFieldValue</span>: <span class=\"hljs-string\">&#x27;Jaded Pixel&#x27;</span>,\n  });\n  <span class=\"hljs-keyword\">const</span> skipToContentRef = <span class=\"hljs-title function_\">useRef</span>(<span class=\"hljs-literal\">null</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> [toastActive, setToastActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [isLoading, setIsLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [isDirty, setIsDirty] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [searchActive, setSearchActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [searchValue, setSearchValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> [userMenuActive, setUserMenuActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [mobileNavigationActive, setMobileNavigationActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [modalActive, setModalActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [nameFieldValue, setNameFieldValue] = <span class=\"hljs-title function_\">useState</span>(\n    defaultState.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">nameFieldValue</span>,\n  );\n  <span class=\"hljs-keyword\">const</span> [emailFieldValue, setEmailFieldValue] = <span class=\"hljs-title function_\">useState</span>(\n    defaultState.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">emailFieldValue</span>,\n  );\n  <span class=\"hljs-keyword\">const</span> [storeName, setStoreName] = <span class=\"hljs-title function_\">useState</span>(\n    defaultState.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">nameFieldValue</span>,\n  );\n  <span class=\"hljs-keyword\">const</span> [supportSubject, setSupportSubject] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> [supportMessage, setSupportMessage] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleSubjectChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setSupportSubject</span>(value),\n    [],\n  );\n  <span class=\"hljs-keyword\">const</span> handleMessageChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setSupportMessage</span>(value),\n    [],\n  );\n  <span class=\"hljs-keyword\">const</span> handleDiscard = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">setEmailFieldValue</span>(defaultState.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">emailFieldValue</span>);\n    <span class=\"hljs-title function_\">setNameFieldValue</span>(defaultState.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">nameFieldValue</span>);\n    <span class=\"hljs-title function_\">setIsDirty</span>(<span class=\"hljs-literal\">false</span>);\n  }, []);\n  <span class=\"hljs-keyword\">const</span> handleSave = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    defaultState.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">nameFieldValue</span> = nameFieldValue;\n    defaultState.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">emailFieldValue</span> = emailFieldValue;</p>\n<pre><code>&lt;span class=&quot;hljs-title function_&quot;&gt;setIsDirty&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;setToastActive&lt;/span&gt;(&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;);\n&lt;span class=&quot;hljs-title function_&quot;&gt;setStoreName&lt;/span&gt;(defaultState.&lt;span class=&quot;hljs-property&quot;&gt;current&lt;/span&gt;.&lt;span class=&quot;hljs-property&quot;&gt;nameFieldValue&lt;/span&gt;);\n</code></pre>\n<p>  }, [emailFieldValue, nameFieldValue]);\n  <span class=\"hljs-keyword\">const</span> handleNameFieldChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> {\n    <span class=\"hljs-title function_\">setNameFieldValue</span>(value);\n    value &amp;&amp; <span class=\"hljs-title function_\">setIsDirty</span>(<span class=\"hljs-literal\">true</span>);\n  }, []);\n  <span class=\"hljs-keyword\">const</span> handleEmailFieldChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> {\n    <span class=\"hljs-title function_\">setEmailFieldValue</span>(value);\n    value &amp;&amp; <span class=\"hljs-title function_\">setIsDirty</span>(<span class=\"hljs-literal\">true</span>);\n  }, []);\n  <span class=\"hljs-keyword\">const</span> handleSearchResultsDismiss = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">setSearchActive</span>(<span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-title function_\">setSearchValue</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n  }, []);\n  <span class=\"hljs-keyword\">const</span> handleSearchFieldChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> {\n    <span class=\"hljs-title function_\">setSearchValue</span>(value);\n    <span class=\"hljs-title function_\">setSearchActive</span>(value.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>);\n  }, []);\n  <span class=\"hljs-keyword\">const</span> toggleToastActive = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setToastActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">toastActive</span>) =&gt;</span> !toastActive),\n    [],\n  );\n  <span class=\"hljs-keyword\">const</span> toggleUserMenuActive = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setUserMenuActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">userMenuActive</span>) =&gt;</span> !userMenuActive),\n    [],\n  );\n  <span class=\"hljs-keyword\">const</span> toggleMobileNavigationActive = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span>\n      <span class=\"hljs-title function_\">setMobileNavigationActive</span>(\n        <span class=\"hljs-function\">(<span class=\"hljs-params\">mobileNavigationActive</span>) =&gt;</span> !mobileNavigationActive,\n      ),\n    [],\n  );\n  <span class=\"hljs-keyword\">const</span> toggleIsLoading = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setIsLoading</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">isLoading</span>) =&gt;</span> !isLoading),\n    [],\n  );\n  <span class=\"hljs-keyword\">const</span> toggleModalActive = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setModalActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">modalActive</span>) =&gt;</span> !modalActive),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> toastMarkup = toastActive ? (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Toast</span> <span class=\"hljs-attr\">onDismiss</span>=<span class=\"hljs-string\">{toggleToastActive}</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;Changes saved&quot;</span> /&gt;</span></span>\n  ) : <span class=\"hljs-literal\">null</span>;</p>\n<p>  <span class=\"hljs-keyword\">const</span> userMenuActions = [\n    {\n      <span class=\"hljs-attr\">items</span>: [{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Community forums&#x27;</span>}],\n    },\n  ];</p>\n<p>  <span class=\"hljs-keyword\">const</span> contextualSaveBarMarkup = isDirty ? (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ContextualSaveBar</span>\n      <span class=\"hljs-attr\">message</span>=<span class=\"hljs-string\">&quot;Unsaved changes&quot;</span>\n      <span class=\"hljs-attr\">saveAction</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleSave</span>,\n      }}\n      <span class=\"hljs-attr\">discardAction</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleDiscard</span>,\n      }}\n    /&gt;</span></span>\n  ) : <span class=\"hljs-literal\">null</span>;</p>\n<p>  <span class=\"hljs-keyword\">const</span> userMenuMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TopBar.UserMenu</span>\n      <span class=\"hljs-attr\">actions</span>=<span class=\"hljs-string\">{userMenuActions}</span>\n      <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Dharma&quot;</span>\n      <span class=\"hljs-attr\">detail</span>=<span class=\"hljs-string\">{storeName}</span>\n      <span class=\"hljs-attr\">initials</span>=<span class=\"hljs-string\">&quot;D&quot;</span>\n      <span class=\"hljs-attr\">open</span>=<span class=\"hljs-string\">{userMenuActive}</span>\n      <span class=\"hljs-attr\">onToggle</span>=<span class=\"hljs-string\">{toggleUserMenuActive}</span>\n    /&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> searchResultsMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ActionList</span>\n      <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[{content:</span> &#x27;<span class=\"hljs-attr\">Shopify</span> <span class=\"hljs-attr\">help</span> <span class=\"hljs-attr\">center</span>&#x27;}, {<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Community</span> <span class=\"hljs-attr\">forums</span>&#x27;}]}\n    /&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> searchFieldMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TopBar.SearchField</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleSearchFieldChange}</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{searchValue}</span>\n      <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Search&quot;</span>\n    /&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> topBarMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TopBar</span>\n      <span class=\"hljs-attr\">showNavigationToggle</span>\n      <span class=\"hljs-attr\">userMenu</span>=<span class=\"hljs-string\">{userMenuMarkup}</span>\n      <span class=\"hljs-attr\">searchResultsVisible</span>=<span class=\"hljs-string\">{searchActive}</span>\n      <span class=\"hljs-attr\">searchField</span>=<span class=\"hljs-string\">{searchFieldMarkup}</span>\n      <span class=\"hljs-attr\">searchResults</span>=<span class=\"hljs-string\">{searchResultsMarkup}</span>\n      <span class=\"hljs-attr\">onSearchResultsDismiss</span>=<span class=\"hljs-string\">{handleSearchResultsDismiss}</span>\n      <span class=\"hljs-attr\">onNavigationToggle</span>=<span class=\"hljs-string\">{toggleMobileNavigationActive}</span>\n    /&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> navigationMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation.Section</span>\n        <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n          {\n            <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Back</span> <span class=\"hljs-attr\">to</span> <span class=\"hljs-attr\">Shopify</span>&#x27;,\n            <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ArrowLeftMinor</span>,\n          },\n        ]}\n      /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation.Section</span>\n        <span class=\"hljs-attr\">separator</span>\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Jaded Pixel App&quot;</span>\n        <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n          {\n            <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Dashboard</span>&#x27;,\n            <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">HomeMajor</span>,\n            <span class=\"hljs-attr\">onClick:</span> <span class=\"hljs-attr\">toggleIsLoading</span>,\n          },\n          {\n            <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Jaded</span> <span class=\"hljs-attr\">Pixel</span> <span class=\"hljs-attr\">Orders</span>&#x27;,\n            <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">OrdersMajor</span>,\n            <span class=\"hljs-attr\">onClick:</span> <span class=\"hljs-attr\">toggleIsLoading</span>,\n          },\n        ]}\n        <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ConversationMinor</span>,\n          <span class=\"hljs-attr\">accessibilityLabel:</span> &#x27;<span class=\"hljs-attr\">Contact</span> <span class=\"hljs-attr\">support</span>&#x27;,\n          <span class=\"hljs-attr\">onClick:</span> <span class=\"hljs-attr\">toggleModalActive</span>,\n        }}\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Navigation</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> loadingMarkup = isLoading ? <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Loading</span> /&gt;</span></span> : <span class=\"hljs-literal\">null</span>;</p>\n<p>  <span class=\"hljs-keyword\">const</span> skipToContentTarget = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;SkipToContentTarget&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{skipToContentRef}</span> <span class=\"hljs-attr\">tabIndex</span>=<span class=\"hljs-string\">{-1}</span> /&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> actualPageMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Page</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Account&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout</span>&gt;</span>\n        {skipToContentTarget}\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout.AnnotatedSection</span>\n          <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Account details&quot;</span>\n          <span class=\"hljs-attr\">description</span>=<span class=\"hljs-string\">&quot;Jaded Pixel will use this as your account information.&quot;</span>\n        &gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormLayout</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n                <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Full name&quot;</span>\n                <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{nameFieldValue}</span>\n                <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleNameFieldChange}</span>\n                <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;name&quot;</span>\n              /&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n                <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span>\n                <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Email&quot;</span>\n                <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{emailFieldValue}</span>\n                <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleEmailFieldChange}</span>\n                <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;email&quot;</span>\n              /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormLayout</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout.AnnotatedSection</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Page</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> loadingPageMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonPage</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonDisplayText</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;small&quot;</span> /&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonBodyText</span> <span class=\"hljs-attr\">lines</span>=<span class=\"hljs-string\">{9}</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">SkeletonPage</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> pageMarkup = isLoading ? loadingPageMarkup : actualPageMarkup;</p>\n<p>  <span class=\"hljs-keyword\">const</span> modalMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal</span>\n      <span class=\"hljs-attr\">open</span>=<span class=\"hljs-string\">{modalActive}</span>\n      <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{toggleModalActive}</span>\n      <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Contact support&quot;</span>\n      <span class=\"hljs-attr\">primaryAction</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Send</span>&#x27;,\n        <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">toggleModalActive</span>,\n      }}\n    &gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormLayout</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n            <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Subject&quot;</span>\n            <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{supportSubject}</span>\n            <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleSubjectChange}</span>\n            <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n          /&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n            <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Message&quot;</span>\n            <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{supportMessage}</span>\n            <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleMessageChange}</span>\n            <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n            <span class=\"hljs-attr\">multiline</span>\n          /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormLayout</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> logo = {\n    <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">124</span>,\n    <span class=\"hljs-attr\">topBarSource</span>:\n      <span class=\"hljs-string\">&#x27;<a href=\"https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-color.svg?6215648040070010999&amp;#x27\">https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-color.svg?6215648040070010999&amp;#x27</a>;</span>,\n    <span class=\"hljs-attr\">contextualSaveBarSource</span>:\n      <span class=\"hljs-string\">&#x27;<a href=\"https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-gray.svg?6215648040070010999&amp;#x27\">https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-gray.svg?6215648040070010999&amp;#x27</a>;</span>,\n    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;<a href=\"http://jadedpixel.com&amp;#x27\">http://jadedpixel.com&amp;#x27</a>;</span>,\n    <span class=\"hljs-attr\">accessibilityLabel</span>: <span class=\"hljs-string\">&#x27;Jaded Pixel&#x27;</span>,\n  };</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">500px</span>&#x27;, <span class=\"hljs-attr\">background:</span> &#x27;#<span class=\"hljs-attr\">DE1373</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppProvider</span>\n        <span class=\"hljs-attr\">i18n</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">Polaris:</span> {\n            <span class=\"hljs-attr\">Avatar:</span> {\n              <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Avatar</span>&#x27;,\n              <span class=\"hljs-attr\">labelWithInitials:</span> &#x27;<span class=\"hljs-attr\">Avatar</span> <span class=\"hljs-attr\">with</span> <span class=\"hljs-attr\">initials</span> {<span class=\"hljs-attr\">initials</span>}&#x27;,\n            },\n            <span class=\"hljs-attr\">ContextualSaveBar:</span> {\n              <span class=\"hljs-attr\">save:</span> &#x27;<span class=\"hljs-attr\">Save</span>&#x27;,\n              <span class=\"hljs-attr\">discard:</span> &#x27;<span class=\"hljs-attr\">Discard</span>&#x27;,\n            },\n            <span class=\"hljs-attr\">TextField:</span> {\n              <span class=\"hljs-attr\">characterCount:</span> &#x27;{<span class=\"hljs-attr\">count</span>} <span class=\"hljs-attr\">characters</span>&#x27;,\n            },\n            <span class=\"hljs-attr\">TopBar:</span> {\n              <span class=\"hljs-attr\">toggleMenuLabel:</span> &#x27;<span class=\"hljs-attr\">Toggle</span> <span class=\"hljs-attr\">menu</span>&#x27;,</p>\n<pre><code>          &lt;span class=&quot;hljs-attr&quot;&gt;SearchField:&lt;/span&gt; {\n            &lt;span class=&quot;hljs-attr&quot;&gt;clearButtonLabel:&lt;/span&gt; &amp;#x27;&lt;span class=&quot;hljs-attr&quot;&gt;Clear&lt;/span&gt;&amp;#x27;,\n            &lt;span class=&quot;hljs-attr&quot;&gt;search:&lt;/span&gt; &amp;#x27;&lt;span class=&quot;hljs-attr&quot;&gt;Search&lt;/span&gt;&amp;#x27;,\n          },\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;Modal:&lt;/span&gt; {\n          &lt;span class=&quot;hljs-attr&quot;&gt;iFrameTitle:&lt;/span&gt; &amp;#x27;&lt;span class=&quot;hljs-attr&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;markup&lt;/span&gt;&amp;#x27;,\n        },\n        &lt;span class=&quot;hljs-attr&quot;&gt;Frame:&lt;/span&gt; {\n          &lt;span class=&quot;hljs-attr&quot;&gt;skipToContent:&lt;/span&gt; &amp;#x27;&lt;span class=&quot;hljs-attr&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;content&lt;/span&gt;&amp;#x27;,\n          &lt;span class=&quot;hljs-attr&quot;&gt;navigationLabel:&lt;/span&gt; &amp;#x27;&lt;span class=&quot;hljs-attr&quot;&gt;Navigation&lt;/span&gt;&amp;#x27;,\n          &lt;span class=&quot;hljs-attr&quot;&gt;Navigation:&lt;/span&gt; {\n            &lt;span class=&quot;hljs-attr&quot;&gt;closeMobileNavigationLabel:&lt;/span&gt; &amp;#x27;&lt;span class=&quot;hljs-attr&quot;&gt;Close&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;navigation&lt;/span&gt;&amp;#x27;,\n          },\n        },\n      },\n    }}\n  &amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Frame&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;logo&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{logo}&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;offset&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;60px&amp;quot;&lt;/span&gt;\n      &lt;span class=&quot;hljs-attr&quot;&gt;globalRibbon&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{&lt;/span&gt;\n        &amp;lt;&lt;span class=&quot;hljs-attr&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;{{background:&lt;/span&gt; &amp;#x27;#&lt;span class=&quot;hljs-attr&quot;&gt;C0FFEE&lt;/span&gt;&amp;#x27;, &lt;span class=&quot;hljs-attr&quot;&gt;padding:&lt;/span&gt; &amp;#x27;&lt;span class=&quot;hljs-attr&quot;&gt;30px&lt;/span&gt;&amp;#x27;}}&amp;gt;&lt;/span&gt;\n          Global ribbon\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;\n      }\n      topBar={topBarMarkup}\n      navigation={navigationMarkup}\n      showMobileNavigation={mobileNavigationActive}\n      onNavigationDismiss={toggleMobileNavigationActive}\n      skipToContentTarget={skipToContentRef.current}\n    &amp;gt;\n      {contextualSaveBarMarkup}\n      {loadingMarkup}\n      {pageMarkup}\n      {toastMarkup}\n      {modalMarkup}\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Frame&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;AppProvider&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;\n</code></pre>\n<p>  );\n}\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To display the navigation component on small screens, to provide search and a user menu, or to style the <a href=\"https://polaris.shopify.com/components/structure/frame\">frame</a> component to reflect an application’s brand, use the <a href=\"https://polaris.shopify.com/components/structure/top-bar\">top bar</a> component.</li>\n<li>To display the primary navigation within the frame of an application, use the <a href=\"https://polaris.shopify.com/components/structure/navigation\">navigation</a> component.</li>\n<li>To tell merchants their options once they have made changes to a form on the page use the <a href=\"https://polaris.shopify.com/components/forms/contextual-save-bar\">contextual save bar</a> component.</li>\n<li>To provide quick, at-a-glance feedback on the outcome of an action, use the <a href=\"https://polaris.shopify.com/components/feedback-indicators/toast\">toast</a> component.</li>\n<li>To indicate to merchants that a page is loading or an upload is processing use the <a href=\"https://polaris.shopify.com/components/feedback-indicators/loading\">loading</a> component.</li>\n</ul>\n"
  },
  "Heading": {
    "name": "Heading",
    "category": "Titles and text",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "titles",
      "text",
      "microcopy",
      "conversational",
      "typographic",
      "card headings",
      "card titles",
      "section titles",
      "section headings",
      "heading text",
      "heading font",
      "android",
      "ios"
    ],
    "readme": "<h1 id=\"heading\">Heading</h1>\n<p>Headings are used as the titles of each major section of a page in the interface. For example, <a href=\"https://polaris.shopify.com/components/card\">card components</a> generally use headings as their title.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Headings should:</p>\n<ul>\n<li>Clearly describe the section of interface they refer to</li>\n<li>Highlight the most important concept or piece of information merchants need to know</li>\n<li>Sit at the top of the section of interface they’re referring to</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>Headings should follow the content guidelines for <a href=\"https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings\">headings and subheadings</a>.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"typographic-heading\">Typographic heading</h3>\n<p>Use for the title of each top-level page section.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Heading</span>&gt;<span class=\"hljs-title class_\">Online</span> store dashboard&lt;/<span class=\"hljs-title class_\">Heading</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Heading/android/default@2x.png\" alt=\"Typographic heading\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Heading/ios/default@2x.png\" alt=\"Typographic heading\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To break up a section with a heading into sub-sections, <a href=\"https://polaris.shopify.com/components/subheading\">use the subheading component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>A clear and consistent heading structure helps merchants who have difficulty with reading or language. It also helps screen reader users to navigate the page using keystrokes that are custom to their screen reader.</p>\n<p>Use the <code>element</code> prop to determine the specific HTML element that’s output for the heading. The component defaults to a level 2 heading (<code>&lt;h2&gt;</code>). Use a different value for the <code>element</code> prop if a different heading fits the context better.</p>\n<p>Learn more about writing helpful <a href=\"https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings\">headings and subheadings</a>.</p>\n<!-- usageblock -->\n\n<h4 id=\"do\">Do</h4>\n<p>Use headings to support the hierarchy and structure of the page.</p>\n<h4 id=\"dont\">Don’t</h4>\n<p>Use headings for style alone.</p>\n<!-- end -->\n\n<!-- /content-for -->\n"
  },
  "Icon": {
    "name": "Icon",
    "category": "Images and icons",
    "keywords": [
      "iconography",
      "visual indicator",
      "svg",
      "icon background",
      "icon backdrop",
      "accessible icons",
      "icon alternative text",
      "alt text",
      "alternative text",
      "wayfinding",
      "alert"
    ],
    "readme": "<h1 id=\"icon\">Icon</h1>\n<p>Icons are used to visually communicate core parts of the product and available actions. They can act as wayfinding tools to help merchants more easily understand where they are in the product, and common interaction patterns that are available.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-icon\">Default icon</h3>\n<p>Use to visually communicate core parts of the product and available actions.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Icon</span> source={<span class=\"hljs-title class_\">CirclePlusMinor</span>} /&gt;\n</pre></code></p>\n<h3 id=\"colored-icon\">Colored icon</h3>\n<p>Apply a color to the icon.</p>\n<p><code><pre>\n&lt;div&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{CirclePlusMinor}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&quot;base&quot;</span> /&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{CirclePlusMinor}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&quot;subdued&quot;</span> /&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{CirclePlusMinor}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&quot;primary&quot;</span> /&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{CirclePlusMinor}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&quot;highlight&quot;</span> /&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{CirclePlusMinor}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&quot;success&quot;</span> /&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{CirclePlusMinor}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&quot;warning&quot;</span> /&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{CirclePlusMinor}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&quot;critical&quot;</span> /&gt;</span></span>\n&lt;/div&gt;\n</pre></code></p>\n<h3 id=\"icon-with-backdrop\">Icon with backdrop</h3>\n<p>Apply a backdrop to the icon.</p>\n<p><code><pre>\n&lt;div&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{CirclePlusMinor}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&quot;base&quot;</span> <span class=\"hljs-attr\">backdrop</span> /&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{CirclePlusMinor}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&quot;highlight&quot;</span> <span class=\"hljs-attr\">backdrop</span> /&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{CirclePlusMinor}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&quot;success&quot;</span> <span class=\"hljs-attr\">backdrop</span> /&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{CirclePlusMinor}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&quot;warning&quot;</span> <span class=\"hljs-attr\">backdrop</span> /&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{CirclePlusMinor}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&quot;critical&quot;</span> <span class=\"hljs-attr\">backdrop</span> /&gt;</span></span>\n&lt;/div&gt;\n</pre></code></p>\n<h3 id=\"user-provided-icon\">User provided icon</h3>\n<p>Specify an SVG as a string to render it in an image tag, instead of an inline SVG to prevent script injection.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Icon</span> source=<span class=\"hljs-string\">&quot;&lt;svg viewBox=&#x27;0 0 20 20&#x27; xmlns=&#x27;<a href=\"http://www.w3.org/2000/svg&#x27;&gt;&lt;path\">http://www.w3.org/2000/svg&#x27;&gt;&lt;path</a> d=&#x27;M10.707 17.707l5-5a.999.999 0 1 0-1.414-1.414L11 14.586V3a1 1 0 1 0-2 0v11.586l-3.293-3.293a.999.999 0 1 0-1.414 1.414l5 5a.999.999 0 0 0 1.414 0&#x27; /&gt;&lt;/svg&gt;&quot;</span> /&gt;\n</pre></code></p>\n<h3 id=\"user-provided-icon-with-color-and-currentcolor\">User provided icon with color and currentColor</h3>\n<p>When using changing color of an svg and it uses currentColor, the white color is applied.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">IconWithReactChild</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">iconContent</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">viewBox</span>=<span class=\"hljs-string\">&quot;0 0 20 20&quot;</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">circle</span> <span class=\"hljs-attr\">cx</span>=<span class=\"hljs-string\">&quot;10&quot;</span> <span class=\"hljs-attr\">cy</span>=<span class=\"hljs-string\">&quot;10&quot;</span> <span class=\"hljs-attr\">r</span>=<span class=\"hljs-string\">&quot;10&quot;</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">&quot;rebeccapurple&quot;</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">circle</span> <span class=\"hljs-attr\">cx</span>=<span class=\"hljs-string\">&quot;10&quot;</span> <span class=\"hljs-attr\">cy</span>=<span class=\"hljs-string\">&quot;10&quot;</span> <span class=\"hljs-attr\">r</span>=<span class=\"hljs-string\">&quot;6&quot;</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">&quot;currentColor&quot;</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">circle</span> <span class=\"hljs-attr\">cx</span>=<span class=\"hljs-string\">&quot;10&quot;</span> <span class=\"hljs-attr\">cy</span>=<span class=\"hljs-string\">&quot;10&quot;</span> <span class=\"hljs-attr\">r</span>=<span class=\"hljs-string\">&quot;3&quot;</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span></span>\n    );\n  };</p>\n<p>  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{iconContent}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&quot;warning&quot;</span> /&gt;</span></span>;\n}\n</pre></code></p>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>Using icons can be a great help to merchants who have difficulties with reading, language, attention, and low vision.</p>\n<p>If the icon appears without text, then use the <code>accessibilityLabel</code> prop to give the icon a text alternative. This adds an <code>aria-label</code> that’s conveyed to screen reader users.</p>\n<!-- usageblock -->\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Pair text and icons for clarity</li>\n<li>Give the icon a text equivalent if its purpose isn’t conveyed in another way</li>\n<li>Review our <a href=\"https://polaris.shopify.com/content/alternative-text\">alternative text</a> guidelines to make sure your use of icon works for all merchants</li>\n</ul>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Icon</span> source={<span class=\"hljs-title class_\">OrdersMajor</span>} /&gt;\n<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>No orders yet<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n</pre></code></p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Button</span> icon={<span class=\"hljs-title class_\">CirclePlusMinor</span>}&gt;<span class=\"hljs-title class_\">Add</span> a product&lt;/<span class=\"hljs-title class_\">Button</span>&gt;\n</pre></code></p>\n<h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>Describe what the icon looks like</li>\n<li>Include “icon” in the text equivalent</li>\n<li>Duplicate adjacent text in the alternative text</li>\n<li>Duplicate information provided programmatically</li>\n</ul>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Icon</span> source={<span class=\"hljs-title class_\">CirclePlusMinor</span>} accessibilityLabel=<span class=\"hljs-string\">&quot;Circle plus icon&quot;</span> /&gt;\n</pre></code></p>\n<!-- end -->\n\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-guidelines\">Related guidelines</h2>\n<ul>\n<li>To learn about implementing Polaris icons with <a href=\"https://github.com/Shopify/polaris-react\">Polaris React</a> in your projects, see the <a href=\"https://www.npmjs.com/package/@shopify/polaris-icons\"><code>@shopify/polaris-icons</code> documentation</a></li>\n<li>To learn about the best practices for designing and using icons in your projects, see the <a href=\"https://polaris.shopify.com/design/icons\">icon design guidelines</a></li>\n<li>To learn how to name icons, see the <a href=\"https://polaris.shopify.com/content/naming#section-icons\">icon naming guidelines</a></li>\n</ul>\n"
  },
  "IndexTable": {
    "name": "Index table",
    "category": "Lists and tables",
    "keywords": [
      "ResourceList",
      "index",
      "table",
      "list",
      "collections",
      "items",
      "objects",
      "list of products",
      "list of orders",
      "product lists",
      "order lists",
      "collections lists",
      "collection lists",
      "list of collections",
      "product listings list",
      "channel lists",
      "resource list attributes",
      "list attributes",
      "exceptions list",
      "list secondary actions",
      "secondary actions in a list",
      "list of resources",
      "filter",
      "sort"
    ],
    "readme": "<div class=\"usage-list\"><div class=\"usage-list-part\"><h1 id=\"index-table\">Index table</h1>\n<p>An index table displays a collection of objects of the same type, like orders or products. The main job of an index table is to help merchants get an at-a-glance of the objects to perform actions or navigate to a full-page representation of it.</p>\n<p>Index tables can also:</p>\n<ul>\n<li>Support <a href=\"https://polaris.shopify.com/components/lists-and-tables/resource-item\">customized index rows and columns</a></li>\n<li>Include bulk actions so merchants can act on multiple objects at once</li>\n<li>Support sorting and <a href=\"https://polaris.shopify.com/components/lists-and-tables/filters\">filtering</a> of long lists</li>\n<li>Be paired with pagination to make long lists digestible</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"simple-index-table\">Simple index table</h3>\n<p>A index table with simple items and no bulk actions, sorting, or filtering.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SimpleIndexTableExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> customers = [\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;3411&#x27;</span>,\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;customers/341&#x27;</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Mae Jemison&#x27;</span>,\n      <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;Decatur, USA&#x27;</span>,\n      <span class=\"hljs-attr\">orders</span>: <span class=\"hljs-number\">20</span>,\n      <span class=\"hljs-attr\">amountSpent</span>: <span class=\"hljs-string\">&#x27;$2,400&#x27;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;2561&#x27;</span>,\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;customers/256&#x27;</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Ellen Ochoa&#x27;</span>,\n      <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;Los Angeles, USA&#x27;</span>,\n      <span class=\"hljs-attr\">orders</span>: <span class=\"hljs-number\">30</span>,\n      <span class=\"hljs-attr\">amountSpent</span>: <span class=\"hljs-string\">&#x27;$140&#x27;</span>,\n    },\n  ];\n  <span class=\"hljs-keyword\">const</span> resourceName = {\n    <span class=\"hljs-attr\">singular</span>: <span class=\"hljs-string\">&#x27;customer&#x27;</span>,\n    <span class=\"hljs-attr\">plural</span>: <span class=\"hljs-string\">&#x27;customers&#x27;</span>,\n  };</p>\n<p>  <span class=\"hljs-keyword\">const</span> {selectedResources, allResourcesSelected, handleSelectionChange} =\n    <span class=\"hljs-title function_\">useIndexResourceState</span>(customers);</p>\n<p>  <span class=\"hljs-keyword\">const</span> rowMarkup = customers.<span class=\"hljs-title function_\">map</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">{id, name, location, orders, amountSpent}, index</span>) =&gt;</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Row</span>\n        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">{id}</span>\n        <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{id}</span>\n        <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selectedResources.includes(id)}</span>\n        <span class=\"hljs-attr\">position</span>=<span class=\"hljs-string\">{index}</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextStyle</span> <span class=\"hljs-attr\">variation</span>=<span class=\"hljs-string\">&quot;strong&quot;</span>&gt;</span>{name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextStyle</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>{location}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>{orders}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>{amountSpent}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Row</span>&gt;</span></span>\n    ),\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable</span>\n        <span class=\"hljs-attr\">resourceName</span>=<span class=\"hljs-string\">{resourceName}</span>\n        <span class=\"hljs-attr\">itemCount</span>=<span class=\"hljs-string\">{customers.length}</span>\n        <span class=\"hljs-attr\">selectedItemsCount</span>=<span class=\"hljs-string\">{</span>\n          <span class=\"hljs-attr\">allResourcesSelected</span> ? &#x27;<span class=\"hljs-attr\">All</span>&#x27; <span class=\"hljs-attr\">:</span> <span class=\"hljs-attr\">selectedResources.length</span>\n        }\n        <span class=\"hljs-attr\">onSelectionChange</span>=<span class=\"hljs-string\">{handleSelectionChange}</span>\n        <span class=\"hljs-attr\">headings</span>=<span class=\"hljs-string\">{[</span>\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Name</span>&#x27;},\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Location</span>&#x27;},\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Order</span> <span class=\"hljs-attr\">count</span>&#x27;},\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Amount</span> <span class=\"hljs-attr\">spent</span>&#x27;},\n        ]}\n      &gt;</span>\n        {rowMarkup}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"simple-small-screen-index-table\">Simple small screen index table</h3>\n<p>A small screen index table with simple items and no bulk actions, sorting, or filtering.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SimpleSmallScreenIndexTableExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> customers = [\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;3412&#x27;</span>,\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;customers/341&#x27;</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Mae Jemison&#x27;</span>,\n      <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;Decatur, USA&#x27;</span>,\n      <span class=\"hljs-attr\">orders</span>: <span class=\"hljs-number\">20</span>,\n      <span class=\"hljs-attr\">amountSpent</span>: <span class=\"hljs-string\">&#x27;$2,400&#x27;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;2562&#x27;</span>,\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;customers/256&#x27;</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Ellen Ochoa&#x27;</span>,\n      <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;Los Angeles, USA&#x27;</span>,\n      <span class=\"hljs-attr\">orders</span>: <span class=\"hljs-number\">30</span>,\n      <span class=\"hljs-attr\">amountSpent</span>: <span class=\"hljs-string\">&#x27;$140&#x27;</span>,\n    },\n  ];\n  <span class=\"hljs-keyword\">const</span> resourceName = {\n    <span class=\"hljs-attr\">singular</span>: <span class=\"hljs-string\">&#x27;customer&#x27;</span>,\n    <span class=\"hljs-attr\">plural</span>: <span class=\"hljs-string\">&#x27;customers&#x27;</span>,\n  };</p>\n<p>  <span class=\"hljs-keyword\">const</span> {selectedResources, allResourcesSelected, handleSelectionChange} =\n    <span class=\"hljs-title function_\">useIndexResourceState</span>(customers);</p>\n<p>  <span class=\"hljs-keyword\">const</span> rowMarkup = customers.<span class=\"hljs-title function_\">map</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">{id, name, location, orders, amountSpent}, index</span>) =&gt;</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Row</span>\n        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">{id}</span>\n        <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{id}</span>\n        <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selectedResources.includes(id)}</span>\n        <span class=\"hljs-attr\">position</span>=<span class=\"hljs-string\">{index}</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{padding:</span> &#x27;<span class=\"hljs-attr\">12px</span> <span class=\"hljs-attr\">16px</span>&#x27;}}&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextStyle</span> <span class=\"hljs-attr\">variation</span>=<span class=\"hljs-string\">&quot;strong&quot;</span>&gt;</span>{name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextStyle</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{location}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{orders}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{amountSpent}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Row</span>&gt;</span></span>\n    ),\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{width:</span> &#x27;<span class=\"hljs-attr\">430px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable</span>\n          <span class=\"hljs-attr\">resourceName</span>=<span class=\"hljs-string\">{resourceName}</span>\n          <span class=\"hljs-attr\">itemCount</span>=<span class=\"hljs-string\">{customers.length}</span>\n          <span class=\"hljs-attr\">selectedItemsCount</span>=<span class=\"hljs-string\">{</span>\n            <span class=\"hljs-attr\">allResourcesSelected</span> ? &#x27;<span class=\"hljs-attr\">All</span>&#x27; <span class=\"hljs-attr\">:</span> <span class=\"hljs-attr\">selectedResources.length</span>\n          }\n          <span class=\"hljs-attr\">onSelectionChange</span>=<span class=\"hljs-string\">{handleSelectionChange}</span>\n          <span class=\"hljs-attr\">condensed</span>\n          <span class=\"hljs-attr\">headings</span>=<span class=\"hljs-string\">{[</span>\n            {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Name</span>&#x27;},\n            {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Location</span>&#x27;},\n            {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Order</span> <span class=\"hljs-attr\">count</span>&#x27;},\n            {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Amount</span> <span class=\"hljs-attr\">spent</span>&#x27;},\n          ]}\n        &gt;</span>\n          {rowMarkup}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"indextable-with-empty-state\">IndexTable with empty state</h3>\n<p>Use to explain the purpose of a index table when no resources exist yet. This allows a smooth transition from a list in a loading state to a list where zero, one, or many resources exist.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">IndexTableWithCustomEmptyStateExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> customers = [];\n  <span class=\"hljs-keyword\">const</span> resourceName = {\n    <span class=\"hljs-attr\">singular</span>: <span class=\"hljs-string\">&#x27;customer&#x27;</span>,\n    <span class=\"hljs-attr\">plural</span>: <span class=\"hljs-string\">&#x27;customers&#x27;</span>,\n  };</p>\n<p>  <span class=\"hljs-keyword\">const</span> {selectedResources, allResourcesSelected, handleSelectionChange} =\n    <span class=\"hljs-title function_\">useIndexResourceState</span>(customers);</p>\n<p>  <span class=\"hljs-keyword\">const</span> emptyStateMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">EmptySearchResult</span>\n      <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">{</span>&#x27;<span class=\"hljs-attr\">No</span> <span class=\"hljs-attr\">customers</span> <span class=\"hljs-attr\">yet</span>&#x27;}\n      <span class=\"hljs-attr\">description</span>=<span class=\"hljs-string\">{</span>&#x27;<span class=\"hljs-attr\">Try</span> <span class=\"hljs-attr\">changing</span> <span class=\"hljs-attr\">the</span> <span class=\"hljs-attr\">filters</span> <span class=\"hljs-attr\">or</span> <span class=\"hljs-attr\">search</span> <span class=\"hljs-attr\">term</span>&#x27;}\n      <span class=\"hljs-attr\">withIllustration</span>\n    /&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> rowMarkup = customers.<span class=\"hljs-title function_\">map</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">{id, name, location, orders, amountSpent}, index</span>) =&gt;</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Row</span>\n        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">{id}</span>\n        <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{id}</span>\n        <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selectedResources.includes(id)}</span>\n        <span class=\"hljs-attr\">position</span>=<span class=\"hljs-string\">{index}</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextStyle</span> <span class=\"hljs-attr\">variation</span>=<span class=\"hljs-string\">&quot;strong&quot;</span>&gt;</span>{name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextStyle</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>{location}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>{orders}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>{amountSpent}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Row</span>&gt;</span></span>\n    ),\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable</span>\n        <span class=\"hljs-attr\">resourceName</span>=<span class=\"hljs-string\">{resourceName}</span>\n        <span class=\"hljs-attr\">itemCount</span>=<span class=\"hljs-string\">{customers.length}</span>\n        <span class=\"hljs-attr\">selectedItemsCount</span>=<span class=\"hljs-string\">{</span>\n          <span class=\"hljs-attr\">allResourcesSelected</span> ? &#x27;<span class=\"hljs-attr\">All</span>&#x27; <span class=\"hljs-attr\">:</span> <span class=\"hljs-attr\">selectedResources.length</span>\n        }\n        <span class=\"hljs-attr\">onSelectionChange</span>=<span class=\"hljs-string\">{handleSelectionChange}</span>\n        <span class=\"hljs-attr\">emptyState</span>=<span class=\"hljs-string\">{emptyStateMarkup}</span>\n        <span class=\"hljs-attr\">headings</span>=<span class=\"hljs-string\">{[</span>\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Name</span>&#x27;},\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Location</span>&#x27;},\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Order</span> <span class=\"hljs-attr\">count</span>&#x27;},\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Amount</span> <span class=\"hljs-attr\">spent</span>&#x27;},\n        ]}\n      &gt;</span>\n        {rowMarkup}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"indextable-with-bulk-actions\">IndexTable with bulk actions</h3>\n<p>Allows merchants to select items and perform an action on the selection.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">IndexTableWithBulkActionsExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> customers = [\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;3413&#x27;</span>,\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;customers/341&#x27;</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Mae Jemison&#x27;</span>,\n      <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;Decatur, USA&#x27;</span>,\n      <span class=\"hljs-attr\">orders</span>: <span class=\"hljs-number\">20</span>,\n      <span class=\"hljs-attr\">amountSpent</span>: <span class=\"hljs-string\">&#x27;$2,400&#x27;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;2563&#x27;</span>,\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;customers/256&#x27;</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Ellen Ochoa&#x27;</span>,\n      <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;Los Angeles, USA&#x27;</span>,\n      <span class=\"hljs-attr\">orders</span>: <span class=\"hljs-number\">30</span>,\n      <span class=\"hljs-attr\">amountSpent</span>: <span class=\"hljs-string\">&#x27;$140&#x27;</span>,\n    },\n  ];\n  <span class=\"hljs-keyword\">const</span> resourceName = {\n    <span class=\"hljs-attr\">singular</span>: <span class=\"hljs-string\">&#x27;customer&#x27;</span>,\n    <span class=\"hljs-attr\">plural</span>: <span class=\"hljs-string\">&#x27;customers&#x27;</span>,\n  };</p>\n<p>  <span class=\"hljs-keyword\">const</span> {selectedResources, allResourcesSelected, handleSelectionChange} =\n    <span class=\"hljs-title function_\">useIndexResourceState</span>(customers);</p>\n<p>  <span class=\"hljs-keyword\">const</span> promotedBulkActions = [\n    {\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Edit customers&#x27;</span>,\n      <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Todo: implement bulk edit&#x27;</span>),\n    },\n  ];\n  <span class=\"hljs-keyword\">const</span> bulkActions = [\n    {\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Add tags&#x27;</span>,\n      <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Todo: implement bulk add tags&#x27;</span>),\n    },\n    {\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Remove tags&#x27;</span>,\n      <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Todo: implement bulk remove tags&#x27;</span>),\n    },\n    {\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Delete customers&#x27;</span>,\n      <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Todo: implement bulk delete&#x27;</span>),\n    },\n  ];</p>\n<p>  <span class=\"hljs-keyword\">const</span> rowMarkup = customers.<span class=\"hljs-title function_\">map</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">{id, name, location, orders, amountSpent}, index</span>) =&gt;</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Row</span>\n        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">{id}</span>\n        <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{id}</span>\n        <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selectedResources.includes(id)}</span>\n        <span class=\"hljs-attr\">position</span>=<span class=\"hljs-string\">{index}</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextStyle</span> <span class=\"hljs-attr\">variation</span>=<span class=\"hljs-string\">&quot;strong&quot;</span>&gt;</span>{name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextStyle</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>{location}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>{orders}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>{amountSpent}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Row</span>&gt;</span></span>\n    ),\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable</span>\n        <span class=\"hljs-attr\">resourceName</span>=<span class=\"hljs-string\">{resourceName}</span>\n        <span class=\"hljs-attr\">itemCount</span>=<span class=\"hljs-string\">{customers.length}</span>\n        <span class=\"hljs-attr\">selectedItemsCount</span>=<span class=\"hljs-string\">{</span>\n          <span class=\"hljs-attr\">allResourcesSelected</span> ? &#x27;<span class=\"hljs-attr\">All</span>&#x27; <span class=\"hljs-attr\">:</span> <span class=\"hljs-attr\">selectedResources.length</span>\n        }\n        <span class=\"hljs-attr\">onSelectionChange</span>=<span class=\"hljs-string\">{handleSelectionChange}</span>\n        <span class=\"hljs-attr\">bulkActions</span>=<span class=\"hljs-string\">{bulkActions}</span>\n        <span class=\"hljs-attr\">promotedBulkActions</span>=<span class=\"hljs-string\">{promotedBulkActions}</span>\n        <span class=\"hljs-attr\">headings</span>=<span class=\"hljs-string\">{[</span>\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Name</span>&#x27;},\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Location</span>&#x27;},\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Order</span> <span class=\"hljs-attr\">count</span>&#x27;},\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Amount</span> <span class=\"hljs-attr\">spent</span>&#x27;},\n        ]}\n      &gt;</span>\n        {rowMarkup}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"indextable-with-multiple-promoted-bulk-actions\">IndexTable with multiple promoted bulk actions</h3>\n<p>Allows merchants to select items and perform different actions on the selection.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">IndexTableWithMultiplePromotedBulkActionsExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> customers = [\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;3413&#x27;</span>,\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;customers/341&#x27;</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Mae Jemison&#x27;</span>,\n      <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;Decatur, USA&#x27;</span>,\n      <span class=\"hljs-attr\">orders</span>: <span class=\"hljs-number\">20</span>,\n      <span class=\"hljs-attr\">amountSpent</span>: <span class=\"hljs-string\">&#x27;$2,400&#x27;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;2563&#x27;</span>,\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;customers/256&#x27;</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Ellen Ochoa&#x27;</span>,\n      <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;Los Angeles, USA&#x27;</span>,\n      <span class=\"hljs-attr\">orders</span>: <span class=\"hljs-number\">30</span>,\n      <span class=\"hljs-attr\">amountSpent</span>: <span class=\"hljs-string\">&#x27;$140&#x27;</span>,\n    },\n  ];\n  <span class=\"hljs-keyword\">const</span> resourceName = {\n    <span class=\"hljs-attr\">singular</span>: <span class=\"hljs-string\">&#x27;customer&#x27;</span>,\n    <span class=\"hljs-attr\">plural</span>: <span class=\"hljs-string\">&#x27;customers&#x27;</span>,\n  };</p>\n<p>  <span class=\"hljs-keyword\">const</span> {selectedResources, allResourcesSelected, handleSelectionChange} =\n    <span class=\"hljs-title function_\">useIndexResourceState</span>(customers);</p>\n<p>  <span class=\"hljs-keyword\">const</span> promotedBulkActions = [\n    {\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Capture payments&#x27;</span>,\n      <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Todo: implement payment capture&#x27;</span>),\n    },\n    {\n      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;Edit customers&#x27;</span>,\n      <span class=\"hljs-attr\">actions</span>: [\n        {\n          <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Add customers&#x27;</span>,\n          <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Todo: implement adding customers&#x27;</span>),\n        },\n        {\n          <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Delete customers&#x27;</span>,\n          <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Todo: implement deleting customers&#x27;</span>),\n        },\n      ],\n    },\n    {\n      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;Export&#x27;</span>,\n      <span class=\"hljs-attr\">actions</span>: [\n        {\n          <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Export as PDF&#x27;</span>,\n          <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Todo: implement PDF exporting&#x27;</span>),\n        },\n        {\n          <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Export as CSV&#x27;</span>,\n          <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Todo: implement CSV exporting&#x27;</span>),\n        },\n      ],\n    },\n  ];\n  <span class=\"hljs-keyword\">const</span> bulkActions = [\n    {\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Add tags&#x27;</span>,\n      <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Todo: implement bulk add tags&#x27;</span>),\n    },\n    {\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Remove tags&#x27;</span>,\n      <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Todo: implement bulk remove tags&#x27;</span>),\n    },\n    {\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Delete customers&#x27;</span>,\n      <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Todo: implement bulk delete&#x27;</span>),\n    },\n  ];</p>\n<p>  <span class=\"hljs-keyword\">const</span> rowMarkup = customers.<span class=\"hljs-title function_\">map</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">{id, name, location, orders, amountSpent}, index</span>) =&gt;</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Row</span>\n        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">{id}</span>\n        <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{id}</span>\n        <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selectedResources.includes(id)}</span>\n        <span class=\"hljs-attr\">position</span>=<span class=\"hljs-string\">{index}</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextStyle</span> <span class=\"hljs-attr\">variation</span>=<span class=\"hljs-string\">&quot;strong&quot;</span>&gt;</span>{name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextStyle</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>{location}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>{orders}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>{amountSpent}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Row</span>&gt;</span></span>\n    ),\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable</span>\n        <span class=\"hljs-attr\">resourceName</span>=<span class=\"hljs-string\">{resourceName}</span>\n        <span class=\"hljs-attr\">itemCount</span>=<span class=\"hljs-string\">{customers.length}</span>\n        <span class=\"hljs-attr\">selectedItemsCount</span>=<span class=\"hljs-string\">{</span>\n          <span class=\"hljs-attr\">allResourcesSelected</span> ? &#x27;<span class=\"hljs-attr\">All</span>&#x27; <span class=\"hljs-attr\">:</span> <span class=\"hljs-attr\">selectedResources.length</span>\n        }\n        <span class=\"hljs-attr\">onSelectionChange</span>=<span class=\"hljs-string\">{handleSelectionChange}</span>\n        <span class=\"hljs-attr\">bulkActions</span>=<span class=\"hljs-string\">{bulkActions}</span>\n        <span class=\"hljs-attr\">promotedBulkActions</span>=<span class=\"hljs-string\">{promotedBulkActions}</span>\n        <span class=\"hljs-attr\">headings</span>=<span class=\"hljs-string\">{[</span>\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Name</span>&#x27;},\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Location</span>&#x27;},\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Order</span> <span class=\"hljs-attr\">count</span>&#x27;},\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Amount</span> <span class=\"hljs-attr\">spent</span>&#x27;},\n        ]}\n      &gt;</span>\n        {rowMarkup}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"indextable-with-bulk-actions-and-selection-across-pages\">IndexTable with bulk actions and selection across pages</h3>\n<p>Allows merchants to select items, perform an action on the selection and select resources across pages.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">IndexTableWithBulkActionsAndSelectionAcrossPagesExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> customers = [\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;3414&#x27;</span>,\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;customers/341&#x27;</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Mae Jemison&#x27;</span>,\n      <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;Decatur, USA&#x27;</span>,\n      <span class=\"hljs-attr\">orders</span>: <span class=\"hljs-number\">20</span>,\n      <span class=\"hljs-attr\">amountSpent</span>: <span class=\"hljs-string\">&#x27;$2,400&#x27;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;2564&#x27;</span>,\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;customers/256&#x27;</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Ellen Ochoa&#x27;</span>,\n      <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;Los Angeles, USA&#x27;</span>,\n      <span class=\"hljs-attr\">orders</span>: <span class=\"hljs-number\">30</span>,\n      <span class=\"hljs-attr\">amountSpent</span>: <span class=\"hljs-string\">&#x27;$140&#x27;</span>,\n    },\n  ];\n  <span class=\"hljs-keyword\">const</span> resourceName = {\n    <span class=\"hljs-attr\">singular</span>: <span class=\"hljs-string\">&#x27;customer&#x27;</span>,\n    <span class=\"hljs-attr\">plural</span>: <span class=\"hljs-string\">&#x27;customers&#x27;</span>,\n  };</p>\n<p>  <span class=\"hljs-keyword\">const</span> {selectedResources, allResourcesSelected, handleSelectionChange} =\n    <span class=\"hljs-title function_\">useIndexResourceState</span>(customers);</p>\n<p>  <span class=\"hljs-keyword\">const</span> promotedBulkActions = [\n    {\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Edit customers&#x27;</span>,\n      <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Todo: implement bulk edit&#x27;</span>),\n    },\n  ];\n  <span class=\"hljs-keyword\">const</span> bulkActions = [\n    {\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Add tags&#x27;</span>,\n      <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Todo: implement bulk add tags&#x27;</span>),\n    },\n    {\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Remove tags&#x27;</span>,\n      <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Todo: implement bulk remove tags&#x27;</span>),\n    },\n    {\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Delete customers&#x27;</span>,\n      <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Todo: implement bulk delete&#x27;</span>),\n    },\n  ];</p>\n<p>  <span class=\"hljs-keyword\">const</span> rowMarkup = customers.<span class=\"hljs-title function_\">map</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">{id, name, location, orders, amountSpent}, index</span>) =&gt;</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Row</span>\n        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">{id}</span>\n        <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{id}</span>\n        <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selectedResources.includes(id)}</span>\n        <span class=\"hljs-attr\">position</span>=<span class=\"hljs-string\">{index}</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextStyle</span> <span class=\"hljs-attr\">variation</span>=<span class=\"hljs-string\">&quot;strong&quot;</span>&gt;</span>{name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextStyle</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>{location}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>{orders}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>{amountSpent}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Row</span>&gt;</span></span>\n    ),\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable</span>\n        <span class=\"hljs-attr\">resourceName</span>=<span class=\"hljs-string\">{resourceName}</span>\n        <span class=\"hljs-attr\">itemCount</span>=<span class=\"hljs-string\">{customers.length}</span>\n        <span class=\"hljs-attr\">selectedItemsCount</span>=<span class=\"hljs-string\">{</span>\n          <span class=\"hljs-attr\">allResourcesSelected</span> ? &#x27;<span class=\"hljs-attr\">All</span>&#x27; <span class=\"hljs-attr\">:</span> <span class=\"hljs-attr\">selectedResources.length</span>\n        }\n        <span class=\"hljs-attr\">onSelectionChange</span>=<span class=\"hljs-string\">{handleSelectionChange}</span>\n        <span class=\"hljs-attr\">hasMoreItems</span>\n        <span class=\"hljs-attr\">bulkActions</span>=<span class=\"hljs-string\">{bulkActions}</span>\n        <span class=\"hljs-attr\">promotedBulkActions</span>=<span class=\"hljs-string\">{promotedBulkActions}</span>\n        <span class=\"hljs-attr\">headings</span>=<span class=\"hljs-string\">{[</span>\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Name</span>&#x27;},\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Location</span>&#x27;},\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Order</span> <span class=\"hljs-attr\">count</span>&#x27;},\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Amount</span> <span class=\"hljs-attr\">spent</span>&#x27;},\n        ]}\n      &gt;</span>\n        {rowMarkup}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"indextable-with-loading-state\">IndexTable with loading state</h3>\n<p>Notifies merchants that index table items are being processed.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">IndexTableWithLoadingExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> customers = [\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;3415&#x27;</span>,\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;customers/341&#x27;</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Mae Jemison&#x27;</span>,\n      <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;Decatur, USA&#x27;</span>,\n      <span class=\"hljs-attr\">orders</span>: <span class=\"hljs-number\">20</span>,\n      <span class=\"hljs-attr\">amountSpent</span>: <span class=\"hljs-string\">&#x27;$2,400&#x27;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;2565&#x27;</span>,\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;customers/256&#x27;</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Ellen Ochoa&#x27;</span>,\n      <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&#x27;Los Angeles, USA&#x27;</span>,\n      <span class=\"hljs-attr\">orders</span>: <span class=\"hljs-number\">30</span>,\n      <span class=\"hljs-attr\">amountSpent</span>: <span class=\"hljs-string\">&#x27;$140&#x27;</span>,\n    },\n  ];\n  <span class=\"hljs-keyword\">const</span> resourceName = {\n    <span class=\"hljs-attr\">singular</span>: <span class=\"hljs-string\">&#x27;customer&#x27;</span>,\n    <span class=\"hljs-attr\">plural</span>: <span class=\"hljs-string\">&#x27;customers&#x27;</span>,\n  };</p>\n<p>  <span class=\"hljs-keyword\">const</span> {selectedResources, allResourcesSelected, handleSelectionChange} =\n    <span class=\"hljs-title function_\">useIndexResourceState</span>(customers);</p>\n<p>  <span class=\"hljs-keyword\">const</span> rowMarkup = customers.<span class=\"hljs-title function_\">map</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">{id, name, location, orders, amountSpent}, index</span>) =&gt;</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Row</span>\n        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">{id}</span>\n        <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{id}</span>\n        <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selectedResources.includes(id)}</span>\n        <span class=\"hljs-attr\">position</span>=<span class=\"hljs-string\">{index}</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextStyle</span> <span class=\"hljs-attr\">variation</span>=<span class=\"hljs-string\">&quot;strong&quot;</span>&gt;</span>{name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextStyle</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>{location}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>{orders}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>{amountSpent}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Cell</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable.Row</span>&gt;</span></span>\n    ),\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">IndexTable</span>\n        <span class=\"hljs-attr\">resourceName</span>=<span class=\"hljs-string\">{resourceName}</span>\n        <span class=\"hljs-attr\">itemCount</span>=<span class=\"hljs-string\">{customers.length}</span>\n        <span class=\"hljs-attr\">selectedItemsCount</span>=<span class=\"hljs-string\">{</span>\n          <span class=\"hljs-attr\">allResourcesSelected</span> ? &#x27;<span class=\"hljs-attr\">All</span>&#x27; <span class=\"hljs-attr\">:</span> <span class=\"hljs-attr\">selectedResources.length</span>\n        }\n        <span class=\"hljs-attr\">onSelectionChange</span>=<span class=\"hljs-string\">{handleSelectionChange}</span>\n        <span class=\"hljs-attr\">loading</span>\n        <span class=\"hljs-attr\">headings</span>=<span class=\"hljs-string\">{[</span>\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Name</span>&#x27;},\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Location</span>&#x27;},\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Order</span> <span class=\"hljs-attr\">count</span>&#x27;},\n          {<span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Amount</span> <span class=\"hljs-attr\">spent</span>&#x27;},\n        ]}\n      &gt;</span>\n        {rowMarkup}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">IndexTable</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"indextable-with-filtering\">IndexTable with filtering</h3>\n<p>Allows merchants to narrow the index table to a subset of the original items.</p>\n<pre><code class=\"language-jsx\">function IndexTableWithFilteringExample() {\n  const customers = [\n    {\n      id: &#39;3416&#39;,\n      url: &#39;customers/341&#39;,\n      name: &#39;Mae Jemison&#39;,\n      location: &#39;Decatur, USA&#39;,\n      orders: 20,\n      amountSpent: &#39;$2,400&#39;,\n    },\n    {\n      id: &#39;2566&#39;,\n      url: &#39;customers/256&#39;,\n      name: &#39;Ellen Ochoa&#39;,\n      location: &#39;Los Angeles, USA&#39;,\n      orders: 30,\n      amountSpent: &#39;$140&#39;,\n    },\n  ];\n  const resourceName = {\n    singular: &#39;customer&#39;,\n    plural: &#39;customers&#39;,\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(customers);\n  const [taggedWith, setTaggedWith] = useState(&#39;VIP&#39;);\n  const [queryValue, setQueryValue] = useState(null);\n  const [sortValue, setSortValue] = useState(&#39;today&#39;);\n\n  const handleTaggedWithChange = useCallback(\n    (value) =&gt; setTaggedWith(value),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() =&gt; setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() =&gt; setQueryValue(null), []);\n  const handleClearAll = useCallback(() =&gt; {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n  const handleSortChange = useCallback((value) =&gt; setSortValue(value), []);\n\n  const filters = [\n    {\n      key: &#39;taggedWith&#39;,\n      label: &#39;Tagged with&#39;,\n      filter: (\n        &lt;TextField\n          label=&quot;Tagged with&quot;\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=&quot;off&quot;\n          labelHidden\n        /&gt;\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: &#39;taggedWith&#39;,\n          label: disambiguateLabel(&#39;taggedWith&#39;, taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  const sortOptions = [\n    {label: &#39;Today&#39;, value: &#39;today&#39;},\n    {label: &#39;Yesterday&#39;, value: &#39;yesterday&#39;},\n    {label: &#39;Last 7 days&#39;, value: &#39;lastWeek&#39;},\n  ];\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent}, index) =&gt; (\n      &lt;IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      &gt;\n        &lt;IndexTable.Cell&gt;\n          &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n        &lt;/IndexTable.Cell&gt;\n        &lt;IndexTable.Cell&gt;{location}&lt;/IndexTable.Cell&gt;\n        &lt;IndexTable.Cell&gt;{orders}&lt;/IndexTable.Cell&gt;\n        &lt;IndexTable.Cell&gt;{amountSpent}&lt;/IndexTable.Cell&gt;\n      &lt;/IndexTable.Row&gt;\n    ),\n  );\n\n  return (\n    &lt;Card&gt;\n      &lt;div style={{padding: &#39;16px&#39;, display: &#39;flex&#39;}}&gt;\n        &lt;div style={{flex: 1}}&gt;\n          &lt;Filters\n            queryValue={queryValue}\n            filters={filters}\n            appliedFilters={appliedFilters}\n            onQueryChange={setQueryValue}\n            onQueryClear={handleQueryValueRemove}\n            onClearAll={handleClearAll}\n          /&gt;\n        &lt;/div&gt;\n        &lt;div style={{paddingLeft: &#39;0.25rem&#39;}}&gt;\n          &lt;Select\n            labelInline\n            label=&quot;Sort by&quot;\n            options={sortOptions}\n            value={sortValue}\n            onChange={handleSortChange}\n          /&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;IndexTable\n        resourceName={resourceName}\n        itemCount={customers.length}\n        selectedItemsCount={\n          allResourcesSelected ? &#39;All&#39; : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        headings={[\n          {title: &#39;Name&#39;},\n          {title: &#39;Location&#39;},\n          {title: &#39;Order count&#39;},\n          {title: &#39;Amount spent&#39;},\n        ]}\n      &gt;\n        {rowMarkup}\n      &lt;/IndexTable&gt;\n    &lt;/Card&gt;\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case &#39;taggedWith&#39;:\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === &#39;&#39; || value == null;\n    }\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Index&lt;/span&gt; table &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; row status\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;An&lt;/span&gt; index table &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; rows differentiated by status.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction IndexTableWithRowStatusExample() {\n  const customers = [\n    {\n      id: &#39;3411&#39;,\n      url: &#39;customers/341&#39;,\n      name: &#39;Mae Jemison&#39;,\n      location: &#39;Decatur, USA&#39;,\n      orders: 20,\n      amountSpent: &#39;$2,400&#39;,\n      status: &#39;success&#39;,\n    },\n    {\n      id: &#39;2561&#39;,\n      url: &#39;customers/256&#39;,\n      name: &#39;Ellen Ochoa&#39;,\n      location: &#39;Los Angeles, USA&#39;,\n      orders: 30,\n      amountSpent: &#39;$140&#39;,\n      status: &#39;subdued&#39;,\n    },\n  ];\n  const resourceName = {\n    singular: &#39;customer&#39;,\n    plural: &#39;customers&#39;,\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(customers);\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent, status}, index) =&gt; (\n      &lt;IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n        status={status}\n      &gt;\n        &lt;IndexTable.Cell&gt;\n          &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n        &lt;/IndexTable.Cell&gt;\n        &lt;IndexTable.Cell&gt;{location}&lt;/IndexTable.Cell&gt;\n        &lt;IndexTable.Cell&gt;{orders}&lt;/IndexTable.Cell&gt;\n        &lt;IndexTable.Cell&gt;{amountSpent}&lt;/IndexTable.Cell&gt;\n      &lt;/IndexTable.Row&gt;\n    ),\n  );\n\n  return (\n    &lt;Card&gt;\n      &lt;IndexTable\n        resourceName={resourceName}\n        itemCount={customers.length}\n        selectedItemsCount={\n          allResourcesSelected ? &#39;All&#39; : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        headings={[\n          {title: &#39;Name&#39;},\n          {title: &#39;Location&#39;},\n          {title: &#39;Order count&#39;},\n          {title: &#39;Amount spent&#39;},\n        ]}\n      &gt;\n        {rowMarkup}\n      &lt;/IndexTable&gt;\n    &lt;/Card&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Index&lt;/span&gt; table &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; sticky last column\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;An&lt;/span&gt; index table &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; a sticky last column that stays visible on scroll. &lt;span class=&quot;hljs-title class_&quot;&gt;The&lt;/span&gt; last heading will also be sticky &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; not hidden.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction StickyLastCellIndexTableExample() {\n  const customers = [\n    {\n      id: &#39;3411&#39;,\n      url: &#39;customers/341&#39;,\n      name: &#39;Mae Jemison&#39;,\n      location: &#39;Decatur, USA&#39;,\n      orders: 20,\n      amountSpent: &#39;$2,400&#39;,\n    },\n    {\n      id: &#39;2561&#39;,\n      url: &#39;customers/256&#39;,\n      name: &#39;Ellen Ochoa&#39;,\n      location: &#39;Los Angeles, USA&#39;,\n      orders: 30,\n      amountSpent: &#39;$140&#39;,\n    },\n  ];\n  const resourceName = {\n    singular: &#39;customer&#39;,\n    plural: &#39;customers&#39;,\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(customers);\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent}, index) =&gt; (\n      &lt;IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      &gt;\n        &lt;IndexTable.Cell&gt;\n          &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n        &lt;/IndexTable.Cell&gt;\n        &lt;IndexTable.Cell&gt;{location}&lt;/IndexTable.Cell&gt;\n        &lt;IndexTable.Cell&gt;{orders}&lt;/IndexTable.Cell&gt;\n        &lt;IndexTable.Cell&gt;{amountSpent}&lt;/IndexTable.Cell&gt;\n      &lt;/IndexTable.Row&gt;\n    ),\n  );\n\n  return (\n    &lt;Card&gt;\n      &lt;IndexTable\n        resourceName={resourceName}\n        itemCount={customers.length}\n        selectedItemsCount={\n          allResourcesSelected ? &#39;All&#39; : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        headings={[\n          {title: &#39;Name&#39;},\n          {title: &#39;Location&#39;},\n          {title: &#39;Order count&#39;},\n          {title: &#39;Amount spent&#39;, hidden: false},\n        ]}\n        lastColumnSticky\n      &gt;\n        {rowMarkup}\n      &lt;/IndexTable&gt;\n    &lt;/Card&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Index&lt;/span&gt; table without checkboxes\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;An&lt;/span&gt; index table without checkboxes and bulk actions.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction IndexTableWithoutCheckboxesExample() {\n  const customers = [\n    {\n      id: &#39;3411&#39;,\n      url: &#39;customers/341&#39;,\n      name: &#39;Mae Jemison&#39;,\n      location: &#39;Decatur, USA&#39;,\n      orders: 20,\n      amountSpent: &#39;$2,400&#39;,\n    },\n    {\n      id: &#39;2561&#39;,\n      url: &#39;customers/256&#39;,\n      name: &#39;Ellen Ochoa&#39;,\n      location: &#39;Los Angeles, USA&#39;,\n      orders: 30,\n      amountSpent: &#39;$140&#39;,\n    },\n  ];\n  const resourceName = {\n    singular: &#39;customer&#39;,\n    plural: &#39;customers&#39;,\n  };\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent}, index) =&gt; (\n      &lt;IndexTable.Row id={id} key={id} position={index}&gt;\n        &lt;IndexTable.Cell&gt;\n          &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n        &lt;/IndexTable.Cell&gt;\n        &lt;IndexTable.Cell&gt;{location}&lt;/IndexTable.Cell&gt;\n        &lt;IndexTable.Cell&gt;{orders}&lt;/IndexTable.Cell&gt;\n        &lt;IndexTable.Cell&gt;{amountSpent}&lt;/IndexTable.Cell&gt;\n      &lt;/IndexTable.Row&gt;\n    ),\n  );\n\n  return (\n    &lt;Card&gt;\n      &lt;IndexTable\n        resourceName={resourceName}\n        itemCount={customers.length}\n        headings={[\n          {title: &#39;Name&#39;},\n          {title: &#39;Location&#39;},\n          {title: &#39;Order count&#39;},\n          {title: &#39;Amount spent&#39;, hidden: false},\n        ]}\n        selectable={false}\n      &gt;\n        {rowMarkup}\n      &lt;/IndexTable&gt;\n    &lt;/Card&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;IndexTable&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; all &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; its elements\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; a broad example that includes most &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; the elements and props available to index table.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction IndexTableWithAllElementsExample() {\n  const customers = [\n    {\n      id: &#39;3417&#39;,\n      url: &#39;customers/341&#39;,\n      name: &#39;Mae Jemison&#39;,\n      location: &#39;Decatur, USA&#39;,\n      orders: 20,\n      amountSpent: &#39;$2,400&#39;,\n    },\n    {\n      id: &#39;2567&#39;,\n      url: &#39;customers/256&#39;,\n      name: &#39;Ellen Ochoa&#39;,\n      location: &#39;Los Angeles, USA&#39;,\n      orders: 30,\n      amountSpent: &#39;$140&#39;,\n    },\n  ];\n  const resourceName = {\n    singular: &#39;customer&#39;,\n    plural: &#39;customers&#39;,\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(customers);\n  const [taggedWith, setTaggedWith] = useState(&#39;VIP&#39;);\n  const [queryValue, setQueryValue] = useState(null);\n  const [sortValue, setSortValue] = useState(&#39;today&#39;);\n\n  const handleTaggedWithChange = useCallback(\n    (value) =&gt; setTaggedWith(value),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() =&gt; setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() =&gt; setQueryValue(null), []);\n  const handleClearAll = useCallback(() =&gt; {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n  const handleSortChange = useCallback((value) =&gt; setSortValue(value), []);\n\n  const promotedBulkActions = [\n    {\n      content: &#39;Edit customers&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk edit&#39;),\n    },\n  ];\n  const bulkActions = [\n    {\n      content: &#39;Add tags&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk add tags&#39;),\n    },\n    {\n      content: &#39;Remove tags&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk remove tags&#39;),\n    },\n    {\n      content: &#39;Delete customers&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk delete&#39;),\n    },\n  ];\n\n  const filters = [\n    {\n      key: &#39;taggedWith&#39;,\n      label: &#39;Tagged with&#39;,\n      filter: (\n        &lt;TextField\n          label=&quot;Tagged with&quot;\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=&quot;off&quot;\n          labelHidden\n        /&gt;\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: &#39;taggedWith&#39;,\n          label: disambiguateLabel(&#39;taggedWith&#39;, taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  const sortOptions = [\n    {label: &#39;Today&#39;, value: &#39;today&#39;},\n    {label: &#39;Yesterday&#39;, value: &#39;yesterday&#39;},\n    {label: &#39;Last 7 days&#39;, value: &#39;lastWeek&#39;},\n  ];\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent}, index) =&gt; (\n      &lt;IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      &gt;\n        &lt;IndexTable.Cell&gt;\n          &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n        &lt;/IndexTable.Cell&gt;\n        &lt;IndexTable.Cell&gt;{location}&lt;/IndexTable.Cell&gt;\n        &lt;IndexTable.Cell&gt;{orders}&lt;/IndexTable.Cell&gt;\n        &lt;IndexTable.Cell&gt;{amountSpent}&lt;/IndexTable.Cell&gt;\n      &lt;/IndexTable.Row&gt;\n    ),\n  );\n\n  return (\n    &lt;Card&gt;\n      &lt;div style={{padding: &#39;16px&#39;, display: &#39;flex&#39;}}&gt;\n        &lt;div style={{flex: 1}}&gt;\n          &lt;Filters\n            queryValue={queryValue}\n            filters={filters}\n            appliedFilters={appliedFilters}\n            onQueryChange={setQueryValue}\n            onQueryClear={handleQueryValueRemove}\n            onClearAll={handleClearAll}\n          /&gt;\n        &lt;/div&gt;\n        &lt;div style={{paddingLeft: &#39;0.25rem&#39;}}&gt;\n          &lt;Select\n            labelInline\n            label=&quot;Sort by&quot;\n            options={sortOptions}\n            value={sortValue}\n            onChange={handleSortChange}\n          /&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;IndexTable\n        resourceName={resourceName}\n        itemCount={customers.length}\n        selectedItemsCount={\n          allResourcesSelected ? &#39;All&#39; : selectedResources.length\n        }\n        onSelectionChange={handleSelectionChange}\n        hasMoreItems\n        bulkActions={bulkActions}\n        promotedBulkActions={promotedBulkActions}\n        lastColumnSticky\n        headings={[\n          {title: &#39;Name&#39;},\n          {title: &#39;Location&#39;},\n          {title: &#39;Order count&#39;},\n          {title: &#39;Amount spent&#39;, hidden: false},\n        ]}\n      &gt;\n        {rowMarkup}\n      &lt;/IndexTable&gt;\n    &lt;/Card&gt;\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case &#39;taggedWith&#39;:\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === &#39;&#39; || value == null;\n    }\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Small&lt;/span&gt; screen &lt;span class=&quot;hljs-title class_&quot;&gt;IndexTable&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; all &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; its elements\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; a broad example that includes most &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; the elements and props available to index table.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction SmallScreenIndexTableWithAllElementsExample() {\n  const customers = [\n    {\n      id: &#39;3418&#39;,\n      url: &#39;customers/341&#39;,\n      name: &#39;Mae Jemison&#39;,\n      location: &#39;Decatur, USA&#39;,\n      orders: 20,\n      amountSpent: &#39;$2,400&#39;,\n    },\n    {\n      id: &#39;2568&#39;,\n      url: &#39;customers/256&#39;,\n      name: &#39;Ellen Ochoa&#39;,\n      location: &#39;Los Angeles, USA&#39;,\n      orders: 30,\n      amountSpent: &#39;$140&#39;,\n    },\n  ];\n  const resourceName = {\n    singular: &#39;customer&#39;,\n    plural: &#39;customers&#39;,\n  };\n\n  const {selectedResources, allResourcesSelected, handleSelectionChange} =\n    useIndexResourceState(customers);\n  const [taggedWith, setTaggedWith] = useState(&#39;VIP&#39;);\n  const [queryValue, setQueryValue] = useState(null);\n  const [sortValue, setSortValue] = useState(&#39;today&#39;);\n\n  const handleTaggedWithChange = useCallback(\n    (value) =&gt; setTaggedWith(value),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() =&gt; setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() =&gt; setQueryValue(null), []);\n  const handleClearAll = useCallback(() =&gt; {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n  const handleSortChange = useCallback((value) =&gt; setSortValue(value), []);\n\n  const promotedBulkActions = [\n    {\n      content: &#39;Edit customers&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk edit&#39;),\n    },\n  ];\n  const bulkActions = [\n    {\n      content: &#39;Add tags&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk add tags&#39;),\n    },\n    {\n      content: &#39;Remove tags&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk remove tags&#39;),\n    },\n    {\n      content: &#39;Delete customers&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk delete&#39;),\n    },\n  ];\n\n  const filters = [\n    {\n      key: &#39;taggedWith&#39;,\n      label: &#39;Tagged with&#39;,\n      filter: (\n        &lt;TextField\n          label=&quot;Tagged with&quot;\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=&quot;off&quot;\n          labelHidden\n        /&gt;\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: &#39;taggedWith&#39;,\n          label: disambiguateLabel(&#39;taggedWith&#39;, taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  const sortOptions = [\n    {label: &#39;Today&#39;, value: &#39;today&#39;},\n    {label: &#39;Yesterday&#39;, value: &#39;yesterday&#39;},\n    {label: &#39;Last 7 days&#39;, value: &#39;lastWeek&#39;},\n  ];\n\n  const rowMarkup = customers.map(\n    ({id, name, location, orders, amountSpent}, index) =&gt; (\n      &lt;IndexTable.Row\n        id={id}\n        key={id}\n        selected={selectedResources.includes(id)}\n        position={index}\n      &gt;\n        &lt;div style={{padding: &#39;.75rem 1rem&#39;}}&gt;\n          &lt;p&gt;\n            &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n          &lt;/p&gt;\n          &lt;p&gt;{location}&lt;/p&gt;\n          &lt;p&gt;{orders}&lt;/p&gt;\n          &lt;p&gt;{amountSpent}&lt;/p&gt;\n        &lt;/div&gt;\n      &lt;/IndexTable.Row&gt;\n    ),\n  );\n\n  return (\n    &lt;div style={{width: &#39;430px&#39;}}&gt;\n      &lt;Card&gt;\n        &lt;div style={{padding: &#39;16px&#39;, display: &#39;flex&#39;}}&gt;\n          &lt;div style={{flex: 1}}&gt;\n            &lt;Filters\n              queryValue={queryValue}\n              filters={filters}\n              appliedFilters={appliedFilters}\n              onQueryChange={setQueryValue}\n              onQueryClear={handleQueryValueRemove}\n              onClearAll={handleClearAll}\n            /&gt;\n          &lt;/div&gt;\n          &lt;div style={{paddingLeft: &#39;0.25rem&#39;}}&gt;\n            &lt;Select\n              labelInline\n              label=&quot;Sort by&quot;\n              options={sortOptions}\n              value={sortValue}\n              onChange={handleSortChange}\n            /&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;IndexTable\n          resourceName={resourceName}\n          itemCount={customers.length}\n          selectedItemsCount={\n            allResourcesSelected ? &#39;All&#39; : selectedResources.length\n          }\n          onSelectionChange={handleSelectionChange}\n          hasMoreItems\n          condensed\n          bulkActions={bulkActions}\n          promotedBulkActions={promotedBulkActions}\n          headings={[\n            {title: &#39;Name&#39;},\n            {title: &#39;Location&#39;},\n            {title: &#39;Order count&#39;},\n            {title: &#39;Amount spent&#39;},\n          ]}\n        &gt;\n          {rowMarkup}\n        &lt;/IndexTable&gt;\n      &lt;/Card&gt;\n    &lt;/div&gt;\n  );\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case &#39;taggedWith&#39;:\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === &#39;&#39; || value == null;\n    }\n  }\n}\n</code></pre>\n<hr>\n<h2 id=\"build\">Build</h2>\n<p>Using an index table in a project involves combining the following components and subcomponents:</p>\n<ul>\n<li>IndexTable</li>\n<li><a href=\"#index-table-row\">IndexTableRow</a></li>\n<li><a href=\"#index-table-cell\">IndexTableCell</a></li>\n<li><a href=\"https://polaris.shopify.com/components/lists-and-tables/filters\">Filters</a> (optional)</li>\n<li>Pagination component (optional)</li>\n</ul>\n<!-- hint -->\n\n<p>The index table component provides the UI elements for list sorting, filtering, and pagination, but doesn’t provide the logic for these operations. When a sort option is changed, filter added, or second page requested, you’ll need to handle that event (including any network requests) and then update the component with new props.</p>\n</div></div>\n\n<hr>\n<h2 id=\"purpose\">Purpose</h2>\n<p>Shopify is organized around objects that represent merchants businesses, like customers, products, and orders. Each individual order, for example, is given a dedicated page that can be linked to. In Shopify, we call these types of objects <em>resources</em>, and we call the object’s dedicated page its <em>details page</em>.</p>\n<h3 id=\"problem\">Problem</h3>\n<p>Take orders as an example. Merchants may have a lot of them. They need a way to scan their orders, view the different attributes on each order, and find out which ones need action first. In other words, they need a way find an individual order, call up more information about it, and take action on it.</p>\n<h3 id=\"solution\">Solution</h3>\n<p>Index tables function as:</p>\n<ul>\n<li>A content format, presenting a set of individual resources with multiple columns of information for each</li>\n<li>A system for taking action on one or more individual resources</li>\n<li>A way to navigate to an individual resource’s details page</li>\n</ul>\n<p>Because a details page displays all the content and actions for an individual resource, you can think of a resource list as a summary of these details pages. In this way resource lists bridge a middle level in Shopify’s navigation hierarchy.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Index tables should:</p>\n<ul>\n<li>Have items that perform an action when clicked. The action should navigate to the resource’s details page or otherwise provide more detail about the item.</li>\n<li><a href=\"https://polaris.shopify.com/components/lists-and-tables/resource-item\">Customize the content and layout</a> of their items rows to surface information to support merchants’ needs.</li>\n<li>Support sorting if the list can be long, and especially if different merchant tasks benefit from different sort orders.</li>\n<li>Support <a href=\"https://polaris.shopify.com/components/lists-and-tables/filters\">filtering</a> if the list can be long.</li>\n<li>Paginate when the current list contains more than 50 items.</li>\n<li>Use the <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-page\">skeleton page</a> component on initial page load for the rest of the page if the loading prop is true and items are processing.</li>\n</ul>\n<p>Index tables can optionally:</p>\n<ul>\n<li>Provide bulk actions for tasks that are often applied to many list items at once. For example, merchants may want to add the same tag to a large number of products.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>Index tables should:</p>\n<ul>\n<li><p>Identify the type of resource, usually with a heading</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Products</li>\n<li>Showing 50 products</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li><em>No heading</em></li>\n</ul>\n</div></div>\n</li>\n<li><p>Indicate when not all members of a resource are being shown. For a card summarizing and linking to recently purchased products:</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Popular products this week</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>Products</li>\n</ul>\n</div></div>\n</li>\n<li><p>Follow the verb + noun formula for bulk actions</p>\n</li>\n<li><p>Follow the <a href=\"https://polaris.shopify.com/components/lists-and-tables/filters#section-content-guidelines\">content guidelines for filter options and applied filters</a></p>\n</li>\n</ul>\n<hr>\n<p><a name=\"index-table-row\"></a></p>\n<h2 id=\"indextablerow\">IndexTableRow</h2>\n<p>An <code>IndexTableRow</code> is used to render a row representing an item within an <code>IndexTable</code></p>\n<h3 id=\"indextablerow-properties\">IndexTableRow properties</h3>\n<table>\n<thead>\n<tr>\n<th>Prop</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td>string</td>\n<td>A unique identifier for the row</td>\n</tr>\n<tr>\n<td>selected</td>\n<td>boolean</td>\n<td>A boolean property indicating whether the row is selected</td>\n</tr>\n<tr>\n<td>position</td>\n<td>number</td>\n<td>The index position of the row</td>\n</tr>\n<tr>\n<td>subdued</td>\n<td>boolean</td>\n<td>A boolean property indicating whether the row should be subdued</td>\n</tr>\n<tr>\n<td>status</td>\n<td>RowStatus</td>\n<td>A property indicating whether the row should have a status</td>\n</tr>\n</tbody></table>\n<p><a name=\"index-table-cell\"></a></p>\n<h2 id=\"indextablecell\">IndexTableCell</h2>\n<p>An <code>IndexTableCell</code> is used to render a single cell within an <code>IndexTableRow</code></p>\n<h3 id=\"indextablecell-properties\">IndexTableCell properties</h3>\n<table>\n<thead>\n<tr>\n<th>Prop</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>flush</td>\n<td>boolean</td>\n<td>A boolean property indicating whether the cell should remove the default padding</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To create an actionable list of related items that link to details pages, such as a list of customers, use the <a href=\"https://polaris.shopify.com/components/lists-and-tables/resource-list\">resource list component</a></li>\n<li>To present structured data for comparison and analysis, like when helping merchants to gain insights or review analytics, use the <a href=\"https://polaris.shopify.com/components/lists-and-tables/data-table\">data table component</a></li>\n<li>To display a simple list of related content, <a href=\"https://polaris.shopify.com/components/lists-and-tables/list\">use the list component</a></li>\n</ul>\n"
  },
  "InlineError": {
    "name": "Inline error",
    "category": "Forms",
    "platforms": [
      "web",
      "android",
      "ios"
    ],
    "keywords": [
      "InlineError",
      "error message",
      "form error",
      "invalid input",
      "form group"
    ],
    "readme": "<h1 id=\"inline-error\">Inline error</h1>\n<p>Inline errors are brief, in-context messages that tell merchants something went wrong with a single or group of inputs in a form. Use inline errors to help merchants understand why a form input may not be valid and how to fix it.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Inline errors should:</p>\n<ul>\n<li>Be brief</li>\n<li>Be written in sentence case</li>\n<li>Be visible immediately upon a form input that is not valid</li>\n<li>Be removed as soon as the input is valid so merchants can immediately tell they fixed the issue</li>\n<li>Describe specific solutions so merchants can successfully complete their task in the form</li>\n<li>Not be placed out of context of the input or group of inputs they describe</li>\n</ul>\n<p><a href=\"https://polaris.shopify.com/experiences/error-messages#section-form-validation\">Learn more about error message patterns</a></p>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"inline-error-messages\">Inline error messages</h3>\n<p>Since the error message is directly below the source of the problem, the copy only needs to explain why the error happened. Optionally, the message can clarify what to do next or offer a one-click fix.</p>\n<p>Inline error messages should:</p>\n<ul>\n<li>Clearly explain what went wrong, give a next step, or offer a one-click fix</li>\n<li>Be short and concise, no more than a single sentence</li>\n<li>Use <a href=\"https://polaris.shopify.com/content/grammar-and-mechanics\">passive voice</a> so merchants don’t feel like they’re being blamed for the error</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Store name is required</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>You didn’t enter a store name.</li>\n</ul>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"basic-inline-error\">Basic inline error</h3>\n<p>Use when the merchant has entered information that is not valid into multiple fields inside of a form, or needs to be displayed in a non-standard position in the form layout.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">InlineError</span> message=<span class=\"hljs-string\">&quot;Store name is required&quot;</span> fieldID=<span class=\"hljs-string\">&quot;myFieldID&quot;</span> /&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/InlineError/android/default@2x.png\" alt=\"Inline error for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/InlineError/ios/default@2x.png\" alt=\"Inline error for iOS\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To create a list of exceptions that describe a resource, <a href=\"https://polaris.shopify.com/components/lists-and-tables/exception-list\">use the exception list component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<ul>\n<li>Use the required <code>fieldID</code> prop to give the inline error a unique <code>id</code>. This ties the error to a form field using <code>aria-describedby</code> so that it&#39;s conveyed to screen reader users.</li>\n<li>Use the required <code>message</code> prop to provide the text that describes the error.</li>\n<li>The inline error <a href=\"https://polaris.shopify.com/design/icons\">icon</a> helps visually identify the error message for merchants who have difficulty seeing <a href=\"https://polaris.shopify.com/design/colors\">colors</a> or who use settings that remove color from the page.</li>\n</ul>\n<!-- /content-for -->\n"
  },
  "KeyboardAccessories": {
    "name": "Keyboard accessories",
    "category": "Forms",
    "platforms": [
      "android",
      "ios"
    ],
    "keywords": [
      "keyboard",
      "soft",
      "virtual",
      "ios",
      "android"
    ],
    "readme": "<h1 id=\"keyboard-accessories\">Keyboard accessories</h1>\n<p>On iOS and Android, software keyboards appear on the screen when typing. Keyboard accessories allows additional content and actions based on what merchants are doing. For example, when merchants are updating a description and need controls for bolding, italicizing, and underlining.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Keyboard accessories should:</p>\n<ul>\n<li>Have a maximum height of:<ul>\n<li>44pt on iOS</li>\n<li>48dp on Android</li>\n</ul>\n</li>\n<li>Include a horizontally swipeable interaction if there is a lot of content or a large number of actions you need to make available to merchants<ul>\n<li>Provide an easy hint or introduction to make merchants aware of the swipe interaction</li>\n</ul>\n</li>\n<li>Make actions grouped and expandable if possible, in order to reduce visual noise and complexity for merchants</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"keyboard-accessories-with-actions\">Keyboard accessories with actions</h3>\n<!-- example-for: ios, android -->\n\n<p>Use the action accessories to add actions that are relevant to what merchants are entering on the screen.</p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/KeyboardAccessories/android/toolbar@2x.png\" alt=\"Keyboard accessory with actions\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/KeyboardAccessories/ios/toolbar@2x.png\" alt=\"Keyboard accessory with actions\"></p>\n<!-- /content-for -->\n\n<h3 id=\"keyboard-accessories-with-text-field\">Keyboard accessories with text field</h3>\n<!-- example-for: ios, android -->\n\n<p>Use to make message entry easier in messaging and chat-based products.</p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/KeyboardAccessories/android/text-field@2x.png\" alt=\"Keyboard accessory with text field\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/KeyboardAccessories/ios/text-field@2x.png\" alt=\"Keyboard accessory with text field\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To make more actions visible in keyboard accessories, use <a href=\"https://polaris.shopify.com/components/images-and-icons/icon\">the icon component</a> for action labels</li>\n<li>To group actions within keyboard accessories, use <a href=\"https://polaris.shopify.com/components/actions/button-group\">the button group component</a></li>\n<li>For chat-based interfaces, use <a href=\"https://polaris.shopify.com/components/forms/text-field\">the text field component</a> in keyboard accessories</li>\n</ul>\n"
  },
  "KeyboardKey": {
    "name": "Keyboard key",
    "category": "Images and icons",
    "keywords": [
      "KeyboardKey",
      "shortcuts",
      "hotkey",
      "hot key",
      "keyboard shortcuts",
      "keyboard letter",
      "hotkey combinations"
    ],
    "readme": "<h1 id=\"keyboard-key\">Keyboard key</h1>\n<p>Keyboard key is used to educate merchants about keyboard shortcuts.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The keyboard key component should:</p>\n<ul>\n<li>Include a heading to introduce and explain the shortcuts being described when more than one shortcut is listed</li>\n<li>Include an action label to describe what will happen if merchants use the key combination</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"heading\">Heading</h3>\n<p>Headings above the keyboard key should:</p>\n<ul>\n<li>Label the type of keyboard shortcuts being presented</li>\n<li>Follow the content guidelines for <a href=\"https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings\">headings and subheadings</a></li>\n</ul>\n<h3 id=\"shortcut-description\">Shortcut description</h3>\n<p>The shortcut description should describe what action is taken when merchants tap certain keys. When a hotkey combination takes merchants to a location in the interface, the format should be:</p>\n<table>\n<thead>\n<tr>\n<th>Properties</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>children</td>\n<td>string</td>\n<td>The content to display inside the key</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"list-of-keyboard-shortcuts\">List of keyboard shortcuts</h3>\n<p>Use to list a related set of keyboard shortcuts.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">KeyboardKey</span>&gt;<span class=\"hljs-title class_\">Ctrl</span>&lt;/<span class=\"hljs-title class_\">KeyboardKey</span>&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To add a tooltip for a button with an associated keyboard shortcut, <a href=\"https://polaris.shopify.com/components/tooltip\">use the tooltip component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>The text of the keyboard key component is read by screen readers, but the visual formatting isn’t conveyed. Ensure that merchants are able to understand information about keyboard shortcuts without relying on the visual style of the component.</p>\n<!-- usageblock -->\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Pair lists of keyboard shortcut information with a heading that describes the section (“Keyboard shortcuts”).</li>\n<li>Provide inline keyboard instructions with context.</li>\n</ul>\n<p><code><pre><span class=\"hljs-variable constant_\">JSX</span>\n<span class=\"hljs-title class_\">Press</span> the &lt;<span class=\"hljs-title class_\">KeyboardKey</span>&gt;<span class=\"hljs-title class_\">Ctrl</span>&lt;/<span class=\"hljs-title class_\">KeyboardKey</span>&gt; key.\n</pre></code></p>\n<h4 id=\"dont\">Don&#39;t</h4>\n<ul>\n<li>Use the keyboard key component alone to convey keyboard instructions.</li>\n</ul>\n<p><code><pre><span class=\"hljs-variable constant_\">JSX</span>\n<span class=\"hljs-title class_\">Use</span> &lt;<span class=\"hljs-title class_\">KeyboardKey</span>&gt;<span class=\"hljs-title class_\">Ctrl</span>&lt;/<span class=\"hljs-title class_\">KeyboardKey</span>&gt;\n</pre></code></p>\n<!-- end -->\n\n<!-- /content-for -->\n"
  },
  "Layout": {
    "name": "Layout",
    "category": "Structure",
    "keywords": [
      "one column",
      "two column",
      "three column",
      "column",
      "annotated",
      "page",
      "column layouts",
      "containers",
      "full width containers",
      "secondary sections",
      "setting page",
      "grouped sections",
      "annotated sections"
    ],
    "readme": "<h1 id=\"layout\">Layout</h1>\n<p>The layout component is used to create the main layout on a page. Layouts sections come in three main configurations: one-column, two-column, and annotated. One and two column layouts can be combined in the same page. Annotated layouts should be used on their own and only on settings pages.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The layout component should:</p>\n<ul>\n<li>Use sections with white backgrounds for primary content and sections with grey backgrounds for secondary content that is less important</li>\n<li>Center cards on the background when there is no secondary card on the page to stop the content from becoming too wide</li>\n<li>Group similar concepts and actions together in cards</li>\n<li>Separate different cards using a full-width divider</li>\n<li>Structure primary/secondary, two-column layouts so the primary ⅔ section is used for main information and the secondary ⅓ section is used for information that might not be used as often but remains helpful for context or secondary tasks</li>\n<li>Use equal-width layouts with two or more columns when each layout section has the same importance</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>The content that appears in the layout component comes from cards and annotated sections.</p>\n<h3 id=\"cards\">Cards</h3>\n<p>Content from cards should follow the content guidelines for <a href=\"https://polaris.shopify.com/components/structure/card#section-content-guidelines\">cards</a>.</p>\n<h3 id=\"annotated-section-titles\">Annotated section titles</h3>\n<p>Annotated section titles should follow the content guidelines for <a href=\"https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings\">headings and subheadings</a>.</p>\n<h3 id=\"annotated-section-descriptions\">Annotated section descriptions</h3>\n<p>Annotated section descriptions should:</p>\n<ul>\n<li>Be used if the explanation or purpose of the associated cards isn’t clear</li>\n<li>Provide instructions for any choices merchants need to make, or explain the purpose of the section</li>\n<li>Be short, no more than 1–3 sentences</li>\n<li>Direct merchants to more content in the Help Center with “Learn more” links</li>\n<li>Not repeat the section title</li>\n<li>Use complete sentences and regular punctuation</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"one-column-layout\">One-column layout</h3>\n<p>Use to have a single section on its own in a full-width container. Use for simple pages and as a container for banners and other full-width content.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Layout</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout.Section</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Online store dashboard&quot;</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>View a summary of your online store’s performance.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout.Section</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Layout</span>&gt;\n</pre></code></p>\n<h3 id=\"two-columns-with-primary-and-secondary-widths\">Two columns with primary and secondary widths</h3>\n<p>Use to follow a normal section with a secondary section to create a 2/3 + 1/3 layout on detail pages (such as individual product or order pages). Can also be used on any page that needs to structure a lot of content. This layout stacks the columns on small screens.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Layout</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout.Section</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Order details&quot;</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>View a summary of your order.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout.Section</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout.Section</span> <span class=\"hljs-attr\">secondary</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Tags&quot;</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Add tags to your order.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout.Section</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Layout</span>&gt;\n</pre></code></p>\n<h3 id=\"two-columns-with-equal-width\">Two columns with equal width</h3>\n<p>Use to create a ½ + ½ layout. Can be used to display content of equal importance. This layout will stack the columns on small screens.</p>\n<pre><code class=\"language-jsx\">&lt;Layout&gt;\n  &lt;Layout.Section oneHalf&gt;\n    &lt;Card title=&quot;Florida&quot; actions={[{content: &#39;Manage&#39;}]}&gt;\n      &lt;Card.Section&gt;\n        &lt;TextStyle variation=&quot;subdued&quot;&gt;455 units available&lt;/TextStyle&gt;\n      &lt;/Card.Section&gt;\n      &lt;Card.Section title=&quot;Items&quot;&gt;\n        &lt;ResourceList\n          resourceName={{singular: &#39;product&#39;, plural: &#39;products&#39;}}\n          items={[\n            {\n              id: 341,\n              url: &#39;produdcts/341&#39;,\n              name: &#39;Black &amp; orange scarf&#39;,\n              sku: &#39;9234194023&#39;,\n              quantity: &#39;254&#39;,\n              media: (\n                &lt;Thumbnail\n                  source=&quot;https://burst.shopifycdn.com/photos/black-orange-stripes_373x@2x.jpg&quot;\n                  alt=&quot;Black orange scarf&quot;\n                /&gt;\n              ),\n            },\n            {\n              id: 256,\n              url: &#39;produdcts/256&#39;,\n              name: &#39;Tucan scarf&#39;,\n              sku: &#39;9234194010&#39;,\n              quantity: &#39;201&#39;,\n              media: (\n                &lt;Thumbnail\n                  source=&quot;https://burst.shopifycdn.com/photos/tucan-scarf_373x@2x.jpg&quot;\n                  alt=&quot;Tucan scarf&quot;\n                /&gt;\n              ),\n            },\n          ]}\n          renderItem={(item) =&gt; {\n            const {id, url, name, sku, media, quantity} = item;\n\n            return (\n              &lt;ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              &gt;\n                &lt;h3&gt;\n                  &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n                &lt;/h3&gt;\n                &lt;div&gt;SKU: {sku}&lt;/div&gt;\n                &lt;div&gt;{quantity} available&lt;/div&gt;\n              &lt;/ResourceList.Item&gt;\n            );\n          }}\n        /&gt;\n      &lt;/Card.Section&gt;\n    &lt;/Card&gt;\n  &lt;/Layout.Section&gt;\n  &lt;Layout.Section oneHalf&gt;\n    &lt;Card title=&quot;Nevada&quot; actions={[{content: &#39;Manage&#39;}]}&gt;\n      &lt;Card.Section&gt;\n        &lt;TextStyle variation=&quot;subdued&quot;&gt;301 units available&lt;/TextStyle&gt;\n      &lt;/Card.Section&gt;\n      &lt;Card.Section title=&quot;Items&quot;&gt;\n        &lt;ResourceList\n          resourceName={{singular: &#39;product&#39;, plural: &#39;products&#39;}}\n          items={[\n            {\n              id: 342,\n              url: &#39;produdcts/342&#39;,\n              name: &#39;Black &amp; orange scarf&#39;,\n              sku: &#39;9234194023&#39;,\n              quantity: &#39;100&#39;,\n              media: (\n                &lt;Thumbnail\n                  source=&quot;https://burst.shopifycdn.com/photos/black-orange-stripes_373x@2x.jpg&quot;\n                  alt=&quot;Black orange scarf&quot;\n                /&gt;\n              ),\n            },\n            {\n              id: 257,\n              url: &#39;produdcts/257&#39;,\n              name: &#39;Tucan scarf&#39;,\n              sku: &#39;9234194010&#39;,\n              quantity: &#39;201&#39;,\n              media: (\n                &lt;Thumbnail\n                  source=&quot;https://burst.shopifycdn.com/photos/tucan-scarf_373x@2x.jpg&quot;\n                  alt=&quot;Tucan scarf&quot;\n                /&gt;\n              ),\n            },\n          ]}\n          renderItem={(item) =&gt; {\n            const {id, url, name, sku, media, quantity} = item;\n\n            return (\n              &lt;ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              &gt;\n                &lt;h3&gt;\n                  &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n                &lt;/h3&gt;\n                &lt;div&gt;SKU: {sku}&lt;/div&gt;\n                &lt;div&gt;{quantity} available&lt;/div&gt;\n              &lt;/ResourceList.Item&gt;\n            );\n          }}\n        /&gt;\n      &lt;/Card.Section&gt;\n    &lt;/Card&gt;\n  &lt;/Layout.Section&gt;\n&lt;/Layout&gt;\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Three&lt;/span&gt; columns &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; equal width\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to create a ⅓ + ⅓ + ⅓ layout. &lt;span class=&quot;hljs-title class_&quot;&gt;Can&lt;/span&gt; be used to display content &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; equal importance. &lt;span class=&quot;hljs-title class_&quot;&gt;This&lt;/span&gt; layout will stack the columns on small screens.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\n&lt;Layout&gt;\n  &lt;Layout.Section oneThird&gt;\n    &lt;Card title=&quot;Florida&quot; actions={[{content: &#39;Manage&#39;}]}&gt;\n      &lt;Card.Section&gt;\n        &lt;TextStyle variation=&quot;subdued&quot;&gt;455 units available&lt;/TextStyle&gt;\n      &lt;/Card.Section&gt;\n      &lt;Card.Section title=&quot;Items&quot;&gt;\n        &lt;ResourceList\n          resourceName={{singular: &#39;product&#39;, plural: &#39;products&#39;}}\n          items={[\n            {\n              id: 343,\n              url: &#39;produdcts/343&#39;,\n              name: &#39;Black &amp; orange scarf&#39;,\n              sku: &#39;9234194023&#39;,\n              quantity: &#39;254&#39;,\n              media: (\n                &lt;Thumbnail\n                  source=&quot;https://burst.shopifycdn.com/photos/black-orange-stripes_373x@2x.jpg&quot;\n                  alt=&quot;Black orange scarf&quot;\n                /&gt;\n              ),\n            },\n            {\n              id: 258,\n              url: &#39;produdcts/258&#39;,\n              name: &#39;Tucan scarf&#39;,\n              sku: &#39;9234194010&#39;,\n              quantity: &#39;201&#39;,\n              media: (\n                &lt;Thumbnail\n                  source=&quot;https://burst.shopifycdn.com/photos/tucan-scarf_373x@2x.jpg&quot;\n                  alt=&quot;Tucan scarf&quot;\n                /&gt;\n              ),\n            },\n          ]}\n          renderItem={(item) =&gt; {\n            const {id, url, name, sku, media, quantity} = item;\n\n            return (\n              &lt;ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              &gt;\n                &lt;h3&gt;\n                  &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n                &lt;/h3&gt;\n                &lt;div&gt;SKU: {sku}&lt;/div&gt;\n                &lt;div&gt;{quantity} available&lt;/div&gt;\n              &lt;/ResourceList.Item&gt;\n            );\n          }}\n        /&gt;\n      &lt;/Card.Section&gt;\n    &lt;/Card&gt;\n  &lt;/Layout.Section&gt;\n  &lt;Layout.Section oneThird&gt;\n    &lt;Card title=&quot;Nevada&quot; actions={[{content: &#39;Manage&#39;}]}&gt;\n      &lt;Card.Section&gt;\n        &lt;TextStyle variation=&quot;subdued&quot;&gt;301 units available&lt;/TextStyle&gt;\n      &lt;/Card.Section&gt;\n      &lt;Card.Section title=&quot;Items&quot;&gt;\n        &lt;ResourceList\n          resourceName={{singular: &#39;product&#39;, plural: &#39;products&#39;}}\n          items={[\n            {\n              id: 344,\n              url: &#39;produdcts/344&#39;,\n              name: &#39;Black &amp; orange scarf&#39;,\n              sku: &#39;9234194023&#39;,\n              quantity: &#39;100&#39;,\n              media: (\n                &lt;Thumbnail\n                  source=&quot;https://burst.shopifycdn.com/photos/black-orange-stripes_373x@2x.jpg&quot;\n                  alt=&quot;Black orange scarf&quot;\n                /&gt;\n              ),\n            },\n            {\n              id: 259,\n              url: &#39;produdcts/259&#39;,\n              name: &#39;Tucan scarf&#39;,\n              sku: &#39;9234194010&#39;,\n              quantity: &#39;201&#39;,\n              media: (\n                &lt;Thumbnail\n                  source=&quot;https://burst.shopifycdn.com/photos/tucan-scarf_373x@2x.jpg&quot;\n                  alt=&quot;Tucan scarf&quot;\n                /&gt;\n              ),\n            },\n          ]}\n          renderItem={(item) =&gt; {\n            const {id, url, name, sku, media, quantity} = item;\n\n            return (\n              &lt;ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              &gt;\n                &lt;h3&gt;\n                  &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n                &lt;/h3&gt;\n                &lt;div&gt;SKU: {sku}&lt;/div&gt;\n                &lt;div&gt;{quantity} available&lt;/div&gt;\n              &lt;/ResourceList.Item&gt;\n            );\n          }}\n        /&gt;\n      &lt;/Card.Section&gt;\n    &lt;/Card&gt;\n  &lt;/Layout.Section&gt;\n  &lt;Layout.Section oneThird&gt;\n    &lt;Card title=&quot;Minneapolis&quot; actions={[{content: &#39;Manage&#39;}]}&gt;\n      &lt;Card.Section&gt;\n        &lt;TextStyle variation=&quot;subdued&quot;&gt;1931 units available&lt;/TextStyle&gt;\n      &lt;/Card.Section&gt;\n      &lt;Card.Section title=&quot;Items&quot;&gt;\n        &lt;ResourceList\n          resourceName={{singular: &#39;product&#39;, plural: &#39;products&#39;}}\n          items={[\n            {\n              id: 345,\n              url: &#39;produdcts/345&#39;,\n              name: &#39;Black &amp; orange scarf&#39;,\n              sku: &#39;9234194023&#39;,\n              quantity: &#39;1230&#39;,\n              media: (\n                &lt;Thumbnail\n                  source=&quot;https://burst.shopifycdn.com/photos/black-orange-stripes_373x@2x.jpg&quot;\n                  alt=&quot;Black orange scarf&quot;\n                /&gt;\n              ),\n            },\n            {\n              id: 260,\n              url: &#39;produdcts/260&#39;,\n              name: &#39;Tucan scarf&#39;,\n              sku: &#39;9234194010&#39;,\n              quantity: &#39;701&#39;,\n              media: (\n                &lt;Thumbnail\n                  source=&quot;https://burst.shopifycdn.com/photos/tucan-scarf_373x@2x.jpg&quot;\n                  alt=&quot;Tucan scarf&quot;\n                /&gt;\n              ),\n            },\n          ]}\n          renderItem={(item) =&gt; {\n            const {id, url, name, sku, media, quantity} = item;\n\n            return (\n              &lt;ResourceList.Item\n                id={id}\n                url={url}\n                media={media}\n                accessibilityLabel={`View details for ${name}`}\n              &gt;\n                &lt;h3&gt;\n                  &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n                &lt;/h3&gt;\n                &lt;div&gt;SKU: {sku}&lt;/div&gt;\n                &lt;div&gt;{quantity} available&lt;/div&gt;\n              &lt;/ResourceList.Item&gt;\n            );\n          }}\n        /&gt;\n      &lt;/Card.Section&gt;\n    &lt;/Card&gt;\n  &lt;/Layout.Section&gt;\n&lt;/Layout&gt;\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Annotated&lt;/span&gt; layout\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; settings pages. &lt;span class=&quot;hljs-title class_&quot;&gt;When&lt;/span&gt; settings are grouped thematically &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; annotated sections, the title and description on each section helps merchants quickly find the setting they’re looking &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\n&lt;Layout&gt;\n  &lt;Layout.AnnotatedSection\n    id=&quot;storeDetails&quot;\n    title=&quot;Store details&quot;\n    description=&quot;Shopify and your customers will use this information to contact you.&quot;\n  &gt;\n    &lt;Card sectioned&gt;\n      &lt;FormLayout&gt;\n        &lt;TextField label=&quot;Store name&quot; onChange={() =&gt; {}} autoComplete=&quot;off&quot; /&gt;\n        &lt;TextField\n          type=&quot;email&quot;\n          label=&quot;Account email&quot;\n          onChange={() =&gt; {}}\n          autoComplete=&quot;email&quot;\n        /&gt;\n      &lt;/FormLayout&gt;\n    &lt;/Card&gt;\n  &lt;/Layout.AnnotatedSection&gt;\n&lt;/Layout&gt;\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Annotated&lt;/span&gt; layout &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-title class_&quot;&gt;Banner&lt;/span&gt; at the top\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; settings pages that need a banner or other content at the top.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\n&lt;Layout&gt;\n  &lt;Layout.Section&gt;\n    &lt;Banner title=&quot;Order archived&quot; onDismiss={() =&gt; {}}&gt;\n      &lt;p&gt;This order was archived on March 7, 2017 at 3:12pm EDT.&lt;/p&gt;\n    &lt;/Banner&gt;\n  &lt;/Layout.Section&gt;\n  &lt;Layout.AnnotatedSection\n    id=&quot;storeDetails&quot;\n    title=&quot;Store details&quot;\n    description=&quot;Shopify and your customers will use this information to contact you.&quot;\n  &gt;\n    &lt;Card sectioned&gt;\n      &lt;FormLayout&gt;\n        &lt;TextField label=&quot;Store name&quot; onChange={() =&gt; {}} autoComplete=&quot;off&quot; /&gt;\n        &lt;TextField\n          type=&quot;email&quot;\n          label=&quot;Account email&quot;\n          onChange={() =&gt; {}}\n          autoComplete=&quot;email&quot;\n        /&gt;\n      &lt;/FormLayout&gt;\n    &lt;/Card&gt;\n  &lt;/Layout.AnnotatedSection&gt;\n&lt;/Layout&gt;\n</code></pre>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To visually group content in a layout section, <a href=\"https://polaris.shopify.com/components/structure/card\">use the card component</a></li>\n<li>To lay out a set of smaller components in a row, <a href=\"https://polaris.shopify.com/components/structure/stack\">use the stack component</a></li>\n<li>To lay out form fields, <a href=\"https://polaris.shopify.com/components/forms/form-layout\">use the form layout component</a></li>\n</ul>\n"
  },
  "Link": {
    "name": "Link",
    "category": "Navigation",
    "keywords": [
      "URL",
      "linklist",
      "link list",
      "embed",
      "actions",
      "pathways",
      "deep link",
      "text link",
      "plain button",
      "plain call to action",
      "plain cta",
      "embeddd action",
      "action in text",
      "hyperlink",
      "secondary actions",
      "secondary cta",
      "secondary call to action"
    ],
    "readme": "<h1 id=\"link\">Link</h1>\n<p>Links take users to another place, and usually appear within or directly following a sentence.</p>\n<p>For actions that aren’t related to navigation, use the <a href=\"https://polaris.shopify.com/components/actions/button\">button component</a>.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<h3 id=\"buttons-versus-links\">Buttons versus links</h3>\n<p>Links are used primarily for navigation, and usually appear within or directly following a sentence.</p>\n<p>Buttons are used primarily for actions, such as “Add”, “Close”, “Cancel”, or “Save”. Plain buttons, which look similar to links, are used for less important or less commonly used actions, such as “view shipping settings”.</p>\n<p>The HTML that renders for the <code>Button</code> and <code>Link</code> components carries meaning. Using these components intentionally and consistently results in:</p>\n<ul>\n<li>a more inclusive experience for assistive technology users</li>\n<li>a more cohesive visual experience for sighted users</li>\n<li>products that are easier to maintain at scale</li>\n</ul>\n<h3 id=\"unstyled-links\">Unstyled links</h3>\n<p>If the existing link styles don’t meet the needs of your project, then use the <code>UnstyledLink</code> component to create a custom link style.</p>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>The link component should follow the content guidelines for <a href=\"https://polaris.shopify.com/content/actionable-language#section-links\">links</a>.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-links\">Default links</h3>\n<p>Use for text links in larger spans of text.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Link</span> url=<span class=\"hljs-string\">&quot;<a href=\"https://help.shopify.com/manual\">https://help.shopify.com/manual</a>&quot;</span>&gt;fulfilling orders&lt;/<span class=\"hljs-title class_\">Link</span>&gt;\n</pre></code></p>\n<h3 id=\"monochrome-link\">Monochrome link</h3>\n<p>Use for text links that are the same color as the surrounding text.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Link</span> monochrome url=<span class=\"hljs-string\">&quot;<a href=\"https://help.shopify.com/manual\">https://help.shopify.com/manual</a>&quot;</span>&gt;\n  fulfilling orders\n&lt;/<span class=\"hljs-title class_\">Link</span>&gt;\n</pre></code></p>\n<h3 id=\"monochrome-link-in-a-banner\">Monochrome link in a banner</h3>\n<p>Monochrome styles will be applied to links rendered within a <code>Banner</code>.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Banner</span>&gt;\n  <span class=\"hljs-title class_\">Learn</span> more about{<span class=\"hljs-string\">&#x27; &#x27;</span>}\n  &lt;<span class=\"hljs-title class_\">Link</span> url=<span class=\"hljs-string\">&quot;<a href=\"https://help.shopify.com/manual\">https://help.shopify.com/manual</a>&quot;</span>&gt;fulfilling orders&lt;/<span class=\"hljs-title class_\">Link</span>&gt;\n&lt;/<span class=\"hljs-title class_\">Banner</span>&gt;\n</pre></code></p>\n<h3 id=\"external-link\">External link</h3>\n<p>Use for text links that should open in a new browser tab (or window, depending on the merchant’s browser settings). Use this only when opening a page in the same tab might disrupt the merchant’s workflow.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Link</span> url=<span class=\"hljs-string\">&quot;<a href=\"https://help.shopify.com/manual\">https://help.shopify.com/manual</a>&quot;</span> external&gt;\n  <span class=\"hljs-title class_\">Shopify</span> <span class=\"hljs-title class_\">Help</span> <span class=\"hljs-title class_\">Center</span>\n&lt;/<span class=\"hljs-title class_\">Link</span>&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>For actions that don’t appear within or directly following a sentence, use the <a href=\"https://polaris.shopify.com/components/actions/button\">button component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: web -->\n\n<p>Use the <code>url</code> prop to give the link component a valid <code>href</code> value. This allows the element to be identified as a link to assistive technologies and gives it default keyboard support.</p>\n<p>The Link component is underlined to give interactive elements a shape. This allows links to not rely on color from being the only way users can tell if an element is interactive.</p>\n<!-- usageblock -->\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Remove the link underline when link is repeated in a list or navigation</li>\n<li>Use underlines for links when used inline content</li>\n</ul>\n<p><code><pre>\n&lt;p&gt;\n  <span class=\"hljs-title class_\">Learn</span> more about &lt;<span class=\"hljs-title class_\">Link</span>&gt;<span class=\"hljs-title class_\">Fraud</span> <span class=\"hljs-title class_\">Protect</span>&lt;/<span class=\"hljs-title class_\">Link</span>&gt;.\n&lt;/p&gt;\n</pre></code></p>\n<h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>Remove underlines when the user cannot determine it&#39;s interactivity</li>\n</ul>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Link</span> removeUnderline&gt;<span class=\"hljs-title class_\">Learn</span> more about <span class=\"hljs-title class_\">Fraud</span> <span class=\"hljs-title class_\">Protect</span>.&lt;/<span class=\"hljs-title class_\">Link</span>&gt;\n</pre></code></p>\n<!-- end -->\n\n<h3 id=\"submitting-data\">Submitting data</h3>\n<p>Merchants generally expect links to navigate, and not to submit data or take action. If you need a component that doesn’t have a URL associated with it, then use the <a href=\"https://polaris.shopify.com/components/actions/button\">button component</a> instead.</p>\n<h3 id=\"labeling\">Labeling</h3>\n<p>Give links text that clearly describes their purpose.</p>\n<p>The <code>accessibilityLabel</code> prop adds an <code>aria-label</code> attribute to the link, which can be accessed by assistive technologies like screen readers. Typically, this label text replaces the visible text on the link for merchants who use assistive technology.</p>\n<p>To provide consistency and clarity:</p>\n<ul>\n<li>Use the same text for links that navigate to the same content</li>\n<li>Use different text for links that navigate to different content</li>\n</ul>\n<!-- usageblock -->\n\n<h4 id=\"do-1\">Do</h4>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Link</span> url=<span class=\"hljs-string\">&quot;<a href=\"https://help.shopify.com/manual\">https://help.shopify.com/manual</a>&quot;</span>&gt;fulfilling orders&lt;/<span class=\"hljs-title class_\">Link</span>&gt;\n</pre></code></p>\n<h4 id=\"dont-1\">Don’t</h4>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Link</span>&gt;fulfilling orders&lt;/<span class=\"hljs-title class_\">Link</span>&gt;\n</pre></code></p>\n<!-- end -->\n\n<!-- usageblock -->\n\n<h4 id=\"do-2\">Do</h4>\n<p><code><pre>\n<span class=\"hljs-comment\">/* Somewhere in the code: */</span>\n&lt;<span class=\"hljs-title class_\">Link</span> url=<span class=\"hljs-string\">&quot;<a href=\"https://help.shopify.com/manual\">https://help.shopify.com/manual</a>&quot;</span>&gt;fulfilling orders&lt;/<span class=\"hljs-title class_\">Link</span>&gt;</p>\n<p><span class=\"hljs-comment\">/* Elsewhere in the code: */</span>\n<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">&quot;<a href=\"https://help.shopify.com/manual\">https://help.shopify.com/manual</a>&quot;</span>&gt;</span>fulfilling orders<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span></span>\n</pre></code></p>\n<h4 id=\"dont-2\">Don’t</h4>\n<p><code><pre>\n<span class=\"hljs-comment\">/* Somewhere in the code: */</span>\n&lt;<span class=\"hljs-title class_\">Link</span> url=<span class=\"hljs-string\">&quot;<a href=\"https://help.shopify.com/manual\">https://help.shopify.com/manual</a>&quot;</span>&gt;fulfilling orders&lt;/<span class=\"hljs-title class_\">Link</span>&gt;</p>\n<p><span class=\"hljs-comment\">/* Elsewhere in the code: */</span>\n<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">&quot;<a href=\"https://help.shopify.com/manual\">https://help.shopify.com/manual</a>&quot;</span>&gt;</span>order fulfillment section<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span></span>\n</pre></code></p>\n<!-- end -->\n\n<h4 id=\"external-links\">External links</h4>\n<p>The <code>external</code> prop adds an icon and a notification that the link opens a new tab. Use the <code>external</code> prop to make the link open in a new tab (or window, depending on the merchant’s browser settings). Open a page in a new tab only when opening a page in the same tab might disrupt the merchant’s workflow.</p>\n<h3 id=\"keyboard-support\">Keyboard support</h3>\n<p>Links use browser defaults for keyboard interaction.</p>\n<ul>\n<li>Give links keyboard focus with the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)</li>\n<li>Activate links with the <kbd>enter</kbd>/<kbd>return</kbd> key</li>\n</ul>\n<!-- /content-for -->\n"
  },
  "List": {
    "name": "List",
    "category": "Lists and tables",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "bulleted lists",
      "numbered lists",
      "icon lists",
      "list items",
      "text lists",
      "text-only lists",
      "ios",
      "android"
    ],
    "readme": "<h1 id=\"list\">List</h1>\n<p>Lists display a set of related text-only content. Each list item begins with a bullet or a number.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Lists should:</p>\n<ul>\n<li>Break up chunks of related content to make the information easier for\nmerchants to scan</li>\n<li>Be phrased consistently (try to start each item with a noun or a\nverb and be consistent with each item)</li>\n<li>Not be used for lists where the entire item represents an action</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"list-items\">List items</h3>\n<p>Every item in a list should:</p>\n<ul>\n<li>Start with a capital letter</li>\n<li>Not use commas or semicolons at the end of each line</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Red</li>\n<li>Yellow</li>\n<li>Blue</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>Red;</li>\n<li>Yellow;</li>\n<li>Blue.</li>\n</ul>\n</div></div>\n\n<ul>\n<li>Be written in sentence case</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Item one</li>\n<li>Item two</li>\n<li>Item three</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>Item One</li>\n<li>Item Two</li>\n<li>Item Three</li>\n</ul>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"bulleted-list\">Bulleted list</h3>\n<p>Use for a text-only list of related items that don’t need to be in a specific order and don’t require an icon or other indicator.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">List</span> type=<span class=\"hljs-string\">&quot;bullet&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>Yellow shirt<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>Red shirt<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>Green shirt<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">List</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/List/android/bullets@2x.png\" alt=\"Bulleted list on Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/List/ios/bullets@2x.png\" alt=\"Bulleted list on iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"numbered-list\">Numbered list</h3>\n<p>Use for a text-only list of related items when an inherent order, priority, or sequence needs to be communicated.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">List</span> type=<span class=\"hljs-string\">&quot;number&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>First item<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>Second item<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span>&gt;</span>Third Item<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">List</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/List/android/numbered@2x.png\" alt=\"Numbered list on Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/List/ios/numbered@2x.png\" alt=\"Numbered list on iOS\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To create a list of checkboxes or radio buttons, <a href=\"https://polaris.shopify.com/components/forms/choice-list\">use the choice list component</a></li>\n<li>To present a collection of objects of the same type such as customers, products, or orders, <a href=\"https://polaris.shopify.com/components/lists-and-tables/resource-list\">use the resource list component</a></li>\n<li>When text labels for each item are useful for describing the content, <a href=\"https://polaris.shopify.com/components/lists-and-tables/description-list\">use the Description List component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>The list component outputs list items (<code>&lt;li&gt;</code>) inside a list wrapper (<code>&lt;ul&gt;</code> for bullet lists or <code>&lt;ol&gt;</code> for numbered lists). By default, list items are conveyed as a group of related elements to assistive technology users.</p>\n<p>To group items for layout only, consider using the <a href=\"https://polaris.shopify.com/components/structure/stack\">stack component</a>.</p>\n<!-- /content-for -->\n"
  },
  "Listbox": {
    "name": "Listbox",
    "category": "Lists and tables",
    "keywords": [
      "list",
      "listbox",
      "list box",
      "interactive list"
    ],
    "readme": "<h1 id=\"listbox\">Listbox</h1>\n<p>A Listbox is a vertical list of interactive options, with room for icons, descriptions, and other elements.</p>\n<hr>\n<h2 id=\"anatomy\">Anatomy</h2>\n<p><img src=\"/images-from-old-styleguide/components/Listbox/listbox-anatomy.png\" alt=\"A diagram of the Listbox component showing the smaller primitive components it can be composed of.\"></p>\n<p>A listbox can be composed of:</p>\n<ol>\n<li><strong>Options:</strong> The individual options inside the Listbox that merchants can select or deselect.</li>\n<li><strong>Dividers:</strong> Placed between items and are useful in complex lists when there’s a lot of information for the merchant to parse.</li>\n<li><strong>Section headers:</strong> Used at the begining of a section when it’s necessary to call out the content being displayed. In most cases, the surrounding context should be enough for the merchant to understand the information in the list.</li>\n</ol>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Listboxes should:</p>\n<ul>\n<li>Be clearly labeled so it’s noticeable to the merchant what type of options will be available</li>\n<li>Limit the number of options displayed at once</li>\n<li>Indicate a loading state to the merchant while option data is being populated</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"option-lists\">Option lists</h3>\n<p>Each item in a <code>Listbox</code> should be clear and descriptive.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Traffic referrer source</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>Source</li>\n</ul>\n</div></div>\n\n<h2 id=\"patterns-that-use-listbox\">Patterns that use <code>Listbox</code></h2>\n<p>Location picker</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"basic-listbox\">Basic Listbox</h3>\n<p>Basic implementation of a control element used to let merchants select options</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">BaseListboxExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Listbox</span> <span class=\"hljs-attr\">accessibilityLabel</span>=<span class=\"hljs-string\">&quot;Basic Listbox example&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Listbox.Option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;UniqueValue-1&quot;</span>&gt;</span>Item 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Listbox.Option</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Listbox.Option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;UniqueValue-2&quot;</span>&gt;</span>Item 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Listbox.Option</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Listbox.Option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;UniqueValue-3&quot;</span>&gt;</span>Item 3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Listbox.Option</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Listbox</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"listbox-with-loading\">Listbox with Loading</h3>\n<p>Implementation of a control element showing a loading indicator to let merchants know more options are being loaded</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ListboxWithLoadingExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Listbox</span> <span class=\"hljs-attr\">accessibilityLabel</span>=<span class=\"hljs-string\">&quot;Listbox with loading example&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Listbox.Option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;UniqueValue-1&quot;</span>&gt;</span>Item 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Listbox.Option</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Listbox.Option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;UniqueValue-2&quot;</span>&gt;</span>Item 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Listbox.Option</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Listbox.Option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;UniqueValue-3&quot;</span>&gt;</span>Item 3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Listbox.Option</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Listbox.Loading</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Listbox</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"listbox-with-action\">Listbox with Action</h3>\n<p>Implementation of a control element used to let merchants take an action</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ListboxWithActionExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Listbox</span> <span class=\"hljs-attr\">accessibilityLabel</span>=<span class=\"hljs-string\">&quot;Listbox with Action example&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Listbox.Option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;UniqueValue-1&quot;</span>&gt;</span>Item 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Listbox.Option</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Listbox.Option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;UniqueValue-2&quot;</span> <span class=\"hljs-attr\">divider</span>&gt;</span>\n        Item 2\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Listbox.Option</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Listbox.Action</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;ActionValue&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack</span> <span class=\"hljs-attr\">spacing</span>=<span class=\"hljs-string\">&quot;tight&quot;</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{CirclePlusMinor}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&quot;base&quot;</span> /&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Add item<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Listbox.Action</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Listbox</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"listbox-with-custom-element\">Listbox with custom element</h3>\n<p>Implementation of a control with custom rendering of options</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ListboxWithCustomElementExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Listbox</span> <span class=\"hljs-attr\">accessibilityLabel</span>=<span class=\"hljs-string\">&quot;Listbox with custom element example&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Listbox.Action</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;ActionValue&quot;</span> <span class=\"hljs-attr\">divider</span>&gt;</span>\n        Add item\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Listbox.Action</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Listbox.Option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;UniqueValue-1&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Item 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Listbox.Option</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Listbox.Option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;UniqueValue-2&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Item 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Listbox.Option</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Listbox.Option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;UniqueValue-3&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Item 3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Listbox.Option</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Listbox.Loading</span> <span class=\"hljs-attr\">accessibilityLabel</span>=<span class=\"hljs-string\">&quot;items are loading&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Listbox</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>For a text field and popover container, <a href=\"https://polaris.shopify.com/components/forms/combobox\">use the combobox component</a></li>\n<li><a href=\"https://polaris.shopify.com/components/forms/autocomplete\">Autocomplete</a> can be used as a convenience wrapper in lieu of Combobox and Listbox.</li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<h3 id=\"structure\">Structure</h3>\n<p>The <code>Listbox</code> component is based on the <a href=\"https://www.w3.org/TR/wai-aria-practices-1.2/#Listbox\">Aria 1.2 Listbox pattern</a>.</p>\n<p>It is important to not present interactive elements inside of list box options as they can interfere with navigation\nfor assistive technology users.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Use labels</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>Use interactive elements inside the list</li>\n</ul>\n</div></div>\n\n<h3 id=\"keyboard-support\">Keyboard support</h3>\n<ul>\n<li>Access the list of options with the up and down arrow keys</li>\n<li>Select an option that has focus with the <kbd>enter</kbd>/<kbd>return</kbd> key</li>\n</ul>\n<!-- /content-for -->\n"
  },
  "Loading": {
    "name": "Loading",
    "category": "Feedback indicators",
    "keywords": [
      "spinner",
      "loader",
      "loading",
      "loading bar"
    ],
    "readme": "<h1 id=\"loading\">Loading</h1>\n<p>The loading component is used to indicate to merchants that a page is loading or an upload is processing.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-loading\">Default loading</h3>\n<p>Use to indicate that the page is loading.</p>\n<p><code><pre>\n&lt;div style={{<span class=\"hljs-attr\">height</span>: <span class=\"hljs-string\">&#x27;100px&#x27;</span>}}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Frame</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Loading</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Frame</span>&gt;</span></span>\n&lt;/div&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"required-components\">Required components</h2>\n<p>The loading component must be wrapped in the <a href=\"https://polaris.shopify.com/components/structure/frame\">frame</a> component.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The loading component should:</p>\n<ul>\n<li>Indicate that the page requested is loading.</li>\n<li>Indicate that an upload has started and the action will soon complete.</li>\n<li>Be used to give feedback for an entire page load or a page mutation like saving a product.</li>\n<li>Be used alongside a component or page element that contains <code>aria-busy</code> to represent what is loading.</li>\n</ul>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To indicate that an action has been received, use the <a href=\"https://polaris.shopify.com/components/feedback-indicators/spinner\">Spinner</a></li>\n<li>To improve user experience and reduce the appearance of long loading times, use the <a href=\"https://polaris.shopify.com/components/feedback-indicators/progress-bar\">Progress bar</a> component.</li>\n<li>To better represent loading content, use <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-page\">Skeleton page</a> along with <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-body-text\">Skeleton body text</a> and <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-display-text\">Skeleton display text</a> components.</li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>The loading component is implemented using the <a href=\"https://www.w3.org/TR/wai-aria-1.1/#progressbar\">ARIA 1.1 progressbar pattern</a>. It outputs an ARIA <code>role=&quot;progressbar&quot;</code> and uses <code>aria-valuemin</code>, <code>aria-value-max</code>, and <code>aria-valuenow</code> to convey the loaded percentage to screen reader users.</p>\n<!-- /content-for -->\n"
  },
  "MediaCard": {
    "name": "Media card",
    "category": "Structure",
    "keywords": [
      "MediaCard",
      "actionable",
      "updates",
      "new features",
      "Media card",
      "image card",
      "feature card",
      "card with thumbnail",
      "thumbnail card"
    ],
    "readme": "<h1 id=\"media-card\">Media card</h1>\n<p>Media cards provide a consistent layout to present visual information to merchants. Visual media is used to provide additional context to the written information it&#39;s paired with.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Media cards should:</p>\n<ul>\n<li>Provide merchants with a clear call to action.</li>\n<li>Always pair text with a visual component, for example, body text paired with an image, video, etc.</li>\n<li>Use media to enhance the written content. The written content should be able to stand alone without an explanation from the paired media.</li>\n<li>Show targeted content toward specific audiences to maximize relevance.</li>\n<li>Be dismissable.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<ul>\n<li>Don’t use media cards as advertisements for your feature. Instead they should educate the merchant about how to accomplish tasks related to the section they’re in.</li>\n</ul>\n<h3 id=\"title\">Title</h3>\n<p>Media card titles should follow the content guidelines for <a href=\"https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings\">headings and subheadings</a>.</p>\n<h3 id=\"body-content\">Body content</h3>\n<p>Body content should be:</p>\n<ul>\n<li>Actionable: start sentences with imperative verbs when telling merchants what actions are available to them, especially something new. Don’t use permissive language like “you can”.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<p>Get performance data for all of your sales channels.</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<p>Now you can get performance data for all of your sales channels.</p>\n</div></div>\n\n<ul>\n<li>Structured for merchant success: always put the most critical information\nfirst</li>\n<li>Clear: use the verb “need” to help merchants understand when they’re required\nto do something</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<p>To buy a shipping label, you need to enter the total weight of your shipment,\nincluding packaging.</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<p>To buy a shipping label, you must enter the total weight of your shipment,\nincluding packaging.</p>\n</div></div>\n\n<h3 id=\"call-to-action\">Call to action</h3>\n<p>Buttons should be:</p>\n<p>Clear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive merchants by mislabeling a button.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-2\">Do</h4>\n<p>Buy shipping label</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-2\">Don’t</h4>\n<p>Buy</p>\n</div></div>\n\n<ul>\n<li>Action-led: buttons should always lead with a strong verb that encourages\naction. To provide enough context to merchants use the {verb}+{noun} format on\nbuttons except in the case of common actions like Save, Close, Cancel, or OK.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-3\">Do</h4>\n<p>View shipping settings</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-3\">Don’t</h4>\n<p>View your settings</p>\n</div></div>\n\n<ul>\n<li>Scannable: avoid unnecessary words and articles such as the, an, or a.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-4\">Do</h4>\n<p>Add menu item</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-4\">Don’t</h4>\n<p>Add a menu item</p>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"basic-media-card\">Basic media card</h3>\n<p>Use to surface educational information about a feature or opportunity.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">MediaCard</span>\n  title=<span class=\"hljs-string\">&quot;Getting Started&quot;</span>\n  primaryAction={{\n    <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Learn about getting started&#x27;</span>,\n    <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> {},\n  }}\n  description=<span class=\"hljs-string\">&quot;Discover how Shopify can power up your entrepreneurial journey.&quot;</span>\n  popoverActions={[{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Dismiss&#x27;</span>, <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> {}}]}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span>\n    <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span>\n    <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span>\n    <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100%&quot;</span>\n    <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n      <span class=\"hljs-attr\">objectFit:</span> &#x27;<span class=\"hljs-attr\">cover</span>&#x27;,\n      <span class=\"hljs-attr\">objectPosition:</span> &#x27;<span class=\"hljs-attr\">center</span>&#x27;,\n    }}\n    <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;<a href=\"https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850\">https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850</a>&quot;</span>\n  /&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">MediaCard</span>&gt;\n</pre></code></p>\n<h3 id=\"basic-media-card-with-small-visual\">Basic media card with small visual</h3>\n<p>Use when there are limited vertical space, or when the card should be less prominent.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">MediaCard</span>\n  title=<span class=\"hljs-string\">&quot;Getting Started&quot;</span>\n  primaryAction={{\n    <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Learn about getting started&#x27;</span>,\n    <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> {},\n  }}\n  description=<span class=\"hljs-string\">&quot;Discover how Shopify can power up your entrepreneurial journey.&quot;</span>\n  popoverActions={[{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Dismiss&#x27;</span>, <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> {}}]}\n  size=<span class=\"hljs-string\">&quot;small&quot;</span>\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span>\n    <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span>\n    <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span>\n    <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100%&quot;</span>\n    <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n      <span class=\"hljs-attr\">objectFit:</span> &#x27;<span class=\"hljs-attr\">cover</span>&#x27;,\n      <span class=\"hljs-attr\">objectPosition:</span> &#x27;<span class=\"hljs-attr\">center</span>&#x27;,\n    }}\n    <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;<a href=\"https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850\">https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850</a>&quot;</span>\n  /&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">MediaCard</span>&gt;\n</pre></code></p>\n<h3 id=\"media-card-with-secondary-action\">Media card with secondary action</h3>\n<p>Use when there are two distinct actions merchants can take on the information in the card.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">MediaCard</span>\n  title=<span class=\"hljs-string\">&quot;Get closer to launching your store&quot;</span>\n  primaryAction={{\n    <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Add a product&#x27;</span>,\n    <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> {},\n  }}\n  secondaryAction={{\n    <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Learn more&#x27;</span>,\n    <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> {},\n  }}\n  description=<span class=\"hljs-string\">&quot;Start your business with eye-catching inventory.&quot;</span>\n  popoverActions={[{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Dismiss&#x27;</span>, <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> {}}]}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span>\n    <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span>\n    <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span>\n    <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100%&quot;</span>\n    <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{objectFit:</span> &#x27;<span class=\"hljs-attr\">cover</span>&#x27;, <span class=\"hljs-attr\">objectPosition:</span> &#x27;<span class=\"hljs-attr\">center</span>&#x27;}}\n    <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;<a href=\"https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850\">https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850</a>&quot;</span>\n  /&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">MediaCard</span>&gt;\n</pre></code></p>\n<h3 id=\"media-card-with-no-actions\">Media card with no actions</h3>\n<p>Use when media card does not require any actions.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">MediaCard</span>\n  title=<span class=\"hljs-string\">&quot;Getting Started&quot;</span>\n  description=<span class=\"hljs-string\">&quot;Discover how Shopify can power up your entrepreneurial journey.&quot;</span>\n  popoverActions={[{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Dismiss&#x27;</span>, <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> {}}]}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span>\n    <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span>\n    <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;100%&quot;</span>\n    <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;100%&quot;</span>\n    <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{objectFit:</span> &#x27;<span class=\"hljs-attr\">cover</span>&#x27;, <span class=\"hljs-attr\">objectPosition:</span> &#x27;<span class=\"hljs-attr\">center</span>&#x27;}}\n    <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;<a href=\"https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850\">https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850</a>&quot;</span>\n  /&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">MediaCard</span>&gt;\n</pre></code></p>\n<h3 id=\"video-card\">Video card</h3>\n<p>Use to provide a consistent layout for contextual learning content. Use to wrap thumbnails of educational videos about Shopify features in context.</p>\n<pre><code class=\"language-jsx\">&lt;MediaCard\n  title=&quot;Turn your side-project into a business&quot;\n  primaryAction={{\n    content: &#39;Learn more&#39;,\n    onAction: () =&gt; {},\n  }}\n  description={`In this course, you’ll learn how the Kular family turned their mom’s recipe book into a global business.`}\n  popoverActions={[{content: &#39;Dismiss&#39;, onAction: () =&gt; {}}]}\n&gt;\n  &lt;VideoThumbnail\n    videoLength={80}\n    thumbnailUrl=&quot;https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850&quot;\n  /&gt;\n&lt;/MediaCard&gt;\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Portrait&lt;/span&gt; video card\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; when vertical screen space is not limited or when the video card is the page’s primary content. &lt;span class=&quot;hljs-title class_&quot;&gt;For&lt;/span&gt; example, &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; an empty state.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\n&lt;MediaCard\n  portrait\n  title=&quot;Turn your side-project into a business&quot;\n  primaryAction={{\n    content: &#39;Learn more&#39;,\n    onAction: () =&gt; {},\n  }}\n  description=&quot;In this course, you’ll learn how the Kular family turned their mom’s recipe book into a global business.&quot;\n  popoverActions={[{content: &#39;Dismiss&#39;, onAction: () =&gt; {}}]}\n&gt;\n  &lt;VideoThumbnail\n    videoLength={80}\n    thumbnailUrl=&quot;https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850&quot;\n  /&gt;\n&lt;/MediaCard&gt;\n</code></pre>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To create a video card, <a href=\"https://polaris.shopify.com/components/images-and-icons/video-thumbnail\">use the video thumbnail component</a></li>\n<li>To group similar concepts and tasks together, <a href=\"https://polaris.shopify.com/components/structure/card\">use the card component</a></li>\n<li>To create page-level layout, <a href=\"https://polaris.shopify.com/components/structure/layout\">use the layout component</a></li>\n<li>To explain a feature that merchants haven’t tried yet, <a href=\"https://polaris.shopify.com/components/structure/empty-state\">use the empty state component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>The required <code>title</code> prop gives the media card a level 2 heading (<code>&lt;h2&gt;</code>). This helps with readability and provides structure to screen reader users. It can also accept a ReactNode.</p>\n<p>Use <a href=\"https://polaris.shopify.com/content/actionable-language#navigation\">actionable language</a> to ensure that the purpose of the media card is clear to all merchants, including those with issues related to reading and language.</p>\n<!-- /content-for -->\n"
  },
  "Modal": {
    "name": "Modal",
    "category": "Overlays",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "modal",
      "src",
      "open",
      "title",
      "width",
      "height",
      "primary action",
      "secondary action",
      "tertiary action",
      "destructive action",
      "footer",
      "instant",
      "sectioned",
      "large",
      "small",
      "limit height",
      "loading",
      "outer wrapper",
      "iframe",
      "overlay",
      "dialog",
      "alert",
      "android",
      "ios"
    ],
    "readme": "<h1 id=\"modal\">Modal</h1>\n<p>Modals are overlays that require merchants to take an action before they can continue interacting with the rest of Shopify. They can be disruptive and should be used thoughtfully and sparingly.</p>\n<hr>\n<h2 id=\"use-in-an-embedded-application-deprecated\">Use in an embedded application (deprecated)</h2>\n<p>Passing an API key to the <a href=\"https://polaris.shopify.com/components/structure/app-provider#section-initializing-the-shopify-app-bridge\">app provider component</a> causes the modal component to delegate to the <a href=\"https://help.shopify.com/en/api/embedded-apps/app-bridge\">Shopify App Bridge</a> instead of rendering as it would in a stand-alone application.</p>\n<p>In an embedded application context, not all documented properties are available. Some properties are only available in stand-alone applications.</p>\n<p>Properties that are available only in a stand-alone context are documented as <code>(stand-alone app use only)</code>. For instance the <code>children</code> property is documented as <code>(stand-alone app use only)</code>.</p>\n<p>The following example shows the modal component in an embedded application context:</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">EmbeddedAppModalExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [modalOpen, setModalOpen] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleModalClose = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setModalOpen</span>(<span class=\"hljs-literal\">false</span>), []);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppProvider</span> <span class=\"hljs-attr\">apiKey</span>=<span class=\"hljs-string\">&quot;YOUR_API_KEY&quot;</span> <span class=\"hljs-attr\">i18n</span>=<span class=\"hljs-string\">{{}}</span> <span class=\"hljs-attr\">shopOrigin</span>=<span class=\"hljs-string\">&quot;YOUR_SHOP_ORIGIN&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal</span>\n        <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;<a href=\"https://my-app.com/upgrade-to-retail-package\">https://my-app.com/upgrade-to-retail-package</a>&quot;</span>\n        <span class=\"hljs-attr\">open</span>=<span class=\"hljs-string\">{modalOpen}</span>\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Upgrade your Shopify POS with the Retail Package&quot;</span>\n        <span class=\"hljs-attr\">primaryAction</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Add</span> <span class=\"hljs-attr\">Retail</span> <span class=\"hljs-attr\">Package</span>&#x27;,\n          <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleModalClose</span>,\n        }}\n        <span class=\"hljs-attr\">secondaryActions</span>=<span class=\"hljs-string\">{[</span>\n          {\n            <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Cancel</span>&#x27;,\n            <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleModalClose</span>,\n          },\n        ]}\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{handleModalClose}</span>\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">AppProvider</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h4 id=\"deprecation-rationale\">Deprecation rationale</h4>\n<p>As of v3.17.0, using <code>Modal</code> in an embedded app is deprecated. Support for this will be removed in v5.0 as the underlying Shopify App Bridge library will be removed from Polaris React. Learn more about the <a href=\"https://github.com/Shopify/polaris-react/issues/814\">deprecation rationale</a>. Use <a href=\"https://help.shopify.com/en/api/embedded-apps/app-bridge/react-components/modal\"><code>Modal</code></a> from <a href=\"https://help.shopify.com/en/api/embedded-apps/app-bridge/react-components\"><code>@shopify/app-bridge-react</code></a> instead.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Use modals for confirmations and conditional changes. They should be thought of as temporary and not be used for information or actions that need to live on in the UI in a persistent way. Don’t use modals to display complex forms or large amounts of information.</p>\n<p>Modals should:</p>\n<ul>\n<li>Require that merchants take an action.</li>\n<li>Close when merchants press the <code>X</code> button, the <code>Cancel</code> button, or the <kbd>Esc</kbd> key, not when merchants click or tap the area outside the modal.</li>\n<li>Not have more than two buttons (primary and secondary) at the bottom. This prevents unclear action hierarchy and crowding on mobile screens. Since modals are for focused tasks, they should have focused actions. In some cases however, a <a href=\"#tertiary-actions\">tertiary action</a> may be appropriate.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"title\">Title</h3>\n<p>Modal titles should:</p>\n<ul>\n<li>Use a clear {verb}+{noun} question or statement</li>\n<li>Follow the content guidelines for <a href=\"https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings\">headings and subheadings</a></li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Edit email address</li>\n<li>Delete customer?</li>\n<li>Discard unsaved changes?</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>Edit the email address for this order</li>\n<li>Are you sure you want to delete customer?</li>\n<li>Discard?</li>\n</ul>\n</div></div>\n\n<h3 id=\"body-content\">Body content</h3>\n<p>Body content should be:</p>\n<ul>\n<li>Actionable: start sentences with imperative verbs when telling a merchant what actions are available to them (especially something new). Don’t use permissive language like &quot;you can&quot;.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Notification emails will be sent to this address.</li>\n<li>This can’t be undone.</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>You can edit the email address where emails will be sent.</li>\n<li>Are you sure you want to delete the variant Dark Blue Tee/Small/Silk? You cannot reverse this.</li>\n</ul>\n</div></div>\n\n<ul>\n<li>Structured for merchant success: always put the most critical information first.</li>\n<li>Clear: use the verb “need” to help merchants understand when they’re required to do something.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-2\">Do</h4>\n<ul>\n<li>To buy a shipping label, you need to enter the total weight of your shipment, including packaging.</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-2\">Don’t</h4>\n<ul>\n<li>To buy a shipping label, you must enter the total weight of your shipment, including packaging.</li>\n</ul>\n</div></div>\n\n<h3 id=\"primary-and-secondary-actions\">Primary and secondary actions</h3>\n<p>Actions should be:</p>\n<ul>\n<li>Clear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive a merchant by mislabeling an action.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-3\">Do</h4>\n<ul>\n<li>Create order</li>\n<li>Buy shipping label</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-3\">Don’t</h4>\n<ul>\n<li>New order</li>\n<li>Buy</li>\n</ul>\n</div></div>\n\n<ul>\n<li>Action-led: actions should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on actions except in the case of common actions like Save, Close, Cancel, or OK.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-4\">Do</h4>\n<ul>\n<li>Activate Apple Pay</li>\n<li>View shipping settings</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-4\">Don’t</h4>\n<ul>\n<li>Try Apple Pay</li>\n<li>View your settings</li>\n</ul>\n</div></div>\n\n<ul>\n<li>Scannable: avoid unnecessary words and articles such as the, an, or a.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-5\">Do</h4>\n<ul>\n<li>Add menu item</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-5\">Don’t</h4>\n<ul>\n<li>Add a menu item</li>\n</ul>\n</div></div>\n\n<p><a name=\"tertiary-actions\"></a></p>\n<h3 id=\"tertiary-actions\">Tertiary actions</h3>\n<p>Tertiary actions should:</p>\n<ul>\n<li>Only be used when the action requires the context of the content in the modal</li>\n<li>Never be used to dismiss the modal</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-6\">Do</h4>\n<ul>\n<li>Use a plain button for a tertiary action if needed\n<img src=\"/images-from-old-styleguide/components/Modal/do-use-plain-button-for-tertiary-action@2x.png\" alt=\"Screenshot of modal with a plain button as a tertiary action\"></li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-6\">Don’t</h4>\n<ul>\n<li>Use a tertiary action for a destructive action\n<img src=\"/images-from-old-styleguide/components/Modal/dont-use-destructive-tertiary-action@2x.png\" alt=\"Screenshot of modal with a destructive button as a tertiary action\"></li>\n</ul>\n</div></div>\n\n<h3 id=\"footer\">Footer</h3>\n<p>Body content should be:</p>\n<ul>\n<li>Actionable: start sentences with imperative verbs when telling a merchant what actions are available to them (especially something new). Don’t use permissive language like &quot;you can&quot;.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-7\">Do</h4>\n<ul>\n<li>Notification emails will be sent to this address.</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-7\">Don’t</h4>\n<ul>\n<li>You can edit the email address where emails will be sent.</li>\n</ul>\n</div></div>\n\n<ul>\n<li>Structured for merchant success: always put the most critical information first.</li>\n<li>Clear: use the verb “need” to help merchants understand when they’re required to do something.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-8\">Do</h4>\n<ul>\n<li>To buy a shipping label, you need to enter the total weight of your shipment, including packaging.</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-8\">Don’t</h4>\n<ul>\n<li>To buy a shipping label, you must enter the total weight of your shipment, including packaging.</li>\n</ul>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"basic-modal\">Basic modal</h3>\n<!-- example-for: web -->\n\n<p>Use as the default option for a modal.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ModalExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(!active), [active]);</p>\n<p>  <span class=\"hljs-keyword\">const</span> activator = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleChange}</span>&gt;</span>Open<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>;</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">500px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal</span>\n        <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{activator}</span>\n        <span class=\"hljs-attr\">open</span>=<span class=\"hljs-string\">{active}</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{handleChange}</span>\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Reach more shoppers with Instagram product tags&quot;</span>\n        <span class=\"hljs-attr\">primaryAction</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Add</span> <span class=\"hljs-attr\">Instagram</span>&#x27;,\n          <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleChange</span>,\n        }}\n        <span class=\"hljs-attr\">secondaryActions</span>=<span class=\"hljs-string\">{[</span>\n          {\n            <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Learn</span> <span class=\"hljs-attr\">more</span>&#x27;,\n            <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleChange</span>,\n          },\n        ]}\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n              Use Instagram posts to share your products with millions of\n              people. Let shoppers buy from your store without leaving\n              Instagram.\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"modal-with-primary-action\">Modal with primary action</h3>\n<p>Use to let merchants take a key action.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ModalWithPrimaryActionExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DISCOUNT_LINK</span> = <span class=\"hljs-string\">&#x27;<a href=\"https://polaris.shopify.com/&amp;#x27\">https://polaris.shopify.com/&amp;#x27</a>;</span>;</p>\n<p>  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);\n  <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-title function_\">useRef</span>(<span class=\"hljs-literal\">null</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleClick = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    node.<span class=\"hljs-property\">current</span> &amp;&amp; node.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">input</span>.<span class=\"hljs-title function_\">focus</span>();\n  }, []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleFocus = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (node.<span class=\"hljs-property\">current</span> == <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    node.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">input</span>.<span class=\"hljs-title function_\">select</span>();\n    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">execCommand</span>(<span class=\"hljs-string\">&#x27;copy&#x27;</span>);\n  }, []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toggleModal = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">active</span>) =&gt;</span> !active), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> activator = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleModal}</span>&gt;</span>Open<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>;</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">500px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal</span>\n        <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{activator}</span>\n        <span class=\"hljs-attr\">open</span>=<span class=\"hljs-string\">{active}</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{toggleModal}</span>\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Get a shareable link&quot;</span>\n        <span class=\"hljs-attr\">primaryAction</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Close</span>&#x27;,\n          <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">toggleModal</span>,\n        }}\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack</span> <span class=\"hljs-attr\">vertical</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack.Item</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n                  You can share this discount link with your customers via email\n                  or social media. Your discount will be automatically applied\n                  at checkout.\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack.Item</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack.Item</span> <span class=\"hljs-attr\">fill</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n                <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{node}</span>\n                <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Discount link&quot;</span>\n                <span class=\"hljs-attr\">onFocus</span>=<span class=\"hljs-string\">{handleFocus}</span>\n                <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{DISCOUNT_LINK}</span>\n                <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {}}\n                autoComplete=&quot;off&quot;\n                connectedRight={\n                  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">primary</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleClick}</span>&gt;</span>\n                    Copy link\n                  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n                }\n              /&gt;\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack.Item</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Modal/android/information@2x.png\" alt=\"Modal with primary action on Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Modal/ios/information@2x.png\" alt=\"Modal with primary action on iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"modal-with-primary-and-secondary-actions\">Modal with primary and secondary actions</h3>\n<p>Use to let merchants take key actions at the bottom of the modal.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ModalWithPrimaryAndSecondaryActionsExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">CURRENT_PAGE</span> = <span class=\"hljs-string\">&#x27;current_page&#x27;</span>;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">ALL_CUSTOMERS</span> = <span class=\"hljs-string\">&#x27;all_customers&#x27;</span>;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SELECTED_CUSTOMERS</span> = <span class=\"hljs-string\">&#x27;selected_customers&#x27;</span>;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">CSV_EXCEL</span> = <span class=\"hljs-string\">&#x27;csv_excel&#x27;</span>;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">CSV_PLAIN</span> = <span class=\"hljs-string\">&#x27;csv_plain&#x27;</span>;</p>\n<p>  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);\n  <span class=\"hljs-keyword\">const</span> [selectedExport, setSelectedExport] = <span class=\"hljs-title function_\">useState</span>([]);\n  <span class=\"hljs-keyword\">const</span> [selectedExportAs, setSelectedExportAs] = <span class=\"hljs-title function_\">useState</span>([]);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleModalChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(!active), [active]);</p>\n<p>  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleClose</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n    <span class=\"hljs-title function_\">handleModalChange</span>();\n    <span class=\"hljs-title function_\">handleSelectedExport</span>([]);\n    <span class=\"hljs-title function_\">handleSelectedExportAs</span>([]);\n  };</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleSelectedExport = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelectedExport</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleSelectedExportAs = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelectedExportAs</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> activator = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleModalChange}</span>&gt;</span>Open<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>;</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">500px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal</span>\n        <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{activator}</span>\n        <span class=\"hljs-attr\">open</span>=<span class=\"hljs-string\">{active}</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{handleClose}</span>\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Export customers&quot;</span>\n        <span class=\"hljs-attr\">primaryAction</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Export</span> <span class=\"hljs-attr\">customers</span>&#x27;,\n          <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleClose</span>,\n        }}\n        <span class=\"hljs-attr\">secondaryActions</span>=<span class=\"hljs-string\">{[</span>\n          {\n            <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Cancel</span>&#x27;,\n            <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleClose</span>,\n          },\n        ]}\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack</span> <span class=\"hljs-attr\">vertical</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack.Item</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ChoiceList</span>\n                <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Export&quot;</span>\n                <span class=\"hljs-attr\">choices</span>=<span class=\"hljs-string\">{[</span>\n                  {<span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Current</span> <span class=\"hljs-attr\">page</span>&#x27;, <span class=\"hljs-attr\">value:</span> <span class=\"hljs-attr\">CURRENT_PAGE</span>},\n                  {<span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">All</span> <span class=\"hljs-attr\">customers</span>&#x27;, <span class=\"hljs-attr\">value:</span> <span class=\"hljs-attr\">ALL_CUSTOMERS</span>},\n                  {<span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Selected</span> <span class=\"hljs-attr\">customers</span>&#x27;, <span class=\"hljs-attr\">value:</span> <span class=\"hljs-attr\">SELECTED_CUSTOMERS</span>},\n                ]}\n                <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selectedExport}</span>\n                <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleSelectedExport}</span>\n              /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack.Item</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack.Item</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ChoiceList</span>\n                <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Export as&quot;</span>\n                <span class=\"hljs-attr\">choices</span>=<span class=\"hljs-string\">{[</span>\n                  {\n                    <span class=\"hljs-attr\">label:</span>\n                      &#x27;<span class=\"hljs-attr\">CSV</span> <span class=\"hljs-attr\">for</span> <span class=\"hljs-attr\">Excel</span>, <span class=\"hljs-attr\">Numbers</span>, <span class=\"hljs-attr\">or</span> <span class=\"hljs-attr\">other</span> <span class=\"hljs-attr\">spreadsheet</span> <span class=\"hljs-attr\">programs</span>&#x27;,\n                    <span class=\"hljs-attr\">value:</span> <span class=\"hljs-attr\">CSV_EXCEL</span>,\n                  },\n                  {<span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Plain</span> <span class=\"hljs-attr\">CSV</span> <span class=\"hljs-attr\">file</span>&#x27;, <span class=\"hljs-attr\">value:</span> <span class=\"hljs-attr\">CSV_PLAIN</span>},\n                ]}\n                <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selectedExportAs}</span>\n                <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleSelectedExportAs}</span>\n              /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack.Item</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Modal/android/basic@2x.png\" alt=\"Modal with primary and secondary actions on Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Modal/ios/basic@2x.png\" alt=\"Modal with primary and secondary actions on iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"large-modal\">Large modal</h3>\n<!-- example-for: web -->\n\n<p>Use when you need to increase the width of your modal.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">LargeModalExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);\n  <span class=\"hljs-keyword\">const</span> [checked, setChecked] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toggleActive = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">active</span>) =&gt;</span> !active), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleCheckbox = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setChecked</span>(value), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> activator = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleActive}</span>&gt;</span>Open<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>;</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">500px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal</span>\n        <span class=\"hljs-attr\">large</span>\n        <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{activator}</span>\n        <span class=\"hljs-attr\">open</span>=<span class=\"hljs-string\">{active}</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{toggleActive}</span>\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Import customers by CSV&quot;</span>\n        <span class=\"hljs-attr\">primaryAction</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Import</span> <span class=\"hljs-attr\">customers</span>&#x27;,\n          <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">toggleActive</span>,\n        }}\n        <span class=\"hljs-attr\">secondaryActions</span>=<span class=\"hljs-string\">{[</span>\n          {\n            <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Cancel</span>&#x27;,\n            <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">toggleActive</span>,\n          },\n        ]}\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack</span> <span class=\"hljs-attr\">vertical</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DropZone</span>\n              <span class=\"hljs-attr\">accept</span>=<span class=\"hljs-string\">&quot;.csv&quot;</span>\n              <span class=\"hljs-attr\">errorOverlayText</span>=<span class=\"hljs-string\">&quot;File type must be .csv&quot;</span>\n              <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;file&quot;</span>\n              <span class=\"hljs-attr\">onDrop</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {}}\n            &gt;\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DropZone.FileUpload</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DropZone</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Checkbox</span>\n              <span class=\"hljs-attr\">checked</span>=<span class=\"hljs-string\">{checked}</span>\n              <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Overwrite existing customers that have the same email or phone&quot;</span>\n              <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleCheckbox}</span>\n            /&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"small-modal\">Small modal</h3>\n<!-- example-for: web -->\n\n<p>Use when you need to decrease the width of your modal.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SmallModalExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);\n  <span class=\"hljs-keyword\">const</span> [checked, setChecked] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toggleActive = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">active</span>) =&gt;</span> !active), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleCheckbox = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setChecked</span>(value), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> activator = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleActive}</span>&gt;</span>Open<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>;</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">500px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal</span>\n        <span class=\"hljs-attr\">small</span>\n        <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{activator}</span>\n        <span class=\"hljs-attr\">open</span>=<span class=\"hljs-string\">{active}</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{toggleActive}</span>\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Import customers by CSV&quot;</span>\n        <span class=\"hljs-attr\">primaryAction</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Import</span> <span class=\"hljs-attr\">customers</span>&#x27;,\n          <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">toggleActive</span>,\n        }}\n        <span class=\"hljs-attr\">secondaryActions</span>=<span class=\"hljs-string\">{[</span>\n          {\n            <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Cancel</span>&#x27;,\n            <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">toggleActive</span>,\n          },\n        ]}\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack</span> <span class=\"hljs-attr\">vertical</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DropZone</span>\n              <span class=\"hljs-attr\">accept</span>=<span class=\"hljs-string\">&quot;.csv&quot;</span>\n              <span class=\"hljs-attr\">errorOverlayText</span>=<span class=\"hljs-string\">&quot;File type must be .csv&quot;</span>\n              <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;file&quot;</span>\n              <span class=\"hljs-attr\">onDrop</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {}}\n            &gt;\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DropZone.FileUpload</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DropZone</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Checkbox</span>\n              <span class=\"hljs-attr\">checked</span>=<span class=\"hljs-string\">{checked}</span>\n              <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Overwrite existing customers that have the same email or phone&quot;</span>\n              <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleCheckbox}</span>\n            /&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"modal-without-a-title\">Modal without a title</h3>\n<!-- example-for: web -->\n\n<p>A title is required for accessibility, but you may hide it.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ModalWithoutTitleExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(!active), [active]);</p>\n<p>  <span class=\"hljs-keyword\">const</span> activator = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleChange}</span>&gt;</span>Open<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>;</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">500px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal</span>\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Reach more shoppers with Instagram product tags&quot;</span>\n        <span class=\"hljs-attr\">titleHidden</span>\n        <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{activator}</span>\n        <span class=\"hljs-attr\">open</span>=<span class=\"hljs-string\">{active}</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{handleChange}</span>\n        <span class=\"hljs-attr\">primaryAction</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Add</span> <span class=\"hljs-attr\">Instagram</span>&#x27;,\n          <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleChange</span>,\n        }}\n        <span class=\"hljs-attr\">secondaryActions</span>=<span class=\"hljs-string\">{[</span>\n          {\n            <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Learn</span> <span class=\"hljs-attr\">more</span>&#x27;,\n            <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleChange</span>,\n          },\n        ]}\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n              Use Instagram posts to share your products with millions of\n              people. Let shoppers buy from your store without leaving\n              Instagram.\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"modal-with-scroll-listener\">Modal with scroll listener</h3>\n<!-- example-for: web -->\n\n<p>Use to implement infinite scroll of modal content.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ModalWithScrollListenerExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(!active), [active]);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleScrollBottom = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;Scrolled to bottom&#x27;</span>), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> activator = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleChange}</span>&gt;</span>Open<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>;</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">500px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal</span>\n        <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{activator}</span>\n        <span class=\"hljs-attr\">open</span>=<span class=\"hljs-string\">{active}</span>\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Scrollable content&quot;</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{handleChange}</span>\n        <span class=\"hljs-attr\">onScrolledToBottom</span>=<span class=\"hljs-string\">{handleScrollBottom}</span>\n      &gt;</span>\n        {Array.from({length: 50}, (_, index) =&gt; (\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal.Section</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n                Item <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#&quot;</span>&gt;</span>#{index}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n        ))}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"modal-with-activator-ref\">Modal with activator ref</h3>\n<!-- example-for: web -->\n\n<p>Provide an activator ref when it’s more convenient than providing an element. This ensures proper focus management when closing the modal.\nSee the <a href=\"https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/dialog.html\">accessibility features of a modal</a> for more information regarding focus.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ModalExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> buttonRef = <span class=\"hljs-title function_\">useRef</span>(<span class=\"hljs-literal\">null</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleOpen = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(<span class=\"hljs-literal\">true</span>), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleClose = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">setActive</span>(<span class=\"hljs-literal\">false</span>);\n  }, []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> activator = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{buttonRef}</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleOpen}</span>&gt;</span>Open<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">500px</span>&#x27;}}&gt;</span>\n      {activator}\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal</span>\n        <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{buttonRef}</span>\n        <span class=\"hljs-attr\">open</span>=<span class=\"hljs-string\">{active}</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{handleClose}</span>\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Reach more shoppers with Instagram product tags&quot;</span>\n        <span class=\"hljs-attr\">primaryAction</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Add</span> <span class=\"hljs-attr\">Instagram</span>&#x27;,\n          <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleClose</span>,\n        }}\n        <span class=\"hljs-attr\">secondaryActions</span>=<span class=\"hljs-string\">{[</span>\n          {\n            <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Learn</span> <span class=\"hljs-attr\">more</span>&#x27;,\n            <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleClose</span>,\n          },\n        ]}\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n              Use Instagram posts to share your products with millions of\n              people. Let shoppers buy from your store without leaving\n              Instagram.\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"modal-without-an-activator-prop\">Modal without an activator prop</h3>\n<!-- example-for: web -->\n\n<p>Use an external activator when technical limitations prevent you from passing the activator as an element or a ref. Make sure to focus the activator on close when choosing this approach.\nSee the <a href=\"https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/dialog.html\">accessibility features of a modal</a> for more information regarding focus.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ModalExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> button = <span class=\"hljs-title function_\">useRef</span>();</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleOpen = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(<span class=\"hljs-literal\">true</span>), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleClose = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">setActive</span>(<span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-title function_\">requestAnimationFrame</span>(<span class=\"hljs-function\">() =&gt;</span> button.<span class=\"hljs-property\">current</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;button&#x27;</span>).<span class=\"hljs-title function_\">focus</span>());\n  }, []);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">500px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{button}</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleOpen}</span>&gt;</span>Open<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal</span>\n        <span class=\"hljs-attr\">instant</span>\n        <span class=\"hljs-attr\">open</span>=<span class=\"hljs-string\">{active}</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{handleClose}</span>\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Reach more shoppers with Instagram product tags&quot;</span>\n        <span class=\"hljs-attr\">primaryAction</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Add</span> <span class=\"hljs-attr\">Instagram</span>&#x27;,\n          <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleClose</span>,\n        }}\n        <span class=\"hljs-attr\">secondaryActions</span>=<span class=\"hljs-string\">{[</span>\n          {\n            <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Learn</span> <span class=\"hljs-attr\">more</span>&#x27;,\n            <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleClose</span>,\n          },\n        ]}\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n              Use Instagram posts to share your products with millions of\n              people. Let shoppers buy from your store without leaving\n              Instagram.\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Modal</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"warning-modal\">Warning modal</h3>\n<!-- example-for: android, ios -->\n\n<p>Use to make it clear to the merchant that the action is potentially dangerous. Only use this option when the merchant is about to perform an action that can’t be undone or is difficult to undo.</p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Modal/android/default@2x.png\" alt=\"Warning modal on Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Modal/ios/default@2x.png\" alt=\"Warning modal on iOS\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To present large amounts of additional information or actions that don’t require confirmation, <a href=\"https://polaris.shopify.com/components/behavior/collapsible\">use the collapsible component</a> to expand content in place within the page</li>\n<li>To present a small amount of content or a menu of actions in a non-blocking overlay, <a href=\"https://polaris.shopify.com/components/popover\">use the popover component</a></li>\n<li>To communicate a change or condition that needs the merchant’s attention within the context of a page, <a href=\"https://polaris.shopify.com/components/feedback-indicators/banner\">use the banner component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<ul>\n<li>Modals use ARIA <code>role=”dialog”</code> to convey to screen reader users that they work like native dialog windows.</li>\n<li>If you set the <code>title</code> prop to give the modal component a heading, then the <code>title</code> is used to label the dialog element with <code>aria-labelledby</code>. This helps to convey the purpose of the modal to screen reader users when it displays.</li>\n<li>After a modal is closed, in order to return focus to the button that launched it, pass the button to the modal as an <code>activator</code>.</li>\n</ul>\n<h3 id=\"keyboard-support\">Keyboard support</h3>\n<ul>\n<li>When a modal opens, focus moves automatically to the modal container so it can be accessed by keyboard users</li>\n<li>While the modal is open, keyboard focus shouldn’t leave the modal</li>\n<li>Merchants can dismiss the modal with the keyboard by activating the <code>X</code> button, the <code>Cancel</code> button if one is provided, or by pressing the <kbd>Esc</kbd> key</li>\n<li>After a modal is closed, focus returns to the button that launched it</li>\n</ul>\n<!-- /content-for -->\n"
  },
  "Navigation": {
    "name": "Navigation",
    "category": "Navigation",
    "keywords": [
      "navigation",
      "nav",
      "links",
      "primary navigation",
      "main navigation",
      "frame",
      "sidebar",
      "side bar"
    ],
    "readme": "<h1 id=\"navigation\">Navigation</h1>\n<p>The navigation component is used to display the primary navigation in the sidebar of the <a href=\"https://polaris.shopify.com/components/structure/frame\">frame</a> of an application. Navigation includes a list of links that merchants use to move between sections of the application.</p>\n<hr>\n<h2 id=\"required-components\">Required components</h2>\n<p>The navigation component must be passed to the <a href=\"https://polaris.shopify.com/components/structure/frame\">frame</a> component. The mobile version of the navigation component appears in the <a href=\"https://polaris.shopify.com/components/structure/top-bar\">top bar</a> component.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The navigation component should:</p>\n<ul>\n<li>Contain primary navigation items that perform an action when clicked. Each action should navigate to a URL or trigger another action like a modal overlay.</li>\n<li>Only use secondary actions for supplementary actions to the primary actions.</li>\n<li>Provide a non-primary link or action as a secondary action to a section or an item.</li>\n<li>Group navigation items into sections based on related categories.</li>\n<li>Use a section title to clarify the category of a section.</li>\n<li>Use a major icon for item actions.</li>\n<li>Use a minor icon for secondary actions.</li>\n<li>Use the provided navigation section component to group navigation items.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>Navigation should:</p>\n<ul>\n<li><p>Use sentence case for primary and secondary navigation items</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Online store</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>Online Store</li>\n</ul>\n</div></div>\n</li>\n<li><p>Use as few words as possible to describe each item label</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Products</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>Products in your store</li>\n</ul>\n</div></div>\n</li>\n<li><p>Use all caps for section labels</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-2\">Do</h4>\n<ul>\n<li>SALES CHANNELS</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-2\">Don’t</h4>\n<ul>\n<li>Sales channels</li>\n</ul>\n</div></div></li>\n</ul>\n<hr>\n<p><a name=\"subcomponent-section\"></a></p>\n<h2 id=\"navigation-section\">Navigation section</h2>\n<p>A navigation section groups together related navigation items. Navigation sections can be clarified by a heading. Merchants can use a section to easily find navigation items within a specific category.</p>\n<h3 id=\"section-properties\">Section properties</h3>\n<table>\n<thead>\n<tr>\n<th>Prop</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>items</td>\n<td><a href=\"#type-item\">Item[]</a></td>\n<td>A collection of navigation items to be rendered inside the section</td>\n</tr>\n<tr>\n<td>icon</td>\n<td>IconProps[&#39;source&#39;]</td>\n<td>An icon to be displayed next to the section title</td>\n</tr>\n<tr>\n<td>title</td>\n<td>string</td>\n<td>A string property providing a title for the navigation section</td>\n</tr>\n<tr>\n<td>fill</td>\n<td>boolean</td>\n<td>A boolean property indicating whether the section should take up all vertical space available</td>\n</tr>\n<tr>\n<td>rollup</td>\n<td><a href=\"#type-rollup\">Rollup[]</a></td>\n<td>An object determining the collapsing behavior of the navigation section</td>\n</tr>\n<tr>\n<td>action</td>\n<td><a href=\"#type-action\">Action[]</a></td>\n<td>Renders an icon-only action as a supplementary action next to the section title</td>\n</tr>\n<tr>\n<td>separator</td>\n<td>boolean</td>\n<td>A boolean property indicating whether the section should have a visual separator</td>\n</tr>\n</tbody></table>\n<p><a name=\"type-item\"></a></p>\n<h3 id=\"navigation-section-item\">Navigation section item</h3>\n<p>The content of the navigation component consists of navigation items. Each item is a link or action a merchant can take.</p>\n<h4 id=\"item-properties\">Item properties</h4>\n<table>\n<thead>\n<tr>\n<th>Prop</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>url</td>\n<td>string</td>\n<td>A location for the navigation item to navigate to when clicked</td>\n</tr>\n<tr>\n<td>matches</td>\n<td>boolean</td>\n<td>A boolean property indicating whether the navigation item should respond to a closely matching location property</td>\n</tr>\n<tr>\n<td>exactMatch</td>\n<td>boolean</td>\n<td>A boolean property indicating whether the navigation item should respond to an exactly matching location property</td>\n</tr>\n<tr>\n<td>matchPaths</td>\n<td>string[]</td>\n<td>A string property providing a collection of additional paths for the navigation item to respond to</td>\n</tr>\n<tr>\n<td>excludePaths</td>\n<td>string[]</td>\n<td>A string property providing an explicit collection of paths the navigation item should not respond to</td>\n</tr>\n<tr>\n<td>icon</td>\n<td>IconProps[&#39;source&#39;]</td>\n<td>An icon to be displayed next to the navigation. Please prefer minor icons here. If a major icon has to be used, set the <code>shouldResizeIcon</code> prop to true</td>\n</tr>\n<tr>\n<td>badge</td>\n<td>string | null</td>\n<td>A string property allowing content to be displayed in a badge next to the navigation item</td>\n</tr>\n<tr>\n<td>label</td>\n<td>string</td>\n<td>A string property allowing content to be displayed as link text in the navigation item</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>boolean</td>\n<td>A boolean property indicating whether the navigation item is disabled</td>\n</tr>\n<tr>\n<td>new</td>\n<td>boolean</td>\n<td>Indicate whether the navigation item is new by adding an indicator dot to the parent and badge to the item (overwritten by the badge prop)</td>\n</tr>\n<tr>\n<td>accessibilityLabel</td>\n<td>string</td>\n<td>A visually hidden label for screen readers to understand the content of a navigation item</td>\n</tr>\n<tr>\n<td>selected</td>\n<td>boolean</td>\n<td>A boolean property indicating whether the navigation item is the currently-selected item</td>\n</tr>\n<tr>\n<td>shouldResizeIcon</td>\n<td>boolean</td>\n<td>Will allow for major icons to be displayed at the same size as minor icons</td>\n</tr>\n<tr>\n<td>subNavigationItems</td>\n<td>SubNavigationItem[]</td>\n<td>A collection of navigation items rendered as nested secondary navigation items</td>\n</tr>\n<tr>\n<td>secondaryAction</td>\n<td>SecondaryAction</td>\n<td>Renders an icon-only action as a supplementary action next to a navigation item</td>\n</tr>\n<tr>\n<td>onClick()</td>\n<td>function</td>\n<td>A callback function to handle clicking on a navigation item</td>\n</tr>\n</tbody></table>\n<p><a name=\"type-rollup\"></a></p>\n<h3 id=\"navigation-section-rollup\">Navigation section rollup</h3>\n<p>Rollup allows items in a navigation section to roll up and be revealed when they are of use to the merchant.</p>\n<h4 id=\"rollup-properties\">Rollup properties</h4>\n<table>\n<thead>\n<tr>\n<th>Prop</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>after</td>\n<td>number</td>\n<td>A number of items after which the navigation section should be collapsed</td>\n</tr>\n<tr>\n<td>view</td>\n<td>string</td>\n<td>A string property providing content for the section view action</td>\n</tr>\n<tr>\n<td>hide</td>\n<td>string</td>\n<td>A string property providing content for the section hide action</td>\n</tr>\n<tr>\n<td>activePath</td>\n<td>string</td>\n<td>A string property representing the current URL of your application</td>\n</tr>\n</tbody></table>\n<p><a name=\"type-action\"></a></p>\n<h3 id=\"navigation-section-action\">Navigation section action</h3>\n<p>Action allows a complementary icon-only action to render next to the section title.</p>\n<h4 id=\"action-properties\">Action properties</h4>\n<table>\n<thead>\n<tr>\n<th>Prop</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>icon</td>\n<td>IconProps[&#39;source&#39;]</td>\n<td>An icon to be displayed as the content of the action</td>\n</tr>\n<tr>\n<td>accessibilityLabel</td>\n<td>string</td>\n<td>A visually hidden label for screen readers to understand the content of the action</td>\n</tr>\n<tr>\n<td>onClick()</td>\n<td>function</td>\n<td>A callback function to handle clicking on the action</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"basic-navigation\">Basic navigation</h3>\n<p>Use to present a navigation menu in the <a href=\"https://polaris.shopify.com/components/structure/frame\">frame</a>.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Frame</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation.Section</span>\n      <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Home</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">HomeMinor</span>,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Orders</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">OrdersMinor</span>,\n          <span class=\"hljs-attr\">badge:</span> &#x27;<span class=\"hljs-attr\">15</span>&#x27;,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Products</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ProductsMinor</span>,\n        },\n      ]}\n    /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Navigation</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Frame</span>&gt;\n</pre></code></p>\n<h3 id=\"navigation-with-multiple-secondary-navigations\">Navigation with multiple secondary navigations</h3>\n<p>Use to present a secondary action, related to a section and to title the section.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Frame</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation.Section</span>\n      <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Home</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">HomeMinor</span>,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Orders</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">OrdersMinor</span>,\n          <span class=\"hljs-attr\">badge:</span> &#x27;<span class=\"hljs-attr\">15</span>&#x27;,\n          <span class=\"hljs-attr\">subNavigationItems:</span> [\n            {\n              <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">admin</span>/<span class=\"hljs-attr\">orders</span>/<span class=\"hljs-attr\">collections</span>&#x27;,\n              <span class=\"hljs-attr\">disabled:</span> <span class=\"hljs-attr\">false</span>,\n              <span class=\"hljs-attr\">selected:</span> <span class=\"hljs-attr\">false</span>,\n              <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Collections</span>&#x27;,\n            },\n            {\n              <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">admin</span>/<span class=\"hljs-attr\">orders</span>/<span class=\"hljs-attr\">inventory</span>&#x27;,\n              <span class=\"hljs-attr\">disabled:</span> <span class=\"hljs-attr\">false</span>,\n              <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Inventory</span>&#x27;,\n            },\n          ],\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Marketing</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">MarketingMinor</span>,\n          <span class=\"hljs-attr\">badge:</span> &#x27;<span class=\"hljs-attr\">15</span>&#x27;,\n          <span class=\"hljs-attr\">subNavigationItems:</span> [\n            {\n              <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">admin</span>/<span class=\"hljs-attr\">analytics</span>/<span class=\"hljs-attr\">collections</span>&#x27;,\n              <span class=\"hljs-attr\">disabled:</span> <span class=\"hljs-attr\">false</span>,\n              <span class=\"hljs-attr\">selected:</span> <span class=\"hljs-attr\">false</span>,\n              <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Reports</span>&#x27;,\n            },\n            {\n              <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">admin</span>/<span class=\"hljs-attr\">analytics</span>/<span class=\"hljs-attr\">inventory</span>&#x27;,\n              <span class=\"hljs-attr\">disabled:</span> <span class=\"hljs-attr\">false</span>,\n              <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Live</span> <span class=\"hljs-attr\">view</span>&#x27;,\n            },\n          ],\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">admin</span>/<span class=\"hljs-attr\">products</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Products</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ProductsMinor</span>,\n          <span class=\"hljs-attr\">selected:</span> <span class=\"hljs-attr\">true</span>,\n          <span class=\"hljs-attr\">subNavigationItems:</span> [\n            {\n              <span class=\"hljs-attr\">url:</span> &#x27;/?<span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">/story/all-components-navigation--navigation-with-multiple-secondary-navigations</span>&#x27;,\n              <span class=\"hljs-attr\">disabled:</span> <span class=\"hljs-attr\">false</span>,\n              <span class=\"hljs-attr\">selected:</span> <span class=\"hljs-attr\">false</span>,\n              <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Collections</span>&#x27;,\n            },\n            {\n              <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">admin</span>/<span class=\"hljs-attr\">products</span>/<span class=\"hljs-attr\">inventory</span>&#x27;,\n              <span class=\"hljs-attr\">disabled:</span> <span class=\"hljs-attr\">false</span>,\n              <span class=\"hljs-attr\">selected:</span> <span class=\"hljs-attr\">true</span>,\n              <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Inventory</span>&#x27;,\n            },\n          ],\n        },\n      ]}\n    /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Navigation</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Frame</span>&gt;\n</pre></code></p>\n<h3 id=\"navigation-with-an-active-root-item-with-secondary-navigation-items\">Navigation with an active root item with secondary navigation items</h3>\n<p>Use to present a secondary action, related to a section and to title the section.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Frame</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation.Section</span>\n      <span class=\"hljs-attr\">duplicateRootItem</span>\n      <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Home</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">HomeMinor</span>,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Orders</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">OrdersMinor</span>,\n          <span class=\"hljs-attr\">badge:</span> &#x27;<span class=\"hljs-attr\">15</span>&#x27;,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">admin</span>/<span class=\"hljs-attr\">products</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Products</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ProductsMinor</span>,\n          <span class=\"hljs-attr\">selected:</span> <span class=\"hljs-attr\">true</span>,\n          <span class=\"hljs-attr\">subNavigationItems:</span> [\n            {\n              <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">admin</span>/<span class=\"hljs-attr\">products</span>/<span class=\"hljs-attr\">collections</span>&#x27;,\n              <span class=\"hljs-attr\">disabled:</span> <span class=\"hljs-attr\">false</span>,\n              <span class=\"hljs-attr\">selected:</span> <span class=\"hljs-attr\">false</span>,\n              <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Collections</span>&#x27;,\n            },\n            {\n              <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">admin</span>/<span class=\"hljs-attr\">products</span>/<span class=\"hljs-attr\">inventory</span>&#x27;,\n              <span class=\"hljs-attr\">disabled:</span> <span class=\"hljs-attr\">false</span>,\n              <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Inventory</span>&#x27;,\n            },\n          ],\n        },\n      ]}\n    /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Navigation</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Frame</span>&gt;\n</pre></code></p>\n<h3 id=\"navigation-with-a-secondary-action-for-a-section-and-a-section-title\">Navigation with a secondary action for a section and a section title</h3>\n<p>Use to present a secondary action, related to a section and to title the section.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Frame</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation.Section</span>\n      <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Home</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">HomeMinor</span>,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Orders</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">OrdersMinor</span>,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Products</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ProductsMinor</span>,\n        },\n      ]}\n    /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation.Section</span>\n      <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Sales channels&quot;</span>\n      <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Online</span> <span class=\"hljs-attr\">Store</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">OnlineStoreMinor</span>,\n        },\n      ]}\n      <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">accessibilityLabel:</span> &#x27;<span class=\"hljs-attr\">Add</span> <span class=\"hljs-attr\">sales</span> <span class=\"hljs-attr\">channel</span>&#x27;,\n        <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">CirclePlusOutlineMinor</span>,\n        <span class=\"hljs-attr\">onClick:</span> () =&gt;</span> {},\n      }}\n    /&gt;\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Navigation</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Frame</span>&gt;\n</pre></code></p>\n<h3 id=\"navigation-with-a-secondary-action-for-an-item\">Navigation with a secondary action for an item</h3>\n<p>Use to add a different action for an item than the main action, like to view or add something.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Frame</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation.Section</span>\n      <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Home</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">HomeMinor</span>,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Orders</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">OrdersMinor</span>,\n          <span class=\"hljs-attr\">secondaryAction:</span> {\n            <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">admin</span>/<span class=\"hljs-attr\">orders</span>/<span class=\"hljs-attr\">add</span>&#x27;,\n            <span class=\"hljs-attr\">accessibilityLabel:</span> &#x27;<span class=\"hljs-attr\">Add</span> <span class=\"hljs-attr\">an</span> <span class=\"hljs-attr\">order</span>&#x27;,\n            <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">CirclePlusOutlineMinor</span>,\n          },\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Products</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ProductsMinor</span>,\n        },\n      ]}\n    /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Navigation</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Frame</span>&gt;\n</pre></code></p>\n<h3 id=\"navigation-with-section-rollup\">Navigation with section rollup</h3>\n<p>Use to show a limited number of items in a section with an option to expand the remaining items.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Frame</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation.Section</span>\n      <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Home</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">HomeMinor</span>,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Orders</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">OrdersMinor</span>,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Products</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ProductsMinor</span>,\n        },\n      ]}\n      <span class=\"hljs-attr\">rollup</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">after:</span> <span class=\"hljs-attr\">2</span>,\n        <span class=\"hljs-attr\">view:</span> &#x27;<span class=\"hljs-attr\">view</span>&#x27;,\n        <span class=\"hljs-attr\">hide:</span> &#x27;<span class=\"hljs-attr\">hide</span>&#x27;,\n        <span class=\"hljs-attr\">activePath:</span> &#x27;/&#x27;,\n      }}\n    /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Navigation</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Frame</span>&gt;\n</pre></code></p>\n<h3 id=\"navigation-with-section-separator\">Navigation with section separator</h3>\n<p>Use to add a horizontal line below the section.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Frame</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation.Section</span>\n      <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Home</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">HomeMinor</span>,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Orders</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">OrdersMinor</span>,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Products</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ProductsMinor</span>,\n        },\n      ]}\n    /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation.Section</span>\n      <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Online</span> <span class=\"hljs-attr\">Store</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">OnlineStoreMinor</span>,\n        },\n      ]}\n      <span class=\"hljs-attr\">separator</span>\n    /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Navigation</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Frame</span>&gt;\n</pre></code></p>\n<h3 id=\"navigation-with-various-states-and-secondary-elements\">Navigation with various states and secondary elements</h3>\n<p>This example showcases the many elements that can compose a navigation, especially useful for testing purposes.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Frame</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation.Section</span>\n      <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Inactive</span> <span class=\"hljs-attr\">item</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">HomeMinor</span>,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Item</span> <span class=\"hljs-attr\">with</span> <span class=\"hljs-attr\">indicator</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">HomeMinor</span>,\n          <span class=\"hljs-attr\">subNavigationItems:</span> [\n            {\n              <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>/<span class=\"hljs-attr\">index</span>&#x27;,\n              <span class=\"hljs-attr\">disabled:</span> <span class=\"hljs-attr\">false</span>,\n              <span class=\"hljs-attr\">new:</span> <span class=\"hljs-attr\">true</span>,\n              <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">New</span> <span class=\"hljs-attr\">item</span>&#x27;,\n            },\n          ],\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">External</span> <span class=\"hljs-attr\">link</span> <span class=\"hljs-attr\">item</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">HomeMinor</span>,\n          <span class=\"hljs-attr\">external:</span> <span class=\"hljs-attr\">true</span>,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">New</span> <span class=\"hljs-attr\">item</span>&#x27;,\n          <span class=\"hljs-attr\">new:</span> <span class=\"hljs-attr\">true</span>,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">HomeMinor</span>,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Badged</span> <span class=\"hljs-attr\">item</span>&#x27;,\n          <span class=\"hljs-attr\">badge:</span> &#x27;<span class=\"hljs-attr\">Old</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">HomeMinor</span>,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Active</span> <span class=\"hljs-attr\">with</span> <span class=\"hljs-attr\">secondary</span> <span class=\"hljs-attr\">action</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">OrdersMinor</span>,\n          <span class=\"hljs-attr\">selected:</span> <span class=\"hljs-attr\">true</span>,\n          <span class=\"hljs-attr\">secondaryAction:</span> {\n            <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">admin</span>/<span class=\"hljs-attr\">orders</span>/<span class=\"hljs-attr\">add</span>&#x27;,\n            <span class=\"hljs-attr\">accessibilityLabel:</span> &#x27;<span class=\"hljs-attr\">Add</span> <span class=\"hljs-attr\">an</span> <span class=\"hljs-attr\">order</span>&#x27;,\n            <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">CirclePlusOutlineMinor</span>,\n          },\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">admin</span>/<span class=\"hljs-attr\">products</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Active</span> <span class=\"hljs-attr\">item</span> <span class=\"hljs-attr\">with</span> <span class=\"hljs-attr\">sub</span> <span class=\"hljs-attr\">navigation</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ProductsMinor</span>,\n          <span class=\"hljs-attr\">selected:</span> <span class=\"hljs-attr\">true</span>,\n          <span class=\"hljs-attr\">subNavigationItems:</span> [\n            {\n              <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">admin</span>/<span class=\"hljs-attr\">products</span>&#x27;,\n              <span class=\"hljs-attr\">disabled:</span> <span class=\"hljs-attr\">false</span>,\n              <span class=\"hljs-attr\">selected:</span> <span class=\"hljs-attr\">true</span>,\n              <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Selected</span> <span class=\"hljs-attr\">sub</span> <span class=\"hljs-attr\">item</span>&#x27;,\n            },\n            {\n              <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">admin</span>/<span class=\"hljs-attr\">products</span>/<span class=\"hljs-attr\">transfers</span>&#x27;,\n              <span class=\"hljs-attr\">disabled:</span> <span class=\"hljs-attr\">false</span>,\n              <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Default</span> <span class=\"hljs-attr\">sub</span> <span class=\"hljs-attr\">item</span>&#x27;,\n            },\n            {\n              <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">admin</span>/<span class=\"hljs-attr\">products</span>/<span class=\"hljs-attr\">inventory</span>&#x27;,\n              <span class=\"hljs-attr\">disabled:</span> <span class=\"hljs-attr\">true</span>,\n              <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Disabled</span> <span class=\"hljs-attr\">sub</span> <span class=\"hljs-attr\">item</span>&#x27;,\n            },\n          ],\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Disabled</span> <span class=\"hljs-attr\">item</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">CustomersMinor</span>,\n          <span class=\"hljs-attr\">disabled:</span> <span class=\"hljs-attr\">true</span>,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Overflow</span> <span class=\"hljs-attr\">item</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">MarketingMinor</span>,\n        },\n      ]}\n      <span class=\"hljs-attr\">rollup</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">after:</span> <span class=\"hljs-attr\">7</span>,\n        <span class=\"hljs-attr\">view:</span> &#x27;<span class=\"hljs-attr\">view</span>&#x27;,\n        <span class=\"hljs-attr\">hide:</span> &#x27;<span class=\"hljs-attr\">hide</span>&#x27;,\n        <span class=\"hljs-attr\">activePath:</span> &#x27;/&#x27;,\n      }}\n    /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation.Section</span>\n      <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;These icons should have the same color&quot;</span>\n      <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Icon</span> <span class=\"hljs-attr\">as</span> <span class=\"hljs-attr\">svg</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">OnlineStoreMinor</span>,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Icon</span> <span class=\"hljs-attr\">as</span> <span class=\"hljs-attr\">img</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> &#x27;&lt;<span class=\"hljs-attr\">svg</span> <span class=\"hljs-attr\">viewBox</span>=<span class=\"hljs-string\">&quot;0 0 20 20&quot;</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M1.791 2.253l-.597 3.583A1 1 0 0 0 2.18 7h.893a1.5 1.5 0 0 0 1.342-.83L5 5l.585 1.17A1.5 1.5 0 0 0 6.927 7h1.146a1.5 1.5 0 0 0 1.342-.83L10 5l.585 1.17a1.5 1.5 0 0 0 1.342.83h1.146a1.5 1.5 0 0 0 1.342-.83L15 5l.585 1.17a1.5 1.5 0 0 0 1.342.83h.893a1 1 0 0 0 .986-1.164l-.597-3.583A1.5 1.5 0 0 0 16.729 1H3.271a1.5 1.5 0 0 0-1.48 1.253zM4 18.5A1.5 1.5 0 0 1 5.5 17H8v-3h4v3h2.5a1.5 1.5 0 0 1 1.5 1.5v.5H4v-.5z&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M2 9h2v4h12V9h2v4.5a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 2 13.5V9z&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span>&#x27;,\n        },\n        {\n          url: &#x27;/&#x27;,\n          label: &#x27;Icon as img – Active&#x27;,\n          icon: &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">viewBox</span>=<span class=\"hljs-string\">&quot;0 0 20 20&quot;</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M1.791 2.253l-.597 3.583A1 1 0 0 0 2.18 7h.893a1.5 1.5 0 0 0 1.342-.83L5 5l.585 1.17A1.5 1.5 0 0 0 6.927 7h1.146a1.5 1.5 0 0 0 1.342-.83L10 5l.585 1.17a1.5 1.5 0 0 0 1.342.83h1.146a1.5 1.5 0 0 0 1.342-.83L15 5l.585 1.17a1.5 1.5 0 0 0 1.342.83h.893a1 1 0 0 0 .986-1.164l-.597-3.583A1.5 1.5 0 0 0 16.729 1H3.271a1.5 1.5 0 0 0-1.48 1.253zM4 18.5A1.5 1.5 0 0 1 5.5 17H8v-3h4v3h2.5a1.5 1.5 0 0 1 1.5 1.5v.5H4v-.5z&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M2 9h2v4h12V9h2v4.5a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 2 13.5V9z&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span>&#x27;,\n        },\n        {\n          url: &#x27;/path/to/place&#x27;,\n          label: &#x27;Other secondary action&#x27;,\n          icon: &#x27;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;<a href=\"http://www.w3.org/2000/svg\">http://www.w3.org/2000/svg</a>&quot;</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;16&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;16&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">d</span>=<span class=\"hljs-string\">&quot;M2.771 14.055A8 8 0 1 1 16 8c0 2.385-1.086 4.629-2.704 5.983A7.956 7.956 0 0 1 7.991 16c-.613 0-2.022-.003-5-.01h-.928l.708-1.935zm5.973-6.757c-.554-.302-.837-.565-.837-.92 0-.446.4-.735 1.017-.735a3.62 3.62 0 0 1 1.365.302l.502-1.577S10.328 4 8.963 4C7.057 4 5.73 5.117 5.73 6.68c0 .894.618 1.565 1.442 2.05.67.382.901.658.901 1.065 0 .42-.334.762-.952.762-.915 0-1.79-.486-1.79-.486l-.54 1.577s.797.552 2.15.552c1.956 0 3.373-.986 3.373-2.76-.013-.959-.721-1.642-1.571-2.142z&quot;</span>/&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span>&#x27;,\n          secondaryAction: {\n            url: &#x27;/path/to/place/view&#x27;,\n            accessibilityLabel: &#x27;View your online store&#x27;,\n            icon: ViewMinor,\n          },\n        },\n      ]}\n      action={{\n        accessibilityLabel: &#x27;Add sales channel&#x27;,\n        icon: CirclePlusOutlineMinor,\n        onClick: () =&gt; {},\n      }}\n      separator\n    /&gt;\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Navigation</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Frame</span>&gt;\n</pre></code></p>\n<h3 id=\"navigation-with-aria-labelledby\">Navigation with aria-labelledby</h3>\n<p>This example shows how to add an aria-labelledby to add a hidden label to the <code>nav</code> element.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Frame</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;/&quot;</span> <span class=\"hljs-attr\">ariaLabelledBy</span>=<span class=\"hljs-string\">&quot;label-id&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">VisuallyHidden</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;label-id&quot;</span>&gt;</span>Hidden label<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">VisuallyHidden</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation.Section</span>\n      <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Home</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">HomeMinor</span>,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Orders</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">OrdersMinor</span>,\n          <span class=\"hljs-attr\">badge:</span> &#x27;<span class=\"hljs-attr\">15</span>&#x27;,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Products</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ProductsMinor</span>,\n        },\n      ]}\n    /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Navigation</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Frame</span>&gt;\n</pre></code></p>\n<h3 id=\"navigation-using-major-icons\">Navigation using Major icons</h3>\n<p>This example shows how to use the shouldResizeIcon prop when using Major icons</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Frame</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Navigation.Section</span>\n      <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Home</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">HomeMajor</span>,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Orders</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">OrdersMajor</span>,\n          <span class=\"hljs-attr\">badge:</span> &#x27;<span class=\"hljs-attr\">15</span>&#x27;,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Products</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ProductsMajor</span>,\n        },\n        {\n          <span class=\"hljs-attr\">url:</span> &#x27;/<span class=\"hljs-attr\">path</span>/<span class=\"hljs-attr\">to</span>/<span class=\"hljs-attr\">place</span>&#x27;,\n          <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Customers</span>&#x27;,\n          <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">CustomersMajor</span>,\n        },\n      ]}\n    /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Navigation</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Frame</span>&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To provide the structure for the navigation component, including the left sidebar and the top bar use the <a href=\"https://polaris.shopify.com/components/structure/frame\">frame</a> component.</li>\n<li>To display the navigation component on small screens, to provide search and a user menu, or to theme the <a href=\"https://polaris.shopify.com/components/structure/frame\">frame</a> component to reflect an application’s brand, use the <a href=\"https://polaris.shopify.com/components/structure/top-bar\">top bar</a> component.</li>\n<li>To tell merchants their options once they have made changes to a form on the page use the <a href=\"https://polaris.shopify.com/components/forms/contextual-save-bar\">contextual save bar</a> component.</li>\n<li>To provide quick, at-a-glance feedback on the outcome of an action, use the <a href=\"https://polaris.shopify.com/components/feedback-indicators/toast\">toast</a> component.</li>\n<li>To indicate to merchants that a page is loading or an upload is processing use the <a href=\"https://polaris.shopify.com/components/feedback-indicators/loading\">loading</a> component.</li>\n<li>To alternate among related views within the same context, use the <a href=\"https://polaris.shopify.com/components/navigation/tabs\">tabs</a> component.</li>\n<li>To embed a single action or link within a larger span of text, use the <a href=\"https://polaris.shopify.com/components/navigation/link\">link</a> component.</li>\n</ul>\n"
  },
  "OptionList": {
    "name": "Option list",
    "category": "Lists and tables",
    "keywords": [
      "option list",
      "choices",
      "decision",
      "list",
      "list of tags",
      "list of collections",
      "collections lists",
      "collection lists",
      "list selection"
    ],
    "readme": "<h1 id=\"option-list\">Option list</h1>\n<p>The option list component lets you create a list of grouped items that\nmerchants can pick from. This can include single selection or multiple selection\nof options. Option list usually appears in a popover, and sometimes in a modal\nor a sidebar. Option lists are styled differently than\n<a href=\"https://polaris.shopify.com/components/forms/choice-list\">choice lists</a> and should not be used within a form, but as a standalone menu.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The option list component should:</p>\n<ul>\n<li>Be placed on its own inside a container. Usually the container behaves like a\nmenu, as it does with <a href=\"https://polaris.shopify.com/components/overlays/popover\">popover</a>. Don’t\nplace other components within the same container.</li>\n<li>Not be used when a <a href=\"https://polaris.shopify.com/components/forms/select\">select component</a> will do.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"option-lists\">Option lists</h3>\n<p>Each item in an option list should be clear and descriptive.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Traffic referrer source</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>Source</li>\n</ul>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"simple-option-list\">Simple option list</h3>\n<p>Use for a group of similar selectable items when only one should be selectable at once.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">OptionListExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>([]);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">OptionList</span>\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Inventory Location&quot;</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{setSelected}</span>\n        <span class=\"hljs-attr\">options</span>=<span class=\"hljs-string\">{[</span>\n          {<span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">byward_market</span>&#x27;, <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Byward</span> <span class=\"hljs-attr\">Market</span>&#x27;},\n          {<span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">centretown</span>&#x27;, <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Centretown</span>&#x27;},\n          {<span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">hintonburg</span>&#x27;, <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Hintonburg</span>&#x27;},\n          {<span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">westboro</span>&#x27;, <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Westboro</span>&#x27;},\n          {<span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">downtown</span>&#x27;, <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Downtown</span>&#x27;},\n        ]}\n        <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selected}</span>\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"multiple-option-list\">Multiple option list</h3>\n<p>Use when you have a group of similar selectable items and more than one item can be selected at once.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MultipleOptionListExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>([]);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">OptionList</span>\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Manage sales channels availability&quot;</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{setSelected}</span>\n        <span class=\"hljs-attr\">options</span>=<span class=\"hljs-string\">{[</span>\n          {<span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">online_store</span>&#x27;, <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Online</span> <span class=\"hljs-attr\">Store</span>&#x27;},\n          {<span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">messenger</span>&#x27;, <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Messenger</span>&#x27;},\n          {<span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">facebook</span>&#x27;, <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Facebook</span>&#x27;},\n          {<span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">wholesale</span>&#x27;, <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Wholesale</span>&#x27;},\n          {<span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">buzzfeed</span>&#x27;, <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">BuzzFeed</span>&#x27;},\n        ]}\n        <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selected}</span>\n        <span class=\"hljs-attr\">allowMultiple</span>\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"option-list-with-sections\">Option list with sections</h3>\n<p>Use sections when you have multiple groups of similar selectable items.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">OptionListWithSectionsExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>([]);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">OptionList</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{setSelected}</span>\n        <span class=\"hljs-attr\">sections</span>=<span class=\"hljs-string\">{[</span>\n          {\n            <span class=\"hljs-attr\">options:</span> [\n              {<span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">type</span>&#x27;, <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Sale</span> <span class=\"hljs-attr\">item</span> <span class=\"hljs-attr\">type</span>&#x27;},\n              {<span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">kind</span>&#x27;, <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Sale</span> <span class=\"hljs-attr\">kind</span>&#x27;},\n            ],\n          },\n          {\n            <span class=\"hljs-attr\">title:</span> &#x27;<span class=\"hljs-attr\">Traffic</span>&#x27;,\n            <span class=\"hljs-attr\">options:</span> [\n              {<span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">source</span>&#x27;, <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Traffic</span> <span class=\"hljs-attr\">referrer</span> <span class=\"hljs-attr\">source</span>&#x27;},\n              {<span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">host</span>&#x27;, <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Traffic</span> <span class=\"hljs-attr\">referrer</span> <span class=\"hljs-attr\">host</span>&#x27;},\n              {<span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">path</span>&#x27;, <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Traffic</span> <span class=\"hljs-attr\">referrer</span> <span class=\"hljs-attr\">path</span>&#x27;},\n            ],\n          },\n        ]}\n        <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selected}</span>\n        <span class=\"hljs-attr\">allowMultiple</span>\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"option-list-in-a-popover\">Option list in a popover</h3>\n<p>Use when a set of selections won’t fit in the available screen space.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">OptionListInPopoverExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>([]);\n  <span class=\"hljs-keyword\">const</span> [popoverActive, setPopoverActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> togglePopoverActive = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setPopoverActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">popoverActive</span>) =&gt;</span> !popoverActive),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> activator = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{togglePopoverActive}</span> <span class=\"hljs-attr\">disclosure</span>&gt;</span>\n      Options\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">275px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Popover</span>\n        <span class=\"hljs-attr\">active</span>=<span class=\"hljs-string\">{popoverActive}</span>\n        <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{activator}</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{togglePopoverActive}</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">OptionList</span>\n          <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Inventory Location&quot;</span>\n          <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{setSelected}</span>\n          <span class=\"hljs-attr\">options</span>=<span class=\"hljs-string\">{[</span>\n            {\n              <span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">byward_market</span>&#x27;,\n              <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Byward</span> <span class=\"hljs-attr\">Market</span>&#x27;,\n              <span class=\"hljs-attr\">active:</span> <span class=\"hljs-attr\">true</span>,\n            },\n            {<span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">centretown</span>&#x27;, <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Centretown</span>&#x27;},\n            {\n              <span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">hintonburg</span>&#x27;,\n              <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Hintonburg</span>&#x27;,\n              <span class=\"hljs-attr\">active:</span> <span class=\"hljs-attr\">true</span>,\n            },\n            {<span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">westboro</span>&#x27;, <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Westboro</span>&#x27;},\n            {<span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">downtown</span>&#x27;, <span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Downtown</span>&#x27;},\n          ]}\n          <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selected}</span>\n        /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Popover</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To render a list of actions,\n<a href=\"https://polaris.shopify.com/components/actions/action-list\">use the action list component</a></li>\n<li>To create a list of grouped radio buttons or checkboxes,\n<a href=\"https://polaris.shopify.com/components/forms/choice-list\">use the choice list component</a></li>\n<li>For a basic version of option list as a single choice menu,\n<a href=\"https://polaris.shopify.com/components/forms/select\">use the select component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>Items in an option list are organized as list items (<code>&lt;li&gt;</code>) in an unordered list (<code>&lt;ul&gt;</code>) and are conveyed as a group of related elements to assistive technology users.</p>\n<p>Controls in simple option lists are <a href=\"https://polaris.shopify.com/components/actions/button\">buttons</a>, and controls in multiple option lists are <a href=\"https://polaris.shopify.com/components/forms/checkbox\">checkboxes</a>.</p>\n<p>If you customize the option list, you can provide ARIA roles that fit the context. These roles must be valid according to the <a href=\"https://www.w3.org/TR/wai-aria-1.1/\">W3C ARIA specification</a> to be conveyed correctly to screen reader users.</p>\n<ul>\n<li>The <code>role</code> prop adds an ARIA role to the option list wrapper</li>\n<li>The <code>optionRole</code> prop adds an ARIA role to the option list items</li>\n</ul>\n<!-- /content-for -->\n"
  },
  "Page": {
    "name": "Page",
    "category": "Structure",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "page",
      "breadcrumbs",
      "view",
      "title",
      "titlebar",
      "breadcrumbs",
      "pagination",
      "page with all header elements",
      "page without primary action in header",
      "page without pagination",
      "full-width page",
      "narrow-width page",
      "page with action groups",
      "outer wrapper",
      "page actions",
      "page layouts",
      "android",
      "ios"
    ],
    "readme": "<h1 id=\"page\">Page</h1>\n<p>Use to build the outer wrapper of a page, including the page title and associated actions.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The page component should:</p>\n<ul>\n<li>Always provide a title for the page header.</li>\n<li>Always provide breadcrumbs when a page has a parent page.</li>\n<li>Be organized around a primary activity. If that primary activity is a single action, provide it as a primary button in the page header.</li>\n<li>Provide other page-level actions as secondary actions in the page header.</li>\n<li>When the page represents an object of a certain type, provide pagination links to the previous and next object of the same type.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"title\">Title</h3>\n<p>Titles should:</p>\n<ul>\n<li>Describe the page in as few words as possible.</li>\n<li>Be the name of the object type (pluralized) when the page is a list of objects. For a list of orders, the page title should be “Orders”.</li>\n<li>Not be truncated.</li>\n</ul>\n<h3 id=\"app-icon\">App icon</h3>\n<p>App icons should:</p>\n<ul>\n<li>Provide their app icon</li>\n<li>Only be provided for pages that are part of a Shopify app</li>\n</ul>\n<h3 id=\"breadcrumbs\">Breadcrumbs</h3>\n<p>The content of each breadcrumb link should be the title of the page to which it links.</p>\n<h3 id=\"page-header-actions\">Page header actions</h3>\n<p>Page header action labels should be:</p>\n<ul>\n<li><p>Clear and predictable: merchants should be able to anticipate what will\nhappen when they click a page action. Never deceive merchants by mislabeling an action.</p>\n</li>\n<li><p>Action-led: they should always lead with a strong verb that encourages\naction. To provide enough context to merchants, use the {verb}+{noun} format.</p>\n</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Create order</li>\n<li>View in Postmates</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>Create</li>\n<li>Postmates deliveries</li>\n</ul>\n</div></div>\n\n<ul>\n<li><p>Short: for secondary actions, when the noun represents the same object as the page itself, a verb alone may be used. If there is ambiguity (such as with the verb “Cancel”), always use the {verb}+{noun} format.</p>\n<p>In the context of the orders list page:</p>\n</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Import</li>\n<li>Export</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>Import orders</li>\n<li>Export orders</li>\n</ul>\n</div></div>\n\n<ul>\n<li>Scannable: avoid unnecessary words and articles such as the, an, or a.</li>\n</ul>\n<!-- usageblock -->\n\n<h4 id=\"do-2\">Do</h4>\n<p>Add menu item</p>\n<h4 id=\"dont-2\">Don’t</h4>\n<p>Add a menu item</p>\n,\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"page-with-all-header-elements\">Page with all header elements</h3>\n<!-- content-for: web -->\n\n<p>Use for detail pages, which should have pagination and breadcrumbs, and also often have several actions.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Page</span>\n  breadcrumbs={[{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Products&#x27;</span>, <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;/products&#x27;</span>}]}\n  title=<span class=\"hljs-string\">&quot;3/4 inch Leather pet collar&quot;</span>\n  titleMetadata={<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span> <span class=\"hljs-attr\">status</span>=<span class=\"hljs-string\">&quot;success&quot;</span>&gt;</span>Paid<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span></span>}\n  subtitle=<span class=\"hljs-string\">&quot;Perfect for any pet&quot;</span>\n  compactTitle\n  primaryAction={{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Save&#x27;</span>, <span class=\"hljs-attr\">disabled</span>: <span class=\"hljs-literal\">true</span>}}\n  secondaryActions={[\n    {\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Duplicate&#x27;</span>,\n      <span class=\"hljs-attr\">accessibilityLabel</span>: <span class=\"hljs-string\">&#x27;Secondary action label&#x27;</span>,\n      <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;Duplicate action&#x27;</span>),\n    },\n    {\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;View on your store&#x27;</span>,\n      <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;View on your store action&#x27;</span>),\n    },\n  ]}\n  actionGroups={[\n    {\n      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;Promote&#x27;</span>,\n      <span class=\"hljs-attr\">accessibilityLabel</span>: <span class=\"hljs-string\">&#x27;Action group label&#x27;</span>,\n      <span class=\"hljs-attr\">actions</span>: [\n        {\n          <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Share on Facebook&#x27;</span>,\n          <span class=\"hljs-attr\">accessibilityLabel</span>: <span class=\"hljs-string\">&#x27;Individual action label&#x27;</span>,\n          <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;Share on Facebook action&#x27;</span>),\n        },\n      ],\n    },\n  ]}\n  pagination={{\n    <span class=\"hljs-attr\">hasPrevious</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">hasNext</span>: <span class=\"hljs-literal\">true</span>,\n  }}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Credit card&quot;</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Credit card information<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Page</span>&gt;\n</pre></code></p>\n<!-- /content-for -->\n\n<!-- content-for: android -->\n\n<p>Use for detail pages, which should have breadcrumbs, and also often have several actions.</p>\n<p>Use for building any page on Android.</p>\n<p><img src=\"/images-from-old-styleguide/components/Page/android/with-header@2x.png\" alt=\"Page on Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>Use for detail pages, which should have breadcrumbs, and also often have several actions.</p>\n<p>Use for building any page on iOS.</p>\n<p><img src=\"/images-from-old-styleguide/components/Page/ios/with-header@2x.png\" alt=\"Page on iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"page-with-custom-primary-action\">Page with custom primary action</h3>\n<!-- example-for: web -->\n\n<p>Use to create a custom primary action.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Page</span>\n  breadcrumbs={[{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Settings&#x27;</span>, <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;/settings&#x27;</span>}]}\n  title=<span class=\"hljs-string\">&quot;General&quot;</span>\n  primaryAction={\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>\n      <span class=\"hljs-attr\">primary</span>\n      <span class=\"hljs-attr\">connectedDisclosure</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">accessibilityLabel:</span> &#x27;<span class=\"hljs-attr\">Other</span> <span class=\"hljs-attr\">save</span> <span class=\"hljs-attr\">actions</span>&#x27;,\n        <span class=\"hljs-attr\">actions:</span> [{<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Save</span> <span class=\"hljs-attr\">as</span> <span class=\"hljs-attr\">new</span>&#x27;}],\n      }}\n    &gt;</span>\n      Save\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  }\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Credit card&quot;</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Credit card information<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Page</span>&gt;\n</pre></code></p>\n<h3 id=\"page-without-primary-action-in-header\">Page without primary action in header</h3>\n<!-- example-for: web -->\n\n<p>Use when a primary action functions better as part of the page content instead of in the page header.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Page</span>\n  breadcrumbs={[{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Orders&#x27;</span>, <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;/orders&#x27;</span>}]}\n  title=<span class=\"hljs-string\">&quot;#1085&quot;</span>\n  secondaryActions={[\n    {<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Print&#x27;</span>},\n    {<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Unarchive&#x27;</span>},\n    {<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Cancel order&#x27;</span>},\n  ]}\n  pagination={{\n    <span class=\"hljs-attr\">hasPrevious</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">hasNext</span>: <span class=\"hljs-literal\">true</span>,\n  }}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">sectioned</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Fulfill order&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack</span> <span class=\"hljs-attr\">alignment</span>=<span class=\"hljs-string\">&quot;center&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack.Item</span> <span class=\"hljs-attr\">fill</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Buy postage and ship remaining 2 items<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack.Item</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">primary</span>&gt;</span>Continue<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Page</span>&gt;\n</pre></code></p>\n<h3 id=\"page-with-destructive-secondary-action\">Page with destructive secondary action</h3>\n<!-- example-for: web -->\n\n<p>Used to visually indicate that the secondary page action is destructive.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Page</span>\n  title=<span class=\"hljs-string\">&quot;General&quot;</span>\n  secondaryActions={[{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Delete&#x27;</span>, <span class=\"hljs-attr\">destructive</span>: <span class=\"hljs-literal\">true</span>}]}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Page content<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Page</span>&gt;\n</pre></code></p>\n<h3 id=\"page-with-custom-secondary-action\">Page with custom secondary action</h3>\n<!-- example-for: web -->\n\n<p>Use to create a custom secondary action.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Page</span>\n  title=<span class=\"hljs-string\">&quot;General&quot;</span>\n  secondaryActions={\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>\n      <span class=\"hljs-attr\">connectedDisclosure</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">accessibilityLabel:</span> &#x27;<span class=\"hljs-attr\">Other</span> <span class=\"hljs-attr\">save</span> <span class=\"hljs-attr\">actions</span>&#x27;,\n        <span class=\"hljs-attr\">actions:</span> [{<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Save</span> <span class=\"hljs-attr\">as</span> <span class=\"hljs-attr\">new</span>&#x27;}],\n      }}\n    &gt;</span>\n      Save\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  }\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Page content<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Page</span>&gt;\n</pre></code></p>\n<h3 id=\"page-with-subtitle\">Page with subtitle</h3>\n<!-- example-for: web -->\n\n<p>Use when the page title benefits from secondary content.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Page</span>\n  breadcrumbs={[{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Products&#x27;</span>, <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;/products&#x27;</span>}]}\n  title=<span class=\"hljs-string\">&quot;Invoice&quot;</span>\n  subtitle=<span class=\"hljs-string\">&quot;Statement period: May 3, 2019 to June 2, 2019&quot;</span>\n  secondaryActions={[{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Download&#x27;</span>, <span class=\"hljs-attr\">icon</span>: <span class=\"hljs-title class_\">ArrowDownMinor</span>}]}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Credit card&quot;</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Credit card information<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Page</span>&gt;\n</pre></code></p>\n<h3 id=\"page-with-external-link\">Page with external link</h3>\n<!-- example-for: web -->\n\n<p>Use when a secondary action links to another website. Actions marked external open in a new browser tab.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Page</span>\n  title=<span class=\"hljs-string\">&quot;Jar With Lock-Lid&quot;</span>\n  primaryAction={{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Save&#x27;</span>, <span class=\"hljs-attr\">disabled</span>: <span class=\"hljs-literal\">true</span>}}\n  secondaryActions={[\n    {\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Promote&#x27;</span>,\n      <span class=\"hljs-attr\">external</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">icon</span>: <span class=\"hljs-title class_\">ExternalMinor</span>,\n      <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;<a href=\"https://www.facebook.com/business/learn/facebook-page-build-audience&amp;#x27\">https://www.facebook.com/business/learn/facebook-page-build-audience&amp;#x27</a>;</span>,\n    },\n  ]}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Credit card&quot;</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Credit card information<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Page</span>&gt;\n</pre></code></p>\n<h3 id=\"page-without-pagination\">Page without pagination</h3>\n<!-- example-for: web -->\n\n<p>Use when the page doesn’t represent a list of objects or a detail view for an object.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Page</span>\n  breadcrumbs={[{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Settings&#x27;</span>, <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;/settings&#x27;</span>}]}\n  title=<span class=\"hljs-string\">&quot;General&quot;</span>\n  primaryAction={{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Save&#x27;</span>}}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Credit card&quot;</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Credit card information<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Page</span>&gt;\n</pre></code></p>\n<h3 id=\"full-width-page\">Full-width page</h3>\n<!-- example-for: web -->\n\n<p>Use for layouts that benefit from more screen width, such as wide tables or lists.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Page</span>\n  fullWidth\n  title=<span class=\"hljs-string\">&quot;Orders&quot;</span>\n  primaryAction={{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Create order&#x27;</span>, <span class=\"hljs-attr\">icon</span>: <span class=\"hljs-title class_\">PlusMinor</span>}}\n  secondaryActions={[{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Export&#x27;</span>}]}\n  pagination={{\n    <span class=\"hljs-attr\">hasNext</span>: <span class=\"hljs-literal\">true</span>,\n  }}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Credit card&quot;</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Credit card information<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Page</span>&gt;\n</pre></code></p>\n<h3 id=\"narrow-width-page\">Narrow width page</h3>\n<!-- example-for: web -->\n\n<p>Use a narrow width layout if the page supports a single unified task. When merchants must review the entire page contents to complete their goal, this layout helps focus their attention in a single path from top to bottom.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Page</span>\n  narrowWidth\n  breadcrumbs={[{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Orders&#x27;</span>, <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;/orders&#x27;</span>}]}\n  title=<span class=\"hljs-string\">&quot;Add payment method&quot;</span>\n  primaryAction={{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Save&#x27;</span>, <span class=\"hljs-attr\">disabled</span>: <span class=\"hljs-literal\">true</span>}}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Credit card&quot;</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Credit card information<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PageActions</span>\n    <span class=\"hljs-attr\">primaryAction</span>=<span class=\"hljs-string\">{{content:</span> &#x27;<span class=\"hljs-attr\">Save</span>&#x27;, <span class=\"hljs-attr\">disabled:</span> <span class=\"hljs-attr\">true</span>}}\n    <span class=\"hljs-attr\">secondaryActions</span>=<span class=\"hljs-string\">{[{content:</span> &#x27;<span class=\"hljs-attr\">Delete</span>&#x27;}]}\n  /&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Page</span>&gt;\n</pre></code></p>\n<h3 id=\"page-with-action-groups\">Page with action groups</h3>\n<!-- example-for: web -->\n\n<p>Use action groups for sets of actions that relate to one another, particularly when there are too many to display as secondary actions. Note that these groups will be further rolled up into a single action for smaller displays so that actions do not wrap or overflow the page bounds.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Page</span>\n  title=<span class=\"hljs-string\">&quot;Products&quot;</span>\n  actionGroups={[\n    {\n      <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;Promote&#x27;</span>,\n      <span class=\"hljs-attr\">actions</span>: [\n        {\n          <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Share on Facebook&#x27;</span>,\n          <span class=\"hljs-attr\">onAction</span>: <span class=\"hljs-function\">() =&gt;</span> {},\n        },\n      ],\n    },\n  ]}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Credit card&quot;</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Credit card information<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Page</span>&gt;\n</pre></code></p>\n<h3 id=\"page-with-content-after-title-title-metadata\">Page with content after title (title metadata)</h3>\n<!-- example-for: web -->\n\n<p>Title metadata appears immediately after the page’s title. Use it to communicate brief, important and non-interactive status information about an entire page.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Page</span>\n  breadcrumbs={[{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Products&#x27;</span>, <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;/products&#x27;</span>}]}\n  title=<span class=\"hljs-string\">&quot;Jar With Lock-Lid&quot;</span>\n  titleMetadata={<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span> <span class=\"hljs-attr\">status</span>=<span class=\"hljs-string\">&quot;attention&quot;</span>&gt;</span>Verified<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span></span>}\n  primaryAction={{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Save&#x27;</span>, <span class=\"hljs-attr\">disabled</span>: <span class=\"hljs-literal\">true</span>}}\n  secondaryActions={[{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Duplicate&#x27;</span>}, {<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;View on your store&#x27;</span>}]}\n  pagination={{\n    <span class=\"hljs-attr\">hasPrevious</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">hasNext</span>: <span class=\"hljs-literal\">true</span>,\n  }}\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Credit card&quot;</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Credit card information<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Page</span>&gt;\n</pre></code></p>\n<h3 id=\"page-with-divider\">Page with divider</h3>\n<!-- example-for: web -->\n\n<p>Use when the page needs visual separation between the page header and the content.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Page</span>\n  breadcrumbs={[{<span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Settings&#x27;</span>, <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;/settings&#x27;</span>}]}\n  title=<span class=\"hljs-string\">&quot;General&quot;</span>\n  divider\n&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Credit card&quot;</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Credit card information<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Page</span>&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To lay out the content within a page, use the <a href=\"https://polaris.shopify.com/components/structure/layout\">layout component</a></li>\n<li>To add pagination within the context of a list or other page content, use the <a href=\"https://polaris.shopify.com/components/navigation/pagination\">pagination component</a></li>\n<li>To add primary and secondary calls to action at the bottom of a page, see the <a href=\"https://polaris.shopify.com/components/structure/page-actions\">page actions component</a></li>\n</ul>\n"
  },
  "PageActions": {
    "name": "Page actions",
    "category": "Structure",
    "keywords": [
      "PageActions",
      "bottom of page actions",
      "bottom page actions",
      "primary action",
      "primary page actions",
      "default page actions",
      "save delete actions",
      "save actions",
      "delete actions"
    ],
    "readme": "<h1 id=\"page-actions\">Page actions</h1>\n<p>Page actions let merchants take key actions at the bottom of specific pages in the interface. This is important because sometimes the primary call to action is hard to access when merchants are at the bottom of a page.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Page actions should:</p>\n<ul>\n<li>Include a single primary action on the right. It should be the same as the primary action that shows in the title bar at the top of the page.</li>\n<li>Include a maximum of two secondary actions, but doesn’t have to include any secondary actions.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"call-to-action-buttons\">Call to action buttons</h3>\n<p>Buttons should be:</p>\n<ul>\n<li>Clear and predictable: merchants should be able to anticipate what will happen when they click a button. Never deceive merchants by mislabeling a button.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Create order</li>\n<li>Buy shipping label</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>New order</li>\n<li>Buy</li>\n</ul>\n</div></div>\n\n<ul>\n<li>Action-led: buttons should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on buttons except in the case of common actions like Save, Close, Cancel, or OK.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Activate Apple Pay</li>\n<li>View shipping settings</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>Try Apple Pay</li>\n<li>View your settings</li>\n</ul>\n</div></div>\n\n<ul>\n<li>Scannable: avoid unnecessary words and articles such as the, an, or a.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-2\">Do</h4>\n<ul>\n<li>Add menu item</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-2\">Don’t</h4>\n<ul>\n<li>Add a menu item</li>\n</ul>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-page-actions\">Default page actions</h3>\n<p>Used on a resource page (such as an individual order or product page) to let merchants take key actions at the bottom of the page. Usually, the primary action is Save and the secondary action is Delete.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">PageActions</span>\n  primaryAction={{\n    <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Save&#x27;</span>,\n  }}\n  secondaryActions={[\n    {\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Delete&#x27;</span>,\n      <span class=\"hljs-attr\">destructive</span>: <span class=\"hljs-literal\">true</span>,\n    },\n  ]}\n/&gt;\n</pre></code></p>\n<h3 id=\"primary-action-only\">Primary action only</h3>\n<p>Not all page actions require a secondary action.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">PageActions</span>\n  primaryAction={{\n    <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Save&#x27;</span>,\n  }}\n/&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To add actions to the top of a page, see the <a href=\"https://polaris.shopify.com/components/structure/page\">page component’s</a> action props</li>\n<li>To create a call to action within the context of other page content, use the <a href=\"https://polaris.shopify.com/components/actions/button\">button component</a></li>\n<li>To let merchants move through a collection of items that spans multiple pages, see the <a href=\"https://polaris.shopify.com/components/navigation/pagination\">pagination component</a></li>\n</ul>\n"
  },
  "Pagination": {
    "name": "Pagination",
    "category": "Navigation",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "lists",
      "detail",
      "page",
      "label",
      "pager",
      "previous",
      "next",
      "navigation between pages",
      "page arrows",
      "list navigation",
      "list arrows",
      "list pagination",
      "list pages",
      "previous next buttons",
      "previous buttons",
      "next buttons",
      "ios",
      "android"
    ],
    "readme": "<h1 id=\"pagination\">Pagination</h1>\n<p>Use pagination to let merchants move through an ordered collection of items that has been split into pages. On the web, pagination uses buttons to move back and forth between pages. On iOS and Android, pagination uses infinite scrolling.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>On all platforms, pagination should:</p>\n<ul>\n<li>Only be used for lists with more than 25 items</li>\n</ul>\n<p>Web pagination should:</p>\n<ul>\n<li>Be placed at the bottom of a long list that has been split up into pages</li>\n<li>Pagination should navigate to the previous and next set of items in the paged list</li>\n<li>Hint when merchants are at the first or the last page by disabling the corresponding button</li>\n</ul>\n<p>iOS and Android pagination should:</p>\n<ul>\n<li>Start loading items when merchants are close to the bottom, roughly 5 items from the end</li>\n<li>Show <a href=\"https://polaris.shopify.com/components/feedback-indicators/spinner\">a spinner</a> below the list to indicate that items have been requested</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-pagination\">Default pagination</h3>\n<!-- example-for: web -->\n\n<p>Use for pagination at the bottom of lists.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Pagination</span>\n  hasPrevious\n  onPrevious={<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Previous&#x27;</span>);\n  }}\n  hasNext\n  onNext={<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Next&#x27;</span>);\n  }}\n/&gt;\n</pre></code></p>\n<h3 id=\"pagination-with-keyboard-navigation\">Pagination with keyboard navigation</h3>\n<!-- example-for: web -->\n\n<p>Attach standard keyboard shortcuts to important pagination controls.</p>\n<p><code><pre>\n&lt;div style={{<span class=\"hljs-attr\">height</span>: <span class=\"hljs-string\">&#x27;100px&#x27;</span>}}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Pagination</span>\n    <span class=\"hljs-attr\">hasPrevious</span>\n    <span class=\"hljs-attr\">previousKeys</span>=<span class=\"hljs-string\">{[74]}</span>\n    <span class=\"hljs-attr\">previousTooltip</span>=<span class=\"hljs-string\">&quot;j&quot;</span>\n    <span class=\"hljs-attr\">onPrevious</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {\n      console.log(&#x27;Previous&#x27;);\n    }}\n    hasNext\n    nextKeys={[75]}\n    nextTooltip=&quot;k&quot;\n    onNext={() =&gt; {\n      console.log(&#x27;Next&#x27;);\n    }}\n  /&gt;</span>\n&lt;/div&gt;\n</pre></code></p>\n<h3 id=\"pagination-with-label\">Pagination with label</h3>\n<p>Add a label between navigation buttons to provide more context of the content being viewed by the user.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Pagination</span>\n  label=<span class=\"hljs-string\">&quot;Results&quot;</span>\n  hasPrevious\n  onPrevious={<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Previous&#x27;</span>);\n  }}\n  hasNext\n  onNext={<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Next&#x27;</span>);\n  }}\n/&gt;\n</pre></code></p>\n<h3 id=\"infinite-scroll\">Infinite scroll</h3>\n<!-- example-for: ios, android -->\n\n<p>Use for lists longer than 25 items. In mobile apps it’s natural to scroll to the bottom of the screen to load more items.</p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Pagination/android/default@2x.png\" alt=\"Infinite scroll pagination on Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Pagination/ios/default@2x.png\" alt=\"Infinite scroll pagination on iOS\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To see how pagination is used on a page, see the <a href=\"https://polaris.shopify.com/components/structure/page\">page component</a></li>\n<li>To add primary and secondary calls to action at the bottom of a page, see the <a href=\"https://polaris.shopify.com/components/structure/page-actions\">page actions component</a></li>\n<li>The <a href=\"https://polaris.shopify.com/components/lists-and-tables/resource-list\">resource list component</a> is often combined with pagination to handle long lists of resources such as orders or customers</li>\n<li>To create stand-alone navigational links or calls to action, use the <a href=\"https://polaris.shopify.com/components/actions/button\">button component</a></li>\n<li>To embed actions or pathways to more information within a sentence, use the <a href=\"https://polaris.shopify.com/components/navigation/link\">link component</a></li>\n</ul>\n"
  },
  "Popover": {
    "name": "Popover",
    "category": "Overlays",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "interactive",
      "container",
      "dropdown",
      "drop down",
      "drop-down",
      "popover",
      "pop over",
      "menu",
      "fly out",
      "select",
      "action list",
      "menu",
      "context menu",
      "popover with form components",
      "popover with action list",
      "popover with content and actions",
      "action sheet",
      "ios",
      "android"
    ],
    "readme": "<h1 id=\"popover\">Popover</h1>\n<p>Popovers are small overlays that open on demand. They let merchants access additional content and actions without cluttering the page.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Popovers should:</p>\n<ul>\n<li>Always be positioned next to the button or other interface element that triggers them</li>\n<li>Be used for secondary or less important information and actions since they’re hidden until merchants hit the trigger</li>\n<li>Contain navigation or actions that share a relationships to each other</li>\n<li>Be triggered by a clearly labeled button</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"popover-content\">Popover content</h3>\n<p>If a popover contains actions, they should:</p>\n<ul>\n<li>Be clear and predictable: merchants should be able to anticipate what will happen when they click on an action item. Never deceive merchants by mislabeling an action.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Create order</li>\n<li>Buy shipping label</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>New order</li>\n<li>Buy</li>\n</ul>\n</div></div>\n\n<ul>\n<li>Be action-led: buttons should always lead with a strong verb that encourages action. To provide enough context to merchants use the {verb}+{noun} format on buttons except in the case of common actions like Save, Close, Cancel, or OK.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Rename</li>\n<li>Edit HTML</li>\n<li>Duplicate</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>HTML editing options</li>\n<li>File name changes</li>\n<li>Duplicate this order so that you can make edits, updates, or changes</li>\n</ul>\n</div></div>\n\n<ul>\n<li>Be scannable, especially when the popover contains a list of actions or options. Avoid unnecessary words and articles such as “the”, “an”, or “a”.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-2\">Do</h4>\n<ul>\n<li>Add menu item</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-2\">Don’t</h4>\n<ul>\n<li>Add a menu item</li>\n</ul>\n</div></div>\n\n<p>If the popover includes a series of navigational links, each item should:</p>\n<ul>\n<li>Be concise but still give merchants enough information so they can easily find and accurately navigate to the path they want.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-3\">Do</h4>\n<ul>\n<li>Online store</li>\n<li>Messenger</li>\n<li>Facebook</li>\n<li>Buy Button</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-3\">Don’t</h4>\n<ul>\n<li>Sales channel</li>\n</ul>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"popover-with-action-list\">Popover with action list</h3>\n<p>Use when presenting a set of actions in a disclosable menu.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">PopoverWithActionListExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [popoverActive, setPopoverActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> togglePopoverActive = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setPopoverActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">popoverActive</span>) =&gt;</span> !popoverActive),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> activator = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{togglePopoverActive}</span> <span class=\"hljs-attr\">disclosure</span>&gt;</span>\n      More actions\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">250px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Popover</span>\n        <span class=\"hljs-attr\">active</span>=<span class=\"hljs-string\">{popoverActive}</span>\n        <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{activator}</span>\n        <span class=\"hljs-attr\">autofocusTarget</span>=<span class=\"hljs-string\">&quot;first-node&quot;</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{togglePopoverActive}</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ActionList</span>\n          <span class=\"hljs-attr\">actionRole</span>=<span class=\"hljs-string\">&quot;menuitem&quot;</span>\n          <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[{content:</span> &#x27;<span class=\"hljs-attr\">Import</span>&#x27;}, {<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Export</span>&#x27;}]}\n        /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Popover</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Popover/android/action-list@2x.png\" alt=\"Popover with action list for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Popover/ios/action-list@2x.png\" alt=\"Popover with action list for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"popover-with-content-and-actions\">Popover with content and actions</h3>\n<p>Use to present a combination of content, instructions, and actions in a panel for tasks that are of low or secondary importance to the current page. When used this way, popovers provide useful entry points to related features without overwhelming merchants.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">PopoverContentExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [popoverActive, setPopoverActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> togglePopoverActive = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setPopoverActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">popoverActive</span>) =&gt;</span> !popoverActive),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> activator = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{togglePopoverActive}</span> <span class=\"hljs-attr\">disclosure</span>&gt;</span>\n      Sales channels\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">250px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Popover</span>\n        <span class=\"hljs-attr\">active</span>=<span class=\"hljs-string\">{popoverActive}</span>\n        <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{activator}</span>\n        <span class=\"hljs-attr\">autofocusTarget</span>=<span class=\"hljs-string\">&quot;first-node&quot;</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{togglePopoverActive}</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Popover.Pane</span> <span class=\"hljs-attr\">fixed</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Popover.Section</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Available sales channels<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Popover.Section</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Popover.Pane</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Popover.Pane</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ActionList</span>\n            <span class=\"hljs-attr\">actionRole</span>=<span class=\"hljs-string\">&quot;menuitem&quot;</span>\n            <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[</span>\n              {<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Online</span> <span class=\"hljs-attr\">store</span>&#x27;},\n              {<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Facebook</span>&#x27;},\n              {<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Shopify</span> <span class=\"hljs-attr\">POS</span>&#x27;},\n            ]}\n          /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Popover.Pane</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Popover</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Popover/android/action-content@2x.png\" alt=\"Popover with content and actions for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Popover/ios/action-content@2x.png\" alt=\"Popover with content and actions for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"popover-with-form-components\">Popover with form components</h3>\n<!-- example-for: web -->\n\n<p>Use to present secondary input tasks on demand.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">PopoverFormExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [popoverActive, setPopoverActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);\n  <span class=\"hljs-keyword\">const</span> [tagValue, setTagValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> togglePopoverActive = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setPopoverActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">popoverActive</span>) =&gt;</span> !popoverActive),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTagValueChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setTagValue</span>(value), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> activator = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{togglePopoverActive}</span> <span class=\"hljs-attr\">disclosure</span>&gt;</span>\n      Filter\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">280px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Popover</span>\n        <span class=\"hljs-attr\">active</span>=<span class=\"hljs-string\">{popoverActive}</span>\n        <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{activator}</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{togglePopoverActive}</span>\n        <span class=\"hljs-attr\">ariaHaspopup</span>=<span class=\"hljs-string\">{false}</span>\n        <span class=\"hljs-attr\">sectioned</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormLayout</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Select</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Show all customers where:&quot;</span> <span class=\"hljs-attr\">options</span>=<span class=\"hljs-string\">{[</span>&#x27;<span class=\"hljs-attr\">Tagged</span> <span class=\"hljs-attr\">with</span>&#x27;]} /&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n            <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Tags&quot;</span>\n            <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{tagValue}</span>\n            <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleTagValueChange}</span>\n            <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n          /&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;slim&quot;</span>&gt;</span>Add filter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormLayout</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Popover</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"popover-with-lazy-loaded-list\">Popover with lazy loaded list</h3>\n<!-- example-for: web -->\n\n<p>Use to present merchants with a list that dynamically loads more items on scroll or arrow down.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">PopoverLazyLoadExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [popoverActive, setPopoverActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);\n  <span class=\"hljs-keyword\">const</span> [visibleStaffIndex, setVisibleStaffIndex] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">5</span>);\n  <span class=\"hljs-keyword\">const</span> staff = [\n    <span class=\"hljs-string\">&#x27;Abbey Mayert&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Abbi Senger&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Abdul Goodwin&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Abdullah Borer&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Abe Nader&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Abigayle Smith&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Abner Torphy&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Abraham Towne&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Abraham Vik&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Ada Fisher&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Adah Pouros&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Adam Waelchi&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Adan Zemlak&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Addie Wehner&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Addison Wexler&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Alex Hernandez&#x27;</span>,\n  ];</p>\n<p>  <span class=\"hljs-keyword\">const</span> togglePopoverActive = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setPopoverActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">popoverActive</span>) =&gt;</span> !popoverActive),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleScrolledToBottom = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> totalIndexes = staff.<span class=\"hljs-property\">length</span>;\n    <span class=\"hljs-keyword\">const</span> interval =\n      visibleStaffIndex + <span class=\"hljs-number\">3</span> &lt; totalIndexes\n        ? <span class=\"hljs-number\">3</span>\n        : totalIndexes - visibleStaffIndex;</p>\n<pre><code>&lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (interval &amp;gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;) {\n  &lt;span class=&quot;hljs-title function_&quot;&gt;setVisibleStaffIndex&lt;/span&gt;(visibleStaffIndex + interval);\n}\n</code></pre>\n<p>  }, [staff.<span class=\"hljs-property\">length</span>, visibleStaffIndex]);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleResourceListItemClick = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {}, []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> activator = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{togglePopoverActive}</span> <span class=\"hljs-attr\">disclosure</span>&gt;</span>\n      View staff\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> staffList = staff.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, visibleStaffIndex).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">name</span>) =&gt;</span> ({\n    name,\n    <span class=\"hljs-attr\">initials</span>: <span class=\"hljs-title function_\">getInitials</span>(name),\n  }));</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">280px</span>&#x27;}}&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Popover</span>\n          <span class=\"hljs-attr\">sectioned</span>\n          <span class=\"hljs-attr\">active</span>=<span class=\"hljs-string\">{popoverActive}</span>\n          <span class=\"hljs-attr\">activator</span>=<span class=\"hljs-string\">{activator}</span>\n          <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{togglePopoverActive}</span>\n          <span class=\"hljs-attr\">ariaHaspopup</span>=<span class=\"hljs-string\">{false}</span>\n        &gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Popover.Pane</span> <span class=\"hljs-attr\">onScrolledToBottom</span>=<span class=\"hljs-string\">{handleScrolledToBottom}</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ResourceList</span> <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{staffList}</span> <span class=\"hljs-attr\">renderItem</span>=<span class=\"hljs-string\">{renderItem}</span> /&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Popover.Pane</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Popover</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">renderItem</span>(<span class=\"hljs-params\">{name, initials}</span>) {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ResourceList.Item</span>\n        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">{name}</span>\n        <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">Avatar</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;medium&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">{name}</span> <span class=\"hljs-attr\">initials</span>=<span class=\"hljs-string\">{initials}</span> /&gt;</span>}\n        onClick={handleResourceListItemClick}\n      &gt;\n        {name}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ResourceList.Item</span>&gt;</span></span>\n    );\n  }</p>\n<p>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getInitials</span>(<span class=\"hljs-params\">name</span>) {\n    <span class=\"hljs-keyword\">return</span> name\n      .<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27; &#x27;</span>)\n      .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">surnameOrFamilyName</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">return</span> surnameOrFamilyName.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\n      })\n      .<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n  }\n}\n</pre></code></p>\n<h3 id=\"action-sheet\">Action sheet</h3>\n<!-- example-for: ios -->\n\n<p>Use when you have few actions that affects the whole page. Action sheets doesn’t support icons or additional information.</p>\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Popover/ios/action-sheet@2x.png\" alt=\"iOS action sheet\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To put a list of actions in a popover, <a href=\"https://polaris.shopify.com/components/actions/action-list\">use the action list component</a></li>\n<li>To let merchants select simple options from a list, <a href=\"https://polaris.shopify.com/components/forms/select\">use the select component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>Popovers usually contain an <a href=\"https://polaris.shopify.com/components/lists-and-tables/option-list\">option list</a> or an <a href=\"https://polaris.shopify.com/components/actions/action-list\">action list</a>, but can also contain other controls or content.</p>\n<p>To assist screen readers with sending focus to an <a href=\"https://polaris.shopify.com/components/actions/action-list\">action list</a>, pass <code>autofocusTarget=&#39;first-node&#39;</code> to <code>Popover</code>. This will avoid known issues a screen reader may have with keyboard support once focus is moved off the activator.</p>\n<p>Web browsers assign a default value of &#39;menu&#39; to the <code>aria-haspopup</code> role. You can use the prop <code>ariaHaspopup</code> to specify a value. Screen readers may fail to send focus to the <code>Popover</code> content when they expect the content to be adjacent to the element with <code>aria-haspopup</code> in the DOM tree. In this scenario, it is recommended not to provide the <code>ariaHaspopup</code> prop.</p>\n<h3 id=\"keyboard-support\">Keyboard support</h3>\n<ul>\n<li>When a popover opens, focus moves to the first focusable element or to the popover container</li>\n<li>Once focus is in the popover, merchants can access controls in the popover using the <kbd>tab</kbd> key (and <kbd>shift</kbd> + <kbd>tab</kbd> backwards) and standard keystrokes for interacting</li>\n<li>Merchants can dismiss the popover by tabbing out of it, pressing the <kbd>esc</kbd> key, or clicking outside of it</li>\n<li>When the popover is closed, focus returns to the element that launched it</li>\n</ul>\n<!-- /content-for -->\n"
  },
  "ProgressBar": {
    "name": "Progress bar",
    "category": "Feedback indicators",
    "releasedIn": "1.8.0",
    "keywords": [
      "ProgressBar",
      "progress indicator",
      "progress bar",
      "loading"
    ],
    "readme": "<h1 id=\"progress-bar\">Progress bar</h1>\n<p>The progress bar component is used to visually represent the completion of a task or operation. It shows how much of the task has been completed and how much is still left.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Progress bar components should:</p>\n<ul>\n<li>Give merchants an indication of how much of the task has completed and how much is left.</li>\n<li>Not be used for entire page loads. In this case, use the <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-page\">Skeleton page</a> component.</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default\">Default</h3>\n<p>Use this component to visually represent the completion of a task or operation.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">ProgressBar</span> progress={<span class=\"hljs-number\">75</span>} /&gt;\n</pre></code></p>\n<h3 id=\"small-progress-bar\">Small progress bar</h3>\n<p>Use the size option when you need to increase or decrease the visual weight of the progress bar.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">ProgressBar</span> progress={<span class=\"hljs-number\">40</span>} size=<span class=\"hljs-string\">&quot;small&quot;</span> /&gt;\n</pre></code></p>\n<h3 id=\"colored-progress-bars\">Colored progress bars</h3>\n<p>Use the color option when you need to blend the progress bar in a context that calls for it, such as a progress toward success or where it’s the primary focus.</p>\n<p><code><pre>\n&lt;div&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ProgressBar</span> <span class=\"hljs-attr\">progress</span>=<span class=\"hljs-string\">{70}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&quot;primary&quot;</span> /&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ProgressBar</span> <span class=\"hljs-attr\">progress</span>=<span class=\"hljs-string\">{30}</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&quot;success&quot;</span> /&gt;</span></span>\n&lt;/div&gt;\n</pre></code></p>\n<h3 id=\"non-animated-progress-bar\">Non-animated progress bar</h3>\n<p>Use the animated prop when you want to show a static progress bar.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">ProgressBar</span> progress={<span class=\"hljs-number\">80</span>} animated={<span class=\"hljs-literal\">false</span>} /&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>For tasks with a short load time, use the <a href=\"https://polaris.shopify.com/components/feedback-indicators/spinner\">Spinner</a> component</li>\n<li>For full page loads, use the <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-page\">Skeleton page</a> component</li>\n</ul>\n"
  },
  "RadioButton": {
    "name": "Radio button",
    "category": "Forms",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "RadioButton",
      "selection",
      "choices",
      "options",
      "pick",
      "single selection form",
      "choice form",
      "option button",
      "radio button form",
      "toggle",
      "switch"
    ],
    "readme": "<h1 id=\"radio-button\">Radio button</h1>\n<p>Use radio buttons to present each item in a list of options where merchants must\nmake a single selection.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Radio buttons should:</p>\n<ul>\n<li>Always be used with an associated label component.</li>\n<li>Be part of a list of radio buttons that:<ul>\n<li>Include at least two or more choices.</li>\n<li>Are used to have merchants select only one option.</li>\n<li>Include mutually exclusive options—this means that each option must be\nindependent from every other option in the list. For example: Red, blue, and\nyellow are mutually exclusive. Red, blue, yellow, red/blue are not mutually\nexclusive.</li>\n<li>List options in a rational order that makes logical sense.</li>\n<li>Have a default option selected whenever possible.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"radio-button-labels\">Radio button labels</h3>\n<p>Radio button labels should:</p>\n<ul>\n<li>Be introduced with a colon or a heading</li>\n<li>Start with a capital letter</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Option 1</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>option 1</li>\n</ul>\n</div></div>\n\n<ul>\n<li>Not end in punctuation if it’s a single sentence, word, or a fragment</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Red</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>Red;</li>\n</ul>\n</div></div>\n\n<h3 id=\"toggle-android-and-ios-only\">Toggle (Android and iOS only)</h3>\n<p>Toggle labels should:</p>\n<ul>\n<li>Be clear what merchants are enabling or disabling</li>\n<li>Start with a capital letter</li>\n</ul>\n<p>Toggle values should:</p>\n<ul>\n<li>Never be labeled</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-radio-button\">Default radio button</h3>\n<p>Use radio buttons where merchants must make a single selection.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RadioButtonExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;disabled&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">_checked, newValue</span>) =&gt;</span> <span class=\"hljs-title function_\">setValue</span>(newValue),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack</span> <span class=\"hljs-attr\">vertical</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RadioButton</span>\n        <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Accounts are disabled&quot;</span>\n        <span class=\"hljs-attr\">helpText</span>=<span class=\"hljs-string\">&quot;Customers will only be able to check out as guests.&quot;</span>\n        <span class=\"hljs-attr\">checked</span>=<span class=\"hljs-string\">{value</span> === <span class=\"hljs-string\">&#x27;disabled&#x27;</span>}\n        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;disabled&quot;</span>\n        <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;accounts&quot;</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChange}</span>\n      /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RadioButton</span>\n        <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Accounts are optional&quot;</span>\n        <span class=\"hljs-attr\">helpText</span>=<span class=\"hljs-string\">&quot;Customers will be able to check out with a customer account or as a guest.&quot;</span>\n        <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;optional&quot;</span>\n        <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;accounts&quot;</span>\n        <span class=\"hljs-attr\">checked</span>=<span class=\"hljs-string\">{value</span> === <span class=\"hljs-string\">&#x27;optional&#x27;</span>}\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChange}</span>\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/RadioButton/android/default@2x.png\" alt=\"Default radio button on Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/RadioButton/ios/default@2x.png\" alt=\"Default radio button on iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"toggle\">Toggle</h3>\n<!-- example-for: android, ios -->\n\n<p>Use toggles when merchants need to make a binary choice (on or off).</p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/RadioButton/android/toggle@2x.png\" alt=\"Android toggle with on or off options\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/RadioButton/ios/toggle@2x.png\" alt=\"iOS toggle with on or off options\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To make simple lists of radio buttons easier to build, <a href=\"https://polaris.shopify.com/components/forms/choice-list\">use the choice list component</a></li>\n<li>For long lists of options, <a href=\"https://polaris.shopify.com/components/forms/select\">consider the select component</a> to avoid overwhelming merchants</li>\n<li>To present merchants with a list of checkboxes, <a href=\"https://polaris.shopify.com/components/forms/choice-list\">use the choice list component</a> with the “allow multiple” option</li>\n<li>To display non-interactive list of related content, <a href=\"https://polaris.shopify.com/components/lists-and-tables/list\">use the content list component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>Screen readers convey the state of the radio button automatically.</p>\n<ul>\n<li>Use the <code>disabled</code> prop to apply the HTML <code>disabled</code> attribute to the radio button <code>&lt;input&gt;</code>. This prevents merchants from being able to interact with the radio button, and conveys its inactive state to assistive technologies.</li>\n<li>Use the <code>id</code> prop to provide a unique <code>id</code> attribute value for the radio button. If an <code>id</code> isn’t provided, then the component generates one. All radio buttons must have unique <code>id</code> values to work correctly with assistive technologies.</li>\n</ul>\n<h3 id=\"labeling\">Labeling</h3>\n<ul>\n<li>The required <code>label</code> prop conveys the purpose of the radio button to all merchants</li>\n<li>Use the <code>labelHidden</code> prop to visually hide the label but make it available to assistive technologies</li>\n<li>When you provide help text via the <code>helpText</code> prop or an inline error message via the <code>error</code> prop, the help or error content is conveyed to screen reader users with the <code>aria-describedby</code> attribute</li>\n</ul>\n<h3 id=\"keyboard-support\">Keyboard support</h3>\n<ul>\n<li>Move focus to the radio button group using the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)</li>\n<li>Use the up and down arrow keys to change which radio button is selected</li>\n</ul>\n<!-- /content-for -->\n"
  },
  "RangeSlider": {
    "name": "Range slider",
    "category": "Forms",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "RangeSlider",
      "input",
      "range",
      "slider",
      "percent",
      "number",
      "range form"
    ],
    "readme": "<h1 id=\"range-slider\">Range slider</h1>\n<p>A range slider is an input field that merchants can use to select a numeric value within a given range (minimum and maximum values).</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Range sliders should:</p>\n<ul>\n<li>Always be used with a label, even if that label is <code>hidden</code>.</li>\n<li>When a label is visible, it should clearly communicate the purpose of the range input and its values (min, max, step, value)</li>\n<li>Be labeled as “Optional” when you need to request input that’s not required</li>\n<li>Validate input as soon as merchants have finished interacting with a field (but not before)</li>\n<li>Always be used with two text field components when range slider has dual thumbs, to provide accessible alternatives to both the lower and upper thumbs</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"range-label\">Range label</h3>\n<p>A label is a short description of the requested input. Labels are not instructional text but they should be meaningful and clearly indicate what is expected. Labels should be:</p>\n<ul>\n<li>Placed above the form field</li>\n<li>Short and succinct (1–3 words)</li>\n<li>Written in sentence case (the first word capitalized, the rest lowercase)</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Saturation percentage</li>\n<li>Banner width</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>What is the saturation value?</li>\n<li>The banner width is:</li>\n</ul>\n</div></div>\n\n<h3 id=\"designating-optional-fields\">Designating optional fields</h3>\n<p>Try to only ask for information that’s required. If you need to ask merchants\nto provide optional information, mark the field optional by placing the text “(optional)” at the end of the field’s label. Don’t mark required fields with asterisks.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Banner width (optional)</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>Banner width</li>\n</ul>\n</div></div>\n\n<h3 id=\"help-text\">Help text</h3>\n<p>Help text provides extra guidance or instruction to people filling out a form field. It can also be used to clarify how the information will be used. As with all form content, help text should be succinct and easy to read.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-2\">Do</h4>\n<ul>\n<li>Video duration is calculated in seconds</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-2\">Don’t</h4>\n<ul>\n<li>Example: 134 seconds</li>\n</ul>\n</div></div>\n\n<h3 id=\"validation-error-messages\">Validation error messages</h3>\n<p>Error messages should:</p>\n<ul>\n<li>Clearly explain what went wrong and how to fix it</li>\n<li>Be short and concise, no more than a single sentence</li>\n<li>Use <a href=\"https://polaris.shopify.com/content/grammar-and-mechanics\">passive voice</a> so merchants don’t feel like they’re being blamed for the error</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-3\">Do</h4>\n<ul>\n<li>Video duration is required</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-3\">Don’t</h4>\n<ul>\n<li>You didn’t enter a duration</li>\n</ul>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-range-slider\">Default range slider</h3>\n<p>Use when a single value between <code>0 and 100</code> needs to be selected.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RangeSliderExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [rangeValue, setRangeValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">32</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleRangeSliderChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setRangeValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">sectioned</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Background color&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RangeSlider</span>\n        <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Opacity percentage&quot;</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{rangeValue}</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleRangeSliderChange}</span>\n        <span class=\"hljs-attr\">output</span>\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/RangeSlider/android/default@2x.png\" alt=\"Range slider for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/RangeSlider/ios/default@2x.png\" alt=\"Range slider for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"min-and-max-range-control\">Min and max range control</h3>\n<!-- example-for: web -->\n\n<p>Use when a single value needs to be selected from a number range with a specific minimum and maximum.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RangeSliderWithPreciseRangeControlExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [rangeValue, setRangeValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleRangeSliderChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setRangeValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">sectioned</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Navigation branding&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RangeSlider</span>\n        <span class=\"hljs-attr\">output</span>\n        <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Logo offset&quot;</span>\n        <span class=\"hljs-attr\">min</span>=<span class=\"hljs-string\">{-20}</span>\n        <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">{20}</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{rangeValue}</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleRangeSliderChange}</span>\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"step-incremented-range-control\">Step incremented range control</h3>\n<!-- example-for: web -->\n\n<p>Use when a single value of a specific increment needs to be selected from a range of numbers.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RangeSliderWithPreciseRangeControlExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [rangeValue, setRangeValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">4</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleRangeSliderChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setRangeValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">sectioned</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Navigation branding&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RangeSlider</span>\n        <span class=\"hljs-attr\">output</span>\n        <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Logo offset&quot;</span>\n        <span class=\"hljs-attr\">min</span>=<span class=\"hljs-string\">{-20}</span>\n        <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">{20}</span>\n        <span class=\"hljs-attr\">step</span>=<span class=\"hljs-string\">{4}</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{rangeValue}</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleRangeSliderChange}</span>\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"prefix-and-suffix-elements\">Prefix and suffix elements</h3>\n<!-- example-for: web -->\n\n<p>Use when the start or end of the range input benefits from additional content.</p>\n<p>The height of the range slider component varies based on the presence or absence of props like <code>label</code> and <code>helpText</code>. Setting a React element on the <code>prefix</code> and <code>suffix</code> props is supported to enable control of spacing and alignment.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RangeSliderWithPrefixAndSuffixExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [rangeValue, setRangeValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">100</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleRangeSliderChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setRangeValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> suffixStyles = {\n    <span class=\"hljs-attr\">minWidth</span>: <span class=\"hljs-string\">&#x27;24px&#x27;</span>,\n    <span class=\"hljs-attr\">textAlign</span>: <span class=\"hljs-string\">&#x27;right&#x27;</span>,\n  };</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">sectioned</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Text color&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RangeSlider</span>\n        <span class=\"hljs-attr\">output</span>\n        <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Hue color mix&quot;</span>\n        <span class=\"hljs-attr\">min</span>=<span class=\"hljs-string\">{0}</span>\n        <span class=\"hljs-attr\">max</span>=<span class=\"hljs-string\">{360}</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{rangeValue}</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleRangeSliderChange}</span>\n        <span class=\"hljs-attr\">prefix</span>=<span class=\"hljs-string\">{</span>&lt;<span class=\"hljs-attr\">p</span>&gt;</span>Hue<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}\n        suffix={<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{suffixStyles}</span>&gt;</span>{rangeValue}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>}\n      /&gt;\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"dual-thumb-range-slider\">Dual thumb range slider</h3>\n<!-- example-for: web -->\n\n<p>Use when two values need to be selected from a range of numbers.</p>\n<pre><code class=\"language-jsx\">function DualThumbRangeSliderExample() {\n  const initialValue = [900, 1000];\n  const prefix = &#39;$&#39;;\n  const min = 0;\n  const max = 2000;\n  const step = 10;\n\n  const [intermediateTextFieldValue, setIntermediateTextFieldValue] =\n    useState(initialValue);\n  const [rangeValue, setRangeValue] = useState(initialValue);\n\n  const handleRangeSliderChange = useCallback((value) =&gt; {\n    setRangeValue(value);\n    setIntermediateTextFieldValue(value);\n  }, []);\n\n  const handleLowerTextFieldChange = useCallback(\n    (value) =&gt; {\n      const upperValue = rangeValue[1];\n      setIntermediateTextFieldValue([parseInt(value, 10), upperValue]);\n    },\n    [rangeValue],\n  );\n\n  const handleUpperTextFieldChange = useCallback(\n    (value) =&gt; {\n      const lowerValue = rangeValue[0];\n      setIntermediateTextFieldValue([lowerValue, parseInt(value, 10)]);\n    },\n    [rangeValue],\n  );\n\n  const handleLowerTextFieldBlur = useCallback(() =&gt; {\n    const upperValue = rangeValue[1];\n    const value = intermediateTextFieldValue[0];\n\n    setRangeValue([parseInt(value, 10), upperValue]);\n  }, [intermediateTextFieldValue, rangeValue]);\n\n  const handleUpperTextFieldBlur = useCallback(() =&gt; {\n    const lowerValue = rangeValue[0];\n    const value = intermediateTextFieldValue[1];\n\n    setRangeValue([lowerValue, parseInt(value, 10)]);\n  }, [intermediateTextFieldValue, rangeValue]);\n\n  const handleEnterKeyPress = useCallback(\n    (event) =&gt; {\n      const newValue = intermediateTextFieldValue;\n      const oldValue = rangeValue;\n\n      if (event.keyCode === Key.Enter &amp;&amp; newValue !== oldValue) {\n        setRangeValue(newValue);\n      }\n    },\n    [intermediateTextFieldValue, rangeValue],\n  );\n\n  const lowerTextFieldValue =\n    intermediateTextFieldValue[0] === rangeValue[0]\n      ? rangeValue[0]\n      : intermediateTextFieldValue[0];\n\n  const upperTextFieldValue =\n    intermediateTextFieldValue[1] === rangeValue[1]\n      ? rangeValue[1]\n      : intermediateTextFieldValue[1];\n\n  return (\n    &lt;Card sectioned title=&quot;Minimum requirements&quot;&gt;\n      &lt;div onKeyDown={handleEnterKeyPress}&gt;\n        &lt;RangeSlider\n          output\n          label=&quot;Money spent is between&quot;\n          value={rangeValue}\n          prefix={prefix}\n          min={min}\n          max={max}\n          step={step}\n          onChange={handleRangeSliderChange}\n        /&gt;\n        &lt;Stack distribution=&quot;equalSpacing&quot; spacing=&quot;extraLoose&quot;&gt;\n          &lt;TextField\n            label=&quot;Min money spent&quot;\n            type=&quot;number&quot;\n            value={`${lowerTextFieldValue}`}\n            prefix={prefix}\n            min={min}\n            max={max}\n            step={step}\n            onChange={handleLowerTextFieldChange}\n            onBlur={handleLowerTextFieldBlur}\n            autoComplete=&quot;off&quot;\n          /&gt;\n          &lt;TextField\n            label=&quot;Max money spent&quot;\n            type=&quot;number&quot;\n            value={`${upperTextFieldValue}`}\n            prefix={prefix}\n            min={min}\n            max={max}\n            step={step}\n            onChange={handleUpperTextFieldChange}\n            onBlur={handleUpperTextFieldBlur}\n            autoComplete=&quot;off&quot;\n          /&gt;\n        &lt;/Stack&gt;\n      &lt;/div&gt;\n    &lt;/Card&gt;\n  );\n}\n</code></pre>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To collect a number value as a text input, <a href=\"https://polaris.shopify.com/components/forms/text-field\">use the text field component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>The range slider provides a large click and tap target for the slider thumbs. Merchants can also tap or click on the slider track to move the closest slider thumb.</p>\n<h3 id=\"single-thumb-slider\">Single-thumb slider</h3>\n<p>The default range slider component uses the <a href=\"https://www.w3.org/TR/wai-aria-practices-1.1/#slider\">ARIA 1.1 slider pattern</a> to build upon the default HTML <code>&lt;input type=&quot;range&quot;&gt;</code>. The required <code>label</code> prop provides a label for the field that’s conveyed to assistive technologies when it receives focus. When the slider is used, the <code>value</code> prop should update visually and programmatically to reflect the current value.</p>\n<p>To consistently provide the current value to assistive technologies, use the <code>min</code> and <code>max</code> props to provide the minimum and maximum values for the slider.</p>\n<h3 id=\"dual-thumb-slider\">Dual-thumb slider</h3>\n<p>The dual-thumb range slider component uses the <a href=\"https://www.w3.org/TR/wai-aria-practices-1.1/#slidertwothumb\">ARIA 1.1 slider (multi-thumb) pattern</a>. However, the pattern isn’t consistently supported by screen readers, especially on mobile devices. Because of this, it’s best to pair the dual-thumb slider with a set of text fields for each value, or to provide another accessible method for entering information.</p>\n<h3 id=\"keyboard\">Keyboard</h3>\n<ul>\n<li>To move focus to a slider thumb, press the <kbd>tab</kbd> key to move forward and or <kbd>shift</kbd> + <kbd>tab</kbd> to move backward</li>\n<li>When a thumb has focus, use the up and down or left and right arrow keys to move the thumb and update the associated value.</li>\n</ul>\n<!-- /content-for -->\n"
  },
  "ResourceItem": {
    "name": "Resource item",
    "category": "Lists and tables",
    "keywords": [
      "ResourceItem",
      "resource item",
      "collections",
      "items",
      "objects",
      "list of products",
      "list of orders",
      "product lists",
      "order lists",
      "collections lists",
      "collection lists",
      "list of collections",
      "product listings list",
      "channel lists",
      "resource list attributes",
      "list attributes",
      "exceptions list",
      "list secondary actions",
      "secondary actions in a list",
      "list of resources"
    ],
    "readme": "<h1 id=\"resource-item\">Resource item</h1>\n<p>Resource items represent specific objects within a collection, such as products or orders. They provide contextual information on the resource type and link to the object’s detail page.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"simple-resource-item\">Simple resource item</h3>\n<p>A basic resource item with its details filled in at the point of use.</p>\n<pre><code class=\"language-jsx\">function ResourceItemExample() {\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  return (\n    &lt;Card&gt;\n      &lt;ResourceList\n        resourceName={{singular: &#39;blog post&#39;, plural: &#39;blog posts&#39;}}\n        items={[\n          {\n            id: 6,\n            url: &#39;posts/6&#39;,\n            title: &#39;How To Get Value From Wireframes&#39;,\n            author: &#39;Jonathan Mangrove&#39;,\n          },\n        ]}\n        selectedItems={selectedItems}\n        onSelectionChange={setSelectedItems}\n        selectable\n        renderItem={(item) =&gt; {\n          const {id, url, title, author} = item;\n          const authorMarkup = author ? &lt;div&gt;by {author}&lt;/div&gt; : null;\n          return (\n            &lt;ResourceItem\n              id={id}\n              url={url}\n              accessibilityLabel={`View details for ${title}`}\n              name={title}\n            &gt;\n              &lt;h3&gt;\n                &lt;TextStyle variation=&quot;strong&quot;&gt;{title}&lt;/TextStyle&gt;\n              &lt;/h3&gt;\n              {authorMarkup}\n            &lt;/ResourceItem&gt;\n          );\n        }}\n      /&gt;\n    &lt;/Card&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; media\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;The&lt;/span&gt; media element can hold an [avatar](&lt;span class=&quot;hljs-attr&quot;&gt;https&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//polaris.shopify.com/components/images-and-icons/avatar), [thumbnail](https://polaris.shopify.com/components/images-and-icons/thumbnail), or other small-format graphic.&lt;/span&gt;\n\n&lt;/pre&gt;&lt;/code&gt;jsx\n&lt;Card&gt;\n  &lt;ResourceList\n    resourceName={{singular: &#39;customer&#39;, plural: &#39;customers&#39;}}\n    items={[\n      {\n        id: 145,\n        url: &#39;customers/145&#39;,\n        avatarSource:\n          &#39;https://burst.shopifycdn.com/photos/freelance-designer-working-on-laptop.jpg?width=746&#39;,\n        name: &#39;Yi So-Yeon&#39;,\n        location: &#39;Gwangju, South Korea&#39;,\n      },\n    ]}\n    renderItem={(item) =&gt; {\n      const {id, url, avatarSource, name, location} = item;\n\n      return (\n        &lt;ResourceItem\n          id={id}\n          url={url}\n          media={\n            &lt;Avatar customer size=&quot;medium&quot; name={name} source={avatarSource} /&gt;\n          }\n          accessibilityLabel={`View details for ${name}`}\n          name={name}\n        &gt;\n          &lt;h3&gt;\n            &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n          &lt;/h3&gt;\n          &lt;div&gt;{location}&lt;/div&gt;\n        &lt;/ResourceItem&gt;\n      );\n    }}\n  /&gt;\n&lt;/Card&gt;\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; shortcut actions\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Shortcut&lt;/span&gt; actions present popular actions &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; the resource’s details page &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; easy access. A shortcut action should be available on every item &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; the list.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\n&lt;Card&gt;\n  &lt;ResourceList\n    resourceName={{singular: &#39;customer&#39;, plural: &#39;customers&#39;}}\n    items={[\n      {\n        id: 145,\n        url: &#39;customers/145&#39;,\n        avatarSource:\n          &#39;https://burst.shopifycdn.com/photos/freelance-designer-working-on-laptop.jpg?width=746&#39;,\n        name: &#39;Yi So-Yeon&#39;,\n        location: &#39;Gwangju, South Korea&#39;,\n        latestOrderUrl: &#39;orders/1456&#39;,\n      },\n    ]}\n    renderItem={(item) =&gt; {\n      const {id, url, avatarSource, name, location, latestOrderUrl} = item;\n      const shortcutActions = latestOrderUrl\n        ? [{content: &#39;View latest order&#39;, url: latestOrderUrl}]\n        : null;\n\n      return (\n        &lt;ResourceItem\n          id={id}\n          url={url}\n          media={\n            &lt;Avatar customer size=&quot;medium&quot; name={name} source={avatarSource} /&gt;\n          }\n          shortcutActions={shortcutActions}\n          accessibilityLabel={`View details for ${name}`}\n          name={name}\n        &gt;\n          &lt;h3&gt;\n            &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n          &lt;/h3&gt;\n          &lt;div&gt;{location}&lt;/div&gt;\n        &lt;/ResourceItem&gt;\n      );\n    }}\n  /&gt;\n&lt;/Card&gt;\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; vertical alignment\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to adjust the vertical alignment &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; item content.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\n&lt;Card&gt;\n  &lt;ResourceList\n    resourceName={{singular: &#39;customer&#39;, plural: &#39;customers&#39;}}\n    items={[\n      {\n        id: 145,\n        url: &#39;customers/145&#39;,\n        avatarSource:\n          &#39;https://burst.shopifycdn.com/photos/freelance-designer-working-on-laptop.jpg?width=746&#39;,\n        name: &#39;Yi So-Yeon&#39;,\n        location: &#39;Gwangju, South Korea&#39;,\n        lastOrder: &#39;Emerald Silk Gown&#39;,\n      },\n    ]}\n    renderItem={(item) =&gt; {\n      const {id, url, avatarSource, name, location, lastOrder} = item;\n      return (\n        &lt;ResourceItem\n          verticalAlignment=&quot;center&quot;\n          id={id}\n          url={url}\n          media={\n            &lt;Avatar customer size=&quot;medium&quot; name={name} source={avatarSource} /&gt;\n          }\n          accessibilityLabel={`View details for ${name}`}\n          name={name}\n        &gt;\n          &lt;h3&gt;\n            &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n          &lt;/h3&gt;\n          &lt;div&gt;{location}&lt;/div&gt;\n          &lt;div&gt;{lastOrder}&lt;/div&gt;\n        &lt;/ResourceItem&gt;\n      );\n    }}\n  /&gt;\n&lt;/Card&gt;\n</code></pre>\n<hr>\n<h2 id=\"required-components\">Required components</h2>\n<p>The resource item component must be wrapped in the <a href=\"https://polaris.shopify.com/components/lists-and-tables/resource-list\">resource list</a> component.</p>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<p>Resource items function as links to the full-page representations of the items. Each item should have a unique <code>name</code> prop. For each <code>ResourceItem</code>, the <code>accessibilityLabel</code> prop should be used to give the link a unique <code>aria-label</code> value. The <code>aria-label</code> value should convey the link’s purpose, using the <code>name</code> value. Merchants who use screen readers or other text to speech tools should be able to easily distinguish each link from the others.</p>\n<p>When adding custom content to resource items, ensure that all text is available to all users and that all custom controls have a unique accessible name to help users understand what will happen when the control is activated.</p>\n<h3 id=\"keyboard\">Keyboard</h3>\n<p>Links can be activated with the <kbd>enter</kbd>/<kbd>return</kbd> key by default.</p>\n<p>If you add custom controls to resource items, then make sure that the controls:</p>\n<ul>\n<li>Can be used with the keyboard</li>\n<li>Receive keyboard focus in a logical order</li>\n<li>Display a visible focus indicator</li>\n</ul>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Resource items should:</p>\n<ul>\n<li>Be tailored to the specific type of context being displayed.</li>\n<li>Perform an action when clicked. The action should navigate to the resource’s details page or provide more detail about the item.</li>\n</ul>\n<p>Resource items can optionally:</p>\n<ul>\n<li>Provide <a href=\"https://polaris.shopify.com/components/lists-and-tables/resource-list#study-custom-item-shortcut-actions\">shortcut actions</a> for quick access to frequent actions from the resource’s details page.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>Resource items should:</p>\n<ul>\n<li>Present the information that merchants need to find the items that they’re looking for.</li>\n<li>Support merchant tasks for the particular type of resource.</li>\n<li>Avoid colons.</li>\n<li><a href=\"https://polaris.shopify.com/components/lists-and-tables/resource-list#study-custom-item-shortcut-actions\">Shortcut actions</a> don’t need to follow the full verb + noun formula for buttons.</li>\n</ul>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<p>To display a simple list of related content, <a href=\"https://polaris.shopify.com/components/lists-and-tables/list\">use the list component</a>.</p>\n"
  },
  "ResourceList": {
    "name": "Resource list",
    "category": "Lists and tables",
    "keywords": [
      "ResourceList",
      "collections",
      "items",
      "objects",
      "list of products",
      "list of orders",
      "product lists",
      "order lists",
      "collections lists",
      "collection lists",
      "list of collections",
      "product listings list",
      "channel lists",
      "resource list attributes",
      "list attributes",
      "exceptions list",
      "list secondary actions",
      "secondary actions in a list",
      "list of resources",
      "filter",
      "sort"
    ],
    "readme": "<div class=\"usage-list\"><div class=\"usage-list-part\"><h1 id=\"resource-list\">Resource list</h1>\n<p>A resource list displays a collection of objects of the same type, like products or customers. The main job of a resource list is to help merchants find an object and navigate to a full-page representation of it.</p>\n<p>Resource lists can also:</p>\n<ul>\n<li>Support <a href=\"https://polaris.shopify.com/components/lists-and-tables/resource-item\">customized list items</a></li>\n<li>Include bulk actions so merchants can act on multiple objects at once</li>\n<li>Support sorting and <a href=\"https://polaris.shopify.com/components/lists-and-tables/filters\">filtering</a> of long lists</li>\n<li>Be paired with pagination to make long lists digestible</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"simple-resource-list\">Simple resource list</h3>\n<p>A resource list with simple items and no bulk actions, sorting, or filtering.</p>\n<pre><code class=\"language-jsx\">&lt;Card&gt;\n  &lt;ResourceList\n    resourceName={{singular: &#39;customer&#39;, plural: &#39;customers&#39;}}\n    items={[\n      {\n        id: 100,\n        url: &#39;customers/341&#39;,\n        name: &#39;Mae Jemison&#39;,\n        location: &#39;Decatur, USA&#39;,\n      },\n      {\n        id: 200,\n        url: &#39;customers/256&#39;,\n        name: &#39;Ellen Ochoa&#39;,\n        location: &#39;Los Angeles, USA&#39;,\n      },\n    ]}\n    renderItem={(item) =&gt; {\n      const {id, url, name, location} = item;\n      const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n\n      return (\n        &lt;ResourceItem\n          id={id}\n          url={url}\n          media={media}\n          accessibilityLabel={`View details for ${name}`}\n        &gt;\n          &lt;h3&gt;\n            &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n          &lt;/h3&gt;\n          &lt;div&gt;{location}&lt;/div&gt;\n        &lt;/ResourceItem&gt;\n      );\n    }}\n  /&gt;\n&lt;/Card&gt;\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Resource&lt;/span&gt; list &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; empty state\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to explain the purpose &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; a list &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; resources when no resources exist yet. &lt;span class=&quot;hljs-title class_&quot;&gt;This&lt;/span&gt; allows a smooth transition &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; a list &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; a loading state to a list where zero, one, or many resources exist.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction ResourceListWithEmptyStateExample() {\n  const items = [];\n  const appliedFilters = [];\n  const filters = [];\n\n  const filterControl = (\n    &lt;Filters\n      disabled={!items.length}\n      queryValue=&quot;&quot;\n      filters={filters}\n      appliedFilters={appliedFilters}\n    /&gt;\n  );\n\n  const emptyStateMarkup =\n    !appliedFilters.length &amp;&amp; !items.length ? (\n      &lt;EmptyState\n        heading=&quot;Upload a file to get started&quot;\n        action={{content: &#39;Upload files&#39;}}\n        image=&quot;https://cdn.shopify.com/s/files/1/2376/3301/products/emptystate-files.png&quot;\n      &gt;\n        &lt;p&gt;\n          You can use the Files section to upload images, videos, and other\n          documents\n        &lt;/p&gt;\n      &lt;/EmptyState&gt;\n    ) : undefined;\n\n  return (\n    &lt;Page title=&quot;Files&quot;&gt;\n      &lt;Layout&gt;\n        &lt;Layout.Section&gt;\n          &lt;Card&gt;\n            &lt;ResourceList\n              emptyState={emptyStateMarkup}\n              items={items}\n              renderItem={() =&gt; {}}\n              filterControl={filterControl}\n              resourceName={{singular: &#39;file&#39;, plural: &#39;files&#39;}}\n            /&gt;\n          &lt;/Card&gt;\n        &lt;/Layout.Section&gt;\n      &lt;/Layout&gt;\n    &lt;/Page&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Resource&lt;/span&gt; list &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; selection and no bulk actions\n\nA resource list &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; simple items and selection.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction ResourceListWithSelectionExample() {\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  const resourceName = {\n    singular: &#39;customer&#39;,\n    plural: &#39;customers&#39;,\n  };\n\n  const items = [\n    {\n      id: 101,\n      url: &#39;customers/341&#39;,\n      name: &#39;Mae Jemison&#39;,\n      location: &#39;Decatur, USA&#39;,\n    },\n    {\n      id: 201,\n      url: &#39;customers/256&#39;,\n      name: &#39;Ellen Ochoa&#39;,\n      location: &#39;Los Angeles, USA&#39;,\n    },\n  ];\n\n  return (\n    &lt;Card&gt;\n      &lt;ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        selectedItems={selectedItems}\n        onSelectionChange={setSelectedItems}\n        selectable\n      /&gt;\n    &lt;/Card&gt;\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n\n    return (\n      &lt;ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        accessibilityLabel={`View details for ${name}`}\n      &gt;\n        &lt;h3&gt;\n          &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n        &lt;/h3&gt;\n        &lt;div&gt;{location}&lt;/div&gt;\n      &lt;/ResourceItem&gt;\n    );\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Resource&lt;/span&gt; list &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; bulk actions\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Allows&lt;/span&gt; merchants to select items and perform an action on the selection.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction ResourceListWithBulkActionsExample() {\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  const resourceName = {\n    singular: &#39;customer&#39;,\n    plural: &#39;customers&#39;,\n  };\n\n  const items = [\n    {\n      id: 103,\n      url: &#39;customers/341&#39;,\n      name: &#39;Mae Jemison&#39;,\n      location: &#39;Decatur, USA&#39;,\n    },\n    {\n      id: 203,\n      url: &#39;customers/256&#39;,\n      name: &#39;Ellen Ochoa&#39;,\n      location: &#39;Los Angeles, USA&#39;,\n    },\n  ];\n\n  const promotedBulkActions = [\n    {\n      content: &#39;Edit customers&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk edit&#39;),\n    },\n  ];\n\n  const bulkActions = [\n    {\n      content: &#39;Add tags&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk add tags&#39;),\n    },\n    {\n      content: &#39;Remove tags&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk remove tags&#39;),\n    },\n    {\n      content: &#39;Delete customers&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk delete&#39;),\n    },\n  ];\n\n  return (\n    &lt;Card&gt;\n      &lt;ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        selectedItems={selectedItems}\n        onSelectionChange={setSelectedItems}\n        promotedBulkActions={promotedBulkActions}\n        bulkActions={bulkActions}\n      /&gt;\n    &lt;/Card&gt;\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n\n    return (\n      &lt;ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        accessibilityLabel={`View details for ${name}`}\n      &gt;\n        &lt;h3&gt;\n          &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n        &lt;/h3&gt;\n        &lt;div&gt;{location}&lt;/div&gt;\n      &lt;/ResourceItem&gt;\n    );\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Resource&lt;/span&gt; list &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; loading state\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Notifies&lt;/span&gt; merchants that list items are being processed.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction ResourceListWithLoadingExample() {\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  const resourceName = {\n    singular: &#39;customer&#39;,\n    plural: &#39;customers&#39;,\n  };\n\n  const items = [\n    {\n      id: 104,\n      url: &#39;customers/341&#39;,\n      name: &#39;Mae Jemison&#39;,\n      location: &#39;Decatur, USA&#39;,\n    },\n    {\n      id: 204,\n      url: &#39;customers/256&#39;,\n      name: &#39;Ellen Ochoa&#39;,\n      location: &#39;Los Angeles, USA&#39;,\n    },\n  ];\n\n  const promotedBulkActions = [\n    {\n      content: &#39;Edit customers&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk edit&#39;),\n    },\n  ];\n\n  const bulkActions = [\n    {\n      content: &#39;Add tags&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk add tags&#39;),\n    },\n    {\n      content: &#39;Remove tags&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk remove tags&#39;),\n    },\n    {\n      content: &#39;Delete customers&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk delete&#39;),\n    },\n  ];\n\n  return (\n    &lt;Card&gt;\n      &lt;ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        selectedItems={selectedItems}\n        onSelectionChange={setSelectedItems}\n        promotedBulkActions={promotedBulkActions}\n        bulkActions={bulkActions}\n        loading\n      /&gt;\n    &lt;/Card&gt;\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n\n    return (\n      &lt;ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        accessibilityLabel={`View details for ${name}`}\n      &gt;\n        &lt;h3&gt;\n          &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n        &lt;/h3&gt;\n        &lt;div&gt;{location}&lt;/div&gt;\n      &lt;/ResourceItem&gt;\n    );\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Resource&lt;/span&gt; list &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; total resource count\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to indicate that the number &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; resources shown is a subset &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; the total number &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; resources &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; the list.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction ResourceListWithTotalItemsCount() {\n  return (\n    &lt;Card&gt;\n      &lt;ResourceList\n        resourceName={{singular: &#39;customer&#39;, plural: &#39;customers&#39;}}\n        items={[\n          {\n            id: 105,\n            url: &#39;customers/341&#39;,\n            name: &#39;Mae Jemison&#39;,\n            location: &#39;Decatur, USA&#39;,\n          },\n          {\n            id: 205,\n            url: &#39;customers/256&#39;,\n            name: &#39;Ellen Ochoa&#39;,\n            location: &#39;Los Angeles, USA&#39;,\n          },\n        ]}\n        renderItem={(item) =&gt; {\n          const {id, url, name, location} = item;\n          const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n\n          return (\n            &lt;ResourceItem\n              id={id}\n              url={url}\n              media={media}\n              accessibilityLabel={`View details for ${name}`}\n            &gt;\n              &lt;h3&gt;\n                &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n              &lt;/h3&gt;\n              &lt;div&gt;{location}&lt;/div&gt;\n            &lt;/ResourceItem&gt;\n          );\n        }}\n        showHeader\n        totalItemsCount={50}\n      /&gt;\n    &lt;/Card&gt;\n  );\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Resource&lt;/span&gt; list &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; sorting\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Allows&lt;/span&gt; merchants to change the way the list is sorted by selecting one &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; several options &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; a [&lt;span class=&quot;hljs-title class_&quot;&gt;Select&lt;/span&gt;](&lt;span class=&quot;hljs-attr&quot;&gt;https&lt;/span&gt;:&lt;span class=&quot;hljs-comment&quot;&gt;//polaris.shopify.com/components/forms/select) control.&lt;/span&gt;\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction ResourceListWithSortingExample() {\n  const [sortValue, setSortValue] = useState(&#39;DATE_MODIFIED_DESC&#39;);\n\n  const resourceName = {\n    singular: &#39;customer&#39;,\n    plural: &#39;customers&#39;,\n  };\n\n  const items = [\n    {\n      id: 106,\n      url: &#39;customers/341&#39;,\n      name: &#39;Mae Jemison&#39;,\n      location: &#39;Decatur, USA&#39;,\n    },\n    {\n      id: 206,\n      url: &#39;customers/256&#39;,\n      name: &#39;Ellen Ochoa&#39;,\n      location: &#39;Los Angeles, USA&#39;,\n    },\n  ];\n\n  return (\n    &lt;Card&gt;\n      &lt;ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        sortValue={sortValue}\n        sortOptions={[\n          {label: &#39;Newest update&#39;, value: &#39;DATE_MODIFIED_DESC&#39;},\n          {label: &#39;Oldest update&#39;, value: &#39;DATE_MODIFIED_ASC&#39;},\n        ]}\n        onSortChange={(selected) =&gt; {\n          setSortValue(selected);\n          console.log(`Sort option changed to ${selected}.`);\n        }}\n      /&gt;\n    &lt;/Card&gt;\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n\n    return (\n      &lt;ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        accessibilityLabel={`View details for ${name}`}\n      &gt;\n        &lt;h3&gt;\n          &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n        &lt;/h3&gt;\n        &lt;div&gt;{location}&lt;/div&gt;\n      &lt;/ResourceItem&gt;\n    );\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Resource&lt;/span&gt; list &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; alternate tool\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Allows&lt;/span&gt; merchants to add an alternate tool &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; the current sort option location when sort may not be the most relevant action &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; the current list.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction ResourceListWithAlternateToolExample() {\n  const resourceName = {\n    singular: &#39;Customer&#39;,\n    plural: &#39;Customers&#39;,\n  };\n\n  const items = [\n    {\n      id: 107,\n      url: &#39;customers/341&#39;,\n      name: &#39;Mae Jemison&#39;,\n      location: &#39;Decatur, USA&#39;,\n    },\n    {\n      id: 207,\n      url: &#39;customers/256&#39;,\n      name: &#39;Ellen Ochoa&#39;,\n      location: &#39;Los Angeles, USA&#39;,\n    },\n  ];\n\n  return (\n    &lt;Card&gt;\n      &lt;ResourceList\n        items={items}\n        renderItem={renderItem}\n        resourceName={resourceName}\n        alternateTool={&lt;Button&gt;Email customers&lt;/Button&gt;}\n      /&gt;\n    &lt;/Card&gt;\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n\n    return (\n      &lt;ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        accessibilityLabel={`View details for ${name}`}\n      &gt;\n        &lt;h3&gt;\n          &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n        &lt;/h3&gt;\n        &lt;div&gt;{location}&lt;/div&gt;\n      &lt;/ResourceItem&gt;\n    );\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Resource&lt;/span&gt; list &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; filtering\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Allows&lt;/span&gt; merchants to narrow the resource list to a subset &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; the original items.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction ResourceListWithFilteringExample() {\n  const [taggedWith, setTaggedWith] = useState(&#39;VIP&#39;);\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleTaggedWithChange = useCallback(\n    (value) =&gt; setTaggedWith(value),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() =&gt; setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() =&gt; setQueryValue(null), []);\n  const handleClearAll = useCallback(() =&gt; {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n\n  const resourceName = {\n    singular: &#39;customer&#39;,\n    plural: &#39;customers&#39;,\n  };\n\n  const items = [\n    {\n      id: 108,\n      url: &#39;customers/341&#39;,\n      name: &#39;Mae Jemison&#39;,\n      location: &#39;Decatur, USA&#39;,\n    },\n    {\n      id: 208,\n      url: &#39;customers/256&#39;,\n      name: &#39;Ellen Ochoa&#39;,\n      location: &#39;Los Angeles, USA&#39;,\n    },\n  ];\n\n  const filters = [\n    {\n      key: &#39;taggedWith1&#39;,\n      label: &#39;Tagged with&#39;,\n      filter: (\n        &lt;TextField\n          label=&quot;Tagged with&quot;\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=&quot;off&quot;\n          labelHidden\n        /&gt;\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: &#39;taggedWith1&#39;,\n          label: disambiguateLabel(&#39;taggedWith1&#39;, taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  const filterControl = (\n    &lt;Filters\n      queryValue={queryValue}\n      filters={filters}\n      appliedFilters={appliedFilters}\n      onQueryChange={setQueryValue}\n      onQueryClear={handleQueryValueRemove}\n      onClearAll={handleClearAll}\n    &gt;\n      &lt;div style={{paddingLeft: &#39;8px&#39;}}&gt;\n        &lt;Button onClick={() =&gt; console.log(&#39;New filter saved&#39;)}&gt;Save&lt;/Button&gt;\n      &lt;/div&gt;\n    &lt;/Filters&gt;\n  );\n\n  return (\n    &lt;Card&gt;\n      &lt;ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        filterControl={filterControl}\n      /&gt;\n    &lt;/Card&gt;\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n\n    return (\n      &lt;ResourceItem id={id} url={url} media={media}&gt;\n        &lt;h3&gt;\n          &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n        &lt;/h3&gt;\n        &lt;div&gt;{location}&lt;/div&gt;\n      &lt;/ResourceItem&gt;\n    );\n  }\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case &#39;taggedWith1&#39;:\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === &#39;&#39; || value == null;\n    }\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Resource&lt;/span&gt; list &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; a custom empty search result state\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Allows&lt;/span&gt; merchants to narrow the resource list to a subset &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; the original items. &lt;span class=&quot;hljs-title class_&quot;&gt;If&lt;/span&gt; the filters or search applied &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; no results, then display a custom empty search state.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction ResourceListWithFilteringExample() {\n  const [taggedWith, setTaggedWith] = useState(&#39;VIP&#39;);\n  const [queryValue, setQueryValue] = useState(null);\n  const [items, setItems] = useState([]);\n\n  const handleTaggedWithChange = useCallback(\n    (value) =&gt; setTaggedWith(value),\n    [],\n  );\n  const handleQueryValueChange = useCallback((value) =&gt; {\n    setQueryValue(value);\n    setItems([]);\n  }, []);\n  const handleTaggedWithRemove = useCallback(() =&gt; setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() =&gt; setQueryValue(null), []);\n  const handleClearAll = useCallback(() =&gt; {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n\n  const resourceName = {\n    singular: &#39;customer&#39;,\n    plural: &#39;customers&#39;,\n  };\n\n  const filters = [\n    {\n      key: &#39;taggedWith2&#39;,\n      label: &#39;Tagged with&#39;,\n      filter: (\n        &lt;TextField\n          label=&quot;Tagged with&quot;\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=&quot;off&quot;\n          labelHidden\n        /&gt;\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: &#39;taggedWith2&#39;,\n          label: disambiguateLabel(&#39;taggedWith2&#39;, taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  const filterControl = (\n    &lt;Filters\n      queryValue={queryValue}\n      filters={filters}\n      appliedFilters={appliedFilters}\n      onQueryChange={handleQueryValueChange}\n      onQueryClear={handleQueryValueRemove}\n      onClearAll={handleClearAll}\n    &gt;\n      &lt;div style={{paddingLeft: &#39;8px&#39;}}&gt;\n        &lt;Button onClick={() =&gt; console.log(&#39;New filter saved&#39;)}&gt;Save&lt;/Button&gt;\n      &lt;/div&gt;\n    &lt;/Filters&gt;\n  );\n\n  return (\n    &lt;Card&gt;\n      &lt;ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        filterControl={filterControl}\n        emptySearchState={&lt;div&gt;This is a custom empty state&lt;/div&gt;}\n      /&gt;\n    &lt;/Card&gt;\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location} = item;\n    const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n\n    return (\n      &lt;ResourceItem id={id} url={url} media={media}&gt;\n        &lt;h3&gt;\n          &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n        &lt;/h3&gt;\n        &lt;div&gt;{location}&lt;/div&gt;\n      &lt;/ResourceItem&gt;\n    );\n  }\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case &#39;taggedWith2&#39;:\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === &#39;&#39; || value == null;\n    }\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Resource&lt;/span&gt; list &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; item shortcut actions\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Shortcut&lt;/span&gt; actions are intended to provide quick access to popular actions &lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; the resource’s details page. &lt;span class=&quot;hljs-title class_&quot;&gt;They&lt;/span&gt; are shown when the mouse is hovered over the list item, and are not shown on small screen devices, so the action must also be accessible &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; another way.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\n&lt;Card&gt;\n  &lt;ResourceList\n    resourceName={{singular: &#39;customer&#39;, plural: &#39;customers&#39;}}\n    items={[\n      {\n        id: 109,\n        url: &#39;customers/341&#39;,\n        name: &#39;Mae Jemison&#39;,\n        location: &#39;Decatur, USA&#39;,\n        latestOrderUrl: &#39;orders/1456&#39;,\n      },\n      {\n        id: 209,\n        url: &#39;customers/256&#39;,\n        name: &#39;Ellen Ochoa&#39;,\n        location: &#39;Los Angeles, USA&#39;,\n        latestOrderUrl: &#39;orders/1457&#39;,\n      },\n    ]}\n    renderItem={(item) =&gt; {\n      const {id, url, name, location, latestOrderUrl} = item;\n      const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n      const shortcutActions = latestOrderUrl\n        ? [\n            {\n              content: &#39;View latest order&#39;,\n              accessibilityLabel: `View ${name}’s latest order`,\n              url: latestOrderUrl,\n            },\n          ]\n        : null;\n\n      return (\n        &lt;ResourceItem\n          id={id}\n          url={url}\n          media={media}\n          accessibilityLabel={`View details for ${name}`}\n          shortcutActions={shortcutActions}\n        &gt;\n          &lt;h3&gt;\n            &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n          &lt;/h3&gt;\n          &lt;div&gt;{location}&lt;/div&gt;\n        &lt;/ResourceItem&gt;\n      );\n    }}\n  /&gt;\n&lt;/Card&gt;\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Resource&lt;/span&gt; list &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; persistent item shortcut actions\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; persistent shortcut actions &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; rare cases when the action cannot be made available on the item’s details page. &lt;span class=&quot;hljs-title class_&quot;&gt;Persistent&lt;/span&gt; shortcut actions roll up into an overflow menu on small screens.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\n&lt;Card&gt;\n  &lt;ResourceList\n    resourceName={{singular: &#39;customer&#39;, plural: &#39;customers&#39;}}\n    items={[\n      {\n        id: 110,\n        url: &#39;customers/341&#39;,\n        name: &#39;Mae Jemison&#39;,\n        location: &#39;Decatur, USA&#39;,\n        latestOrderUrl: &#39;orders/1456&#39;,\n      },\n      {\n        id: 210,\n        url: &#39;customers/256&#39;,\n        name: &#39;Ellen Ochoa&#39;,\n        location: &#39;Los Angeles, USA&#39;,\n        latestOrderUrl: &#39;orders/1457&#39;,\n      },\n    ]}\n    renderItem={(item) =&gt; {\n      const {id, url, name, location, latestOrderUrl} = item;\n      const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n      const shortcutActions = latestOrderUrl\n        ? [\n            {\n              content: &#39;View latest order&#39;,\n              accessibilityLabel: `View ${name}’s latest order`,\n              url: latestOrderUrl,\n            },\n          ]\n        : null;\n\n      return (\n        &lt;ResourceItem\n          id={id}\n          url={url}\n          media={media}\n          accessibilityLabel={`View details for ${name}`}\n          shortcutActions={shortcutActions}\n          persistActions\n        &gt;\n          &lt;h3&gt;\n            &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n          &lt;/h3&gt;\n          &lt;div&gt;{location}&lt;/div&gt;\n        &lt;/ResourceItem&gt;\n      );\n    }}\n  /&gt;\n&lt;/Card&gt;\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Resource&lt;/span&gt; list &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; multiselect\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Allows&lt;/span&gt; merchants to select or deselect multiple items at once.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction ResourceListExample() {\n  const [selectedItems, setSelectedItems] = useState([]);\n\n  const resourceName = {\n    singular: &#39;customer&#39;,\n    plural: &#39;customers&#39;,\n  };\n\n  const items = [\n    {\n      id: 111,\n      url: &#39;customers/231&#39;,\n      name: &#39;Mae Jemison&#39;,\n      location: &#39;Decatur, USA&#39;,\n    },\n    {\n      id: 211,\n      url: &#39;customers/246&#39;,\n      name: &#39;Ellen Ochoa&#39;,\n      location: &#39;Los Angeles, USA&#39;,\n    },\n    {\n      id: 311,\n      url: &#39;customers/276&#39;,\n      name: &#39;Joe Smith&#39;,\n      location: &#39;Arizona, USA&#39;,\n    },\n    {\n      id: 411,\n      url: &#39;customers/349&#39;,\n      name: &#39;Haden Jerado&#39;,\n      location: &#39;Decatur, USA&#39;,\n    },\n    {\n      id: 511,\n      url: &#39;customers/419&#39;,\n      name: &#39;Tom Thommas&#39;,\n      location: &#39;Florida, USA&#39;,\n    },\n    {\n      id: 611,\n      url: &#39;customers/516&#39;,\n      name: &#39;Emily Amrak&#39;,\n      location: &#39;Texas, USA&#39;,\n    },\n  ];\n\n  const promotedBulkActions = [\n    {\n      content: &#39;Edit customers&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk edit&#39;),\n    },\n  ];\n\n  const bulkActions = [\n    {\n      content: &#39;Add tags&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk add tags&#39;),\n    },\n    {\n      content: &#39;Remove tags&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk remove tags&#39;),\n    },\n    {\n      content: &#39;Delete customers&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk delete&#39;),\n    },\n  ];\n\n  return (\n    &lt;Card&gt;\n      &lt;ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        selectedItems={selectedItems}\n        onSelectionChange={setSelectedItems}\n        promotedBulkActions={promotedBulkActions}\n        bulkActions={bulkActions}\n        resolveItemId={resolveItemIds}\n      /&gt;\n    &lt;/Card&gt;\n  );\n\n  function renderItem(item, _, index) {\n    const {id, url, name, location} = item;\n    const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n\n    return (\n      &lt;ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        sortOrder={index}\n        accessibilityLabel={`View details for ${name}`}\n      &gt;\n        &lt;h3&gt;\n          &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n        &lt;/h3&gt;\n        &lt;div&gt;{location}&lt;/div&gt;\n      &lt;/ResourceItem&gt;\n    );\n  }\n\n  function resolveItemIds({id}) {\n    return id;\n  }\n}\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Resource&lt;/span&gt; list &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; all &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; its elements\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;as&lt;/span&gt; a broad example that includes most props available to resource list.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\nfunction ResourceListExample() {\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [sortValue, setSortValue] = useState(&#39;DATE_MODIFIED_DESC&#39;);\n  const [taggedWith, setTaggedWith] = useState(&#39;VIP&#39;);\n  const [queryValue, setQueryValue] = useState(null);\n\n  const handleTaggedWithChange = useCallback(\n    (value) =&gt; setTaggedWith(value),\n    [],\n  );\n  const handleQueryValueChange = useCallback(\n    (value) =&gt; setQueryValue(value),\n    [],\n  );\n  const handleTaggedWithRemove = useCallback(() =&gt; setTaggedWith(null), []);\n  const handleQueryValueRemove = useCallback(() =&gt; setQueryValue(null), []);\n  const handleClearAll = useCallback(() =&gt; {\n    handleTaggedWithRemove();\n    handleQueryValueRemove();\n  }, [handleQueryValueRemove, handleTaggedWithRemove]);\n\n  const resourceName = {\n    singular: &#39;customer&#39;,\n    plural: &#39;customers&#39;,\n  };\n\n  const items = [\n    {\n      id: 112,\n      url: &#39;customers/341&#39;,\n      name: &#39;Mae Jemison&#39;,\n      location: &#39;Decatur, USA&#39;,\n      latestOrderUrl: &#39;orders/1456&#39;,\n    },\n    {\n      id: 212,\n      url: &#39;customers/256&#39;,\n      name: &#39;Ellen Ochoa&#39;,\n      location: &#39;Los Angeles, USA&#39;,\n      latestOrderUrl: &#39;orders/1457&#39;,\n    },\n  ];\n\n  const promotedBulkActions = [\n    {\n      content: &#39;Edit customers&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk edit&#39;),\n    },\n  ];\n\n  const bulkActions = [\n    {\n      content: &#39;Add tags&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk add tags&#39;),\n    },\n    {\n      content: &#39;Remove tags&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk remove tags&#39;),\n    },\n    {\n      content: &#39;Delete customers&#39;,\n      onAction: () =&gt; console.log(&#39;Todo: implement bulk delete&#39;),\n    },\n  ];\n\n  const filters = [\n    {\n      key: &#39;taggedWith3&#39;,\n      label: &#39;Tagged with&#39;,\n      filter: (\n        &lt;TextField\n          label=&quot;Tagged with&quot;\n          value={taggedWith}\n          onChange={handleTaggedWithChange}\n          autoComplete=&quot;off&quot;\n          labelHidden\n        /&gt;\n      ),\n      shortcut: true,\n    },\n  ];\n\n  const appliedFilters = !isEmpty(taggedWith)\n    ? [\n        {\n          key: &#39;taggedWith3&#39;,\n          label: disambiguateLabel(&#39;taggedWith3&#39;, taggedWith),\n          onRemove: handleTaggedWithRemove,\n        },\n      ]\n    : [];\n\n  const filterControl = (\n    &lt;Filters\n      queryValue={queryValue}\n      filters={filters}\n      appliedFilters={appliedFilters}\n      onQueryChange={handleQueryValueChange}\n      onQueryClear={handleQueryValueRemove}\n      onClearAll={handleClearAll}\n    &gt;\n      &lt;div style={{paddingLeft: &#39;8px&#39;}}&gt;\n        &lt;Button onClick={() =&gt; console.log(&#39;New filter saved&#39;)}&gt;Save&lt;/Button&gt;\n      &lt;/div&gt;\n    &lt;/Filters&gt;\n  );\n\n  return (\n    &lt;Card&gt;\n      &lt;ResourceList\n        resourceName={resourceName}\n        items={items}\n        renderItem={renderItem}\n        selectedItems={selectedItems}\n        onSelectionChange={setSelectedItems}\n        promotedBulkActions={promotedBulkActions}\n        bulkActions={bulkActions}\n        sortValue={sortValue}\n        sortOptions={[\n          {label: &#39;Newest update&#39;, value: &#39;DATE_MODIFIED_DESC&#39;},\n          {label: &#39;Oldest update&#39;, value: &#39;DATE_MODIFIED_ASC&#39;},\n        ]}\n        onSortChange={(selected) =&gt; {\n          setSortValue(selected);\n          console.log(`Sort option changed to ${selected}.`);\n        }}\n        filterControl={filterControl}\n      /&gt;\n    &lt;/Card&gt;\n  );\n\n  function renderItem(item) {\n    const {id, url, name, location, latestOrderUrl} = item;\n    const media = &lt;Avatar customer size=&quot;medium&quot; name={name} /&gt;;\n    const shortcutActions = latestOrderUrl\n      ? [{content: &#39;View latest order&#39;, url: latestOrderUrl}]\n      : null;\n    return (\n      &lt;ResourceItem\n        id={id}\n        url={url}\n        media={media}\n        accessibilityLabel={`View details for ${name}`}\n        shortcutActions={shortcutActions}\n        persistActions\n      &gt;\n        &lt;h3&gt;\n          &lt;TextStyle variation=&quot;strong&quot;&gt;{name}&lt;/TextStyle&gt;\n        &lt;/h3&gt;\n        &lt;div&gt;{location}&lt;/div&gt;\n      &lt;/ResourceItem&gt;\n    );\n  }\n\n  function disambiguateLabel(key, value) {\n    switch (key) {\n      case &#39;taggedWith3&#39;:\n        return `Tagged with ${value}`;\n      default:\n        return value;\n    }\n  }\n\n  function isEmpty(value) {\n    if (Array.isArray(value)) {\n      return value.length === 0;\n    } else {\n      return value === &#39;&#39; || value == null;\n    }\n  }\n}\n</code></pre>\n<hr>\n<h2 id=\"build\">Build</h2>\n<p>Using a resource list in a project involves combining the following components and subcomponents:</p>\n<ul>\n<li>ResourceList</li>\n<li><a href=\"https://polaris.shopify.com/components/lists-and-tables/resource-item\">ResourceItem</a> or a customized list item</li>\n<li><a href=\"https://polaris.shopify.com/components/lists-and-tables/filters\">Filters</a> (optional)</li>\n<li>Pagination component (optional)</li>\n</ul>\n<!-- hint -->\n\n<p>The resource list component provides the UI elements for list sorting, filtering, and pagination, but doesn’t provide the logic for these operations. When a sort option is changed, filter added, or second page requested, you’ll need to handle that event (including any network requests) and then update the component with new props.</p>\n</div></div>\n\n<hr>\n<h2 id=\"purpose\">Purpose</h2>\n<p>Shopify is organized around objects that represent merchants businesses, like customers, products, and orders. Each individual order, for example, is given a dedicated page that can be linked to. In Shopify, we call these types of objects <em>resources</em>, and we call the object’s dedicated page its <em>details page</em>.</p>\n<h3 id=\"problem\">Problem</h3>\n<p>Take orders as an example. Merchants may have a lot of them. They need a way to scan their orders, see what state they’re in and find out which ones need action first. In other words, they need a way find an individual order, call up more information about it, and take action on it.</p>\n<h3 id=\"solution\">Solution</h3>\n<p>Resource lists function as:</p>\n<ul>\n<li>A content format, presenting a set of individual resources in a compact form</li>\n<li>A system for taking action on one or more individual resources</li>\n<li>A way to navigate to an individual resource’s details page</li>\n</ul>\n<p>Because a details page displays all the content and actions for an individual resource, you can think of a resource list as a summary of these details pages. In this way resource lists bridge a middle level in Shopify’s navigation hierarchy.</p>\n<div class=\"TypeContainerImage TypeContainerImage--PageBackground\">\n\n<p><img src=\"/images-from-old-styleguide/resource-list/list-surfacing-show@2x.png\" alt=\"Schematic showing content from a details page being surfaced on a resource list\"></p>\n</div>\n\n<!-- hint -->\n\n<h4 id=\"hint\">Hint</h4>\n<h4 id=\"a-resource-list-isnt-a-data-table\">A resource list isn’t a data table</h4>\n<p>On wide screens, a resource list often looks like a table, especially if some content is aligned in columns. Despite this, resource lists and data tables have different purposes.</p>\n<p>A data table is a form of data visualization. It works best to present highly structured data for comparison and analysis.</p>\n<p>If your use case is more about visualizing or analyzing data, use the <a href=\"https://polaris.shopify.com/components/lists-and-tables/data-table\">data table component</a>. If your use case is more about finding and taking action on objects, use a resource list.</p>\n,\n\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Resource lists can live in many places in Shopify. You could include a short resource list in a card summarizing recent marketing activities. You could also dedicate an entire page to a resource list like Shopify’s main products list.</p>\n<p>Resource lists should:</p>\n<ul>\n<li>Have items that perform an action when clicked. The action should navigate to the resource’s details page or otherwise provide more detail about the item.</li>\n<li><a href=\"https://polaris.shopify.com/components/lists-and-tables/resource-item\">Customize the content and layout</a> of their list items to support merchants’ needs.</li>\n<li>Support sorting if the list can be long, and especially if different merchant tasks benefit from different sort orders.</li>\n<li>Support <a href=\"https://polaris.shopify.com/components/lists-and-tables/filters\">filtering</a> if the list can be long.</li>\n<li>Paginate when the current list contains more than 50 items.</li>\n<li>Use the <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-page\">skeleton page</a> component on initial page load for the rest of the page if the loading prop is true and items are processing.</li>\n</ul>\n<p>Resource lists can optionally:</p>\n<ul>\n<li>Provide bulk actions for tasks that are often applied to many list items at once. For example, merchants may want to add the same tag to a large number of products.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>Resource lists should:</p>\n<ul>\n<li><p>Identify the type of resource, usually with a heading</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Products</li>\n<li>Showing 50 products</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li><em>No heading</em></li>\n</ul>\n</div></div>\n</li>\n<li><p>Indicate when not all members of a resource are being shown. For a card summarizing and linking to recently purchased products:</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Popular products this week</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>Products</li>\n</ul>\n</div></div>\n</li>\n<li><p>Follow the verb + noun formula for bulk actions</p>\n</li>\n<li><p>Follow the <a href=\"https://polaris.shopify.com/components/lists-and-tables/filters#section-content-guidelines\">content guidelines for filter options and applied filters</a></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To present structured data for comparison and analysis, like when helping merchants to gain insights or review analytics, use the <a href=\"https://polaris.shopify.com/components/lists-and-tables/data-table\">data table component</a></li>\n<li>To display a simple list of related content, <a href=\"https://polaris.shopify.com/components/lists-and-tables/list\">use the list component</a></li>\n</ul>\n"
  },
  "Scrollable": {
    "name": "Scrollable",
    "category": "Behavior",
    "keywords": [
      "long form",
      "text container",
      "terms of service",
      "long form container",
      "scrolling",
      "independently scrollable",
      "modal scrolling",
      "pane scrolling",
      "scrolling in panes",
      "below the fold",
      "above the fold"
    ],
    "readme": "<h1 id=\"scrollable\">Scrollable</h1>\n<p>The scrollable component is a container for long form content, such as terms of service, that allows for scrolling so merchants can expose more text as they read.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Scrollable containers should:</p>\n<ul>\n<li>Be used when it’s helpful to provide an extra visual cue to let merchants\nknow that content exists below or above the fold</li>\n<li>Only be used for length text such as terms of service or other legal\ndisclaimers and never for instructional or action-oriented text</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>Scrollable containers are cards with scrolling functionality, and should follow the <a href=\"https://polaris.shopify.com/components/structure/card#section-content-guidelines\">content guidelines</a> for cards.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-scrollable-container\">Default scrollable container</h3>\n<p>Use when you need to make a region within the page independently scrollable. It’s often used in modals and other panes where it’s helpful to provide an extra visual cue that content exists below or above the fold.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> title=<span class=\"hljs-string\">&quot;Terms of service&quot;</span> sectioned&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Scrollable</span> <span class=\"hljs-attr\">shadow</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">100px</span>&#x27;}} <span class=\"hljs-attr\">focusable</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n      By signing up for the Shopify service (“Service”) or any of the services\n      of Shopify Inc. (“Shopify”) you are agreeing to be bound by the following\n      terms and conditions (“Terms of Service”). The Services offered by Shopify\n      under the Terms of Service include various products and services to help\n      you create and manage a retail store, whether an online store (“Online\n      Services”), a physical retail store (“POS Services”), or both. Any new\n      features or tools which are added to the current Service shall be also\n      subject to the Terms of Service. You can review the current version of the\n      Terms of Service at any time at <a href=\"https://www.shopify.com/legal/terms\">https://www.shopify.com/legal/terms</a>.\n      Shopify reserves the right to update and change the Terms of Service by\n      posting updates and changes to the Shopify website. You are advised to\n      check the Terms of Service from time to time for any updates or changes\n      that may impact you.\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Scrollable</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<h3 id=\"scroll-to-child-component\">Scroll to child component</h3>\n<p>Use when you need to programmatically scroll a child component into view in the scrollable container.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> title=<span class=\"hljs-string\">&quot;Terms of service&quot;</span> sectioned&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Scrollable</span> <span class=\"hljs-attr\">shadow</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">100px</span>&#x27;}}&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ol</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>Account Terms<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ol</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n      You must be 18 years or older or at least the age of majority in the\n      jurisdiction where you reside or from which you use this Service.\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n      To access and use the Services, you must register for a Shopify account\n      (“Account”) by providing your full legal name, current address, phone\n      number, a valid email address, and any other information indicated as\n      required. Shopify may reject your application for an Account, or cancel an\n      existing Account, for any reason, in our sole discretion.\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n      You acknowledge that Shopify will use the email address you provide as the\n      primary method for communication.\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n      You are responsible for keeping your password secure. Shopify cannot and\n      will not be liable for any loss or damage from your failure to maintain\n      the security of your Account and password.\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n      You are responsible for all activity and content such as photos, images,\n      videos, graphics, written content, audio files, code, information, or data\n      uploaded, collected, generated, stored, displayed, distributed,\n      transmitted or exhibited on or in connection with your Account\n      (“Materials”).\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n      A breach or violation of any term in the Terms of Service, including the\n      AUP, as determined in the sole discretion of Shopify will result in an\n      immediate termination of your services.\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Which means<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n      You are responsible for your Account and any Materials you upload to the\n      Shopify Service. Remember that with any violation of these terms we will\n      cancel your service.\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></p>\n<pre><code>&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;If we need to reach you, we will send you an email.&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;Account Activation&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Scrollable.ScrollTo&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;2.1 Shopify Account&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Scrollable.ScrollTo&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  Subject to section 2.1.2, the person signing up for the Service will be\n  the contracting party (“Account Owner”) for the purposes of our Terms of\n  Service and will be the person who is authorized to use any corresponding\n  account we may provide to the Account Owner in connection with the\n  Service.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  If you are signing up for the Service on behalf of your employer, your\n  employer shall be the Account Owner. If you are signing up for the Service\n  on behalf of your employer, then you represent and warrant that you have\n  the authority to bind your employer to our Terms of Service.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;2.2 PayPal Express Checkout and Shopify Payments Accounts&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  Upon completion of sign up for the Service, Shopify will create a PayPal\n  Express Checkout account on your behalf, using your email address.\n  Depending on your location, Shopify may also create a Shopify Payments\n  account on your behalf.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  You acknowledge that PayPal Express Checkout and/or Shopify Payments will\n  be your default payments gateway(s) and that it is your sole\n  responsibility as the Account Owner to activate and maintain these\n  accounts. If you do not wish to keep either of the payment accounts\n  active, it is your responsibility to deactivate them. For the avoidance of\n  doubt, PayPal Express Checkout is a Third Party Service, as defined in\n  Section 15 of these Terms of Service.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;2.3 Apple Pay for Safari Account&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  Upon completion of sign up for the Service, Shopify will create an Apple\n  Pay for Safari (“Apple Pay”) account on your behalf, using the URL(s) and\n  business name associated with your Account. Depending on your location,\n  Shopify may activate your Apple Pay account on your behalf, otherwise you\n  will be required to activate your Apple Pay account within your Account\n  admin. If you do not wish to keep your Apple Pay account active, it is\n  your responsibility to deactivate it. For the avoidance of doubt, Apple\n  Pay is a Third Party Service, as defined in Section 15 of these Terms of\n  Service.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  If you use an Apple Pay supported payment gateway and your customers have\n  enabled Apple Pay on their device, customers may purchase goods and\n  services from your store using Apple Pay.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  By using Apple Pay on your store, you are agreeing to be bound by the\n  Apple Pay Platform Web Merchant Terms and Conditions, as they may be\n  amended by Apple from time to time. If Apple amends the Apple Pay Platform\n  Web Merchant Terms and Conditions, the amended and restated version will\n  be posted here:{&amp;#x27; &amp;#x27;}\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;https://www.shopify.com/legal/apple-pay&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    https://www.shopify.com/legal/apple-pay\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  . Such amendments to the Apple Pay Platform Web Merchant Terms are effective\n  as of the date of posting. Your continued use of Apple Pay on your store after\n  the amended Apple Pay Platform Web Merchant Terms are posted constitutes your\n  agreement to, and acceptance of, the amended Apple Pay Platform Web Merchant\n  Terms. If you do not agree to any changes to the Apple Pay Platform Web Merchant\n  Terms, de-activate your Apple Pay account and do not continue to use Apple\n  Pay on your store.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;2.4 Google Payment&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  Upon completion of sign up for the Service, if you have been enrolled in\n  Shopify Payments, Shopify will also create a Google Payment account on\n  your behalf. If you do not wish to keep your Google Payment account\n  active, it is your responsibility to deactivate it. For the avoidance of\n  doubt, Google Payment is a Third Party Service, as defined in Section 15\n  of these Terms of Service.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  If you use a Google Payment supported payment gateway and your customers\n  have enabled Google Payment, customers may purchase goods and services\n  from your store using Google Payment.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  By using Google Payment on your store, you are agreeing to be bound by the\n  Google Payment API Terms of Service, as they may be amended by Google from\n  time to time. If Google amends the Google Payment API Terms of Service,\n  the amended and restated version will be posted here:{&amp;#x27; &amp;#x27;}\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;https://payments.developers.google.com/terms/sellertos&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    https://payments.developers.google.com/terms/sellertos\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  . Such amendments to the Google Payment API Terms of Service are effective\n  as of the date of posting. Your continued use of Google Payment on your store\n  after the amended Google Payment API Terms of Service are posted constitutes\n  your agreement to, and acceptance of, the amended Google Payment API Terms\n  of Service. If you do not agree to any changes to the Google Payment API Terms\n  of Service, de-activate your Google Payment account and do not continue to\n  use Google Payment on your store.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;2.5 Domain Names&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  Upon purchasing a domain name through Shopify, domain registration will be\n  preset to automatically renew each year so long as your Shopify Account\n  remains active. You acknowledge that it is your sole responsibility to\n  deactivate the auto-renewal function should you choose to do so.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Which means&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  The person signing up for the Shopify Service is responsible for the\n  account and is bound by these Terms of Service. If you signup on behalf of\n  your employer, your employer owns the account and is also bound by our\n  Terms of Service.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  We automatically create accounts for you to accept payments. You are\n  responsible for activating and deactivating these accounts.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  Any domain you purchase through us will automatically renew unless you opt\n  out.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;General Conditions&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  You must read, agree with and accept all of the terms and conditions\n  contained in these Terms of Service, including the AUP and the Privacy\n  Policy before you may become a member of Shopify.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  Technical support is only provided to paying Account holders and is only\n  available via email.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  The Terms of Service shall be governed by and interpreted in accordance\n  with the laws of the Province of Ontario and the laws of Canada applicable\n  therein, without regard to principles of conflicts of laws. The parties\n  irrevocably and unconditionally submit to the exclusive jurisdiction of\n  the courts of the Province of Ontario with respect to any dispute or claim\n  arising out of or in connection with the Terms of Service. The United\n  Nations Convention on Contracts for the International Sale of Goods will\n  not apply to these Terms of Service and is hereby expressly excluded.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  You acknowledge and agree that Shopify may amend these Terms of Service at\n  any time by posting the relevant amended and restated Terms of Service on\n  Shopify’s website, available at{&amp;#x27; &amp;#x27;}\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;https://www.shopify.com/legal/terms&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    https://www.shopify.com/legal/terms\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;{&amp;#x27; &amp;#x27;}\n  and such amendments to the Terms of Service are effective as of the date\n  of posting. Your continued use of the Services after the amended Terms of\n  Service are posted to Shopify’s website constitutes your agreement to, and\n  acceptance of, the amended Terms of Service. If you do not agree to any\n  changes to the Terms of Service, do not continue to use the Service.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  You may not use the Shopify service for any illegal or unauthorized\n  purpose nor may you, in the use of the Service, violate any laws in your\n  jurisdiction (including but not limited to copyright laws), the laws\n  applicable to you in your customer’s jurisdiction, or the laws of Canada\n  and the Province of Ontario. You will comply with all applicable laws,\n  rules and regulations in your use of the Service.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  You agree not to reproduce, duplicate, copy, sell, resell or exploit any\n  portion of the Service, use of the Service, or access to the Service\n  without the express written permission by Shopify.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  You shall not purchase search engine or other pay per click keywords (such\n  as Google AdWords), or domain names that use Shopify or Shopify trademarks\n  and/or variations and misspellings thereof.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  Questions about the Terms of Service should be sent to{&amp;#x27; &amp;#x27;}\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;mailto:support@shopify.com&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;support@shopify.com&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  You understand that your Materials (not including credit card\n  information), may be transferred unencrypted and involve (a) transmissions\n  over various networks; and (b) changes to conform and adapt to technical\n  requirements of connecting networks or devices. Credit Card information is\n  always encrypted during transfer over networks.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  You acknowledge and agree that your use of the Service, including\n  information transmitted to or stored by Shopify, is governed by its\n  privacy policy at{&amp;#x27; &amp;#x27;}\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;https://www.shopify.com/legal/privacy&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    https://www.shopify.com/legal/privacy\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  The Terms of Service may be available in languages other than English. To\n  the extent of any inconsistencies or conflicts between these English Terms\n  of Service and Shopify’s Terms of Service available in another language,\n  the most current English version of the Terms of Service at{&amp;#x27; &amp;#x27;}\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;https://www.shopify.com/legal/terms&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\n    https://www.shopify.com/legal/terms\n  &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;{&amp;#x27; &amp;#x27;}\n  will prevail.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Which means&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  The Shopify service belongs to us. You are not allowed to rip it off or\n  use it for any illegal or sketchy purpose.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  If a dispute arises the issue will be dealt with in the Province of\n  Ontario.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n  Your Materials may be transferred unencrypted and may be altered, but\n  credit card information is always encrypted.\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;\n</code></pre>\n<p>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Scrollable</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To put long sections of information under a block that merchants can expand or collapse, <a href=\"https://polaris.shopify.com/components/collapsible\">use the collapsible component</a></li>\n</ul>\n"
  },
  "SectionHeader": {
    "name": "Section header",
    "category": "Lists and tables",
    "platforms": [
      "android",
      "ios"
    ],
    "keywords": [
      "SectionHeader",
      "section header",
      "sticky header",
      "section divider",
      "list group",
      "list grouping",
      "lists",
      "sections",
      "android",
      "ios"
    ],
    "readme": "<h1 id=\"section-header\">Section header</h1>\n<p>Use the section header component to group items in a list. It helps merchants to quickly see what items are related.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<ul>\n<li>List the groups in a clear and obvious way, such as alphabetically or by date.</li>\n<li>Avoid cluttering the list with long section titles that make it hard to scan.</li>\n<li>Avoid using section headers if your list usually has only 1 item in every grouping. The more section headers there are, the harder it is for merchants to scan the list.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<ul>\n<li>Keep titles short</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Created today</li>\n<li>Created Aug 15</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>Discount created today, Aug 15</li>\n<li>Created August 15, 2018</li>\n</ul>\n</div></div>\n\n<p>Read more about <a href=\"https://polaris.shopify.com/content/grammar-and-mechanics#section-dates-numbers-and-addresses\">dates and numbers</a>.</p>\n<ul>\n<li>Use a clear sort order</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Today</li>\n<li>Yesterday</li>\n<li>Monday</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>Recent</li>\n<li>Other</li>\n</ul>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default\">Default</h3>\n<p>Use to group related content together, for example orders received on the same day.</p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/SectionHeader/android/default@2x.png\" alt=\"Shipping costs card with multiple sections: domestic, international\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/SectionHeader/ios/default@2x.png\" alt=\"Shipping costs card with multiple sections: domestic, international\"></p>\n<!-- /content-for -->\n\n<h3 id=\"fixed\">Fixed</h3>\n<!-- example-for: ios -->\n\n<p>Use if your list section could be longer than the height of the screen. For example you may need fixed section headers for a list of orders, because merchants may receive many orders in one day.</p>\n<p><img src=\"/images-from-old-styleguide/components/SectionHeader/ios/fixed@2x.png\" alt=\"Shipping costs card with multiple sections: domestic, international\"></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>Use section headers if you want to organize <a href=\"https://polaris.shopify.com/components/lists-and-tables/resource-list\">resource list items</a> into groups.</li>\n</ul>\n"
  },
  "Select": {
    "name": "Select",
    "category": "Forms",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "on off",
      "switch",
      "adjuster",
      "dropdown menu",
      "drop-down menu",
      "menu",
      "form",
      "combobox",
      "combo box",
      "choice list",
      "choicelist",
      "list",
      "disabled select",
      "field label",
      "long list of options",
      "long option list",
      "separate error message",
      "ios",
      "android"
    ],
    "readme": "<h1 id=\"select\">Select</h1>\n<p>Select lets merchants choose one option from an options menu. Consider select when you have 4 or more options, to avoid cluttering the interface.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The select component should:</p>\n<ul>\n<li>Be used for selecting between 4 or more pre-defined options</li>\n<li>Have a default option selected whenever possible</li>\n<li>Use “Select” as a placeholder option only if there’s no logical default option</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"select-label\">Select label</h3>\n<p>Labels should:</p>\n<ul>\n<li>Give a short description (1–3 words) of the requested input.</li>\n<li>Be written in sentence case (the first word capitalized, the rest lowercase).</li>\n<li>Avoid punctuation and articles (“the”, “an”, “a”).</li>\n<li>Be independent sentences. To support <a href=\"https://polaris.shopify.com/foundations/internationalization\">internationalization</a>, they should not act as the first part of a sentence that is finished by the component’s options.</li>\n<li>Be descriptive, not instructional. If the selection needs more explanation, use help text below the field.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Email address</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>What is your email address?</li>\n</ul>\n</div></div>\n\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Phone number</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>My phone number is:</li>\n</ul>\n</div></div>\n\n<h3 id=\"select-options\">Select options</h3>\n<p>Options should:</p>\n<ul>\n<li>Start with “Select” as a placeholder if there isn’t a default option</li>\n<li>Be listed alphabetically or in another logical order so merchants can easily find the option they need</li>\n<li>Be written in sentence case (the first word capitalized, the rest lowercase) and avoid using commas or semicolons at the end of each option</li>\n<li>Be clearly labelled based on what the option will do</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-select\">Default select</h3>\n<!-- content-for: web -->\n\n<p>Presents a classic dropdown menu or equivalent picker as determined by merchants’ browsers.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SelectExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;today&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleSelectChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelected</span>(value), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> options = [\n    {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Today&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;today&#x27;</span>},\n    {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Yesterday&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;yesterday&#x27;</span>},\n    {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Last 7 days&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;lastWeek&#x27;</span>},\n  ];</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Select</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Date range&quot;</span>\n      <span class=\"hljs-attr\">options</span>=<span class=\"hljs-string\">{options}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleSelectChange}</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{selected}</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>The iOS picker expands in-line. Merchants scroll to select the item they want.</p>\n<p><img src=\"/images-from-old-styleguide/components/Select/ios/default@2x.png\" alt=\"iOS select, and select with option menu\"></p>\n<!-- /content-for -->\n\n<!-- content-for: android -->\n\n<p>The Android menu is similar in behavior to the web dropdown.</p>\n<p><img src=\"/images-from-old-styleguide/components/Select/android/default@2x.png\" alt=\"Android select, and select with option menu\"></p>\n<!-- /content-for -->\n\n<h3 id=\"select-with-inline-label\">Select with inline label</h3>\n<!-- example-for: web -->\n\n<p>Use only for cases where the select must fit on a single line, such as in a toolbar.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">InlineLabelExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;newestUpdate&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleSelectChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelected</span>(value), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> options = [\n    {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Newest update&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;newestUpdate&#x27;</span>},\n    {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Oldest update&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;oldestUpdate&#x27;</span>},\n    {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Most spent&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;mostSpent&#x27;</span>},\n    {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Most orders&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;mostOrders&#x27;</span>},\n    {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Last name A–Z&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;lastNameAlpha&#x27;</span>},\n    {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Last name Z–A&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;lastNameReverseAlpha&#x27;</span>},\n  ];</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Select</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Sort by&quot;</span>\n      <span class=\"hljs-attr\">labelInline</span>\n      <span class=\"hljs-attr\">options</span>=<span class=\"hljs-string\">{options}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleSelectChange}</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{selected}</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"disabled-select\">Disabled select</h3>\n<p>Use for selections that aren’t currently available. The surrounding interface should make it clear why the select box is disabled and how to activate it.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Select</span>\n  label=<span class=\"hljs-string\">&quot;Date range&quot;</span>\n  disabled\n  options={[\n    {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Today&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;today&#x27;</span>},\n    {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Yesterday&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;yesterday&#x27;</span>},\n    {<span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Last 7 days&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;lastWeek&#x27;</span>},\n  ]}\n/&gt;\n</pre></code></p>\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Select/ios/disabled@2x.png\" alt=\"Disabled select component on iOS\"></p>\n<!-- /content-for -->\n\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Select/android/disabled@2x.png\" alt=\"Disabled select component on Android\"></p>\n<!-- /content-for -->\n\n<h3 id=\"select-with-prefix\">Select with prefix</h3>\n<!-- example-for: web -->\n\n<p>Renders any React element to the left of individual select options. Does not show in the dropdown.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">PrefixExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;enabled&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleSelectChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelected</span>(value), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> options = [\n    {\n      <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Increase&#x27;</span>,\n      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;Increase&#x27;</span>,\n      <span class=\"hljs-attr\">prefix</span>: <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{CaretUpMinor}</span> /&gt;</span></span>,\n    },\n    {\n      <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Decrease&#x27;</span>,\n      <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;Decrease&#x27;</span>,\n      <span class=\"hljs-attr\">prefix</span>: <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{CaretDownMinor}</span> /&gt;</span></span>,\n    },\n  ];</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Select</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Permission&quot;</span>\n      <span class=\"hljs-attr\">options</span>=<span class=\"hljs-string\">{options}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleSelectChange}</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{selected}</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"select-with-validation-error\">Select with validation error</h3>\n<!-- example-for: web -->\n\n<p>Use to let merchants know if there’s a problem with their selection. For selects, a selection is typically invalid only when using a placeholder option (“Select”) and no other selection has been made.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ValidationErrorExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleSelectChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelected</span>(value), []);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Select</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Province&quot;</span>\n      <span class=\"hljs-attr\">options</span>=<span class=\"hljs-string\">{[</span>&#x27;<span class=\"hljs-attr\">Alberta</span>&#x27;]}\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{selected}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleSelectChange}</span>\n      <span class=\"hljs-attr\">error</span>=<span class=\"hljs-string\">&quot;Province is required&quot;</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"select-with-separate-validation-error\">Select with separate validation error</h3>\n<!-- example-for: web -->\n\n<p>Use to let merchants know when their select input is invalid in the context of a group of form inputs that the select depends on.</p>\n<p>When the <code>error</code> prop has a boolean value of <code>true</code>, the select component indicates to merchants that their input is invalid without rendering an error message directly below it. It anticipates that an inline error component exists separately within the form.</p>\n<p>To render an invalid select and its validation error separately:</p>\n<ul>\n<li>Set a unique identifier to the select component <code>id</code> prop</li>\n<li>Set a boolean to the select component <code>error</code> prop</li>\n<li>Use an <a href=\"https://polaris.shopify.com/components/forms/inline-error\">inline error component</a> to describe the invalid select input and set its <code>fieldID</code> prop to the same unique identifier used for the text field <code>id</code></li>\n</ul>\n<pre><code class=\"language-jsx\">function SeparateValidationErrorExample() {\n  const [weight, setWeight] = useState(&#39;12&#39;);\n  const [unit, setUnit] = useState(&#39;&#39;);\n\n  const handleWeightChange = useCallback((value) =&gt; setWeight(value), []);\n  const handleUnitChange = useCallback((value) =&gt; setUnit(value), []);\n\n  const unitSelectID = &#39;unit&#39;;\n  const errorMessage = generateErrorMessage();\n  const formGroupMarkup = (\n    &lt;Stack vertical spacing=&quot;extraTight&quot;&gt;\n      &lt;FormLayout&gt;\n        &lt;FormLayout.Group condensed&gt;\n          &lt;TextField\n            label=&quot;Product weight&quot;\n            type=&quot;number&quot;\n            value={weight}\n            onChange={handleWeightChange}\n            error={Boolean(!weight &amp;&amp; unit)}\n            autoComplete=&quot;off&quot;\n          /&gt;\n          &lt;Select\n            id={unitSelectID}\n            label=&quot;Unit of measure&quot;\n            placeholder=&quot;Select&quot;\n            options={[&#39;oz&#39;, &#39;g&#39;, &#39;kg&#39;, &#39;lb&#39;]}\n            value={unit}\n            onChange={handleUnitChange}\n            error={Boolean(!unit &amp;&amp; weight)}\n          /&gt;\n        &lt;/FormLayout.Group&gt;\n      &lt;/FormLayout&gt;\n      &lt;InlineError message={errorMessage} fieldID={unitSelectID} /&gt;\n    &lt;/Stack&gt;\n  );\n\n  return &lt;Card sectioned&gt;{formGroupMarkup}&lt;/Card&gt;;\n\n  function generateErrorMessage() {\n    const weightError =\n      !weight &amp;&amp; unit ? &#39;The numeric weight of the product &#39; : &#39;&#39;;\n    const unitError =\n      !unit &amp;&amp; weight ? &#39;The unit of measure for the product weight&#39; : &#39;&#39;;\n\n    if (!weightError &amp;&amp; !unitError) {\n      return &#39;&#39;;\n    }\n\n    return (\n      &lt;span&gt;\n        &lt;TextStyle variation=&quot;negative&quot;&gt;\n          &lt;p&gt;\n            {`${weightError}${unitError} is required when weight based shipping rates are enabled. `}\n            &lt;Link&gt;Manage shipping&lt;/Link&gt;\n          &lt;/p&gt;\n        &lt;/TextStyle&gt;\n      &lt;/span&gt;\n    );\n  }\n}\n</code></pre>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To let merchants select one option from a list with less than 4 options, use <a href=\"https://polaris.shopify.com/components/forms/choice-list\">the choice list component</a></li>\n<li>To create a select where merchants can make multiple selections, or to allow advanced formatting of option text, use an <a href=\"https://polaris.shopify.com/components/lists-and-tables/option-list\">option list</a> inside a <a href=\"https://polaris.shopify.com/components/overlays/popover\">popover</a></li>\n</ul>\n"
  },
  "SettingToggle": {
    "name": "Setting toggle",
    "category": "Actions",
    "keywords": [
      "SettingToggle",
      "settings buttons",
      "setting buttons",
      "enable buttons",
      "disable buttons",
      "setting switches",
      "turn on button",
      "turn off button",
      "option button",
      "on off",
      "switch",
      "adjuster"
    ],
    "readme": "<h1 id=\"setting-toggle\">Setting toggle</h1>\n<p>Use to give merchants control over a feature or option that can be turned\non or off.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Settings toggles should:</p>\n<ul>\n<li>Include different body content for the activated and deactivated states.</li>\n<li>Clearly indicate whether the setting is activated or deactivated and explain the\nimplications of the state of the setting to merchants. (“Automatic messages\nare deactivated. Your customers won’t receive automatic shipping updates.”)</li>\n<li>Clearly state when a setting or feature is not available and why. Provide\nactionable steps for merchants to unlock the functionality.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"toggle-description\">Toggle description</h3>\n<p>Toggle descriptions should:</p>\n<ul>\n<li>Clearly indicate whether the setting is activated or deactivated</li>\n<li>Explain the implications of the state of the setting to merchants\n(“Automatic messages are deactivated. Your customers won’t receive automatic\nshipping updates.”)</li>\n</ul>\n<h3 id=\"primary-button\">Primary button</h3>\n<p>The primary buttons for the setting toggle should always say either “Activate” or\n“Deactivate” depending on whether the setting can be turned on or off.</p>\n<p>For example, if the setting toggle is on, the button should say “Deactivate” to\nallow merchants to turn it off. If the setting toggle is off, the button should\nsay “Activate” to allow merchants to turn it on.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Activate</li>\n<li>Deactivate</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>Enable</li>\n<li>Disable</li>\n<li>Turn on</li>\n<li>Turn off</li>\n</ul>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-setting-toggle\">Default setting toggle</h3>\n<p>Use on settings pages to allow merchants to toggle a setting that has an activated or a deactivated state.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SettingToggleExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleToggle = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">active</span>) =&gt;</span> !active), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> contentStatus = active ? <span class=\"hljs-string\">&#x27;Deactivate&#x27;</span> : <span class=\"hljs-string\">&#x27;Activate&#x27;</span>;\n  <span class=\"hljs-keyword\">const</span> textStatus = active ? <span class=\"hljs-string\">&#x27;activated&#x27;</span> : <span class=\"hljs-string\">&#x27;deactivated&#x27;</span>;</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SettingToggle</span>\n      <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">content:</span> <span class=\"hljs-attr\">contentStatus</span>,\n        <span class=\"hljs-attr\">onAction:</span> <span class=\"hljs-attr\">handleToggle</span>,\n      }}\n      <span class=\"hljs-attr\">enabled</span>=<span class=\"hljs-string\">{active}</span>\n    &gt;</span>\n      This setting is <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextStyle</span> <span class=\"hljs-attr\">variation</span>=<span class=\"hljs-string\">&quot;strong&quot;</span>&gt;</span>{textStatus}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextStyle</span>&gt;</span>.\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">SettingToggle</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To let merchants connect or disconnect third-party services and apps, <a href=\"https://polaris.shopify.com/components/actions/account-connection\">use the account connection component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: web -->\n\n<p>The setting toggle component is implemented as an HTML <code>&lt;button&gt;</code>. The current label should convey what happens when the button is pressed.</p>\n<p>To learn more about button accessibility, see the <a href=\"https://polaris.shopify.com/components/actions/button\">button component</a>.</p>\n<!-- /content-for-->\n"
  },
  "Sheet": {
    "name": "Sheet",
    "category": "Overlays",
    "platforms": [
      "web"
    ],
    "keywords": [
      "sheet",
      "modal",
      "open",
      "title",
      "overlay",
      "drawer",
      "dialog",
      "web"
    ],
    "fullSizeExamples": true,
    "deprecationNotice": "The sheet component encourages designers to create a new layer on top of the page instead of improving the existing user interface. It also blocks other parts of the UI, forces users to switch context, and adds complexity to otherwise simple interactions.",
    "readme": "<h1 id=\"sheet\">Sheet</h1>\n<p>A sheet is a large container that enters from the edge of the screen when triggered by the merchant. It’s used to provide merchants with actions and information contextual to the page. It doesn’t interrupt their flow like a modal.</p>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<p>Sheets provide an opportunity to let merchants dig into more detail on their current task, or access information for their current task in a different way. Although merchants may be able to see content in the sheet and the main page content at the same time, they should only be expected to interact with one or the other at any given time.</p>\n<h3 id=\"keyboard-support\">Keyboard support</h3>\n<ul>\n<li>Use the <code>onClose</code> prop so that the sheet can be closed with the <kbd>esc</kbd> key as well as with button-based controls</li>\n<li>Use a button to open the sheet</li>\n<li>When the sheet opens, focus moves to it so merchants who rely on the keyboard and screen readers can access it</li>\n<li>Focus is kept in the sheet until it is dismissed</li>\n<li>When the sheet closes, focus moves back to the button that launched it</li>\n</ul>\n<hr>\n<h2 id=\"responsive-behavior\">Responsive behavior</h2>\n<p>At small screen sizes, the sheet component enters the page from the bottom of the screen. At larger screen sizes, the sheet component enters the page from the right side of the scren.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The sheet component should:</p>\n<ul>\n<li>Include a heading that summarizes the actions and information in the sheet, for example, More filters</li>\n<li>Be openable through clear actions, like a link or button</li>\n<li>Be close-able through clear actions, like Done, the [X] button, and the esc key</li>\n<li>Include information and actions contextual to the current task</li>\n<li>Not block merchants from completing their task, like a modal would</li>\n<li>Not open from within another sheet (only one sheet can be open at a time)</li>\n<li>Preserve its state—the settings and actions won’t reset when it’s closed</li>\n</ul>\n<p>The sheet component is best used in cases where the merchant needs to see elements behind it, and for that reason it uses a transparent backdrop. The backdrop is a full screen overlay which closes its parent component when pressed.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"basic-sheet\">Basic sheet</h3>\n<!-- example-for: web -->\n\n<p>Use as the default option for a sheet.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SheetExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [sheetActive, setSheetActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">true</span>);\n  <span class=\"hljs-keyword\">const</span> [title, setTitle] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;Big yellow socks&#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> [description, setDescription] = <span class=\"hljs-title function_\">useState</span>(\n    <span class=\"hljs-string\">&quot;They’re big, yellow socks. What more could you possibly want from socks? These socks will change your life.\\n\\nThey’re made from light, hand-loomed cotton that’s so soft, you&#x27;ll feel like you are walking on a cloud.&quot;</span>,\n  );\n  <span class=\"hljs-keyword\">const</span> [salesChannels, setSalesChannels] = <span class=\"hljs-title function_\">useState</span>([\n    {<span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;onlineStore&#x27;</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Online Store&#x27;</span>},\n    {<span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;facebook&#x27;</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Facebook&#x27;</span>},\n    {<span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;googleShopping&#x27;</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Google shopping&#x27;</span>},\n    {<span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;facebookMarketing&#x27;</span>, <span class=\"hljs-attr\">label</span>: <span class=\"hljs-string\">&#x27;Facebook Marketing&#x27;</span>},\n  ]);\n  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>([]);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toggleSheetActive = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setSheetActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">sheetActive</span>) =&gt;</span> !sheetActive),\n    [],\n  );\n  <span class=\"hljs-keyword\">const</span> handleSelectedChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelected</span>(value), []);\n  <span class=\"hljs-keyword\">const</span> handleTitleChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setTitle</span>(value), []);\n  <span class=\"hljs-keyword\">const</span> handleDescriptionChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setDescription</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> selectedSalesChannels = selected.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">key</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> salesChannels.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">accumulator, current</span>) =&gt;</span> {\n      accumulator[current.<span class=\"hljs-property\">value</span>] = current.<span class=\"hljs-property\">label</span>;\n      <span class=\"hljs-keyword\">return</span> accumulator;\n    }, {})[key];\n  });\n  <span class=\"hljs-keyword\">const</span> hasSelectedSalesChannels = selectedSalesChannels.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>;</p>\n<p>  <span class=\"hljs-keyword\">const</span> salesChannelsCardMarkup = hasSelectedSalesChannels ? (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List</span>&gt;</span>\n      {selectedSalesChannels.map((channel, index) =&gt; (\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">List.Item</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>&gt;</span>{channel}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List.Item</span>&gt;</span>\n      ))}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">List</span>&gt;</span></span>\n  ) : (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>\n      <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">alignItems:</span> &#x27;<span class=\"hljs-attr\">center</span>&#x27;,\n        <span class=\"hljs-attr\">display:</span> &#x27;<span class=\"hljs-attr\">flex</span>&#x27;,\n        <span class=\"hljs-attr\">justifyContent:</span> &#x27;<span class=\"hljs-attr\">space-between</span>&#x27;,\n        <span class=\"hljs-attr\">width:</span> &#x27;<span class=\"hljs-attr\">100</span>%&#x27;,\n      }}\n    &gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>No sales channels selected<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleSheetActive}</span>&gt;</span>Manage sales channels<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> salesChannelAction = hasSelectedSalesChannels\n    ? [\n        {\n          <span class=\"hljs-attr\">onAction</span>: toggleSheetActive,\n          <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Manage sales channels&#x27;</span>,\n        },\n      ]\n    : <span class=\"hljs-literal\">null</span>;</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Page</span> <span class=\"hljs-attr\">narrowWidth</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>\n        <span class=\"hljs-attr\">sectioned</span>\n        <span class=\"hljs-attr\">subdued</span>\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Product availability&quot;</span>\n        <span class=\"hljs-attr\">actions</span>=<span class=\"hljs-string\">{salesChannelAction}</span>\n      &gt;</span>\n        {salesChannelsCardMarkup}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Sheet</span>\n        <span class=\"hljs-attr\">open</span>=<span class=\"hljs-string\">{sheetActive}</span>\n        <span class=\"hljs-attr\">onClose</span>=<span class=\"hljs-string\">{toggleSheetActive}</span>\n        <span class=\"hljs-attr\">accessibilityLabel</span>=<span class=\"hljs-string\">&quot;Manage sales channels&quot;</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>\n          <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n            <span class=\"hljs-attr\">display:</span> &#x27;<span class=\"hljs-attr\">flex</span>&#x27;,\n            <span class=\"hljs-attr\">flexDirection:</span> &#x27;<span class=\"hljs-attr\">column</span>&#x27;,\n            <span class=\"hljs-attr\">height:</span> &#x27;<span class=\"hljs-attr\">100</span>%&#x27;,\n          }}\n        &gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>\n            <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n              <span class=\"hljs-attr\">alignItems:</span> &#x27;<span class=\"hljs-attr\">center</span>&#x27;,\n              <span class=\"hljs-attr\">borderBottom:</span> &#x27;<span class=\"hljs-attr\">1px</span> <span class=\"hljs-attr\">solid</span> #<span class=\"hljs-attr\">DFE3E8</span>&#x27;,\n              <span class=\"hljs-attr\">display:</span> &#x27;<span class=\"hljs-attr\">flex</span>&#x27;,\n              <span class=\"hljs-attr\">justifyContent:</span> &#x27;<span class=\"hljs-attr\">space-between</span>&#x27;,\n              <span class=\"hljs-attr\">padding:</span> &#x27;<span class=\"hljs-attr\">1rem</span>&#x27;,\n              <span class=\"hljs-attr\">width:</span> &#x27;<span class=\"hljs-attr\">100</span>%&#x27;,\n            }}\n          &gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Heading</span>&gt;</span>Manage sales channels<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Heading</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>\n              <span class=\"hljs-attr\">accessibilityLabel</span>=<span class=\"hljs-string\">&quot;Cancel&quot;</span>\n              <span class=\"hljs-attr\">icon</span>=<span class=\"hljs-string\">{MobileCancelMajor}</span>\n              <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleSheetActive}</span>\n              <span class=\"hljs-attr\">plain</span>\n            /&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Scrollable</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{padding:</span> &#x27;<span class=\"hljs-attr\">1rem</span>&#x27;, <span class=\"hljs-attr\">height:</span> &#x27;<span class=\"hljs-attr\">100</span>%&#x27;}}&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ChoiceList</span>\n              <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Select a sales channel&quot;</span>\n              <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;salesChannelsList&quot;</span>\n              <span class=\"hljs-attr\">choices</span>=<span class=\"hljs-string\">{salesChannels}</span>\n              <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selected}</span>\n              <span class=\"hljs-attr\">titleHidden</span>\n              <span class=\"hljs-attr\">allowMultiple</span>\n              <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleSelectedChange}</span>\n            /&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Scrollable</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>\n            <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n              <span class=\"hljs-attr\">alignItems:</span> &#x27;<span class=\"hljs-attr\">center</span>&#x27;,\n              <span class=\"hljs-attr\">borderTop:</span> &#x27;<span class=\"hljs-attr\">1px</span> <span class=\"hljs-attr\">solid</span> #<span class=\"hljs-attr\">DFE3E8</span>&#x27;,\n              <span class=\"hljs-attr\">display:</span> &#x27;<span class=\"hljs-attr\">flex</span>&#x27;,\n              <span class=\"hljs-attr\">justifyContent:</span> &#x27;<span class=\"hljs-attr\">space-between</span>&#x27;,\n              <span class=\"hljs-attr\">padding:</span> &#x27;<span class=\"hljs-attr\">1rem</span>&#x27;,\n              <span class=\"hljs-attr\">width:</span> &#x27;<span class=\"hljs-attr\">100</span>%&#x27;,\n            }}\n          &gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleSheetActive}</span>&gt;</span>Cancel<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">primary</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleSheetActive}</span>&gt;</span>\n              Done\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Sheet</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Page</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To offer an action before merchants can go to the next step in the flow, use the <a href=\"https://polaris.shopify.com/components/overlays/modal\">modal component</a></li>\n<li>To present a small amount of content or a menu of actions in a non-blocking overlay, use the <a href=\"https://polaris.shopify.com/components/overlays/popover\">popover component</a></li>\n</ul>\n"
  },
  "SkeletonBodyText": {
    "name": "Skeleton body text",
    "category": "Feedback indicators",
    "releasedIn": "1.7.0",
    "keywords": [
      "SkeletonBodyText",
      "skeleton",
      "loading",
      "page"
    ],
    "readme": "<h1 id=\"skeleton-body-text\">Skeleton body text</h1>\n<p>Skeleton body text is used to provide a low fidelity representation of content before it appears on the page, and improves load times perceived by merchants. Can be used for content in or outside of a card.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Skeleton body text component should:</p>\n<ul>\n<li>Be used with <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-page\">Skeleton page</a> when page content loads all at once. Together, these components give merchants an indication of what the page layout will be once loaded.</li>\n<li>Be used on its own, inside any content container component (like a <a href=\"https://polaris.shopify.com/components/structure/card\">card</a>), and when content loads after the main page load.</li>\n<li>Try to match the number of lines to the content being loaded so it gives an accurate representation.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"skeleton-body-text-1\">Skeleton body text</h3>\n<p>Show static content that never changes on a page and use skeleton loading for dynamic content. Skeleton body text can sometimes be used to represent non-typographic content such as forms. Don’t use placeholder content that will change when the page fully loads.</p>\n<!-- usageblock -->\n\n<h4 id=\"do\">Do</h4>\n<p>Use skeleton body text for dynamic content.\n<img src=\"/images-from-old-styleguide/skeleton/do-use-skeleton-body-for-dynamic-content@2x.png\" alt=\"Image showing skeleton body text for dynamic content\"></p>\n<h4 id=\"dont\">Don’t</h4>\n<p>Use skeleton body text for static content or use placeholder content for dynamic content.\n<img src=\"/images-from-old-styleguide/skeleton/dont-use-skeleton-body-for-static-or-placeholder-for-dynamic-text@2x.png\" alt=\"Image showing skeleton body text for static content\"></p>\n<!-- end -->\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-paragraph\">Default paragraph</h3>\n<p>Use this component to represent a block of content being loaded. For example, you could use it to represent an entire product description card on the product page.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">SkeletonBodyText</span> /&gt;\n</pre></code></p>\n<h3 id=\"single-line-content\">Single line content</h3>\n<p>Use this component to represent a short, single line of text, like a timestamp.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">SkeletonBodyText</span> lines={<span class=\"hljs-number\">1</span>} /&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>Use this component with <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-page\">Skeleton page</a> and <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-display-text\">Skeleton display text</a> to represent the content of a page while it’s loading.</li>\n<li>When giving feedback for in-context operations, use <a href=\"https://polaris.shopify.com/components/feedback-indicators/progress-bar\">Progress bar</a> or <a href=\"https://polaris.shopify.com/components/feedback-indicators/spinner\">Spinner</a> component.</li>\n</ul>\n"
  },
  "SkeletonDisplayText": {
    "name": "Skeleton display text",
    "category": "Feedback indicators",
    "releasedIn": "1.7.0",
    "keywords": [
      "SkeletonDisplayText",
      "skeleton",
      "loading",
      "page"
    ],
    "readme": "<h1 id=\"skeleton-display-text\">Skeleton display text</h1>\n<p>Skeleton display text is used to provide a low fidelity representation of content before it appears on the page, and improves load times perceived by merchants. Can be used for content in or outside of a card.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Skeleton display text component should:</p>\n<ul>\n<li>Give merchants an indication of what the page content will be once loaded</li>\n<li>Use real content for display text that never changes</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"skeleton-display-text-1\">Skeleton display text</h3>\n<p>Show static display text that that never changes on a page. For example, keep page titles, such as Products on the product list page, but use skeleton loading for page titles that change on the product details page.</p>\n<!-- usageblock -->\n\n<h4 id=\"do\">Do</h4>\n<p>Show actual display text for static content and use skeleton display text for dynamic content.\n<img src=\"/images-from-old-styleguide/skeleton/do-show-display-text-for-static-content@2x.png\" alt=\"Image showing skeleton display text for dynamic content\"></p>\n<h4 id=\"dont\">Don’t</h4>\n<p>Use skeleton display text for static content or placeholder content for dynamic content.\n<img src=\"/images-from-old-styleguide/skeleton/dont-use-skeleton-for-static-or-placeholder-content-for-dynamic@2x.png\" alt=\"Image showing skeleton display text for static content and placeholder text for dynamic content\"></p>\n<!-- end -->\n\n<!-- usageblock -->\n\n<h4 id=\"do-1\">Do</h4>\n<p>Show skeleton display text for dynamic page titles.</p>\n<div class=\"TypographyUsageBlockImg\">\n\n<p><img src=\"/images-from-old-styleguide/skeleton/do-use-skeleton-for-dynamic-page-titles@2x.png\" alt=\"Image showing skeleton display text for dynamic page title\"></p>\n</div>\n\n<!-- end -->\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"medium-and-large-display-text\">Medium and large display text</h3>\n<p>Use this component to represent medium and large display text such as large metrics on the reports list page, or for page titles.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">SkeletonDisplayText</span> size=<span class=\"hljs-string\">&quot;medium&quot;</span> /&gt;\n</pre></code></p>\n<h3 id=\"extra-large-display-text\">Extra large display text</h3>\n<p>Use this component to represent extra large display text.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">SkeletonDisplayText</span> size=<span class=\"hljs-string\">&quot;extraLarge&quot;</span> /&gt;\n</pre></code></p>\n<h3 id=\"small-display-text\">Small display text</h3>\n<p>Use this component to represent small display text such as content headings.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">SkeletonDisplayText</span> size=<span class=\"hljs-string\">&quot;small&quot;</span> /&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>Use this component with <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-page\">Skeleton page</a> and <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-body-text\">Skeleton body text</a> to represent the content of a page before it’s loaded.</li>\n<li>When giving feedback for in-context operations, use <a href=\"https://polaris.shopify.com/components/feedback-indicators/progress-bar\">Progress bar</a> or <a href=\"https://polaris.shopify.com/components/feedback-indicators/spinner\">Spinner</a> component.</li>\n</ul>\n"
  },
  "SkeletonPage": {
    "name": "Skeleton page",
    "category": "Feedback indicators",
    "releasedIn": "1.7.0",
    "keywords": [
      "SkeletonPage",
      "skeleton",
      "loading",
      "page"
    ],
    "readme": "<h1 id=\"skeleton-page\">Skeleton page</h1>\n<p>Skeleton page is used with other skeleton loading components to provide a low fidelity representation of the user interface (UI) before content appears on the page. It improves load times perceived by merchants.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Skeleton page component should:</p>\n<ul>\n<li>Be used for pages where all content loads at the same time.</li>\n<li>Give merchants an indication of what the page layout will be once loaded. Do this by mimicking its layout similarly to the state that will be loaded.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>Show page titles that never change for a page. For example, keep the title “Products” on the product list page, but use skeleton loading for titles that change on the product details page. Don’t use placeholder content for titles that will change when the page fully loads.</p>\n<p>Secondary actions are always represented with skeleton content. You can change the number of skeleton actions that best represent the number of actions once loaded.</p>\n<!-- usageblock -->\n\n<h4 id=\"do\">Do</h4>\n<p>Use skeleton loading for dynamic content, and use actual content for content that doesn’t change.</p>\n<div class=\"TypographyUsageBlockImg\">\n\n<p><img src=\"/images-from-old-styleguide/skeleton/do-use-skeleton-for-changing-content@2x.png\" alt=\"Image showing skeleton loading for changing content\"></p>\n</div>\n\n<h4 id=\"dont\">Don’t</h4>\n<p>Use placeholder content that will change when the page fully loads. This will confuse merchants and create a jumpy loading experience.</p>\n<div class=\"TypographyUsageBlockImg\">\n\n<p><img src=\"/images-from-old-styleguide/skeleton/dont-use-placeholder-content-that-will-change@2x.png\" alt=\"Image showing placeholder content that will change\"></p>\n</div>\n\n<!-- end -->\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"page-with-dynamic-content\">Page with dynamic content</h3>\n<p>Use this component to compose a loading version of a page where the page title and header content are dynamic, meaning, the content changes.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">SkeletonPage</span> primaryAction&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonBodyText</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonDisplayText</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;small&quot;</span> /&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonBodyText</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonDisplayText</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;small&quot;</span> /&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonBodyText</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout.Section</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout.Section</span> <span class=\"hljs-attr\">secondary</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonDisplayText</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;small&quot;</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonBodyText</span> <span class=\"hljs-attr\">lines</span>=<span class=\"hljs-string\">{2}</span> /&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonBodyText</span> <span class=\"hljs-attr\">lines</span>=<span class=\"hljs-string\">{1}</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">subdued</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonDisplayText</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;small&quot;</span> /&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonBodyText</span> <span class=\"hljs-attr\">lines</span>=<span class=\"hljs-string\">{2}</span> /&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextContainer</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonBodyText</span> <span class=\"hljs-attr\">lines</span>=<span class=\"hljs-string\">{2}</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout.Section</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">SkeletonPage</span>&gt;\n</pre></code></p>\n<h3 id=\"page-with-static-content\">Page with static content</h3>\n<p>Use this component to compose a loading version of a page where the page title and header content are known and stay the same.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">SkeletonPage</span> title=<span class=\"hljs-string\">&quot;Products&quot;</span> primaryAction&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonBodyText</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">sectioned</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Images&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonBodyText</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">sectioned</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Variants&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonBodyText</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout.Section</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout.Section</span> <span class=\"hljs-attr\">secondary</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Sales channels&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonBodyText</span> <span class=\"hljs-attr\">lines</span>=<span class=\"hljs-string\">{2}</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonBodyText</span> <span class=\"hljs-attr\">lines</span>=<span class=\"hljs-string\">{1}</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Organization&quot;</span> <span class=\"hljs-attr\">subdued</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonBodyText</span> <span class=\"hljs-attr\">lines</span>=<span class=\"hljs-string\">{2}</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonBodyText</span> <span class=\"hljs-attr\">lines</span>=<span class=\"hljs-string\">{2}</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout.Section</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">SkeletonPage</span>&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>Use the <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-body-text\">Skeleton body text</a> and <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-display-text\">Skeleton display text</a> components to represent blocks of content.</li>\n<li>When giving feedback for in-context operations, use <a href=\"https://polaris.shopify.com/components/feedback-indicators/progress-bar\">Progress bar</a> or <a href=\"https://polaris.shopify.com/components/feedback-indicators/spinner\">Spinner</a> component.</li>\n</ul>\n"
  },
  "SkeletonTabs": {
    "name": "Skeleton tabs",
    "category": "Feedback indicators",
    "releasedIn": 9,
    "keywords": [
      "SkeletonTabs",
      "skeleton",
      "loading",
      "page"
    ],
    "readme": "<h1 id=\"skeleton-tabs\">Skeleton tabs</h1>\n<p>Skeleton tabs are used to provide a low fidelity representation of content before it appears on the page, and improves load times perceived by merchants. Can be used for content in or outside of a card.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Skeleton tabs component should:</p>\n<ul>\n<li>Give merchants an indication of what the page content will be once loaded</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"simple-skeleton-tabs\">Simple skeleton tabs</h3>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonTabs</span> /&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<h3 id=\"skeleton-tabs-with-a-custom-count\">Skeleton tabs with a custom count</h3>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SkeletonTabs</span> <span class=\"hljs-attr\">count</span>=<span class=\"hljs-string\">{4}</span> /&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>Use this component with <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-page\">Skeleton page</a> and <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-body-text\">Skeleton body text</a> to represent the content of a page before it’s loaded.</li>\n</ul>\n"
  },
  "SkeletonThumbnail": {
    "name": "Skeleton thumbnail",
    "category": "Feedback indicators",
    "releasedIn": "3.7.2",
    "keywords": [
      "SkeletonThumbnail",
      "skeleton",
      "loading",
      "page"
    ],
    "readme": "<h1 id=\"skeleton-image\">Skeleton image</h1>\n<p>Skeleton thumbnail is used to provide a low fidelity representation of an image before it appears on the page, and improves load times perceived by merchants. Use for thumbnails in or outside of a card.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Skeleton thumbnail component should:</p>\n<ul>\n<li>Try to match the size of the thumbnail to the content being loaded so it gives an accurate representation.</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"medium-thumbnail\">Medium thumbnail</h3>\n<p>Use this component to represent medium thumbnails.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">SkeletonThumbnail</span> size=<span class=\"hljs-string\">&quot;medium&quot;</span> /&gt;\n</pre></code></p>\n<h3 id=\"large-thumbnail\">Large thumbnail</h3>\n<p>Use this component to represent large thumbnails.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">SkeletonThumbnail</span> size=<span class=\"hljs-string\">&quot;large&quot;</span> /&gt;\n</pre></code></p>\n<h3 id=\"small-thumbnail\">Small thumbnail</h3>\n<p>Use this component to represent small thumbnails.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">SkeletonThumbnail</span> size=<span class=\"hljs-string\">&quot;small&quot;</span> /&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>Use this component with <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-display-text\">Skeleton display text</a> to represent the content of a card while it’s loading.</li>\n</ul>\n"
  },
  "Spinner": {
    "name": "Spinner",
    "category": "Feedback indicators",
    "releasedIn": "1.7.0",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "spinner",
      "loader",
      "loading",
      "progress indicator",
      "android",
      "ios"
    ],
    "readme": "<h1 id=\"spinner\">Spinner</h1>\n<p>Spinners are used to notify merchants that their action is being processed. For loading states, spinners should only be used for content that can’t be represented with skeleton loading components, like for data charts.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-spinner\">Default spinner</h3>\n<p>Use to notify merchants that their requested action is being processed.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Spinner</span> accessibilityLabel=<span class=\"hljs-string\">&quot;Spinner example&quot;</span> size=<span class=\"hljs-string\">&quot;large&quot;</span> /&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Spinner/android/default@2x.gif\" alt=\"Material design spinner for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Spinner/ios/default@2x.gif\" alt=\"Apple’s spinner for iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"small-spinner\">Small spinner</h3>\n<!-- example-for: web -->\n\n<p>Smaller than the default spinner.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Spinner</span> accessibilityLabel=<span class=\"hljs-string\">&quot;Small spinner example&quot;</span> size=<span class=\"hljs-string\">&quot;small&quot;</span> /&gt;\n</pre></code></p>\n<h3 id=\"spinner-with-focus-management\">Spinner with focus management</h3>\n<p>Use to direct the focus state from the control to the spinner, to the content.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SpinnerWithFocusManagement</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> tabs = <span class=\"hljs-title function_\">useRef</span>([\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;all-customers&#x27;</span>,\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;All&#x27;</span>,\n      <span class=\"hljs-attr\">accessibilityLabel</span>: <span class=\"hljs-string\">&#x27;All customers&#x27;</span>,\n      <span class=\"hljs-attr\">panelID</span>: <span class=\"hljs-string\">&#x27;all-customers-content&#x27;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;accepts-marketing&#x27;</span>,\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Accepts marketing&#x27;</span>,\n      <span class=\"hljs-attr\">panelID</span>: <span class=\"hljs-string\">&#x27;accepts-marketing-content&#x27;</span>,\n    },\n  ]);</p>\n<p>  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\n  <span class=\"hljs-keyword\">const</span> [loading, setLoading] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> [textFieldFocused, setTextFieldFocused] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);</p>\n<p>  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">setTextFieldFocused</span>(!loading);\n  }, [loading]);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTabChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">selectedTab</span>) =&gt;</span> {\n    <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-title function_\">setSelected</span>(selectedTab);\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-title function_\">setValue</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">setLoading</span>(<span class=\"hljs-literal\">false</span>);\n    }, <span class=\"hljs-number\">1500</span>);\n  }, []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleUrlChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setValue</span>(value), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleSubmit = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">_event</span>) =&gt;</span> <span class=\"hljs-title function_\">setValue</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> label = selected ? <span class=\"hljs-string\">&#x27;Marketing&#x27;</span> : <span class=\"hljs-string\">&#x27;Customers&#x27;</span>;\n  <span class=\"hljs-keyword\">const</span> sectionMarkup = loading ? (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Spinner</span>\n      <span class=\"hljs-attr\">accessibilityLabel</span>=<span class=\"hljs-string\">&quot;Loading form field&quot;</span>\n      <span class=\"hljs-attr\">hasFocusableParent</span>=<span class=\"hljs-string\">{false}</span>\n    /&gt;</span></span>\n  ) : (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Form</span> <span class=\"hljs-attr\">noValidate</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{handleSubmit}</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormLayout</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n          <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value}</span>\n          <span class=\"hljs-attr\">focused</span>=<span class=\"hljs-string\">{textFieldFocused}</span>\n          <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleUrlChange}</span>\n          <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">{label}</span>\n          <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n        /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">submit</span>&gt;</span>Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormLayout</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Form</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tabs</span> <span class=\"hljs-attr\">tabs</span>=<span class=\"hljs-string\">{tabs.current}</span> <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selected}</span> <span class=\"hljs-attr\">onSelect</span>=<span class=\"hljs-string\">{handleTabChange}</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">{tabs.current[selected].content}</span>&gt;</span>\n          {sectionMarkup}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Tabs</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: web -->\n\n<p>SVGs are often conveyed inconsistently to assistive technologies. The <code>Spinner</code> component’s accessibility is also highly contextual. When the parent component is focusable, you’ll need to set the <code>hasFocusableParent</code> prop for the appropriate <code>role</code> attribute to be applied.</p>\n<p>For optimal user experience, use the <code>accessibilityLabel</code> prop to let assistive technology users know the purpose of the spinner.</p>\n<!-- /content-for-->\n\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The spinner component should:</p>\n<ul>\n<li>Notify merchants that their request has been received and the action will soon complete.</li>\n<li>Not be used to give feedback for an entire page load.</li>\n<li>White can only be used with small spinners on actionable components like buttons.</li>\n<li>On web, be used in conjunction with skeleton loading to represent non-typographic content. For example, line graphs on the Merchant analytics dashboard.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"accessibility-label\">Accessibility label</h3>\n<p>Spinner accessibility label should:</p>\n<ul>\n<li>Accurately explain the state of the requested action. For example, “Loading”, “Submitting”, “Processing”.</li>\n<li>Use as few words to describe the state as possible.</li>\n</ul>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To improve user experience and reduce the appearance of long loading times, use the <a href=\"https://polaris.shopify.com/components/feedback-indicators/progress-bar\">Progress bar</a> component.</li>\n<li>To better represent loading content, use <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-page\">Skeleton page</a> along with <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-body-text\">Skeleton body text</a> and <a href=\"https://polaris.shopify.com/components/feedback-indicators/skeleton-display-text\">Skeleton display text</a> components.</li>\n</ul>\n"
  },
  "Stack": {
    "name": "Stack",
    "category": "Structure",
    "keywords": [
      "rows",
      "vertical centering",
      "horizontal row of components",
      "flexible items",
      "flexbox",
      "row of components",
      "stack spacing",
      "vertical centering",
      "fill available space",
      "fill space",
      "equal width",
      "right-aligned stack",
      "stack layout",
      "layout"
    ],
    "readme": "<h1 id=\"stack\">Stack</h1>\n<p>Use to lay out a horizontal row of components or to achieve no-fuss vertical\ncentering. A stack is made of flexible items that wrap each of the stack’s\nchildren. Options provide control of the wrapping, spacing, and relative size of the items in the stack.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Stacks should:</p>\n<ul>\n<li>Be used for small-scale layout tasks when you want a row of components that should wrap on small screen widths</li>\n<li>Be used to vertically center two elements</li>\n<li>Not be used for complex or unique arrangements of components</li>\n<li>Not be used for large-scale page layout</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-behavior\">Default behavior</h3>\n<p>Use to quickly lay out a horizontal row of components and maintain their relative sizes. On small screens, children rows wrap down to additional rows as needed.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Stack</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span>&gt;</span>Paid<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span>&gt;</span>Processing<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span>&gt;</span>Fulfilled<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span>&gt;</span>Completed<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Stack</span>&gt;\n</pre></code></p>\n<h3 id=\"non-wrapping-stacks\">Non-wrapping Stacks</h3>\n<p>Use to create a stack where the children will not wrap to new rows on small screens. As noted above, the wrap option defaults to true. This means you must explicitly set it to false to turn it off.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Stack</span> wrap={<span class=\"hljs-literal\">false</span>}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span>&gt;</span>Paid<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span>&gt;</span>Processing<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span>&gt;</span>Fulfilled<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span>&gt;</span>Completed<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Stack</span>&gt;\n</pre></code></p>\n<h3 id=\"spacing-options\">Spacing options</h3>\n<p>Use to control spacing of items in a stack in standard increments. Use tight for less spacing, loose for more spacing, or none to remove normal spacing altogether.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Stack</span> spacing=<span class=\"hljs-string\">&quot;loose&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span>&gt;</span>Paid<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span>&gt;</span>Fulfilled<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Stack</span>&gt;\n</pre></code></p>\n<h3 id=\"vertical-centering-with-a-stack\">Vertical centering with a stack</h3>\n<p>Use to vertically center a set of items that have different heights.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Stack</span> alignment=<span class=\"hljs-string\">&quot;center&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Heading</span>&gt;</span>\n    Order\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n    #1136\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n    was paid\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Heading</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span>&gt;</span>Paid<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span>&gt;</span>Fulfilled<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Stack</span>&gt;\n</pre></code></p>\n<h3 id=\"fill-available-space-proportionally\">Fill available space proportionally</h3>\n<p>Use to have the stack’s items fill the horizontal space in the container but maintain their relative proportions.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Stack</span> distribution=<span class=\"hljs-string\">&quot;fill&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Heading</span>&gt;</span>Order #1136<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Heading</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span>&gt;</span>Paid<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span>&gt;</span>Fulfilled<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Stack</span>&gt;\n</pre></code></p>\n<h3 id=\"stack-where-items-fill-space-evenly\">Stack where items fill space evenly</h3>\n<p>Use to have the stack’s items fill the horizontal space in the container and be equal widths, regardless of their content.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Stack</span> distribution=<span class=\"hljs-string\">&quot;fillEvenly&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Heading</span>&gt;</span>Order #1136<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Heading</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span>&gt;</span>Paid<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span>&gt;</span>Fulfilled<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Stack</span>&gt;\n</pre></code></p>\n<h3 id=\"stack-where-a-single-item-fills-the-remaining-space\">Stack where a single item fills the remaining space</h3>\n<p>Use for aligning buttons or secondary content to the right edge of another element, allowing it to wrap below on small screens.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Stack</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack.Item</span> <span class=\"hljs-attr\">fill</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Heading</span>&gt;</span>Order #1136<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Heading</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack.Item</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack.Item</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span>&gt;</span>Paid<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack.Item</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack.Item</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span>&gt;</span>Fulfilled<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack.Item</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Stack</span>&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"stack-item\">Stack item</h2>\n<p>The stack component will treat multiple elements wrapped in a stack item component as one item. By default, each individual element is treated as one stack item. Use the fill prop on a single stack item component to make it fill the rest of the available horizontal space. See the “Stack where a single item fills the remaining space” example.</p>\n<h3 id=\"stack-item-properties\">Stack item properties</h3>\n<table>\n<thead>\n<tr>\n<th>Prop</th>\n<th>Type</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>fill</td>\n<td>boolean</td>\n<td>Fill the available horizontal space in the stack with the item</td>\n<td>false</td>\n</tr>\n<tr>\n<td>children</td>\n<td>any</td>\n<td>Elements to display inside stack item</td>\n<td></td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To create the large-scale structure of pages, <a href=\"https://polaris.shopify.com/components/structure/layout\">use the layout component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>The stack component is for alignment only and doesn’t provide any structural information for assistive technologies. To convey relationships between specific items, consider using the <a href=\"https://polaris.shopify.com/components/lists-and-tables/list\">list component</a>.</p>\n<!-- /content-for -->\n"
  },
  "Stepper": {
    "name": "Stepper",
    "category": "Forms",
    "platforms": [
      "android",
      "ios"
    ],
    "keywords": [
      "stepper",
      "counter",
      "numbered field",
      "numberpicker",
      "picker",
      "android",
      "ios"
    ],
    "readme": "<h1 id=\"stepper\">Stepper</h1>\n<p>Use stepper to increase or decrease a value in a counter field.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<ul>\n<li>Make it clear what you’re increasing and decreasing the value of by placing it in close context of the value it’s changing.</li>\n<li>Eliminate merchants’ need to remember values by using a numerical indicator outside of the stepper that shows the maximum value.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>Avoid truncating the value.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<p>7,820</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<p>78...</p>\n</div></div>\n\n<p>Avoid abbreviating values (10k, 1m), instead, make the text smaller to fit the space.</p>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<p>52,834</p>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<p>52k</p>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-stepper\">Default stepper</h3>\n<!-- example-for: android, ios -->\n\n<p>The stepper has two buttons, a minus and a plus button. It’s possible to tap into the text field as well.</p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Stepper/android/default@2x.png\" alt=\"Default stepper with enabled decrease and increase button\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Stepper/ios/default@2x.png\" alt=\"Default stepper with enabled decrease and increase button\"></p>\n<!-- /content-for -->\n\n<h3 id=\"disabled-stepper\">Disabled stepper</h3>\n<!-- example-for: android, ios -->\n\n<p>If you reach the bottom or top value, the appropriate button becomes disabled.</p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Stepper/android/disabled@2x.png\" alt=\"Disabled stepper\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Stepper/ios/disabled@2x.png\" alt=\"Disabled stepper\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>If values need to change dramatically, use <a href=\"https://polaris.shopify.com/components/forms/text-field\">text field with number field</a></li>\n<li>If values shouldn’t change or won’t be changing, use <a href=\"https://polaris.shopify.com/components/forms/text-field\">disabled text field</a></li>\n</ul>\n"
  },
  "Subheading": {
    "name": "Subheading",
    "category": "Titles and text",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "title bar",
      "top-level",
      "description",
      "sub-section titles",
      "titles of sub-sections",
      "subsection titles",
      "titles of subsections",
      "android",
      "ios"
    ],
    "readme": "<h1 id=\"subheading\">Subheading</h1>\n<p>Subheadings are used for the title of any sub-sections in top-level page sections.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Subheadings should:</p>\n<ul>\n<li>Be used to explain and clearly label logical groups in existing sections of a page</li>\n<li>Not be used without a parent heading</li>\n<li>Not be used in tables or list items, such as for the primary content in a <a href=\"https://polaris.shopify.com/components/lists-and-tables/resource-list\">resource list</a></li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>Subheadings should follow the content guidelines for <a href=\"https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings\">headings and subheadings</a>.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"typographic-subheading\">Typographic subheading</h3>\n<p>Used for the title of any sub-sections in top-level page sections.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Subheading</span>&gt;<span class=\"hljs-title class_\">Accounts</span>&lt;/<span class=\"hljs-title class_\">Subheading</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Subheading/android/default@2x.png\" alt=\"typographic subheading\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Subheading/ios/default@2x.png\" alt=\"typographic subheading\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To break up major sections of a page with a title, <a href=\"https://polaris.shopify.com/components/titles-and-text/heading\">use the heading component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>A clear and consistent heading structure helps merchants who have difficulty with reading or language. It also helps screen reader users to navigate the page using keystrokes that are custom to their screen reader.</p>\n<p>Use the <code>element</code> prop to determine the specific HTML element that’s output for the subheading. The component defaults to a level 3 heading (<code>&lt;h3&gt;</code>). Use a different value for the <code>element</code> prop if a different subheading fits the context better.</p>\n<p>Learn more about writing helpful <a href=\"https://polaris.shopify.com/content/actionable-language#section-headings-and-subheadings\">headings and subheadings</a>.</p>\n<!-- usageblock -->\n\n<h4 id=\"do\">Do</h4>\n<p>Use subheadings to support the hierarchy and structure of the page.</p>\n<h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>Use subheadings for style alone.</li>\n<li>Use subheadings for major sections of the page.</li>\n</ul>\n<!-- end -->\n\n<!-- /content-for -->\n"
  },
  "Tabs": {
    "name": "Tabs",
    "category": "Navigation",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "layout",
      "navigate",
      "organize",
      "list views",
      "list filters",
      "fitted tabs",
      "segmented controls",
      "scrollable"
    ],
    "readme": "<h1 id=\"tabs\">Tabs</h1>\n<p>Use to alternate among related views within the same context.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Tabs should:</p>\n<ul>\n<li>Represent the same kind of content, such as a list-view with different filters applied. Don’t use tabs to group content that is dissimilar.</li>\n<li>Only be active one at a time.</li>\n<li>Not force merchants to jump back and forth to do a single task. Merchants should be able to complete their work and find what they need under each tab.</li>\n<li>Not be used for primary navigation.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"tabs-1\">Tabs</h3>\n<p>Tabs should:</p>\n<ul>\n<li><p>Be clearly labeled to help differentiate the different sections beneath them.</p>\n</li>\n<li><p>Have short and scannable labels, generally kept to single word.</p>\n</li>\n<li><p>Relate to the section of Shopify they’re on. Imagine the page section title is an invisible noun after the tab. For example, the tabs for the orders section are:</p>\n<ul>\n<li>All</li>\n<li>Open</li>\n<li>Unfulfilled</li>\n<li>Unpaid</li>\n</ul>\n</li>\n</ul>\n<p>The tabs for the gift cards section are:</p>\n<ul>\n<li>All</li>\n<li>New</li>\n<li>Partially used</li>\n<li>Used</li>\n<li>Disabled</li>\n</ul>\n<p>And for the customers section, the tabs are:</p>\n<ul>\n<li>All</li>\n<li>New</li>\n<li>Returning</li>\n<li>Abandoned checkouts</li>\n<li>Email subscribers</li>\n</ul>\n<p>Where possible, follow this pattern when writing tabs.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-tabs\">Default tabs</h3>\n<p>Use for most cases, especially when the number of tabs may be more than three.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TabsExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTabChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">selectedTabIndex</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelected</span>(selectedTabIndex),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> tabs = [\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;all-customers-1&#x27;</span>,\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;All&#x27;</span>,\n      <span class=\"hljs-attr\">accessibilityLabel</span>: <span class=\"hljs-string\">&#x27;All customers&#x27;</span>,\n      <span class=\"hljs-attr\">panelID</span>: <span class=\"hljs-string\">&#x27;all-customers-content-1&#x27;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;accepts-marketing-1&#x27;</span>,\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Accepts marketing&#x27;</span>,\n      <span class=\"hljs-attr\">panelID</span>: <span class=\"hljs-string\">&#x27;accepts-marketing-content-1&#x27;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;repeat-customers-1&#x27;</span>,\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Repeat customers&#x27;</span>,\n      <span class=\"hljs-attr\">panelID</span>: <span class=\"hljs-string\">&#x27;repeat-customers-content-1&#x27;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;prospects-1&#x27;</span>,\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Prospects&#x27;</span>,\n      <span class=\"hljs-attr\">panelID</span>: <span class=\"hljs-string\">&#x27;prospects-content-1&#x27;</span>,\n    },\n  ];</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tabs</span> <span class=\"hljs-attr\">tabs</span>=<span class=\"hljs-string\">{tabs}</span> <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selected}</span> <span class=\"hljs-attr\">onSelect</span>=<span class=\"hljs-string\">{handleTabChange}</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">{tabs[selected].content}</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Tab {selected} selected<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Tabs</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Tabs/android/default@2x.png\" alt=\"Default tabs on Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Tabs/ios/default@2x.png\" alt=\"Default tabs on iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"fitted-tabs\">Fitted tabs</h3>\n<p>Use when tabs contain a few (2 or 3) items within a narrow column.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">FittedTabsExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTabChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">selectedTabIndex</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelected</span>(selectedTabIndex),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> tabs = [\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;all-customers-fitted-2&#x27;</span>,\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;All&#x27;</span>,\n      <span class=\"hljs-attr\">accessibilityLabel</span>: <span class=\"hljs-string\">&#x27;All customers&#x27;</span>,\n      <span class=\"hljs-attr\">panelID</span>: <span class=\"hljs-string\">&#x27;all-customers-fitted-content-2&#x27;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;accepts-marketing-fitted-2&#x27;</span>,\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Accepts marketing&#x27;</span>,\n      <span class=\"hljs-attr\">panelID</span>: <span class=\"hljs-string\">&#x27;accepts-marketing-fitted-Ccontent-2&#x27;</span>,\n    },\n  ];</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tabs</span> <span class=\"hljs-attr\">tabs</span>=<span class=\"hljs-string\">{tabs}</span> <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selected}</span> <span class=\"hljs-attr\">onSelect</span>=<span class=\"hljs-string\">{handleTabChange}</span> <span class=\"hljs-attr\">fitted</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">{tabs[selected].content}</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Tab {selected} selected<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Tabs</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Tabs/android/fixed@2x.png\" alt=\"Fixed tabs on Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>Also known as <a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/controls/segmented-controls/\">Segmented controls</a> on iOS.</p>\n<p><img src=\"/images-from-old-styleguide/components/Tabs/ios/fixed@2x.png\" alt=\"Fixed tabs on iOS\"></p>\n<!-- /content-for -->\n\n<h3 id=\"tabs-with-badge-content\">Tabs with badge content</h3>\n<p>Use to inform a piece of information about the tabs.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TabsWithBadgeExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTabChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">selectedTabIndex</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelected</span>(selectedTabIndex),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> tabs = [\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;all-customers-fitted-3&#x27;</span>,\n      <span class=\"hljs-attr\">content</span>: (\n        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>\n          All <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span> <span class=\"hljs-attr\">status</span>=<span class=\"hljs-string\">&quot;new&quot;</span>&gt;</span>10+<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>\n      ),\n      <span class=\"hljs-attr\">accessibilityLabel</span>: <span class=\"hljs-string\">&#x27;All customers&#x27;</span>,\n      <span class=\"hljs-attr\">panelID</span>: <span class=\"hljs-string\">&#x27;all-customers-fitted-content-3&#x27;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;accepts-marketing-fitted-3&#x27;</span>,\n      <span class=\"hljs-attr\">content</span>: (\n        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>\n          Accepts marketing <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Badge</span> <span class=\"hljs-attr\">status</span>=<span class=\"hljs-string\">&quot;new&quot;</span>&gt;</span>4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Badge</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>\n      ),\n      <span class=\"hljs-attr\">panelID</span>: <span class=\"hljs-string\">&#x27;accepts-marketing-fitted-content-3&#x27;</span>,\n    },\n  ];</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tabs</span> <span class=\"hljs-attr\">tabs</span>=<span class=\"hljs-string\">{tabs}</span> <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selected}</span> <span class=\"hljs-attr\">onSelect</span>=<span class=\"hljs-string\">{handleTabChange}</span> <span class=\"hljs-attr\">fitted</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">{tabs[selected].content}</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Tab {selected} selected<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Tabs</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"tabs-with-custom-disclosure\">Tabs with custom disclosure</h3>\n<p>Use to provide information about the popover contents</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TabsWithCustomDisclosureExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTabChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">selectedTabIndex</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelected</span>(selectedTabIndex),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> tabs = [\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;all-customers-4&#x27;</span>,\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;All&#x27;</span>,\n      <span class=\"hljs-attr\">accessibilityLabel</span>: <span class=\"hljs-string\">&#x27;All customers&#x27;</span>,\n      <span class=\"hljs-attr\">panelID</span>: <span class=\"hljs-string\">&#x27;all-customers-content-4&#x27;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;accepts-marketing-4&#x27;</span>,\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Accepts marketing&#x27;</span>,\n      <span class=\"hljs-attr\">panelID</span>: <span class=\"hljs-string\">&#x27;accepts-marketing-content-4&#x27;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;repeat-customers-4&#x27;</span>,\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Repeat customers&#x27;</span>,\n      <span class=\"hljs-attr\">panelID</span>: <span class=\"hljs-string\">&#x27;repeat-customers-content-4&#x27;</span>,\n    },\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;prospects-4&#x27;</span>,\n      <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&#x27;Prospects&#x27;</span>,\n      <span class=\"hljs-attr\">panelID</span>: <span class=\"hljs-string\">&#x27;prospects-content-4&#x27;</span>,\n    },\n  ];</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tabs</span>\n        <span class=\"hljs-attr\">tabs</span>=<span class=\"hljs-string\">{tabs}</span>\n        <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{selected}</span>\n        <span class=\"hljs-attr\">onSelect</span>=<span class=\"hljs-string\">{handleTabChange}</span>\n        <span class=\"hljs-attr\">disclosureText</span>=<span class=\"hljs-string\">&quot;More views&quot;</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card.Section</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">{tabs[selected].content}</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Tab {selected} selected<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card.Section</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Tabs</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n"
  },
  "Tag": {
    "name": "Tag",
    "category": "Forms",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "indicator",
      "label",
      "label objects",
      "organize objects",
      "categorize objects",
      "categories",
      "keywords"
    ],
    "readme": "<h1 id=\"tag\">Tag</h1>\n<p>Tags represent a set of interactive, merchant-supplied keywords that help label, organize, and categorize objects. Tags can be added or removed from an object by merchants.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Tags should:</p>\n<ul>\n<li>Be presented close to or within the input control that allows merchants to add and remove tags</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-tag\">Default tag</h3>\n<p>Use to signify the attributes of an object.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Tag</span>&gt;<span class=\"hljs-title class_\">Wholesale</span>&lt;/<span class=\"hljs-title class_\">Tag</span>&gt;\n</pre></code></p>\n<h3 id=\"removable-tag\">Removable tag</h3>\n<p>Use to allow merchants to remove attributes from an object.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RemovableTagExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [selectedTags, setSelectedTags] = <span class=\"hljs-title function_\">useState</span>([\n    <span class=\"hljs-string\">&#x27;Rustic&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Antique&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Vinyl&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Refurbished&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer at ipsum quam. Aliquam fermentum bibendum vestibulum. Vestibulum condimentum luctus metus, sed sagittis magna pellentesque eget. Duis dapibus pretium nisi, et venenatis tortor dignissim ut. Quisque eget lacus ac ex eleifend ultrices. Phasellus facilisis ex sit amet leo elementum condimentum. Ut vel maximus felis. Etiam eget diam eu eros blandit interdum. Sed eu metus sed justo aliquam iaculis ac sit amet ex. Curabitur justo magna, porttitor non pulvinar eu, malesuada at leo. Cras mollis consectetur eros, quis maximus lorem dignissim at. Proin in rhoncus massa. Vivamus lectus nunc, fringilla euismod risus commodo, mattis blandit nulla.&#x27;</span>,\n  ]);</p>\n<p>  <span class=\"hljs-keyword\">const</span> removeTag = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">tag</span>) =&gt;</span> <span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-title function_\">setSelectedTags</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">previousTags</span>) =&gt;</span>\n        previousTags.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">previousTag</span>) =&gt;</span> previousTag !== tag),\n      );\n    },\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> tagMarkup = selectedTags.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">option</span>) =&gt;</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tag</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{option}</span> <span class=\"hljs-attr\">onRemove</span>=<span class=\"hljs-string\">{removeTag(option)}</span>&gt;</span>\n      {option}\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Tag</span>&gt;</span></span>\n  ));</p>\n<p>  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack</span> <span class=\"hljs-attr\">spacing</span>=<span class=\"hljs-string\">&quot;tight&quot;</span>&gt;</span>{tagMarkup}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack</span>&gt;</span></span>;\n}\n</pre></code></p>\n<h3 id=\"clickable-tag\">Clickable tag</h3>\n<p>Use to allow merchants to add attributes to an object.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Tag</span> onClick={<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Clicked&#x27;</span>)}&gt;<span class=\"hljs-title class_\">Wholesale</span>&lt;/<span class=\"hljs-title class_\">Tag</span>&gt;\n</pre></code></p>\n<h3 id=\"tag-with-link\">Tag with link</h3>\n<p>Use to allow merchants to navigate to a resource. For example a customer segment or a smart collection</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">URLTagExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tag</span> <span class=\"hljs-attr\">url</span>=<span class=\"hljs-string\">&quot;/collections/wholesale&quot;</span>&gt;</span>Wholesale<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Tag</span>&gt;</span></span>;\n}\n</pre></code></p>\n<h3 id=\"tag-with-custom-content\">Tag with custom content</h3>\n<p>Use when a tag needs to be visually distinguished from others, like when it&#39;s added automatically.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Tag</span> url=<span class=\"hljs-string\">&quot;/collections/wholesale&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack</span> <span class=\"hljs-attr\">spacing</span>=<span class=\"hljs-string\">&quot;extraTight&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{WandMinor}</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>Wholesale<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Tag</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Tag/android/default@2x.png\" alt=\"Tag for Android\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Tag/ios/default@2x.png\" alt=\"Tag for iOS\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To show the status of an object, <a href=\"https://polaris.shopify.com/components/images-and-icons/badge\">use the badge component</a></li>\n<li>To add and remove tags, <a href=\"https://polaris.shopify.com/components/forms/text-field\">use the text field component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<h3 id=\"labeling\">Labeling</h3>\n<p>The button to remove a tag is automatically given a label using <code>aria-label</code> so that screen reader users can distinguish which tag will be removed.</p>\n<h3 id=\"keyboard-support\">Keyboard support</h3>\n<p>The control to remove a tag is implemented as a button with standard keyboard support.</p>\n<ul>\n<li>Give buttons keyboard focus with the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)</li>\n<li>To activate a button, press the <kbd>enter</kbd>/<kbd>return</kbd> or <kbd>space</kbd> key</li>\n</ul>\n<p>When a merchant uses the button to remove a tag, it is important to make sure that keyboard focus is managed. Moving focus to the next element in the page is recommended.</p>\n<!-- /content-for -->\n"
  },
  "TextContainer": {
    "name": "Text container",
    "category": "Titles and text",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "releasedIn": "1.9.0",
    "keywords": [
      "spacing",
      "heading",
      "list",
      "layout",
      "vertical",
      "margin",
      "padding",
      "android",
      "ios"
    ],
    "readme": "<h1 id=\"text-container\">Text container</h1>\n<p>A text container is used to wrap text elements such as paragraphs, headings, and lists to give them vertical spacing.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The closer the spacing, the closer the relationship between content topics. The closeness visually represents the relationship.</p>\n<ul>\n<li>Use tight spacing to relate content topics to each other</li>\n<li>Use loose spacing to separate concepts that are independent of each other</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-text-container\">Default text container</h3>\n<p>Use this component for default vertical spacing.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">TextContainer</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Heading</span>&gt;</span>Install the Shopify POS App<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Heading</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n    Shopify POS is the easiest way to sell your products in person. Available\n    for iPad, iPhone, and Android.\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">TextContainer</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextContainer/android/default@2x.png\" alt=\"Default text container\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextContainer/ios/default@2x.png\" alt=\"Default text container\"></p>\n<!-- /content-for -->\n\n<h3 id=\"tight-text-container\">Tight text container</h3>\n<p>Use the tight spacing option to relate content topics to each other.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">TextContainer</span> spacing=<span class=\"hljs-string\">&quot;tight&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Heading</span>&gt;</span>Install the Shopify POS App<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Heading</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n    Shopify POS is the easiest way to sell your products in person. Available\n    for iPad, iPhone, and Android.\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">TextContainer</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextContainer/android/tight@2x.png\" alt=\"Tight text container\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextContainer/ios/tight@2x.png\" alt=\"Tight text container\"></p>\n<!-- /content-for -->\n\n<h3 id=\"loose-text-container\">Loose text container</h3>\n<p>Use the loose spacing option to separate concepts that are independent of each other.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">TextContainer</span> spacing=<span class=\"hljs-string\">&quot;loose&quot;</span>&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n    Manage your Shopify store on-the-go with real-time notifications, access to\n    your dashboard, and order management, all from your smartphone.\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n    Shopify POS is the fastest and easiest way to start accepting Visa,\n    Mastercard, American Express, and Discover right from your smartphone or\n    tablet.\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">TextContainer</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextContainer/android/loose@2x.png\" alt=\"Loose text container\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextContainer/ios/loose@2x.png\" alt=\"Loose text container\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>For more layout variations, or if you’re looking to vertically space components other than text, use <a href=\"https://polaris.shopify.com/components/structure/stack\">Stack</a>.</li>\n</ul>\n"
  },
  "TextField": {
    "name": "Text field",
    "category": "Forms",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "TextField",
      "input",
      "textarea",
      "type",
      "add info",
      "form field",
      "input forms",
      "form input",
      "field",
      "active state",
      "input active state",
      "input state",
      "input focus",
      "focus",
      "textbar",
      "text bar",
      "forms",
      "form inputs",
      "form text input",
      "placeholder text",
      "field placeholder text",
      "optional fields",
      "field help text",
      "validation error messages",
      "field labels",
      "number fields",
      "email fields",
      "multiline",
      "hidden label",
      "label action",
      "placeholder text",
      "help text",
      "prefix or suffix",
      "connected fields",
      "label actions",
      "hidden labels",
      "separate error message",
      "icon action",
      "ios",
      "android"
    ],
    "readme": "<h1 id=\"text-field\">Text field</h1>\n<p>A text field is an input field that merchants can type into. It has a range of\noptions and supports several text formats including numbers.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Text fields should:</p>\n<ul>\n<li>Be clearly labeled so it’s obvious to merchants what they should enter into the field</li>\n<li>Be labeled as “Optional” when you need to request input that’s not required</li>\n<li>Only ask for information that’s really needed</li>\n<li>Validate input as soon as merchants have finished interacting with a field (but not before)</li>\n</ul>\n<h3 id=\"autocomplete\">Autocomplete</h3>\n<p>The autocomplete attribute in an <code>input</code> field controls two types of browser behavior:</p>\n<ol>\n<li><strong>Browser autofill</strong>: a feature that automatically populates form fields with previously-saved information, such as passwords, addresses, and credit card data.</li>\n</ol>\n<ul>\n<li>Autofill is an important feature for our users. Google has found that <a href=\"https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill?hl=en\">&quot;users complete forms up to 30% faster&quot;</a> when using autofill.</li>\n<li>The WHATWG has a list of supported autofill values for the <code>autocomplete</code> attribute. <a href=\"https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\">Review the section &quot;4.10.18.7 Autofill&quot;</a> for all the input types and their corresponding autocomplete attribute values.</li>\n</ul>\n<ol start=\"2\">\n<li><strong>Browser autocomplete</strong> - a feature that displays previously submitted values for that field.</li>\n</ol>\n<ul>\n<li>When this is on for a field, a user is presented a list with previously submitted values for the input</li>\n</ul>\n<p><strong>Recommendation</strong></p>\n<blockquote>\n<p>Always add an autocomplete attribute and value to inputs if the type is: color, date, datetime-local, email, month, number, password, range, search, tel, text, time, url, or week.</p>\n</blockquote>\n<h4 id=\"turning-autofillautocomplete-off\">Turning autofill/autocomplete off</h4>\n<p>Even if you do not want the browser to autofill a user&#39;s information, it is recommended you still have an autocomplete attribute with the value off or nope.</p>\n<p>Unfortunately, <a href=\"https://caniuse.com/input-autocomplete-onoff\">not all browsers support</a> or respect autocomplete=&quot;off&quot;. This makes things challenging. Chrome, for example, <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=468153\">has a long outstanding bug</a> and won&#39;t add support for off for now.</p>\n<table>\n<thead>\n<tr>\n<th>Browser</th>\n<th>Support for <code>autocomplete=&quot;off&quot;</code></th>\n<th>Details</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Chrome</td>\n<td>Partial</td>\n<td>Intentionally ignores <code>off</code> value when the user uses the browser&#39;s autofill functionality. <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=468153\">See bug</a>.</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td>Partial</td>\n<td>Ignores <code>off</code> value for <code>username</code>, <code>email</code> and <code>password</code> fields.</td>\n</tr>\n<tr>\n<td>Firefox</td>\n<td>Partial</td>\n<td>Ignores <code>off</code> value for login forms. <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=956906\">See bug</a>.</td>\n</tr>\n<tr>\n<td>Edge</td>\n<td>Partial</td>\n<td>Intentionally ignores <code>off</code> value when the user uses the browser&#39;s autofill functionality.</td>\n</tr>\n</tbody></table>\n<p>Chrome does seem to turn autocomplete off when using the value nope (or any non valid string). However, we have seen some inconsistencies even with that support.</p>\n<p><strong>Recommendation (Chrome only)</strong></p>\n<ul>\n<li>Turning off both <strong>autofill</strong> and <strong>browser autocomplete</strong> (previously submitted values) in Chrome<ul>\n<li>Use <code>autocomplete=nope</code> and also <strong>must have a <code>name</code> attribute</strong>.</li>\n</ul>\n</li>\n<li>Turning off <strong>browser autocomplete</strong> (previously submitted values) in Chrome<ul>\n<li>If you don&#39;t have <code>name</code> attribute and the field is not a typical autofill input (address, email, etc), use <code>autocomplete=off</code>.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>For text field content guidelines, reference the <a href=\"https://polaris.shopify.com/experiences/text-fields\">text fields experience</a> page.</p>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-text-field\">Default text field</h3>\n<p>Use to allow merchants to provide text input when the expected input is short. For longer input, use the auto grow or multiline options.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TextFieldExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;Jaded Pixel&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">newValue</span>) =&gt;</span> <span class=\"hljs-title function_\">setValue</span>(newValue), []);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Store name&quot;</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChange}</span>\n      <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextField/android/default@2x.png\" alt=\"Default text field\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextField/ios/default@2x.png\" alt=\"Default text field\"></p>\n<!-- /content-for -->\n\n<h3 id=\"number-field\">Number field</h3>\n<p>Use when input text should be a number.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">NumberFieldExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">newValue</span>) =&gt;</span> <span class=\"hljs-title function_\">setValue</span>(newValue), []);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Quantity&quot;</span>\n      <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;number&quot;</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChange}</span>\n      <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p>This will display the right keyboard on mobile devices.</p>\n<p><img src=\"/images-from-old-styleguide/components/TextField/android/number@2x.png\" alt=\"Number text field with numeric keyboard\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>This will display the right keyboard on mobile devices.</p>\n<p><img src=\"/images-from-old-styleguide/components/TextField/ios/number@2x.png\" alt=\"Number text field with numeric keyboard\"></p>\n<!-- /content-for -->\n\n<h3 id=\"email-field\">Email field</h3>\n<p>Use when the text input should be an email address.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">EmailFieldExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;<a href=\"mailto:&#98;&#x65;&#x72;&#110;&#x61;&#x64;&#x65;&#x74;&#116;&#x65;&#46;&#x6c;&#97;&#112;&#114;&#101;&#x73;&#x73;&#101;&#x40;&#x6a;&#x61;&#100;&#x65;&#100;&#112;&#105;&#120;&#x65;&#108;&#x2e;&#x63;&#x6f;&#109;\">&#98;&#x65;&#x72;&#110;&#x61;&#x64;&#x65;&#x74;&#116;&#x65;&#46;&#x6c;&#97;&#112;&#114;&#101;&#x73;&#x73;&#101;&#x40;&#x6a;&#x61;&#100;&#x65;&#100;&#112;&#105;&#120;&#x65;&#108;&#x2e;&#x63;&#x6f;&#109;</a>&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">newValue</span>) =&gt;</span> <span class=\"hljs-title function_\">setValue</span>(newValue), []);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Email&quot;</span>\n      <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChange}</span>\n      <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;email&quot;</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p>This will display the right keyboard on mobile devices.</p>\n<p><img src=\"/images-from-old-styleguide/components/TextField/android/email@2x.png\" alt=\"Email field with email keyboard\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>This will display the right keyboard on mobile devices.</p>\n<p><img src=\"/images-from-old-styleguide/components/TextField/ios/email@2x.png\" alt=\"Email field with email keyboard\"></p>\n<!-- /content-for -->\n\n<h3 id=\"multiline-text-field\">Multiline text field</h3>\n<p>Use when the expected input could be more than one line. The field will automatically grow to accommodate additional text.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MultilineFieldExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;1776 Barnes Street\\nOrlando, FL 32801&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">newValue</span>) =&gt;</span> <span class=\"hljs-title function_\">setValue</span>(newValue), []);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Shipping address&quot;</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChange}</span>\n      <span class=\"hljs-attr\">multiline</span>=<span class=\"hljs-string\">{4}</span>\n      <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextField/android/multi-line@2x.png\" alt=\"Multi-line text field\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextField/ios/multi-line@2x.png\" alt=\"Multi-line text field\"></p>\n<!-- /content-for -->\n\n<h3 id=\"text-field-with-hidden-label\">Text field with hidden label</h3>\n<!-- example-for: web -->\n\n<p>Use to visually hide the label when the text field’s purpose is clear from context. The label will remain available to screen readers. Use this option with care. In almost all cases, show the label.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">HiddenLabelExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;12&#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> [selected, setSelected] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;yes&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTextChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">newValue</span>) =&gt;</span> <span class=\"hljs-title function_\">setValue</span>(newValue), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleChoiceChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">selections</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelected</span>(selections[<span class=\"hljs-number\">0</span>]),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormLayout</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ChoiceList</span>\n        <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Gift card auto-expiration&quot;</span>\n        <span class=\"hljs-attr\">choices</span>=<span class=\"hljs-string\">{[</span>\n          {<span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Gift</span> <span class=\"hljs-attr\">cards</span> <span class=\"hljs-attr\">never</span> <span class=\"hljs-attr\">expire</span>&#x27;, <span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">no</span>&#x27;},\n          {<span class=\"hljs-attr\">label:</span> &#x27;<span class=\"hljs-attr\">Gift</span> <span class=\"hljs-attr\">cards</span> <span class=\"hljs-attr\">expire</span>&#x27;, <span class=\"hljs-attr\">value:</span> &#x27;<span class=\"hljs-attr\">yes</span>&#x27;},\n        ]}\n        <span class=\"hljs-attr\">selected</span>=<span class=\"hljs-string\">{[selected]}</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChoiceChange}</span>\n      /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n        <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Gift cards expire after&quot;</span>\n        <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;number&quot;</span>\n        <span class=\"hljs-attr\">labelHidden</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value}</span>\n        <span class=\"hljs-attr\">disabled</span>=<span class=\"hljs-string\">{selected</span> === <span class=\"hljs-string\">&#x27;no&#x27;</span>}\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleTextChange}</span>\n        <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n        <span class=\"hljs-attr\">connectedRight</span>=<span class=\"hljs-string\">{</span>\n          &lt;<span class=\"hljs-attr\">Select</span>\n            <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Unit of time&quot;</span>\n            <span class=\"hljs-attr\">labelHidden</span>\n            <span class=\"hljs-attr\">options</span>=<span class=\"hljs-string\">{[</span>&#x27;<span class=\"hljs-attr\">months</span> <span class=\"hljs-attr\">after</span> <span class=\"hljs-attr\">purchase</span>&#x27;]}\n          /&gt;</span>\n        }\n      /&gt;\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormLayout</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"text-field-with-label-action\">Text field with label action</h3>\n<!-- example-for: web -->\n\n<p>Use when an optional, secondary action is closely associated with a text field. For example, on a field for entering a customs tariff code, a label action might be to look up the appropriate code from a table.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">LabelActionExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [textFieldValue, setTextFieldValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;6201.11.0000&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTextFieldChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setTextFieldValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Tariff code&quot;</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{textFieldValue}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleTextFieldChange}</span>\n      <span class=\"hljs-attr\">labelAction</span>=<span class=\"hljs-string\">{{content:</span> &#x27;<span class=\"hljs-attr\">Look</span> <span class=\"hljs-attr\">up</span> <span class=\"hljs-attr\">codes</span>&#x27;}}\n      <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"textfield-with-right-aligned-text\">TextField with right aligned text</h3>\n<!-- example-for: web -->\n\n<p>Use when input text should be aligned right.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RightAlignExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [textFieldValue, setTextFieldValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTextFieldChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setTextFieldValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack.Item</span> <span class=\"hljs-attr\">fill</span>&gt;</span>Price<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack.Item</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n        <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Price&quot;</span>\n        <span class=\"hljs-attr\">labelHidden</span>\n        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{textFieldValue}</span>\n        <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleTextFieldChange}</span>\n        <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n        <span class=\"hljs-attr\">align</span>=<span class=\"hljs-string\">&quot;right&quot;</span>\n      /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"text-field-with-placeholder-text\">Text field with placeholder text</h3>\n<p>Use to provide a short, non-essential hint about the expected input. Placeholder text is low-contrast, so don’t rely on it for important information.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">PlaceholderExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [textFieldValue, setTextFieldValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTextFieldChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setTextFieldValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Shipping zone name&quot;</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{textFieldValue}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleTextFieldChange}</span>\n      <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Example: North America, Europe&quot;</span>\n      <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextField/android/placeholder-text@2x.png\" alt=\"Default text field with placeholder text hint\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextField/ios/placeholder-text@2x.png\" alt=\"Default text field with placeholder text hint\"></p>\n<!-- /content-for -->\n\n<h3 id=\"text-field-with-help-text\">Text field with help text</h3>\n<p>Use to show short instructional content below the text field. Help text works to help merchants understand how to fix errors that result from incorrect formatting (such as dates or passwords with specific character requirements). If more explanation is needed, link to the Shopify Help Center.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">HelpTextExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [textFieldValue, setTextFieldValue] = <span class=\"hljs-title function_\">useState</span>(\n    <span class=\"hljs-string\">&#x27;<a href=\"mailto:&#x62;&#x65;&#x72;&#x6e;&#97;&#x64;&#101;&#x74;&#116;&#x65;&#46;&#108;&#97;&#x70;&#x72;&#101;&#x73;&#115;&#x65;&#64;&#x6a;&#97;&#x64;&#x65;&#100;&#x70;&#105;&#x78;&#101;&#108;&#46;&#x63;&#x6f;&#x6d;\">&#x62;&#x65;&#x72;&#x6e;&#97;&#x64;&#101;&#x74;&#116;&#x65;&#46;&#108;&#97;&#x70;&#x72;&#101;&#x73;&#115;&#x65;&#64;&#x6a;&#97;&#x64;&#x65;&#100;&#x70;&#105;&#x78;&#101;&#108;&#46;&#x63;&#x6f;&#x6d;</a>&#x27;</span>,\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTextFieldChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setTextFieldValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Account email&quot;</span>\n      <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{textFieldValue}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleTextFieldChange}</span>\n      <span class=\"hljs-attr\">helpText</span>=<span class=\"hljs-string\">&quot;We’ll use this address if we need to contact you about your account.&quot;</span>\n      <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;email&quot;</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextField/android/help-text@2x.png\" alt=\"Default text field with help text\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextField/ios/help-text@2x.png\" alt=\"Default text field with help text\"></p>\n<!-- /content-for -->\n\n<h3 id=\"text-field-with-prefix-or-suffix\">Text field with prefix or suffix</h3>\n<p>Use as a special form of help text that works best inline.</p>\n<ul>\n<li>Use a prefix for things like currency symbols (“$”, “¥”, “£”).</li>\n<li>Use suffix for things like units of measure (“in”, “cm”).</li>\n</ul>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">PrefixExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [textFieldValue, setTextFieldValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;2.00&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTextFieldChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setTextFieldValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Price&quot;</span>\n      <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;number&quot;</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{textFieldValue}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleTextFieldChange}</span>\n      <span class=\"hljs-attr\">prefix</span>=<span class=\"hljs-string\">&quot;$&quot;</span>\n      <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextField/android/prefix-suffix@2x.png\" alt=\"Default text field with prefix and suffix\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextField/ios/prefix-suffix@2x.png\" alt=\"Default text field with prefix and suffix\"></p>\n<!-- /content-for -->\n\n<h3 id=\"text-field-with-connected-fields\">Text field with connected fields</h3>\n<p>Use when a text field and several related fields make up a logical unit.</p>\n<!-- content-for: web -->\n\n<p>If inputting weight as a number and a separate unit of measurement, use a text field with a <a href=\"https://polaris.shopify.com/components/forms/select\">select dropdown menu</a> (for example “kg”, “lb”) as a connected field.</p>\n<!-- /content-for -->\n\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ConnectedFieldsExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [textFieldValue, setTextFieldValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;10.6&#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> [selectValue, setSelectValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;kg&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTextFieldChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setTextFieldValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleSelectChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelectValue</span>(value), []);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Weight&quot;</span>\n      <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;number&quot;</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{textFieldValue}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleTextFieldChange}</span>\n      <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n      <span class=\"hljs-attr\">connectedLeft</span>=<span class=\"hljs-string\">{</span>\n        &lt;<span class=\"hljs-attr\">Select</span>\n          <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{selectValue}</span>\n          <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Weight unit&quot;</span>\n          <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleSelectChange}</span>\n          <span class=\"hljs-attr\">labelHidden</span>\n          <span class=\"hljs-attr\">options</span>=<span class=\"hljs-string\">{[</span>&#x27;<span class=\"hljs-attr\">kg</span>&#x27;, &#x27;<span class=\"hljs-attr\">lb</span>&#x27;]}\n        /&gt;</span>\n      }\n      connectedRight={<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>&gt;</span>Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>}\n    /&gt;</span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p>If inputting weight as a number and a separate unit of measurement, use a text field with a selector (like “kg” or “lb”) as a connected field.</p>\n<p><img src=\"/images-from-old-styleguide/components/TextField/android/connected-fields@2x.png\" alt=\"Text field with connected selector\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>If inputting weight as a number and a separate unit of measurement, use a text field with a selector (like “kg” or “lb”) as a connected field.</p>\n<p><img src=\"/images-from-old-styleguide/components/TextField/ios/connected-fields@2x.png\" alt=\"Text field with connected selector\"></p>\n<!-- /content-for -->\n\n<h3 id=\"text-field-with-icon-action\">Text field with icon action</h3>\n<!-- example-for: android, ios -->\n\n<p>Use to let merchants take an action within the text field.</p>\n<p>For example, tap on a barcode icon to launch the camera and scan barcode for the barcode field. This helps merchants simplify their input.</p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextField/android/accessory@2x.png\" alt=\"Text field with icon action inside the text field\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextField/ios/accessory@2x.png\" alt=\"Text field with icon action inside the text field\"></p>\n<!-- /content-for -->\n\n<h3 id=\"text-field-with-validation-error\">Text field with validation error</h3>\n<p>Use to let merchants know if their input is valid or if there’s an error. Whenever possible, validate input as soon as merchants have finished interacting with a field (but not before). If a field already has an error, validate and remove errors as merchants type so they can immediately see when an error has been fixed.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ValidationErrorExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [textFieldValue, setTextFieldValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTextFieldChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setTextFieldValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Store name&quot;</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{textFieldValue}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleTextFieldChange}</span>\n      <span class=\"hljs-attr\">error</span>=<span class=\"hljs-string\">&quot;Store name is required&quot;</span>\n      <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextField/android/error@2x.png\" alt=\"Text field with error\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextField/ios/error@2x.png\" alt=\"Text field with error\"></p>\n<!-- /content-for -->\n\n<h3 id=\"text-field-with-separate-validation-error\">Text field with separate validation error</h3>\n<!-- example-for: web -->\n\n<p>Use to let merchants know when their text field input is invalid in the context of a group of form inputs that the text field depends on.</p>\n<p>When the <code>error</code> prop has a boolean value of <code>true</code>, the text field component indicates to merchants that their input is invalid without rendering an error message directly below it. It anticipates that an inline error component exists separately within the form.</p>\n<p>To render an invalid text field and its validation error separately:</p>\n<ul>\n<li>Set a unique identifier on the text field component <code>id</code> prop</li>\n<li>Set a boolean on the text field component <code>error</code> prop</li>\n<li>Use an <a href=\"https://polaris.shopify.com/components/forms/inline-error\">inline error component</a> to describe the invalid text field input, and set its <code>fieldID</code> prop to be the same unique indentifier as the text field component’s <code>id</code></li>\n</ul>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SeparateValidationErrorExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [textFieldValue, setTextFieldValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> [selectTypeValue, setSelectTypeValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;Product type&#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> [selectConditionValue, setSelectConditionValue] =\n    <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;is equal to&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTextFieldValueChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setTextFieldValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleSelectTypeChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelectTypeValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleSelectConditionChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setSelectConditionValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> textFieldID = <span class=\"hljs-string\">&#x27;ruleContent&#x27;</span>;\n  <span class=\"hljs-keyword\">const</span> isInvalid = <span class=\"hljs-title function_\">isValueInvalid</span>(textFieldValue);\n  <span class=\"hljs-keyword\">const</span> errorMessage = isInvalid\n    ? <span class=\"hljs-string\">&#x27;Enter 3 or more characters for product type is equal to&#x27;</span>\n    : <span class=\"hljs-string\">&#x27;&#x27;</span>;</p>\n<p>  <span class=\"hljs-keyword\">const</span> formGroupMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack</span> <span class=\"hljs-attr\">wrap</span>=<span class=\"hljs-string\">{false}</span> <span class=\"hljs-attr\">alignment</span>=<span class=\"hljs-string\">&quot;leading&quot;</span> <span class=\"hljs-attr\">spacing</span>=<span class=\"hljs-string\">&quot;loose&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Stack.Item</span> <span class=\"hljs-attr\">fill</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormLayout</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormLayout.Group</span> <span class=\"hljs-attr\">condensed</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Select</span>\n              <span class=\"hljs-attr\">labelHidden</span>\n              <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Collection rule type&quot;</span>\n              <span class=\"hljs-attr\">options</span>=<span class=\"hljs-string\">{[</span>&#x27;<span class=\"hljs-attr\">Product</span> <span class=\"hljs-attr\">type</span>&#x27;]}\n              <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{selectTypeValue}</span>\n              <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleSelectTypeChange}</span>\n            /&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Select</span>\n              <span class=\"hljs-attr\">labelHidden</span>\n              <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Collection rule condition&quot;</span>\n              <span class=\"hljs-attr\">options</span>=<span class=\"hljs-string\">{[</span>&#x27;<span class=\"hljs-attr\">is</span> <span class=\"hljs-attr\">equal</span> <span class=\"hljs-attr\">to</span>&#x27;]}\n              <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{selectConditionValue}</span>\n              <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleSelectConditionChange}</span>\n            /&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n              <span class=\"hljs-attr\">labelHidden</span>\n              <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Collection rule content&quot;</span>\n              <span class=\"hljs-attr\">error</span>=<span class=\"hljs-string\">{isInvalid}</span>\n              <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">{textFieldID}</span>\n              <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{textFieldValue}</span>\n              <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleTextFieldValueChange}</span>\n              <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n            /&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormLayout.Group</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormLayout</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{marginTop:</span> &#x27;<span class=\"hljs-attr\">4px</span>&#x27;}}&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">InlineError</span> <span class=\"hljs-attr\">message</span>=<span class=\"hljs-string\">{errorMessage}</span> <span class=\"hljs-attr\">fieldID</span>=<span class=\"hljs-string\">{textFieldID}</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack.Item</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">icon</span>=<span class=\"hljs-string\">{DeleteMinor}</span> <span class=\"hljs-attr\">accessibilityLabel</span>=<span class=\"hljs-string\">&quot;Remove item&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Stack</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Card</span> <span class=\"hljs-attr\">sectioned</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormLayout</span>&gt;</span>{formGroupMarkup}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormLayout</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Card</span>&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isValueInvalid</span>(<span class=\"hljs-params\">content</span>) {\n    <span class=\"hljs-keyword\">if</span> (!content) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }</p>\n<pre><code>&lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; content.&lt;span class=&quot;hljs-property&quot;&gt;length&lt;/span&gt; &amp;lt; &lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;;\n</code></pre>\n<p>  }\n}\n</pre></code></p>\n<h3 id=\"disabled-text-field\">Disabled text field</h3>\n<!-- example-for: web -->\n\n<p>Use to show that a textfield is not available for interaction. Most often used in forms when information is required only in a particular state. For example, the text field next to Other in a choice list when Other is not selected.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">TextField</span> label=<span class=\"hljs-string\">&quot;Store name&quot;</span> disabled autoComplete=<span class=\"hljs-string\">&quot;off&quot;</span> /&gt;\n</pre></code></p>\n<h3 id=\"text-field-with-character-count\">Text field with character count</h3>\n<!-- example-for: web -->\n\n<p>Use to display the current number of characters in a text field. Use in conjunction with max length to display the current remaining number of characters in the text field.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TextFieldWithCharacterCountExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [textFieldValue, setTextFieldValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;Jaded Pixel&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTextFieldChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setTextFieldValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Store name&quot;</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{textFieldValue}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleTextFieldChange}</span>\n      <span class=\"hljs-attr\">maxLength</span>=<span class=\"hljs-string\">{20}</span>\n      <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n      <span class=\"hljs-attr\">showCharacterCount</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"text-field-with-clear-button\">Text field with clear button</h3>\n<!-- example-for: web -->\n\n<p>Use to allow merchants to clear the content from a text field.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TextFieldWithClearButtonExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [textFieldValue, setTextFieldValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;Jaded Pixel&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTextFieldChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setTextFieldValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleClearButtonClick = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setTextFieldValue</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>), []);</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Store name&quot;</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{textFieldValue}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleTextFieldChange}</span>\n      <span class=\"hljs-attr\">clearButton</span>\n      <span class=\"hljs-attr\">onClearButtonClick</span>=<span class=\"hljs-string\">{handleClearButtonClick}</span>\n      <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"text-field-with-monospaced-font\">Text field with monospaced font</h3>\n<!-- example-for: web -->\n\n<p>Use to apply a monospaced font to the TextField</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TextFieldWithMonospacedFontExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [textFieldValue, setTextFieldValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;Jaded Pixel&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTextFieldChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setTextFieldValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Store name&quot;</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{textFieldValue}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleTextFieldChange}</span>\n      <span class=\"hljs-attr\">monospaced</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"text-field-with-the-ability-to-select-all-text-on-focus\">Text field with the ability to select all text on focus</h3>\n<!-- example-for: web -->\n\n<p>Use to select all text inside TextField on focus.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TextFieldWithSelectTextOnFocusExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [textFieldValue, setTextFieldValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;Jaded Pixel&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleTextFieldChange = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-title function_\">setTextFieldValue</span>(value),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Store name&quot;</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{textFieldValue}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleTextFieldChange}</span>\n      <span class=\"hljs-attr\">selectTextOnFocus</span>\n    /&gt;</span></span>\n  );\n}\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To lay out the elements in a responsive form, <a href=\"https://polaris.shopify.com/components/forms/form-layout\">use the form layout component</a></li>\n<li>To describe an invalid form input with a separate validation error, <a href=\"https://polaris.shopify.com/components/forms/inline-error\">use the inline error component</a></li>\n<li>It’s common to <a href=\"https://polaris.shopify.com/components/forms/select\">use a select component</a> connected to the left or right of a text field.</li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<h3 id=\"structure\">Structure</h3>\n<p>Screen readers convey information about text fields automatically through native HTML.</p>\n<ul>\n<li>Use the <code>disabled</code> prop to add the HTML <code>disabled</code> attribute to the text field.</li>\n<li>Use the <code>readOnly</code> prop to add the HTML <code>readonly</code> attribute to the text field.</li>\n<li>If you use the <code>type</code> prop, then some assistive technologies adapt the software keyboard to the current task. This helps merchants with mobility, vision, and cognitive issues to enter information more easily.</li>\n</ul>\n<p>Use the <code>id</code> prop to provide a unique <code>id</code> attribute value for the text field. If you don&#39;t provide an <code>id</code>, then the component generates one automatically. All text fields need to have unique <code>id</code> values.</p>\n<h3 id=\"labeling\">Labeling</h3>\n<p>The <code>label</code> prop is required to convey the purpose of the checkbox to all merchants.</p>\n<p>If there are separate visual cues that convey the purpose of the text field to sighted merchants, then the label can be visually hidden with the <code>labelHidden</code> prop.</p>\n<p>When you provide help text via the <code>helpText</code> prop or an inline error message via the <code>error</code> prop, the help or error content is conveyed to screen reader users with the <code>aria-describedby</code> attribute. This attribute causes the content to be read along with the label, either immediately or after a short delay.</p>\n<p>Use the <code>placeholder</code> prop to provide additional instructions. However, don’t rely on placeholders alone since the content isn’t always conveyed to all merchants.</p>\n<!-- usageblock -->\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Use the label to provide instructions critical to using the text field</li>\n<li>Use help text and placeholder text to provide additional, non-critical instructions</li>\n</ul>\n<h4 id=\"dont\">Don’t</h4>\n<p>Use the placeholder to provide information that’s required to use the text field.</p>\n<!-- end -->\n\n<h3 id=\"keyboard-support\">Keyboard support</h3>\n<p>Text fields have standard keyboard support.</p>\n<ul>\n<li>Merchants who rely on the keyboard expect to move focus to each text field using the <kbd>tab</kbd> key (or <kbd>shift</kbd> + <kbd>tab</kbd> when tabbing backwards)</li>\n<li>If the <code>type</code> is set to <code>number</code>, then merchants can use the up and down arrow keys to adjust the value typed into the field</li>\n<li>Using the <code>disabled</code> prop will prevent the text field from receive keyboard focus or inputs</li>\n<li>The <code>readOnly</code> prop allows focus on the text field but prevents input or editing</li>\n<li>The <code>inputMode</code> prop can be used to bring up a relevant keyboard for merchants on mobile; it’s passed down to the input as an <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode\"><code>inputmode</code> attribute</a></li>\n</ul>\n<h4 id=\"automatically-focusing\">Automatically focusing</h4>\n<p>Although you can use the <code>autoFocus</code> prop to automatically move focus to the text field, it’s generally best to avoid focusing on fields automatically. The <code>autoFocus</code> prop is set to <code>false</code> by default and should only be used in cases where it won’t force focus to skip other controls or content of equal or greater importance.</p>\n<!-- /content-for -->\n"
  },
  "TextStyle": {
    "name": "Text style",
    "category": "Titles and text",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "TextStyle",
      "typographic",
      "subdued",
      "strong",
      "negative",
      "warning",
      "positive",
      "cues",
      "enhancements",
      "type",
      "bold",
      "dollar",
      "increase",
      "decrease",
      "input",
      "fields",
      "android",
      "ios"
    ],
    "readme": "<h1 id=\"text-style\">Text style</h1>\n<p>Text style enhances text with additional visual meaning. For example, using subdued text to de-emphasize it from its surrounding text.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Text style should be:</p>\n<ul>\n<li>Used when enhancing the text to help merchants understand its meaning</li>\n<li>Subdued if the text is less important than its surrounding text</li>\n<li>Warning if the text denotes something that needs attention, or that merchants need to take action on.</li>\n<li>Strong for input fields, or for a row total in a price table</li>\n<li>Paired with symbols, like an arrow or dollar sign, when using positive or negative styles</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"subdued-text-style\">Subdued text style</h3>\n<p>Use to de-emphasize a piece of text that is less important to merchants than other nearby text. May also be used to indicate when normal content is absent, for example, “No supplier listed”. Don’t use only for aesthetic effect.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">TextStyle</span> variation=<span class=\"hljs-string\">&quot;subdued&quot;</span>&gt;<span class=\"hljs-title class_\">No</span> supplier listed&lt;/<span class=\"hljs-title class_\">TextStyle</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextStyle/android/subdued@2x.png\" alt=\"Subdued textstyle\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextStyle/ios/subdued@2x.png\" alt=\"Subdued text style\"></p>\n<!-- /content-for -->\n\n<h3 id=\"strong-text-style\">Strong text style</h3>\n<p>Use to mark text representing user input, or to emphasize the totals row in a price table.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">TextStyle</span> variation=<span class=\"hljs-string\">&quot;strong&quot;</span>&gt;<span class=\"hljs-title class_\">Total</span>&lt;/<span class=\"hljs-title class_\">TextStyle</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextStyle/android/strong@2x.png\" alt=\"Strong text style\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextStyle/ios/strong@2x.png\" alt=\"Strong text style\"></p>\n<!-- /content-for -->\n\n<h3 id=\"positive-text-style\">Positive text style</h3>\n<p>Use in combination with a symbol showing an increasing value to indicate an upward trend.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">TextStyle</span> variation=<span class=\"hljs-string\">&quot;positive&quot;</span>&gt;<span class=\"hljs-title class_\">Orders</span> increased&lt;/<span class=\"hljs-title class_\">TextStyle</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextStyle/android/positive@2x.png\" alt=\"Positive text style\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextStyle/ios/positive@2x.png\" alt=\"Positive text style\"></p>\n<!-- /content-for -->\n\n<h3 id=\"negative-text-style\">Negative text style</h3>\n<p>Use in combination with a symbol showing a decreasing value to indicate a downward trend.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">TextStyle</span> variation=<span class=\"hljs-string\">&quot;negative&quot;</span>&gt;<span class=\"hljs-title class_\">Orders</span> decreased&lt;/<span class=\"hljs-title class_\">TextStyle</span>&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextStyle/android/negative@2x.png\" alt=\"Negative text style\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextStyle/ios/negative@2x.png\" alt=\"Negative text style\"></p>\n<!-- /content-for -->\n\n<h3 id=\"warning-text-style\">Warning text style</h3>\n<p>Use to denote something that needs attention, or that merchants need to take action on.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">TextStyle</span> variation=<span class=\"hljs-string\">&quot;warning&quot;</span>&gt;<span class=\"hljs-title class_\">Scheduled</span> maintenance&lt;/<span class=\"hljs-title class_\">TextStyle</span>&gt;\n</pre></code></p>\n<h3 id=\"code-text-style\">Code text style</h3>\n<p>Use to display inline snippets of code or code-like text.</p>\n<p><code><pre>\n&lt;p&gt;\n  <span class=\"hljs-title class_\">New</span> <span class=\"hljs-variable constant_\">URL</span> that visitors should be forwarded to. <span class=\"hljs-title class_\">If</span> you want your store’s\n  homepage, enter &lt;<span class=\"hljs-title class_\">TextStyle</span> variation=<span class=\"hljs-string\">&quot;code&quot;</span>&gt; <span class=\"hljs-regexp\">/ &lt;/</span><span class=\"hljs-title class_\">TextStyle</span>&gt; (a forward slash).\n&lt;/p&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextStyle/android/code@2x.png\" alt=\"Code text style\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/TextStyle/ios/code@2x.png\" alt=\"Code text style\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>Don’t rely on text style alone to convey information to merchants. Ensure that text styles are used to enhance the information provided in text.</p>\n<!-- usageblock -->\n\n<h4 id=\"do\">Do</h4>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">TextStyle</span> variation=<span class=\"hljs-string\">&quot;positive&quot;</span>&gt;<span class=\"hljs-title class_\">Orders</span> increased&lt;/<span class=\"hljs-title class_\">TextStyle</span>&gt;\n</pre></code></p>\n<h4 id=\"dont\">Don’t</h4>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">TextStyle</span> variation=<span class=\"hljs-string\">&quot;positive&quot;</span>&gt;<span class=\"hljs-title class_\">Orders</span>&lt;/<span class=\"hljs-title class_\">TextStyle</span>&gt;\n</pre></code></p>\n<!-- end -->\n\n<!-- /content-for -->\n"
  },
  "Thumbnail": {
    "name": "Thumbnail",
    "category": "Images and icons",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "photo",
      "picture",
      "image",
      "small thumbnail",
      "medium thumbnail",
      "large thumbnail",
      "image preview",
      "android",
      "ios"
    ],
    "readme": "<h1 id=\"thumbnail\">Thumbnail</h1>\n<p>Use thumbnails as a visual anchor and identifier for an object. They should be used along with text to provide context.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>On web, thumbnails should:</p>\n<ul>\n<li>Be one of 3 sizes:<ul>\n<li>Small (40 × 40 px): use when the medium size is too large for the layout, or when the thumbnail has less importance.</li>\n<li>Medium (60 × 60 px): use as the default size.</li>\n<li>Large (80 × 80 px): use when an thumbnail is a major focal point. Avoid this size in lists of like items.</li>\n</ul>\n</li>\n</ul>\n<p>On Android and iOS, thumbnails should:</p>\n<ul>\n<li>Be one of 2 sizes:<ul>\n<li>Default (40 × 40): use as the default size.</li>\n<li>Large (72 × 72): use when an thumbnail is a major focal point. Avoid this size in lists of like items.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<p>Any time you use an image to communicate a concept on Shopify, it’s important to use descriptive <a href=\"https://polaris.shopify.com/content/alternative-text\">alt text</a>. Doing this is important for <a href=\"https://polaris.shopify.com/foundations/internationalization\">accessibility</a> because it allows screen readers to describe what’s in the image to people who may not be able to see it.</p>\n<p>For thumbnails, we recommend using a format that describes what will show in the image:</p>\n<ul>\n<li>On web, <code>alt=&quot;Photo of {product}&quot;</code>. For example, “Photo of black t-shirt with cartoon tiger”.</li>\n<li>On web, an empty <code>alt=&quot;&quot;</code> attribute ignores the image in assistive technologies such as screen readers, and may be used on decorative thumbnails.</li>\n<li>On iOS, <code>imageView.accessibilityLabel = &quot;Photo of {product}&quot;</code>. For example, “Photo of black t-shirt with cartoon tiger”.</li>\n<li>On Android, <code>android:contentDescription=&quot;Photo of {product}&quot;</code>. For example, “Photo of black t-shirt with cartoon tiger”.</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-thumbnail\">Default thumbnail</h3>\n<p>Use as the default size.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Thumbnail</span>\n  source=<span class=\"hljs-string\">&quot;<a href=\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\">https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg</a>&quot;</span>\n  alt=<span class=\"hljs-string\">&quot;Black choker necklace&quot;</span>\n/&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Thumbnail/android/default@2x.png\" alt=\"Default thumbnail\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Thumbnail/ios/default@2x.png\" alt=\"Default thumbnail\"></p>\n<!-- /content-for -->\n\n<h3 id=\"small-thumbnail\">Small thumbnail</h3>\n<!-- example-for: web -->\n\n<p>Use when the default size is too large for the layout, or when the thumbnail has less importance.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Thumbnail</span>\n  source=<span class=\"hljs-string\">&quot;<a href=\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\">https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg</a>&quot;</span>\n  size=<span class=\"hljs-string\">&quot;small&quot;</span>\n  alt=<span class=\"hljs-string\">&quot;Black choker necklace&quot;</span>\n/&gt;\n</pre></code></p>\n<h3 id=\"large-thumbnail\">Large thumbnail</h3>\n<p>Use when a thumbnail is a major focal point. Avoid this size in lists of like items.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Thumbnail</span>\n  source=<span class=\"hljs-string\">&quot;<a href=\"https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg\">https://burst.shopifycdn.com/photos/black-leather-choker-necklace_373x@2x.jpg</a>&quot;</span>\n  size=<span class=\"hljs-string\">&quot;large&quot;</span>\n  alt=<span class=\"hljs-string\">&quot;Black choker necklace&quot;</span>\n/&gt;\n</pre></code></p>\n<h3 id=\"thumbnail-with-component-source\">Thumbnail with component source</h3>\n<p>Use to render an icon inside of thumbnail.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Thumbnail</span> source={<span class=\"hljs-title class_\">NoteMinor</span>} size=<span class=\"hljs-string\">&quot;large&quot;</span> alt=<span class=\"hljs-string\">&quot;Small document&quot;</span> /&gt;\n</pre></code></p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Thumbnail/android/large@2x.png\" alt=\"Large thumbnail\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Thumbnail/ios/large@2x.png\" alt=\"Large thumbnail\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To present a thumbnail representation of an individual or business in the interface, <a href=\"https://polaris.shopify.com/components/images-and-icons/avatar\">use the avatar component</a></li>\n</ul>\n"
  },
  "Toast": {
    "name": "Toast",
    "category": "Feedback indicators",
    "platforms": [
      "android",
      "ios",
      "web"
    ],
    "keywords": [
      "toast",
      "flash message",
      "snackbar",
      "notification bar",
      "temporary feedback",
      "timed feedback",
      "message",
      "overlay",
      "popup",
      "iframe",
      "duration",
      "ios",
      "android",
      "web"
    ],
    "readme": "<h1 id=\"toast\">Toast</h1>\n<p>The toast component is a non-disruptive message that appears at the bottom of the interface to provide quick, at-a-glance feedback on the outcome of an action.</p>\n<hr>\n<h2 id=\"required-components\">Required components</h2>\n<p>The toast component must be wrapped in the <a href=\"https://polaris.shopify.com/components/structure/frame\">frame</a> component.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Toast should:</p>\n<ul>\n<li>Be used for short messages to confirm an action</li>\n<li>Not go over 3 words</li>\n<li>Rarely be used for error messages</li>\n</ul>\n<p>When to use:</p>\n<ul>\n<li>For success messages</li>\n<li>Only for non-critical errors that are relevant in the moment and can be explained in 3 words. For example, if there’s an internet connection issue, the toast would say, Internet disconnected.</li>\n</ul>\n<p>When not to use:</p>\n<ul>\n<li>Avoid using toast for error messages. Always try to use a banner to prominently inform merchants about persistent errors.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"message\">Message</h3>\n<p>Toast messages should be:</p>\n<ul>\n<li>Short and affirmative</li>\n<li>Written in the pattern of: noun + verb</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Product updated</li>\n<li>Collection added</li>\n<li>Customer updated</li>\n<li>Internet disconnected</li>\n<li>Connection timed out</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>No internet connection</li>\n<li>Can’t charge negative tax rates</li>\n<li>Your online store has a maximum of 20 themes. Delete unused themes to add more.</li>\n<li>Your product has been successfully updated</li>\n<li>We were unable to save the customer</li>\n<li>Your Order was Archived Today</li>\n<li>Discount: Saved successfully</li>\n</ul>\n</div></div>\n\n<h3 id=\"toast-with-action\">Toast with action</h3>\n<p>Only include an action in toast if the same action is available elsewhere on the page. For example:</p>\n<ul>\n<li>If merchants need to reload a section, offer the call to action [Reload] in the toast. If they miss the toast message, they can also refresh the entire page.</li>\n<li>If merchants delete an image, offer the option to [Undo] the deletion. If they miss it in the toast message, they can still retrieve it from somewhere else.</li>\n</ul>\n<p>Action should:</p>\n<ul>\n<li>Keep the action label short, preferably 1 verb.</li>\n<li>Not have actions, like [Cancel], for dismissing toast. The [X] to dismiss is already included in the component.</li>\n<li>Be used with a duration of at least 10,000 milliseconds for accessibility.</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do-1\">Do</h4>\n<ul>\n<li>Undo</li>\n<li>Change</li>\n<li>Edit</li>\n<li>View</li>\n<li>Retry</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont-1\">Don’t</h4>\n<ul>\n<li>OK</li>\n<li>Got it</li>\n<li>Cancel product</li>\n<li>Continue to collection</li>\n<li>Dismiss</li>\n</ul>\n</div></div>\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"basic-toast\">Basic toast</h3>\n<!-- example-for: web -->\n\n<p>Use to convey general confirmation or actions that aren’t critical. For example, you might show a toast message to inform the merchant that their recent action was successful.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ToastExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toggleActive = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">active</span>) =&gt;</span> !active), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toastMarkup = active ? (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Toast</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;Message sent&quot;</span> <span class=\"hljs-attr\">onDismiss</span>=<span class=\"hljs-string\">{toggleActive}</span> /&gt;</span></span>\n  ) : <span class=\"hljs-literal\">null</span>;</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">250px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Frame</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Page</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Toast example&quot;</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleActive}</span>&gt;</span>Show Toast<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n          {toastMarkup}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Page</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Frame</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"multiple-toast-messages\">Multiple toast messages</h3>\n<!-- example-for: web -->\n\n<p>Use multiple toast messages to inform the merchant about distinct actions.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MultipleToastExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [activeOne, setActiveOne] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [activeTwo, setActiveTwo] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toggleActiveOne = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActiveOne</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">activeOne</span>) =&gt;</span> !activeOne),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> toggleActiveTwo = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActiveTwo</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">activeTwo</span>) =&gt;</span> !activeTwo),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> toastMarkup1 = activeOne ? (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Toast</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;Message sent&quot;</span> <span class=\"hljs-attr\">onDismiss</span>=<span class=\"hljs-string\">{toggleActiveOne}</span> /&gt;</span></span>\n  ) : <span class=\"hljs-literal\">null</span>;</p>\n<p>  <span class=\"hljs-keyword\">const</span> toastMarkup2 = activeTwo ? (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Toast</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;Image uploaded&quot;</span> <span class=\"hljs-attr\">onDismiss</span>=<span class=\"hljs-string\">{toggleActiveTwo}</span> /&gt;</span></span>\n  ) : <span class=\"hljs-literal\">null</span>;</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">250px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Frame</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Page</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Toast example&quot;</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ButtonGroup</span> <span class=\"hljs-attr\">segmented</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleActiveOne}</span>&gt;</span>Show toast 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleActiveTwo}</span>&gt;</span>Show toast 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ButtonGroup</span>&gt;</span>\n          {toastMarkup1}\n          {toastMarkup2}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Page</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Frame</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"toast-with-custom-duration\">Toast with custom duration</h3>\n<!-- example-for: web -->\n\n<p>Use to shorten or lengthen the default duration of 5000 milliseconds.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ToastWithCustomDurationExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toggleActive = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">active</span>) =&gt;</span> !active), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toastMarkup = active ? (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Toast</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;Message sent&quot;</span> <span class=\"hljs-attr\">onDismiss</span>=<span class=\"hljs-string\">{toggleActive}</span> <span class=\"hljs-attr\">duration</span>=<span class=\"hljs-string\">{4500}</span> /&gt;</span></span>\n  ) : <span class=\"hljs-literal\">null</span>;</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">250px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Frame</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Page</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Toast example&quot;</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleActive}</span>&gt;</span>Show Toast<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n          {toastMarkup}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Page</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Frame</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"toast-with-action-1\">Toast with action</h3>\n<!-- example-for: web -->\n\n<p>Use when a merchant has the ability to act on the message. For example, to undo a change or retry an action.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ToastWithActionExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toggleActive = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">active</span>) =&gt;</span> !active), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toastMarkup = active ? (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Toast</span>\n      <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;Image deleted&quot;</span>\n      <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">{{</span>\n        <span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Undo</span>&#x27;,\n        <span class=\"hljs-attr\">onAction:</span> () =&gt;</span> {},\n      }}\n      duration={10000}\n      onDismiss={toggleActive}\n    /&gt;</span>\n  ) : <span class=\"hljs-literal\">null</span>;</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">250px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Frame</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Page</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Toast example&quot;</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleActive}</span>&gt;</span>Show Toast<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n          {toastMarkup}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Page</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Frame</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"default-toast\">Default toast</h3>\n<!-- example-for: android, ios -->\n\n<p>Use default toast for informative and neutral feedback.</p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Toast/android/default@2x.png\" alt=\"Default toast with neutral color\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>On iOS, icons are available for cases where you want to re-inforce the message.</p>\n<p><img src=\"/images-from-old-styleguide/components/Toast/ios/default@2x.png\" alt=\"Default toast with neutral color\"></p>\n<!-- /content-for -->\n\n<h3 id=\"success-toast\">Success toast</h3>\n<!-- example-for: android, ios -->\n\n<p>Use success toast to indicate that something was successful. For example, a product was successfully updated.</p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Toast/android/success@2x.png\" alt=\"Success toast\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>On iOS, icons are available for cases where you want to re-inforce the message.</p>\n<p><img src=\"/images-from-old-styleguide/components/Toast/ios/success@2x.png\" alt=\"Success toast\"></p>\n<!-- /content-for -->\n\n<h3 id=\"error-toast\">Error toast</h3>\n<!-- example-for: android, ios, web -->\n\n<p>Although error toast is still available and used in the system, we discourage its use. Reserve it for errors not caused by merchants, like a connection issue. Error toast should convey what went wrong in plain language and should not go over 3 words. For all other error message types, follow the <a href=\"https://polaris.shopify.com/experiences/error-messages\">error message guidelines</a>.</p>\n<!-- content-for: web -->\n\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ErrorToastExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [active, setActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toggleActive = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setActive</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">active</span>) =&gt;</span> !active), []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toastMarkup = active ? (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Toast</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;Server error&quot;</span> <span class=\"hljs-attr\">error</span> <span class=\"hljs-attr\">onDismiss</span>=<span class=\"hljs-string\">{toggleActive}</span> /&gt;</span></span>\n  ) : <span class=\"hljs-literal\">null</span>;</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">250px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Frame</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Page</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;Toast example&quot;</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleActive}</span>&gt;</span>Show Toast<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n          {toastMarkup}\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Page</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Frame</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<!-- /content-for -->\n\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Toast/android/error@2x.png\" alt=\"Error toast\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>On iOS, icons are available for cases where you want to re-inforce the message.</p>\n<p><img src=\"/images-from-old-styleguide/components/Toast/ios/error@2x.png\" alt=\"Error toast\"></p>\n<!-- /content-for -->\n\n<h3 id=\"with-action\">With action</h3>\n<!-- example-for: android, ios -->\n\n<p>Use action when merchants have the ability to act on the message. For example, to undo a change or retry an action. Keep the action label short, preferably 1 verb action.</p>\n<!-- content-for: android -->\n\n<p><img src=\"/images-from-old-styleguide/components/Toast/android/default-action@2x.png\" alt=\"Default toast with action to undo\"></p>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p><img src=\"/images-from-old-styleguide/components/Toast/ios/default-action@2x.png\" alt=\"Default toast with action to undo\"></p>\n<!-- /content-for -->\n\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To present a small amount of content or a menu of actions in a non-blocking overlay, <a href=\"https://polaris.shopify.com/components/overlays/popover\">use the popover component</a></li>\n<li>To communicate a change or condition that needs the merchant’s attention within the context of a page, <a href=\"https://polaris.shopify.com/components/feedback-indicators/banner\">use the banner component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n <!-- content-for: web -->\n\n<p>The content of the toast component is implemented as an ARIA live region using <code>aria-live=&quot;polite&quot;</code>. When the toast appears, screen readers should announce the toast text after any other more pressing announcements.</p>\n<p>Avoid using toast for critical information that merchants need to act on immediately. Toast might be difficult for merchants with low vision or low dexterity to access because it:</p>\n<ul>\n<li>Disappears automatically</li>\n<li>Can’t be easily accessed with the keyboard</li>\n<li>Might appear outside the proximity of the merchant’s current focus</li>\n</ul>\n<h3 id=\"toast-with-action-2\">Toast with action</h3>\n<p>Make sure that merchants can also accomplish the action in the toast another way, since the toast action may be difficult to access for some merchants. If the toast action is not available somewhere else on the page, for example a retry action that reloads a section, it should have a fallback action, for example a browser refresh.</p>\n<p>Toast with action should persist for at least 10,000 milliseconds to give the merchant enough time to act on it.</p>\n <!-- /content-for -->\n"
  },
  "Tooltip": {
    "name": "Tooltip",
    "category": "Overlays",
    "keywords": [
      "info",
      "help",
      "popover",
      "infotip",
      "hint",
      "small popover",
      "hover",
      "tap"
    ],
    "readme": "<h1 id=\"tooltip\">Tooltip</h1>\n<p>Tooltips are floating labels that briefly explain the function of a user\ninterface element. They can be triggered when merchants hover, focus, tap, or\nclick.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Tooltips should:</p>\n<ul>\n<li>Provide useful, additional information or clarification.</li>\n<li>Succinctly describe or expand on the element they point to.</li>\n<li>Be provided for icon-only buttons or a button with an associated keyboard\nshortcut.</li>\n<li>Not be used to communicate critical information, including errors in forms or\nother interaction feedback.</li>\n<li>Not contain any links or buttons.</li>\n<li>Be used sparingly. If you’re building something that requires a lot of\ntooltips, work on clarifying the design and the language in the experience.</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"basic-tooltips\">Basic tooltips</h3>\n<p>Tooltips should:</p>\n<ul>\n<li>Be written in sentence case</li>\n<li>Be concise and scannable</li>\n<li>Not be used to communicate error messages or important account information</li>\n</ul>\n<!-- usageblock -->\n\n<h4 id=\"do\">Do</h4>\n<p>Post reach is the number of people who have seen your post in their News Feed.</p>\n<h4 id=\"dont\">Don’t</h4>\n<p>To continue using Shopify, this amount must be paid immediately.</p>\n<!-- end -->\n\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"default-tooltip\">Default tooltip</h3>\n<p>Use only when necessary to provide an explanation for an interface element.</p>\n<p><code><pre>\n&lt;div style={{<span class=\"hljs-attr\">padding</span>: <span class=\"hljs-string\">&#x27;75px 0&#x27;</span>}}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tooltip</span> <span class=\"hljs-attr\">active</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;This order has shipping labels.&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextStyle</span> <span class=\"hljs-attr\">variation</span>=<span class=\"hljs-string\">&quot;strong&quot;</span>&gt;</span>Order #1001<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextStyle</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Tooltip</span>&gt;</span></span>\n&lt;/div&gt;\n</pre></code></p>\n<h3 id=\"tooltip-visible-only-with-child-interaction\">Tooltip visible only with child interaction</h3>\n<p>Use when the tooltip overlays interactive elements when active, for example a form input. The <code>dismissOnMouseOut</code> prop prevents the tooltip from remaining active when mouse hover or focus leaves its <code>children</code> and enters the tooltip&#39;s content.</p>\n<p><code><pre>\n&lt;div style={{<span class=\"hljs-attr\">width</span>: <span class=\"hljs-string\">&#x27;200px&#x27;</span>}}&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ButtonGroup</span> <span class=\"hljs-attr\">segmented</span> <span class=\"hljs-attr\">fullWidth</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tooltip</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;Bold&quot;</span> <span class=\"hljs-attr\">dismissOnMouseOut</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>&gt;</span>B<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Tooltip</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tooltip</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;Italic&quot;</span> <span class=\"hljs-attr\">dismissOnMouseOut</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>&gt;</span>I<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Tooltip</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tooltip</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;Underline&quot;</span> <span class=\"hljs-attr\">dismissOnMouseOut</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>&gt;</span>U<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Tooltip</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Tooltip</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;Strikethrough&quot;</span> <span class=\"hljs-attr\">dismissOnMouseOut</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>&gt;</span>S<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Tooltip</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ButtonGroup</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span> <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Product title&quot;</span> <span class=\"hljs-attr\">autoComplete</span>=<span class=\"hljs-string\">&quot;off&quot;</span> <span class=\"hljs-attr\">labelHidden</span> <span class=\"hljs-attr\">multiline</span> /&gt;</span></span>\n&lt;/div&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To make helpful content more visible to merchants, use the help text portions of form components such as <a href=\"https://polaris.shopify.com/components/forms/text-field\">text fields</a>, <a href=\"https://polaris.shopify.com/components/titles-and-text/footer-help\">footer help</a>, or <a href=\"https://polaris.shopify.com/components/navigation/link\">an inline link to help</a></li>\n</ul>\n"
  },
  "TopBar": {
    "name": "Top bar",
    "category": "Navigation",
    "keywords": [
      "global chrome",
      "global features",
      "topbar",
      "top bar",
      "header",
      "nav bar",
      "bar",
      "navbar",
      "brand",
      "search",
      "user",
      "menu",
      "logo"
    ],
    "readme": "<h1 id=\"top-bar\">Top bar</h1>\n<p>The top bar is a header component that allows merchants to search, access menus, and navigate by clicking on the logo. It’s always visible at the top of interfaces like Shopify or Shopify Plus. Third-party apps that use the top bar can customize the color to match their brand using the <a href=\"https://polaris.shopify.com/components/structure/app-provider\">app provider</a> component and are required to use their own logo.</p>\n<hr>\n<h2 id=\"required-components\">Required components</h2>\n<p>The top bar component must be passed to the <a href=\"https://polaris.shopify.com/components/structure/frame\">frame</a> component.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>The top bar component should:</p>\n<ul>\n<li>Not provide global navigation for an application<ul>\n<li>Use the <a href=\"https://polaris.shopify.com/components/structure/navigation\">navigation component</a> instead</li>\n</ul>\n</li>\n<li>Include search to help merchants find resources and navigate an application</li>\n<li>Include a user menu component to indicate the logged-in merchant and provide them with global actions</li>\n<li>Provide a color through the <a href=\"https://polaris.shopify.com/components/structure/app-provider\">app provider</a> component to style the background</li>\n<li>The global menu text should contrast with the rest of the top bar and pass the minimum contrast ratio of the WCAG 2.0 guidelines</li>\n<li>Use an SVG file for the logo</li>\n<li>Use a logo that passes the minimum contrast ratio of the WCAG 2.0 guidelines when compared to the top bar background color</li>\n<li>Show the navigation toggle so it appears on small screen</li>\n</ul>\n<hr>\n<h2 id=\"content-guidelines\">Content guidelines</h2>\n<h3 id=\"placeholder-content\">Placeholder content</h3>\n<p>The placeholder content for the search field should:</p>\n<ul>\n<li>Always say &quot;Search&quot;</li>\n<li>Never include an ellipsis</li>\n</ul>\n<div class=\"usage-list\"><div class=\"usage-list-part\">\n\n<h4 id=\"do\">Do</h4>\n<ul>\n<li>Search</li>\n</ul>\n</div><div class=\"usage-list-part\"><h4 id=\"dont\">Don’t</h4>\n<ul>\n<li>search...</li>\n</ul>\n</div></div>\n\n<hr>\n<p><a name=\"subcomponent-menu\"></a></p>\n<h2 id=\"top-bar-menu\">Top bar menu</h2>\n<p>A component that composes together an activator and a popover containing an action list to create a dropdown menu.</p>\n<h3 id=\"menu-properties\">Menu properties</h3>\n<table>\n<thead>\n<tr>\n<th>Prop</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>activatorContent</td>\n<td>React.ReactNode</td>\n<td>Accepts an activator component that renders inside of a button that opens the menu</td>\n</tr>\n<tr>\n<td>actions</td>\n<td>ActionListProps[&#39;sections&#39;]</td>\n<td>An array of action objects that are rendered inside of a popover triggered by this menu</td>\n</tr>\n<tr>\n<td>message</td>\n<td><a href=\"#type-message\">MessageProps</a></td>\n<td>Accepts a message that facilitates direct, urgent communication with the merchant through the menu</td>\n</tr>\n<tr>\n<td>open</td>\n<td>boolean</td>\n<td>A boolean property indicating whether the menu is currently open</td>\n</tr>\n<tr>\n<td>onOpen()</td>\n<td>function</td>\n<td>A callback function to handle opening the menu popover</td>\n</tr>\n<tr>\n<td>onClose()</td>\n<td>function</td>\n<td>A callback function to handle closing the menu popover</td>\n</tr>\n</tbody></table>\n<p><a name=\"subcomponent-user-menu\"></a></p>\n<h2 id=\"top-bar-user-menu\">Top bar user menu</h2>\n<p>A specialized menu component that is activated by a user avatar.</p>\n<h3 id=\"menu-properties-1\">Menu properties</h3>\n<table>\n<thead>\n<tr>\n<th>Prop</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>actions</td>\n<td>{items: IconableAction[]}[]</td>\n<td>An array of action objects that are rendered inside of a popover triggered by this menu</td>\n</tr>\n<tr>\n<td>message</td>\n<td><a href=\"#type-message\">MessageProps</a></td>\n<td>Accepts a message that facilitates direct, urgent communication with the merchant through the user menu</td>\n</tr>\n<tr>\n<td>name</td>\n<td>string</td>\n<td>A string detailing the merchant’s full name to be displayed in the user menu</td>\n</tr>\n<tr>\n<td>detail</td>\n<td>string</td>\n<td>A string allowing further details on the merchant’s name displayed in the user menu</td>\n</tr>\n<tr>\n<td>initials</td>\n<td>AvatarProps[&#39;initials&#39;]</td>\n<td>The merchant’s initials, rendered in place of an avatar image when not provided</td>\n</tr>\n<tr>\n<td>avatar</td>\n<td>AvatarProps[&#39;source&#39;]</td>\n<td>An avatar image representing the merchant</td>\n</tr>\n<tr>\n<td>open</td>\n<td>boolean</td>\n<td>A boolean property indicating whether the user menu is currently open</td>\n</tr>\n<tr>\n<td>onToggle()</td>\n<td>function</td>\n<td>A callback function to handle opening and closing the user menu</td>\n</tr>\n</tbody></table>\n<p><a name=\"type-message\"></a></p>\n<h3 id=\"top-bar-menu-message\">Top bar menu message</h3>\n<h4 id=\"message-properties\">Message properties</h4>\n<table>\n<thead>\n<tr>\n<th>Prop</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td>string</td>\n<td>A title for the message</td>\n</tr>\n<tr>\n<td>description</td>\n<td>string</td>\n<td>A description for the message</td>\n</tr>\n<tr>\n<td>action</td>\n<td>{onClick(): void; content: string}</td>\n<td>An action to render near the message</td>\n</tr>\n<tr>\n<td>link</td>\n<td>{to: string; content: string}</td>\n<td>A link to view the content of the message</td>\n</tr>\n<tr>\n<td>badge</td>\n<td>{content: string; status: BadgeProps[&#39;status&#39;]}</td>\n<td>A badge to render near the message</td>\n</tr>\n</tbody></table>\n<hr>\n<p><a name=\"subcomponent-search-field\"></a></p>\n<h2 id=\"top-bar-search-field\">Top bar search field</h2>\n<p>A text field component that is tailor-made for a search use-case.</p>\n<h3 id=\"search-field-properties\">Search field properties</h3>\n<table>\n<thead>\n<tr>\n<th>Prop</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>value</td>\n<td>string</td>\n<td>Initial value for the input</td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>string</td>\n<td>Hint text to display</td>\n</tr>\n<tr>\n<td>focused</td>\n<td>boolean</td>\n<td>Force the focus state on the input</td>\n</tr>\n<tr>\n<td>active</td>\n<td>boolean</td>\n<td>Force a state where search is active but the text field component is not focused</td>\n</tr>\n<tr>\n<td>onChange(value: string)</td>\n<td>function</td>\n<td>Callback when value is changed</td>\n</tr>\n<tr>\n<td>onFocus()</td>\n<td>function</td>\n<td>Callback when input is focused</td>\n</tr>\n<tr>\n<td>onBlur()</td>\n<td>function</td>\n<td>Callback when focus is removed</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"top-bar-with-all-of-its-elements\">Top bar with all of its elements</h3>\n<p>Use to provide structure for the top of an application. Style the top bar component using the app provider component with a theme. Providing just the <code>background</code> key for the top bar component theme will result in intelligent defaults being set for complementary colors with contrasting text.</p>\n<p><code><pre>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TopBarExample</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [isUserMenuOpen, setIsUserMenuOpen] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [isSecondaryMenuOpen, setIsSecondaryMenuOpen] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [isSearchActive, setIsSearchActive] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">const</span> [searchValue, setSearchValue] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);</p>\n<p>  <span class=\"hljs-keyword\">const</span> toggleIsUserMenuOpen = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setIsUserMenuOpen</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">isUserMenuOpen</span>) =&gt;</span> !isUserMenuOpen),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> toggleIsSecondaryMenuOpen = <span class=\"hljs-title function_\">useCallback</span>(\n    <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setIsSecondaryMenuOpen</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">isSecondaryMenuOpen</span>) =&gt;</span> !isSecondaryMenuOpen),\n    [],\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleSearchResultsDismiss = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">setIsSearchActive</span>(<span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-title function_\">setSearchValue</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n  }, []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleSearchChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> {\n    <span class=\"hljs-title function_\">setSearchValue</span>(value);\n    <span class=\"hljs-title function_\">setIsSearchActive</span>(value.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>);\n  }, []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> handleNavigationToggle = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;toggle navigation visibility&#x27;</span>);\n  }, []);</p>\n<p>  <span class=\"hljs-keyword\">const</span> logo = {\n    <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">124</span>,\n    <span class=\"hljs-attr\">topBarSource</span>:\n      <span class=\"hljs-string\">&#x27;<a href=\"https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-color.svg?6215648040070010999&amp;#x27\">https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-color.svg?6215648040070010999&amp;#x27</a>;</span>,\n    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&#x27;<a href=\"http://jadedpixel.com&amp;#x27\">http://jadedpixel.com&amp;#x27</a>;</span>,\n    <span class=\"hljs-attr\">accessibilityLabel</span>: <span class=\"hljs-string\">&#x27;Jaded Pixel&#x27;</span>,\n  };</p>\n<p>  <span class=\"hljs-keyword\">const</span> userMenuMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TopBar.UserMenu</span>\n      <span class=\"hljs-attr\">actions</span>=<span class=\"hljs-string\">{[</span>\n        {\n          <span class=\"hljs-attr\">items:</span> [{<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Back</span> <span class=\"hljs-attr\">to</span> <span class=\"hljs-attr\">Shopify</span>&#x27;, <span class=\"hljs-attr\">icon:</span> <span class=\"hljs-attr\">ArrowLeftMinor</span>}],\n        },\n        {\n          <span class=\"hljs-attr\">items:</span> [{<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Community</span> <span class=\"hljs-attr\">forums</span>&#x27;}],\n        },\n      ]}\n      <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Dharma&quot;</span>\n      <span class=\"hljs-attr\">detail</span>=<span class=\"hljs-string\">&quot;Jaded Pixel&quot;</span>\n      <span class=\"hljs-attr\">initials</span>=<span class=\"hljs-string\">&quot;D&quot;</span>\n      <span class=\"hljs-attr\">open</span>=<span class=\"hljs-string\">{isUserMenuOpen}</span>\n      <span class=\"hljs-attr\">onToggle</span>=<span class=\"hljs-string\">{toggleIsUserMenuOpen}</span>\n    /&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> searchResultsMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ActionList</span>\n      <span class=\"hljs-attr\">items</span>=<span class=\"hljs-string\">{[{content:</span> &#x27;<span class=\"hljs-attr\">Shopify</span> <span class=\"hljs-attr\">help</span> <span class=\"hljs-attr\">center</span>&#x27;}, {<span class=\"hljs-attr\">content:</span> &#x27;<span class=\"hljs-attr\">Community</span> <span class=\"hljs-attr\">forums</span>&#x27;}]}\n    /&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> searchFieldMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TopBar.SearchField</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleSearchChange}</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{searchValue}</span>\n      <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Search&quot;</span>\n      <span class=\"hljs-attr\">showFocusBorder</span>\n    /&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> secondaryMenuMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TopBar.Menu</span>\n      <span class=\"hljs-attr\">activatorContent</span>=<span class=\"hljs-string\">{</span>\n        &lt;<span class=\"hljs-attr\">span</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{QuestionMarkMajor}</span> /&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">VisuallyHidden</span>&gt;</span>Secondary menu<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">VisuallyHidden</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n      }\n      open={isSecondaryMenuOpen}\n      onOpen={toggleIsSecondaryMenuOpen}\n      onClose={toggleIsSecondaryMenuOpen}\n      actions={[\n        {\n          items: [{content: &#x27;Community forums&#x27;}],\n        },\n      ]}\n    /&gt;</span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">const</span> topBarMarkup = (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TopBar</span>\n      <span class=\"hljs-attr\">showNavigationToggle</span>\n      <span class=\"hljs-attr\">userMenu</span>=<span class=\"hljs-string\">{userMenuMarkup}</span>\n      <span class=\"hljs-attr\">secondaryMenu</span>=<span class=\"hljs-string\">{secondaryMenuMarkup}</span>\n      <span class=\"hljs-attr\">searchResultsVisible</span>=<span class=\"hljs-string\">{isSearchActive}</span>\n      <span class=\"hljs-attr\">searchField</span>=<span class=\"hljs-string\">{searchFieldMarkup}</span>\n      <span class=\"hljs-attr\">searchResults</span>=<span class=\"hljs-string\">{searchResultsMarkup}</span>\n      <span class=\"hljs-attr\">onSearchResultsDismiss</span>=<span class=\"hljs-string\">{handleSearchResultsDismiss}</span>\n      <span class=\"hljs-attr\">onNavigationToggle</span>=<span class=\"hljs-string\">{handleNavigationToggle}</span>\n    /&gt;</span></span>\n  );</p>\n<p>  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{height:</span> &#x27;<span class=\"hljs-attr\">250px</span>&#x27;}}&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Frame</span> <span class=\"hljs-attr\">topBar</span>=<span class=\"hljs-string\">{topBarMarkup}</span> <span class=\"hljs-attr\">logo</span>=<span class=\"hljs-string\">{logo}</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n}\n</pre></code></p>\n<h3 id=\"top-bar-themed-with-colorscheme\">Top bar themed with colorScheme</h3>\n<p>Provide specific keys and corresponding colors to the top bar theme for finer control. When giving more than just the <code>background</code>, providing all keys is necessary to prevent falling back to default colors.</p>\n<pre><code class=\"language-jsx\">function TopBarExample() {\n  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);\n  const [isSearchActive, setIsSearchActive] = useState(false);\n  const [searchValue, setSearchValue] = useState(&#39;&#39;);\n  const [isDarkTheme, setIsDarkTheme] = useState(false);\n\n  const toggleIsUserMenuOpen = useCallback(\n    () =&gt; setIsUserMenuOpen((isUserMenuOpen) =&gt; !isUserMenuOpen),\n    [],\n  );\n\n  const handleThemeChange = useCallback(\n    () =&gt; setIsDarkTheme((isDarkTheme) =&gt; !isDarkTheme),\n    [],\n  );\n\n  const handleSearchResultsDismiss = useCallback(() =&gt; {\n    setIsSearchActive(false);\n    setSearchValue(&#39;&#39;);\n  }, []);\n\n  const handleSearchChange = useCallback((value) =&gt; {\n    setSearchValue(value);\n    setIsSearchActive(value.length &gt; 0);\n  }, []);\n\n  const handleNavigationToggle = useCallback(() =&gt; {\n    console.log(&#39;toggle navigation visibility&#39;);\n  }, []);\n\n  const theme = {\n    colors: {\n      surface: &#39;#FFFFFF&#39;,\n      onsurface: &#39;#212B36&#39;,\n    },\n    colorScheme: isDarkTheme ? &#39;dark&#39; : &#39;light&#39;,\n  };\n\n  const logo = {\n    width: 124,\n    topBarSource: `data:image/svg+xml;utf8,%3Csvg xmlns=&#39;http://www.w3.org/2000/svg&#39; viewBox=&#39;0 0 446 92.6&#39; fill=&#39;%23${\n      isDarkTheme ? &#39;fff&#39; : &#39;000&#39;\n    }&#39;%3E%3Cpath d=&#39;M112.2 51.6c-2.8-1.5-4.2-2.8-4.2-4.5 0-2.2 2-3.7 5.1-3.7 3.6 0 6.9 1.5 6.9 1.5l2.5-7.8s-2.3-1.8-9.2-1.8c-9.6 0-16.3 5.5-16.3 13.2 0 4.4 3.1 7.7 7.3 10.1 3.3 1.9 4.5 3.3 4.5 5.3 0 2.1-1.7 3.7-4.8 3.7-4.6 0-9-2.4-9-2.4L92.3 73s4 2.7 10.8 2.7c9.9 0 17-4.9 17-13.6 0-4.7-3.6-8-7.9-10.5zM151.5 35.2c-4.9 0-8.7 2.3-11.6 5.8l-.2-.1 4.2-22.1h-11L122.3 75h11l3.7-19.2c1.4-7.3 5.2-11.7 8.7-11.7 2.5 0 3.4 1.7 3.4 4.1 0 1.5-.2 3.3-.5 4.9l-4.1 22h11l4.3-22.7c.5-2.4.8-5.3.8-7.2-.1-6.3-3.3-10-9.1-10zM185.4 35.2c-13.2 0-22 12-22 25.3 0 8.5 5.3 15.4 15.1 15.4 13 0 21.8-11.6 21.8-25.3 0-7.9-4.6-15.4-14.9-15.4zM180 67.4c-3.7 0-5.3-3.2-5.3-7.2 0-6.3 3.3-16.6 9.2-16.6 3.9 0 5.2 3.3 5.2 6.6 0 6.8-3.3 17.2-9.1 17.2zM228.4 35.2c-7.4 0-11.6 6.5-11.6 6.5h-.2l.6-5.9h-9.7c-.5 4-1.4 10-2.2 14.6l-7.6 40.2h11l3-16.3h.2s2.3 1.4 6.5 1.4c12.9 0 21.4-13.2 21.4-26.6 0-7.3-3.3-13.9-11.4-13.9zm-10.5 32.3c-2.9 0-4.5-1.6-4.5-1.6l1.8-10.3c1.3-6.9 4.9-11.4 8.7-11.4 3.3 0 4.4 3.1 4.4 6.1 0 7.1-4.2 17.2-10.4 17.2zM255.5 19.4c-3.5 0-6.3 2.8-6.3 6.4 0 3.3 2.1 5.5 5.2 5.5h.2c3.4 0 6.4-2.3 6.5-6.4-.2-3.2-2.3-5.5-5.6-5.5zM240.1 75h11l7.5-38.9h-11.1zM286.5 36h-7.6l.4-1.8c.6-3.7 2.9-7.1 6.5-7.1 2 0 3.5.6 3.5.6l2.2-8.6s-1.9-1-6-1c-3.9 0-7.8 1.1-10.8 3.7-3.7 3.2-5.5 7.8-6.4 12.4L268 36h-5.1l-1.6 8.3h5.1L260.6 75h11l5.8-30.8h7.6l1.5-8.2zM313 36.1s-6.9 17.3-10 26.8h-.2c-.2-3-2.7-26.8-2.7-26.8h-11.6l6.6 35.8c.2.8.1 1.3-.2 1.8-1.3 2.5-3.4 4.9-6 6.6-2.1 1.5-4.4 2.5-6.2 3.1l3 9.3c2.2-.5 6.9-2.3 10.8-6 5-4.7 9.6-12 14.4-21.8l13.5-28.8H313zM54.3 10.8s-1 .3-2.7.8c-.3-.9-.7-2-1.3-3.2-1.9-3.6-4.7-5.6-8.1-5.6h-.7c-.1-.1-.2-.2-.3-.4C39.7.8 37.8.1 35.6.1 31.2.2 26.9 3.4 23.4 9c-2.5 3.9-4.4 8.9-4.9 12.7-5 1.6-8.5 2.6-8.6 2.7-2.5.8-2.6.9-2.9 3.3-.3 1.8-6.9 53-6.9 53l55 9.5V10.7c-.4 0-.7.1-.8.1zm-12.7 3.9c-2.9.9-6.1 1.9-9.3 2.9.9-3.4 2.6-6.8 4.7-9.1.8-.8 1.9-1.8 3.1-2.3 1.3 2.5 1.5 6.1 1.5 8.5zM35.7 3.2c1 0 1.9.2 2.6.7-1.2.6-2.3 1.5-3.4 2.6-2.8 3-4.9 7.6-5.7 12.1-2.6.8-5.2 1.6-7.6 2.4C23 13.9 28.9 3.4 35.7 3.2zm-8.5 40c.3 4.7 12.6 5.7 13.3 16.6.5 8.6-4.6 14.5-11.9 15-8.8.6-13.7-4.7-13.7-4.7l1.9-8s4.9 3.7 8.8 3.4c2.6-.2 3.5-2.2 3.4-3.7-.4-6.1-10.4-5.7-11-15.8-.5-8.4 5-17 17.2-17.8 4.7-.3 7.1.9 7.1.9l-2.8 10.5s-3.1-1.4-6.8-1.2c-5.5.5-5.6 3.9-5.5 4.8zm17.3-29.4c0-2.2-.3-5.3-1.3-7.9 3.3.6 4.9 4.4 5.6 6.6-1.3.4-2.7.8-4.3 1.3zm12.3 76.3l22.8-5.7S69.8 18 69.7 17.6c-.1-.5-.5-.7-.8-.7-.3 0-6.7-.1-6.7-.1s-3.9-3.8-5.4-5.2v78.5zM347.7 35.4c-5.7 0-10.3 2-13.6 5.8l.6-3.3c.2-1.1-.5-1.9-1.6-1.9s-2.1.9-2.3 1.9L321 88.7c-.2 1.1.5 1.9 1.6 1.9s2.1-.9 2.3-1.9l3.6-18.9c1.3 2.4 4.4 5.7 11.4 5.7 5.5 0 10-1.7 13.6-5 3.7-3.4 6.2-8.5 7.5-15.1 1.3-6.6.7-11.7-1.7-15.1-2.2-3.2-6.1-4.9-11.6-4.9zm-7 36.6c-8.3 0-11.6-5.7-9.5-16.5 2.1-10.9 7.4-16.5 15.6-16.5 9 0 12.4 5.4 10.2 16.5-2.1 11.2-7.3 16.5-16.3 16.5zm91.6-18.7c-4.9-1.8-9.6-3.5-8.7-8.1.4-2.3 2.3-6.2 9.9-6.2 4.2 0 6.9 1.2 9.2 4 .4.5.9.5 1.1.5 1 0 1.9-.8 2.1-1.8.1-.5 0-.8-.2-1.2-2.4-3.4-6.2-5.1-11.6-5.1-7.7 0-13.3 3.7-14.4 9.7-1.4 7.2 5 9.6 10.6 11.7 4.9 1.8 9.4 3.6 8.6 8-1.2 6.2-7.7 7.1-11.5 7.1-5.2 0-8.4-1.4-10.8-4.7-.3-.4-.7-.5-1.1-.5-.9 0-1.9.7-2.1 1.8-.1.5 0 .8.2 1.2 1.6 2.9 6.2 5.8 13.1 5.8 8.8 0 14.8-4 16.1-10.7 1.4-7.1-4.9-9.5-10.5-11.5zm-11.8-28h-4.1l.8-4.1c.2-1.1-.5-1.9-1.6-1.9s-2.1.9-2.3 1.9l-.8 4.1h-4.1c-1.1 0-2.1.9-2.3 1.9-.2 1.1.5 1.9 1.6 1.9h4.1l-.8 4.1c-.2 1.1.5 1.9 1.6 1.9s2.1-.9 2.3-1.9l.8-4.1h4.1c1.1 0 2.1-.9 2.3-1.9.2-1-.5-1.9-1.6-1.9zm-9 14.3c-1.1 0-2.1.9-2.3 1.9l-3.7 19.3c-2 9.8-8.1 11.2-13.7 11.2-10.2 0-10.4-5.8-9.4-11.5l4.4-22.7c.2-1.1-.5-1.9-1.6-1.9s-2.1.9-2.3 1.9l-4.4 22.7c-.9 4.6-.6 8 1 10.4 1.9 3.1 5.8 4.6 11.6 4.6s10.3-1.6 13.4-4.6c2.5-2.4 4.1-5.9 5-10.4l3.7-19c.1-1-.6-1.9-1.7-1.9zm-35.1-20.2c-1.1 0-2.1.9-2.3 1.9l-10 51.8c-.2 1.1.5 1.9 1.6 1.9s2.1-.9 2.3-1.9l10-51.8c.2-1-.5-1.9-1.6-1.9z&#39;/%3E%3C/svg%3E`,\n    url: &#39;https://plus.shopify.com&#39;,\n    accessibilityLabel: &#39;Shopify Plus&#39;,\n  };\n\n  const userMenuMarkup = (\n    &lt;TopBar.UserMenu\n      actions={[\n        {\n          items: [{content: &#39;Back to Shopify Plus&#39;, icon: ArrowLeftMinor}],\n        },\n        {\n          items: [{content: &#39;Community forums&#39;}],\n        },\n      ]}\n      name=&quot;Scott&quot;\n      detail=&quot;Snow Devil&quot;\n      initials=&quot;S&quot;\n      open={isUserMenuOpen}\n      onToggle={toggleIsUserMenuOpen}\n    /&gt;\n  );\n\n  const searchResultsMarkup = (\n    &lt;ActionList\n      items={[{content: &#39;Shopify help center&#39;}, {content: &#39;Community forums&#39;}]}\n    /&gt;\n  );\n\n  const searchFieldMarkup = (\n    &lt;TopBar.SearchField\n      onChange={handleSearchChange}\n      value={searchValue}\n      placeholder=&quot;Search&quot;\n      showFocusBorder\n    /&gt;\n  );\n\n  const topBarMarkup = (\n    &lt;TopBar\n      showNavigationToggle\n      userMenu={userMenuMarkup}\n      searchResultsVisible={isSearchActive}\n      searchField={searchFieldMarkup}\n      searchResults={searchResultsMarkup}\n      onSearchResultsDismiss={handleSearchResultsDismiss}\n      onNavigationToggle={handleNavigationToggle}\n    /&gt;\n  );\n\n  return (\n    &lt;div style={{height: &#39;250px&#39;}}&gt;\n      &lt;Frame topBar={topBarMarkup} logo={logo}&gt;\n        &lt;Button onClick={handleThemeChange}&gt;\n          Toggle between dark and light themes\n        &lt;/Button&gt;\n      &lt;/Frame&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To provide the structure for the top bar component, as well as the primary navigation use the <a href=\"https://polaris.shopify.com/components/structure/frame\">frame</a> component.</li>\n<li>To display the primary navigation within the frame of an application, use the <a href=\"https://polaris.shopify.com/components/structure/navigation\">navigation</a> component.</li>\n<li>To tell merchants their options once they have made changes to a form on the page use the <a href=\"https://polaris.shopify.com/components/forms/contextual-save-bar\">contextual save bar</a> component.</li>\n<li>To provide quick, at-a-glance feedback on the outcome of an action, use the <a href=\"https://polaris.shopify.com/components/feedback-indicators/toast\">toast</a> component.</li>\n<li>To indicate to merchants that a page is loading or an upload is processing use the <a href=\"https://polaris.shopify.com/components/feedback-indicators/loading\">loading</a> component.</li>\n</ul>\n"
  },
  "VideoThumbnail": {
    "name": "Video thumbnail",
    "category": "Images and icons",
    "keywords": [
      "video",
      "VideoThumbnail",
      "updates",
      "new features",
      "video thumbnail",
      "feature thumbnail",
      "education",
      "contextual learning system"
    ],
    "readme": "<h1 id=\"video-thumbnail\">Video thumbnail</h1>\n<p>Video thumbnails are a clickable placeholder image. When clicked, it opens a video player within a modal or full screen.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Video thumbnails should:</p>\n<ul>\n<li>Be used with a media card</li>\n<li>Use an image that communicates the subject of the video</li>\n<li>Include a video timestamp</li>\n<li>Capture an image from the video to give a preview of the video content</li>\n<li>Be cropped to a 16:9 aspect ratio</li>\n<li>Be centered on the subject and avoid cropping of important details, like a person’s head</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"basic-video-thumbnail\">Basic video thumbnail</h3>\n<p>Use as a play button for a video player within a media card.</p>\n<pre><code class=\"language-jsx\">&lt;MediaCard\n  title=&quot;Turn your side-project into a business&quot;\n  primaryAction={{\n    content: &#39;Learn more&#39;,\n    onAction: () =&gt; {},\n  }}\n  description={`In this course, you’ll learn how the Kular family turned their mom’s recipe book into a global business.`}\n  popoverActions={[{content: &#39;Dismiss&#39;, onAction: () =&gt; {}}]}\n&gt;\n  &lt;VideoThumbnail\n    videoLength={80}\n    thumbnailUrl=&quot;https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850&quot;\n  /&gt;\n&lt;/MediaCard&gt;\n&lt;code&gt;&lt;pre&gt;\n\n### &lt;span class=&quot;hljs-title class_&quot;&gt;Video&lt;/span&gt; thumbnail &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; progress\n\n&lt;span class=&quot;hljs-title class_&quot;&gt;Use&lt;/span&gt; to indicate the video’s play progress &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; relation to its duration.\n\n&lt;/pre&gt;&lt;/code&gt;jsx\n&lt;MediaCard\n  title=&quot;Turn your side-project into a business&quot;\n  primaryAction={{\n    content: &#39;Learn more&#39;,\n    onAction: () =&gt; {},\n  }}\n  description={`In this course, you’ll learn how the Kular family turned their mom’s recipe book into a global business.`}\n  popoverActions={[{content: &#39;Dismiss&#39;, onAction: () =&gt; {}}]}\n&gt;\n  &lt;VideoThumbnail\n    videoLength={80}\n    videoProgress={45}\n    showVideoProgress\n    thumbnailUrl=&quot;https://burst.shopifycdn.com/photos/business-woman-smiling-in-office.jpg?width=1850&quot;\n  /&gt;\n&lt;/MediaCard&gt;\n</code></pre>\n<hr>\n<h2 id=\"required-components\">Required components</h2>\n<ul>\n<li>The video thumbnail should be wrapped in the <a href=\"https://polaris.shopify.com/components/structure/media-card\">media card</a> component.</li>\n</ul>\n<hr>\n<h2 id=\"related-components\">Related components</h2>\n<ul>\n<li>To present a small visual anchor for an object, <a href=\"https://polaris.shopify.com/components/images-and-icons/thumbnail\">use the thumbnail component</a></li>\n</ul>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>Images included in video thumbnails are implemented as decorative background images so that they’re skipped by screen readers.</p>\n<p>The play button is keyboard accessible and the <code>aria-label</code> includes a timestamp when the <code>videoLength</code> prop is set. For example, an 80 second video reads as “Play video of length 1 minute and 20 seconds”. If no <code>videoLength</code> prop is provided, the default label reads “Play video”.</p>\n<!-- /content-for -->\n"
  },
  "VisuallyHidden": {
    "name": "Visually hidden",
    "category": "Titles and text",
    "keywords": [
      "VisuallyHidden",
      "screen readers",
      "hidden but available for screen readers",
      "visually hidden headings",
      "hide",
      "hidden headings",
      "hidden text",
      "visually hidden table headers",
      "visually hidden headers",
      "hidden table headers",
      "hidden table headings",
      "accessibility",
      "a11y",
      "assistive technology"
    ],
    "readme": "<h1 id=\"visually-hidden\">Visually hidden</h1>\n<p>Use when an element needs to be available to assistive technology (for example, a screen reader) but otherwise hidden.</p>\n<hr>\n<h2 id=\"best-practices\">Best practices</h2>\n<p>Visually hidden should:</p>\n<ul>\n<li>Not be used if semantic markup can make content understandable to people using assistive technology</li>\n<li>Be used to provide extra context when semantic markup isn’t enough</li>\n<li>Be used on any content that is normally present but is being omitted</li>\n<li>Make sense in context when used with a screen reader</li>\n</ul>\n<hr>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"visually-hidden-heading\">Visually hidden heading</h3>\n<p>Always provide a heading for a major page section such as a card. In rare cases the heading is visually redundant and the meaning is conveyed by context. Rather than omit the heading, wrap the heading in the visually hidden component.</p>\n<p><code><pre>\n&lt;<span class=\"hljs-title class_\">Card</span> sectioned&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">VisuallyHidden</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Heading</span>&gt;</span>Title and description<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Heading</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">VisuallyHidden</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FormLayout</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Title&quot;</span>\n      <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Artisanal Wooden Spoon&quot;</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {}}\n      autoComplete=&quot;off&quot;\n    /&gt;\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextField</span>\n      <span class=\"hljs-attr\">label</span>=<span class=\"hljs-string\">&quot;Description&quot;</span>\n      <span class=\"hljs-attr\">multiline</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> {}}\n      autoComplete=&quot;off&quot;\n    /&gt;\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">FormLayout</span>&gt;</span></span>\n&lt;/<span class=\"hljs-title class_\">Card</span>&gt;\n</pre></code></p>\n<h3 id=\"visually-hidden-table-headers\">Visually hidden table headers</h3>\n<p>Whenever one or more table columns has no need for a visible header, hide the header content rather than omitting it. Note that due to browser quirks the visually hidden component must go inside each <code>&lt;th&gt;</code>.</p>\n<p><code><pre>\n&lt;table&gt;\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;col&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">VisuallyHidden</span>&gt;</span>Line item<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">VisuallyHidden</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;col&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">VisuallyHidden</span>&gt;</span>Value<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">VisuallyHidden</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span></span>\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;row&quot;</span>&gt;</span>Subtotal<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>$184.13<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;row&quot;</span>&gt;</span>Tax<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>$0.00<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;row&quot;</span>&gt;</span>Total<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>$184.13<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span></span>\n&lt;/table&gt;\n</pre></code></p>\n<hr>\n<h2 id=\"accessibility\">Accessibility</h2>\n<!-- content-for: android -->\n\n<p>See Material Design and development documentation about accessibility for Android:</p>\n<ul>\n<li><a href=\"https://material.io/design/usability/accessibility.html\">Accessible design on Android</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/accessibility/\">Accessible development on Android</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: ios -->\n\n<p>See Apple’s Human Interface Guidelines and API documentation about accessibility for iOS:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/accessibility/\">Accessible design on iOS</a></li>\n<li><a href=\"https://developer.apple.com/accessibility/ios/\">Accessible development on iOS</a></li>\n</ul>\n<!-- /content-for -->\n\n<!-- content-for: web -->\n\n<p>The visually hidden component styles text so that it’s not visible, but it is available to assistive technologies like screen readers and other text to speech programs.</p>\n<p>The component shouldn’t be used to hide interactive content.</p>\n<!-- /content-for -->\n"
  }
}