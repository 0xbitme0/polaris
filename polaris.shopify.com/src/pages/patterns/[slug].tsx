import type { GetStaticPaths, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Page from "../../components/Page";
import Longform from "../../components/Longform";
import fs from "fs";
import path from "path";
import { parseMarkdown } from "../../utils/markdown.mjs";
import Markdown from "../../components/Markdown";
import { NavItem } from "../../components/Nav/Nav";
import { getUrlsFromNavItems } from "../../utils/various";
import Nav from "../../components/Nav";

export const navItems: NavItem[] = [
  {
    title: "Patterns",
    children: [
      {
        title: "Page layouts",
        url: "/patterns/layout",
      },
      {
        title: "Mobile patterns",
        url: "/patterns/mobile-patterns",
      },
      {
        title: "Home cards",
        url: "/patterns/home-card-guidelines",
      },
      {
        title: "Error messages",
        url: "/patterns/error-messages",
      },
      {
        title: "Text fields",
        url: "/patterns/text-fields",
      },
      {
        title: "Help content",
        url: "/patterns/help-content",
      },
      {
        title: "Locations",
        url: "/patterns/locations",
      },
    ],
  },
];
interface Props {
  readme: string;
}

const Components: NextPage<Props> = ({ readme }) => {
  return (
    <Page renderNav={() => <Nav navItems={navItems} />}>
      <Head>
        <title>Title</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Longform>
        <Markdown text={readme} />
      </Longform>
    </Page>
  );
};

const postsDirectory = path.join(
  process.cwd(),
  "src/pages-from-old-website/patterns"
);

export const getStaticProps: GetStaticProps<Props, { slug: string }> = async (
  context
) => {
  // TODO: Sanitize params?
  const fullPath = path.join(postsDirectory, `${context.params?.slug}.md`);

  let content = fs.readFileSync(fullPath, "utf-8");

  const markdown = parseMarkdown(content);

  if (content) {
    const props: Props = {
      readme: markdown.readme,
    };

    return { props };
  }
  throw new Error(`Attempted to load this path but it was not found: ${path}`);
};

export const getStaticPaths: GetStaticPaths = async () => {
  let urls: string[] = getUrlsFromNavItems(navItems);

  const paths = urls.map((url) => {
    const parts = url.split("/");
    return { params: { slug: parts[2] } };
  });

  return {
    paths,
    fallback: false,
  };
};

export default Components;
