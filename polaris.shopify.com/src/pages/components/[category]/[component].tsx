import type { GetStaticPaths, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import Grid from "../../../components/Grid";
import Page from "../../../components/Page";
import Section from "../../../components/Section";
import { createLineAttribute } from "../../../utils/lines";
import ComponentPreview from "../../../components/ComponentPreview";
import styles from "../styles/Index.module.scss";
import { useRouter } from "next/router";
import SectionHead from "../../../components/SectionHead";
import ReadmeContent from "../../../components/ReadmeContent";

interface Props {
  name: string;
  readme: string;
}

const Components: NextPage<Props> = ({ name, readme }) => {
  const router = useRouter();
  let { component } = router.query;

  return (
    <Page>
      <Head>
        <title>Component</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Section>
        <Grid>
          <Grid.Column start={1} end={25}>
            <ReadmeContent
              title="README.md"
              githubUrl={`https://github.com/Shopify/polaris/blob/main/polaris-react/src/components/${name}/README.md`}
            >
              <div dangerouslySetInnerHTML={{ __html: readme }}></div>
            </ReadmeContent>
          </Grid.Column>
        </Grid>
      </Section>
    </Page>
  );
};

export const getStaticProps: GetStaticProps<
  Props,
  { component: string }
> = async (context) => {
  let components = require("../../../data/components.json");

  const componentName = context.params?.component;

  if (componentName) {
    const component = components[componentName];
    console.log(components);

    const props: Props = {
      name: componentName,
      readme: component.readme,
    };

    return {
      props,
    };
  }
  throw new Error(`Page with componentName "${componentName}" not found`);
};

export const getStaticPaths: GetStaticPaths = async () => {
  let components = require("../../../data/components");

  const paths = Object.entries(components).map(
    ([componentName, componentMeta]) => {
      return {
        params: { category: "foo", component: componentName },
      };
    }
  );

  return {
    paths,
    fallback: true,
  };
};

export default Components;
