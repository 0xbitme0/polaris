import type { GetStaticPaths, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Grid from "../../../components/Grid";
import Page from "../../../components/Page";
import Section from "../../../components/Section";
import ReadmeContent from "../../../components/ReadmeContent";
import { useRouter } from "next/router";
import fs from "fs";
import path from "path";
import { parseMarkdown } from "../../../scripts/parseComponents.mjs";

interface Props {
  category: string;
  readme: string;
}

const Components: NextPage<Props> = ({ category, readme }) => {
  return (
    <Page>
      <Head>
        <title>Component</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Section>
        <Grid>
          <Grid.Column start={1} end={25}>
            <ReadmeContent>
              <div dangerouslySetInnerHTML={{ __html: readme }}></div>
            </ReadmeContent>
          </Grid.Column>
        </Grid>
      </Section>
    </Page>
  );
};

const postsDirectory = path.join(
  process.cwd(),
  "src",
  "pages-from-old-website"
);

export const getStaticProps: GetStaticProps<
  Props,
  { category: string; doc: string }
> = async (context) => {
  // TODO: Sanitize params?
  const fullPath = path.join(
    postsDirectory,
    context.params?.category || "",
    `${context.params?.doc}.md`
  );

  let content = fs.readFileSync(fullPath, "utf-8");

  const markdown = parseMarkdown(content);

  if (content) {
    const props: Props = {
      category: context.params?.category || "",
      readme: markdown.readme,
    };

    return { props };
  }
  throw new Error(`Attempted to load this path but it was not found: ${path}`);
};

export const getStaticPaths: GetStaticPaths = async () => {
  let components = require("../../../data/components");

  const paths = Object.entries(components).map(
    ([componentName, componentMeta]) => {
      return {
        params: { category: "design", doc: "colors" },
      };
    }
  );

  return {
    paths,
    fallback: true,
  };
};

export default Components;
