import type { GetStaticPaths, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Page from "../../../components/Page";
import Longform from "../../../components/Longform";
import fs from "fs";
import path from "path";
import { parseMarkdown } from "../../../utils/markdown.mjs";
import DocsNav from "../../../components/DocsNav";
import { nav } from "../../../components/DocsNav/DocsNav";
import Markdown from "../../../components/Markdown";

interface Props {
  category: string;
  readme: string;
}

const Components: NextPage<Props> = ({ category, readme }) => {
  if (!category) {
    return <p></p>;
  }
  return (
    <Page nav={() => <DocsNav id={category} />}>
      <Head>
        <title>Component</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Longform>
        <Markdown text={readme} />
      </Longform>
    </Page>
  );
};

const postsDirectory = path.join(process.cwd(), "src/pages-from-old-website");

export const getStaticProps: GetStaticProps<
  Props,
  { category: string; doc: string }
> = async (context) => {
  // TODO: Sanitize params?
  const fullPath = path.join(
    postsDirectory,
    context.params?.category || "",
    `${context.params?.doc}.md`
  );

  let content = fs.readFileSync(fullPath, "utf-8");

  const markdown = parseMarkdown(content);

  if (content) {
    const props: Props = {
      category: context.params?.category || "",
      readme: markdown.readme,
    };

    return { props };
  }
  throw new Error(`Attempted to load this path but it was not found: ${path}`);
};

export const getStaticPaths: GetStaticPaths = async () => {
  let urls: string[] = [];

  Object.values(nav).forEach((navItem) => {
    navItem.groups.forEach((group) => {
      group.items.forEach((item) => {
        urls.push(item.url);
      });
    });
  });

  const paths = urls.map((url) => {
    const parts = url.split("/");
    return { params: { category: parts[2], doc: parts[3] } };
  });

  return {
    paths,
    fallback: false,
  };
};

export default Components;
